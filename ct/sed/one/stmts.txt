-- loading file: problem.json
Loaded configuration file
- constructing problem
constructing compiler...
constructing legacy compiler...
Building problem: preprocessed/manifest.txt
loading file: ./preprocessed/sed.c
loaded file
- number of statements: 5270
reading results cache from file: ./preprocessed/sed.results.cache...
- no cache file found, generating empty cache instead.
compiling original program for sanity check.
compiled program for sanity check.
compiling solution: 
writing results cache to file: ./preprocessed/sed.results.cache...
- finished writing results cache to file.
-- coverage temp file: /experiment/./coverage/cov.tmp
-- running coverage for: p1
-- reading coverage file: /experiment/./coverage/p1.cov
-- running coverage for: p2
-- reading coverage file: /experiment/./coverage/p2.cov
-- running coverage for: p3
-- reading coverage file: /experiment/./coverage/p3.cov
-- running coverage for: p4
-- reading coverage file: /experiment/./coverage/p4.cov
-- running coverage for: p5
-- reading coverage file: /experiment/./coverage/p5.cov
-- running coverage for: p6
-- reading coverage file: /experiment/./coverage/p6.cov
-- running coverage for: p7
-- reading coverage file: /experiment/./coverage/p7.cov
-- running coverage for: p8
-- reading coverage file: /experiment/./coverage/p8.cov
-- running coverage for: p9
-- reading coverage file: /experiment/./coverage/p9.cov
-- running coverage for: p10
-- reading coverage file: /experiment/./coverage/p10.cov
-- running coverage for: p11
-- reading coverage file: /experiment/./coverage/p11.cov
-- running coverage for: p12
-- reading coverage file: /experiment/./coverage/p12.cov
-- running coverage for: p13
-- reading coverage file: /experiment/./coverage/p13.cov
-- running coverage for: p14
-- reading coverage file: /experiment/./coverage/p14.cov
-- running coverage for: p15
-- reading coverage file: /experiment/./coverage/p15.cov
-- running coverage for: p16
-- reading coverage file: /experiment/./coverage/p16.cov
-- running coverage for: p17
-- reading coverage file: /experiment/./coverage/p17.cov
-- running coverage for: p18
-- reading coverage file: /experiment/./coverage/p18.cov
-- running coverage for: p19
-- reading coverage file: /experiment/./coverage/p19.cov
-- running coverage for: p20
-- reading coverage file: /experiment/./coverage/p20.cov
-- running coverage for: p21
-- reading coverage file: /experiment/./coverage/p21.cov
-- running coverage for: p22
-- reading coverage file: /experiment/./coverage/p22.cov
-- running coverage for: p23
-- reading coverage file: /experiment/./coverage/p23.cov
-- running coverage for: p24
-- reading coverage file: /experiment/./coverage/p24.cov
-- running coverage for: p25
-- reading coverage file: /experiment/./coverage/p25.cov
-- running coverage for: p26
-- reading coverage file: /experiment/./coverage/p26.cov
-- running coverage for: p27
-- reading coverage file: /experiment/./coverage/p27.cov
-- running coverage for: p28
-- reading coverage file: /experiment/./coverage/p28.cov
-- running coverage for: p29
-- reading coverage file: /experiment/./coverage/p29.cov
-- running coverage for: p30
-- reading coverage file: /experiment/./coverage/p30.cov
-- running coverage for: p31
-- reading coverage file: /experiment/./coverage/p31.cov
-- running coverage for: p32
-- reading coverage file: /experiment/./coverage/p32.cov
-- running coverage for: p33
-- reading coverage file: /experiment/./coverage/p33.cov
-- running coverage for: p34
-- reading coverage file: /experiment/./coverage/p34.cov
-- running coverage for: p35
-- reading coverage file: /experiment/./coverage/p35.cov
-- running coverage for: p36
-- reading coverage file: /experiment/./coverage/p36.cov
-- running coverage for: p37
-- reading coverage file: /experiment/./coverage/p37.cov
-- running coverage for: p38
-- reading coverage file: /experiment/./coverage/p38.cov
-- running coverage for: p39
-- reading coverage file: /experiment/./coverage/p39.cov
-- running coverage for: p40
-- reading coverage file: /experiment/./coverage/p40.cov
-- running coverage for: p41
-- reading coverage file: /experiment/./coverage/p41.cov
-- running coverage for: p42
-- reading coverage file: /experiment/./coverage/p42.cov
-- running coverage for: p43
-- reading coverage file: /experiment/./coverage/p43.cov
-- running coverage for: p44
-- reading coverage file: /experiment/./coverage/p44.cov
-- running coverage for: p45
-- reading coverage file: /experiment/./coverage/p45.cov
-- running coverage for: p46
-- reading coverage file: /experiment/./coverage/p46.cov
-- running coverage for: p47
-- reading coverage file: /experiment/./coverage/p47.cov
-- running coverage for: p48
-- reading coverage file: /experiment/./coverage/p48.cov
-- running coverage for: p49
-- reading coverage file: /experiment/./coverage/p49.cov
-- running coverage for: p50
-- reading coverage file: /experiment/./coverage/p50.cov
-- running coverage for: p51
-- reading coverage file: /experiment/./coverage/p51.cov
-- running coverage for: p52
-- reading coverage file: /experiment/./coverage/p52.cov
-- running coverage for: p53
-- reading coverage file: /experiment/./coverage/p53.cov
-- running coverage for: p54
-- reading coverage file: /experiment/./coverage/p54.cov
-- running coverage for: p55
-- reading coverage file: /experiment/./coverage/p55.cov
-- running coverage for: p56
-- reading coverage file: /experiment/./coverage/p56.cov
-- running coverage for: p57
-- reading coverage file: /experiment/./coverage/p57.cov
-- running coverage for: p58
-- reading coverage file: /experiment/./coverage/p58.cov
-- running coverage for: p59
-- reading coverage file: /experiment/./coverage/p59.cov
-- running coverage for: p60
-- reading coverage file: /experiment/./coverage/p60.cov
-- running coverage for: p61
-- reading coverage file: /experiment/./coverage/p61.cov
-- running coverage for: p62
-- reading coverage file: /experiment/./coverage/p62.cov
-- running coverage for: p63
-- reading coverage file: /experiment/./coverage/p63.cov
-- running coverage for: p64
-- reading coverage file: /experiment/./coverage/p64.cov
-- running coverage for: p65
-- reading coverage file: /experiment/./coverage/p65.cov
-- running coverage for: p66
-- reading coverage file: /experiment/./coverage/p66.cov
-- running coverage for: p67
-- reading coverage file: /experiment/./coverage/p67.cov
-- running coverage for: p68
-- reading coverage file: /experiment/./coverage/p68.cov
-- running coverage for: p69
-- reading coverage file: /experiment/./coverage/p69.cov
-- running coverage for: p70
-- reading coverage file: /experiment/./coverage/p70.cov
-- running coverage for: p71
-- reading coverage file: /experiment/./coverage/p71.cov
-- running coverage for: p72
-- reading coverage file: /experiment/./coverage/p72.cov
-- running coverage for: p73
-- reading coverage file: /experiment/./coverage/p73.cov
-- running coverage for: p74
-- reading coverage file: /experiment/./coverage/p74.cov
-- running coverage for: p75
-- reading coverage file: /experiment/./coverage/p75.cov
-- running coverage for: p76
-- reading coverage file: /experiment/./coverage/p76.cov
-- running coverage for: p77
-- reading coverage file: /experiment/./coverage/p77.cov
-- running coverage for: p78
-- reading coverage file: /experiment/./coverage/p78.cov
-- running coverage for: p79
-- reading coverage file: /experiment/./coverage/p79.cov
-- running coverage for: p80
-- reading coverage file: /experiment/./coverage/p80.cov
-- running coverage for: p81
-- reading coverage file: /experiment/./coverage/p81.cov
-- running coverage for: p82
-- reading coverage file: /experiment/./coverage/p82.cov
-- running coverage for: p83
-- reading coverage file: /experiment/./coverage/p83.cov
-- running coverage for: p84
-- reading coverage file: /experiment/./coverage/p84.cov
-- running coverage for: p85
-- reading coverage file: /experiment/./coverage/p85.cov
-- running coverage for: p86
-- reading coverage file: /experiment/./coverage/p86.cov
-- running coverage for: p87
-- reading coverage file: /experiment/./coverage/p87.cov
-- running coverage for: p88
-- reading coverage file: /experiment/./coverage/p88.cov
-- running coverage for: p89
-- reading coverage file: /experiment/./coverage/p89.cov
-- running coverage for: p90
-- reading coverage file: /experiment/./coverage/p90.cov
-- running coverage for: p91
-- reading coverage file: /experiment/./coverage/p91.cov
-- running coverage for: p92
-- reading coverage file: /experiment/./coverage/p92.cov
-- running coverage for: p93
-- reading coverage file: /experiment/./coverage/p93.cov
-- running coverage for: p94
-- reading coverage file: /experiment/./coverage/p94.cov
-- running coverage for: p95
-- reading coverage file: /experiment/./coverage/p95.cov
-- running coverage for: p96
-- reading coverage file: /experiment/./coverage/p96.cov
-- running coverage for: p97
-- reading coverage file: /experiment/./coverage/p97.cov
-- running coverage for: p98
-- reading coverage file: /experiment/./coverage/p98.cov
-- running coverage for: p99
-- reading coverage file: /experiment/./coverage/p99.cov
-- running coverage for: p100
-- reading coverage file: /experiment/./coverage/p100.cov
-- running coverage for: p101
-- reading coverage file: /experiment/./coverage/p101.cov
-- running coverage for: p102
-- reading coverage file: /experiment/./coverage/p102.cov
-- running coverage for: p103
-- reading coverage file: /experiment/./coverage/p103.cov
-- running coverage for: p104
-- reading coverage file: /experiment/./coverage/p104.cov
-- running coverage for: p105
-- reading coverage file: /experiment/./coverage/p105.cov
-- running coverage for: p106
-- reading coverage file: /experiment/./coverage/p106.cov
-- running coverage for: p107
-- reading coverage file: /experiment/./coverage/p107.cov
-- running coverage for: p108
-- reading coverage file: /experiment/./coverage/p108.cov
-- running coverage for: p109
-- reading coverage file: /experiment/./coverage/p109.cov
-- running coverage for: p110
-- reading coverage file: /experiment/./coverage/p110.cov
-- running coverage for: p111
-- reading coverage file: /experiment/./coverage/p111.cov
-- running coverage for: p112
-- reading coverage file: /experiment/./coverage/p112.cov
-- running coverage for: p113
-- reading coverage file: /experiment/./coverage/p113.cov
-- running coverage for: p114
-- reading coverage file: /experiment/./coverage/p114.cov
-- running coverage for: p115
-- reading coverage file: /experiment/./coverage/p115.cov
-- running coverage for: p116
-- reading coverage file: /experiment/./coverage/p116.cov
-- running coverage for: p117
-- reading coverage file: /experiment/./coverage/p117.cov
-- running coverage for: p118
-- reading coverage file: /experiment/./coverage/p118.cov
-- running coverage for: p119
-- reading coverage file: /experiment/./coverage/p119.cov
-- running coverage for: p120
-- reading coverage file: /experiment/./coverage/p120.cov
-- running coverage for: p121
-- reading coverage file: /experiment/./coverage/p121.cov
-- running coverage for: p122
-- reading coverage file: /experiment/./coverage/p122.cov
-- running coverage for: p123
-- reading coverage file: /experiment/./coverage/p123.cov
-- running coverage for: p124
-- reading coverage file: /experiment/./coverage/p124.cov
-- running coverage for: p125
-- reading coverage file: /experiment/./coverage/p125.cov
-- running coverage for: p126
-- reading coverage file: /experiment/./coverage/p126.cov
-- running coverage for: p127
-- reading coverage file: /experiment/./coverage/p127.cov
-- running coverage for: p128
-- reading coverage file: /experiment/./coverage/p128.cov
-- running coverage for: p129
-- reading coverage file: /experiment/./coverage/p129.cov
-- running coverage for: p130
-- reading coverage file: /experiment/./coverage/p130.cov
-- running coverage for: p131
-- reading coverage file: /experiment/./coverage/p131.cov
-- running coverage for: p132
-- reading coverage file: /experiment/./coverage/p132.cov
-- running coverage for: p133
-- reading coverage file: /experiment/./coverage/p133.cov
-- running coverage for: p134
-- reading coverage file: /experiment/./coverage/p134.cov
-- running coverage for: p135
-- reading coverage file: /experiment/./coverage/p135.cov
-- running coverage for: p136
-- reading coverage file: /experiment/./coverage/p136.cov
-- running coverage for: p137
-- reading coverage file: /experiment/./coverage/p137.cov
-- running coverage for: p138
-- reading coverage file: /experiment/./coverage/p138.cov
-- running coverage for: p139
-- reading coverage file: /experiment/./coverage/p139.cov
-- running coverage for: p140
-- reading coverage file: /experiment/./coverage/p140.cov
-- running coverage for: p141
-- reading coverage file: /experiment/./coverage/p141.cov
-- running coverage for: p142
-- reading coverage file: /experiment/./coverage/p142.cov
-- running coverage for: p143
-- reading coverage file: /experiment/./coverage/p143.cov
-- running coverage for: p144
-- reading coverage file: /experiment/./coverage/p144.cov
-- running coverage for: p145
-- reading coverage file: /experiment/./coverage/p145.cov
-- running coverage for: p146
-- reading coverage file: /experiment/./coverage/p146.cov
-- running coverage for: p147
-- reading coverage file: /experiment/./coverage/p147.cov
-- running coverage for: p148
-- reading coverage file: /experiment/./coverage/p148.cov
-- running coverage for: p149
-- reading coverage file: /experiment/./coverage/p149.cov
-- running coverage for: p150
-- reading coverage file: /experiment/./coverage/p150.cov
-- running coverage for: p151
-- reading coverage file: /experiment/./coverage/p151.cov
-- running coverage for: p152
-- reading coverage file: /experiment/./coverage/p152.cov
-- running coverage for: p153
-- reading coverage file: /experiment/./coverage/p153.cov
-- running coverage for: p154
-- reading coverage file: /experiment/./coverage/p154.cov
-- running coverage for: p155
-- reading coverage file: /experiment/./coverage/p155.cov
-- running coverage for: p156
-- reading coverage file: /experiment/./coverage/p156.cov
-- running coverage for: p157
-- reading coverage file: /experiment/./coverage/p157.cov
-- running coverage for: p158
-- reading coverage file: /experiment/./coverage/p158.cov
-- running coverage for: p159
-- reading coverage file: /experiment/./coverage/p159.cov
-- running coverage for: p160
-- reading coverage file: /experiment/./coverage/p160.cov
-- running coverage for: p161
-- reading coverage file: /experiment/./coverage/p161.cov
-- running coverage for: p162
-- reading coverage file: /experiment/./coverage/p162.cov
-- running coverage for: p163
-- reading coverage file: /experiment/./coverage/p163.cov
-- running coverage for: p164
-- reading coverage file: /experiment/./coverage/p164.cov
-- running coverage for: p165
-- reading coverage file: /experiment/./coverage/p165.cov
-- running coverage for: p166
-- reading coverage file: /experiment/./coverage/p166.cov
-- running coverage for: p167
-- reading coverage file: /experiment/./coverage/p167.cov
-- running coverage for: p168
-- reading coverage file: /experiment/./coverage/p168.cov
-- running coverage for: p169
-- reading coverage file: /experiment/./coverage/p169.cov
-- running coverage for: p170
-- reading coverage file: /experiment/./coverage/p170.cov
-- running coverage for: p171
-- reading coverage file: /experiment/./coverage/p171.cov
-- running coverage for: p172
-- reading coverage file: /experiment/./coverage/p172.cov
-- running coverage for: p173
-- reading coverage file: /experiment/./coverage/p173.cov
-- running coverage for: p174
-- reading coverage file: /experiment/./coverage/p174.cov
-- running coverage for: p175
-- reading coverage file: /experiment/./coverage/p175.cov
-- running coverage for: p176
-- reading coverage file: /experiment/./coverage/p176.cov
-- running coverage for: p177
-- reading coverage file: /experiment/./coverage/p177.cov
-- running coverage for: p178
-- reading coverage file: /experiment/./coverage/p178.cov
-- running coverage for: p179
-- reading coverage file: /experiment/./coverage/p179.cov
-- running coverage for: p180
-- reading coverage file: /experiment/./coverage/p180.cov
-- running coverage for: p181
-- reading coverage file: /experiment/./coverage/p181.cov
-- running coverage for: p182
-- reading coverage file: /experiment/./coverage/p182.cov
-- running coverage for: p183
-- reading coverage file: /experiment/./coverage/p183.cov
-- running coverage for: p184
-- reading coverage file: /experiment/./coverage/p184.cov
-- running coverage for: p185
-- reading coverage file: /experiment/./coverage/p185.cov
-- running coverage for: p186
-- reading coverage file: /experiment/./coverage/p186.cov
-- running coverage for: p187
-- reading coverage file: /experiment/./coverage/p187.cov
-- running coverage for: p188
-- reading coverage file: /experiment/./coverage/p188.cov
-- running coverage for: p189
-- reading coverage file: /experiment/./coverage/p189.cov
-- running coverage for: p190
-- reading coverage file: /experiment/./coverage/p190.cov
-- running coverage for: p191
-- reading coverage file: /experiment/./coverage/p191.cov
-- running coverage for: p192
-- reading coverage file: /experiment/./coverage/p192.cov
-- running coverage for: p193
-- reading coverage file: /experiment/./coverage/p193.cov
-- running coverage for: p194
-- reading coverage file: /experiment/./coverage/p194.cov
-- running coverage for: p195
-- reading coverage file: /experiment/./coverage/p195.cov
-- running coverage for: p196
-- reading coverage file: /experiment/./coverage/p196.cov
-- running coverage for: p197
-- reading coverage file: /experiment/./coverage/p197.cov
-- running coverage for: p198
-- reading coverage file: /experiment/./coverage/p198.cov
-- running coverage for: p199
-- reading coverage file: /experiment/./coverage/p199.cov
-- running coverage for: p200
-- reading coverage file: /experiment/./coverage/p200.cov
-- running coverage for: p201
-- reading coverage file: /experiment/./coverage/p201.cov
-- running coverage for: p202
-- reading coverage file: /experiment/./coverage/p202.cov
-- running coverage for: p203
-- reading coverage file: /experiment/./coverage/p203.cov
-- running coverage for: p204
-- reading coverage file: /experiment/./coverage/p204.cov
-- running coverage for: p205
-- reading coverage file: /experiment/./coverage/p205.cov
-- running coverage for: p206
-- reading coverage file: /experiment/./coverage/p206.cov
-- running coverage for: p207
-- reading coverage file: /experiment/./coverage/p207.cov
-- running coverage for: p208
-- reading coverage file: /experiment/./coverage/p208.cov
-- running coverage for: p209
-- reading coverage file: /experiment/./coverage/p209.cov
-- running coverage for: p210
-- reading coverage file: /experiment/./coverage/p210.cov
-- running coverage for: p211
-- reading coverage file: /experiment/./coverage/p211.cov
-- running coverage for: p212
-- reading coverage file: /experiment/./coverage/p212.cov
-- running coverage for: p213
-- reading coverage file: /experiment/./coverage/p213.cov
-- running coverage for: p214
-- reading coverage file: /experiment/./coverage/p214.cov
-- running coverage for: p215
-- reading coverage file: /experiment/./coverage/p215.cov
-- running coverage for: p216
-- reading coverage file: /experiment/./coverage/p216.cov
-- running coverage for: p217
-- reading coverage file: /experiment/./coverage/p217.cov
-- running coverage for: p218
-- reading coverage file: /experiment/./coverage/p218.cov
-- running coverage for: p219
-- reading coverage file: /experiment/./coverage/p219.cov
-- running coverage for: p220
-- reading coverage file: /experiment/./coverage/p220.cov
-- running coverage for: p221
-- reading coverage file: /experiment/./coverage/p221.cov
-- running coverage for: p222
-- reading coverage file: /experiment/./coverage/p222.cov
-- running coverage for: p223
-- reading coverage file: /experiment/./coverage/p223.cov
-- running coverage for: p224
-- reading coverage file: /experiment/./coverage/p224.cov
-- running coverage for: p225
-- reading coverage file: /experiment/./coverage/p225.cov
-- running coverage for: p226
-- reading coverage file: /experiment/./coverage/p226.cov
-- running coverage for: p227
-- reading coverage file: /experiment/./coverage/p227.cov
-- running coverage for: p228
-- reading coverage file: /experiment/./coverage/p228.cov
-- running coverage for: p229
-- reading coverage file: /experiment/./coverage/p229.cov
-- running coverage for: p230
-- reading coverage file: /experiment/./coverage/p230.cov
-- running coverage for: p231
-- reading coverage file: /experiment/./coverage/p231.cov
-- running coverage for: p232
-- reading coverage file: /experiment/./coverage/p232.cov
-- running coverage for: p233
-- reading coverage file: /experiment/./coverage/p233.cov
-- running coverage for: p234
-- reading coverage file: /experiment/./coverage/p234.cov
-- running coverage for: p235
-- reading coverage file: /experiment/./coverage/p235.cov
-- running coverage for: p236
-- reading coverage file: /experiment/./coverage/p236.cov
-- running coverage for: p237
-- reading coverage file: /experiment/./coverage/p237.cov
-- running coverage for: p238
-- reading coverage file: /experiment/./coverage/p238.cov
-- running coverage for: p239
-- reading coverage file: /experiment/./coverage/p239.cov
-- running coverage for: p240
-- reading coverage file: /experiment/./coverage/p240.cov
-- running coverage for: p241
-- reading coverage file: /experiment/./coverage/p241.cov
-- running coverage for: p242
-- reading coverage file: /experiment/./coverage/p242.cov
-- running coverage for: p243
-- reading coverage file: /experiment/./coverage/p243.cov
-- running coverage for: p244
-- reading coverage file: /experiment/./coverage/p244.cov
-- running coverage for: p245
-- reading coverage file: /experiment/./coverage/p245.cov
-- running coverage for: p246
-- reading coverage file: /experiment/./coverage/p246.cov
-- running coverage for: p247
-- reading coverage file: /experiment/./coverage/p247.cov
-- running coverage for: p248
-- reading coverage file: /experiment/./coverage/p248.cov
-- running coverage for: p249
-- reading coverage file: /experiment/./coverage/p249.cov
-- running coverage for: p250
-- reading coverage file: /experiment/./coverage/p250.cov
-- running coverage for: p251
-- reading coverage file: /experiment/./coverage/p251.cov
-- running coverage for: p252
-- reading coverage file: /experiment/./coverage/p252.cov
-- running coverage for: p253
-- reading coverage file: /experiment/./coverage/p253.cov
-- running coverage for: p254
-- reading coverage file: /experiment/./coverage/p254.cov
-- running coverage for: p255
-- reading coverage file: /experiment/./coverage/p255.cov
-- running coverage for: p256
-- reading coverage file: /experiment/./coverage/p256.cov
-- running coverage for: p257
-- reading coverage file: /experiment/./coverage/p257.cov
-- running coverage for: p258
-- reading coverage file: /experiment/./coverage/p258.cov
-- running coverage for: p259
-- reading coverage file: /experiment/./coverage/p259.cov
-- running coverage for: p260
-- reading coverage file: /experiment/./coverage/p260.cov
-- running coverage for: p261
-- reading coverage file: /experiment/./coverage/p261.cov
-- running coverage for: p262
-- reading coverage file: /experiment/./coverage/p262.cov
-- running coverage for: p263
-- reading coverage file: /experiment/./coverage/p263.cov
-- running coverage for: p264
-- reading coverage file: /experiment/./coverage/p264.cov
-- running coverage for: p265
-- reading coverage file: /experiment/./coverage/p265.cov
-- running coverage for: p266
-- reading coverage file: /experiment/./coverage/p266.cov
-- running coverage for: p267
-- reading coverage file: /experiment/./coverage/p267.cov
-- running coverage for: p268
-- reading coverage file: /experiment/./coverage/p268.cov
-- running coverage for: p269
-- reading coverage file: /experiment/./coverage/p269.cov
-- running coverage for: p270
-- reading coverage file: /experiment/./coverage/p270.cov
-- running coverage for: p271
-- reading coverage file: /experiment/./coverage/p271.cov
-- running coverage for: p272
-- reading coverage file: /experiment/./coverage/p272.cov
-- running coverage for: p273
-- reading coverage file: /experiment/./coverage/p273.cov
-- running coverage for: p274
-- reading coverage file: /experiment/./coverage/p274.cov
-- running coverage for: p275
-- reading coverage file: /experiment/./coverage/p275.cov
-- running coverage for: p276
-- reading coverage file: /experiment/./coverage/p276.cov
-- running coverage for: p277
-- reading coverage file: /experiment/./coverage/p277.cov
-- running coverage for: p278
-- reading coverage file: /experiment/./coverage/p278.cov
-- running coverage for: p279
-- reading coverage file: /experiment/./coverage/p279.cov
-- running coverage for: p280
-- reading coverage file: /experiment/./coverage/p280.cov
-- running coverage for: p281
-- reading coverage file: /experiment/./coverage/p281.cov
-- running coverage for: p282
-- reading coverage file: /experiment/./coverage/p282.cov
-- running coverage for: p283
-- reading coverage file: /experiment/./coverage/p283.cov
-- running coverage for: p284
-- reading coverage file: /experiment/./coverage/p284.cov
-- running coverage for: p285
-- reading coverage file: /experiment/./coverage/p285.cov
-- running coverage for: p286
-- reading coverage file: /experiment/./coverage/p286.cov
-- running coverage for: p287
-- reading coverage file: /experiment/./coverage/p287.cov
-- running coverage for: p288
-- reading coverage file: /experiment/./coverage/p288.cov
-- running coverage for: p289
-- reading coverage file: /experiment/./coverage/p289.cov
-- running coverage for: p290
-- reading coverage file: /experiment/./coverage/p290.cov
-- running coverage for: p291
-- reading coverage file: /experiment/./coverage/p291.cov
-- running coverage for: p292
-- reading coverage file: /experiment/./coverage/p292.cov
-- running coverage for: p293
-- reading coverage file: /experiment/./coverage/p293.cov
-- running coverage for: p294
-- reading coverage file: /experiment/./coverage/p294.cov
-- running coverage for: p295
-- reading coverage file: /experiment/./coverage/p295.cov
-- running coverage for: p296
-- reading coverage file: /experiment/./coverage/p296.cov
-- running coverage for: p297
-- reading coverage file: /experiment/./coverage/p297.cov
-- running coverage for: p298
-- reading coverage file: /experiment/./coverage/p298.cov
-- running coverage for: p299
-- reading coverage file: /experiment/./coverage/p299.cov
-- running coverage for: p300
-- reading coverage file: /experiment/./coverage/p300.cov
-- running coverage for: p301
-- reading coverage file: /experiment/./coverage/p301.cov
-- running coverage for: p302
-- reading coverage file: /experiment/./coverage/p302.cov
-- running coverage for: p303
-- reading coverage file: /experiment/./coverage/p303.cov
-- running coverage for: p304
-- reading coverage file: /experiment/./coverage/p304.cov
-- running coverage for: p305
-- reading coverage file: /experiment/./coverage/p305.cov
-- running coverage for: p306
-- reading coverage file: /experiment/./coverage/p306.cov
-- running coverage for: p307
-- reading coverage file: /experiment/./coverage/p307.cov
-- running coverage for: p308
-- reading coverage file: /experiment/./coverage/p308.cov
-- running coverage for: p309
-- reading coverage file: /experiment/./coverage/p309.cov
-- running coverage for: p310
-- reading coverage file: /experiment/./coverage/p310.cov
-- running coverage for: p311
-- reading coverage file: /experiment/./coverage/p311.cov
-- running coverage for: p312
-- reading coverage file: /experiment/./coverage/p312.cov
-- running coverage for: p313
-- reading coverage file: /experiment/./coverage/p313.cov
-- running coverage for: p314
-- reading coverage file: /experiment/./coverage/p314.cov
-- running coverage for: p315
-- reading coverage file: /experiment/./coverage/p315.cov
-- running coverage for: p316
-- reading coverage file: /experiment/./coverage/p316.cov
-- running coverage for: p317
-- reading coverage file: /experiment/./coverage/p317.cov
-- running coverage for: p318
-- reading coverage file: /experiment/./coverage/p318.cov
-- running coverage for: p319
-- reading coverage file: /experiment/./coverage/p319.cov
-- running coverage for: p320
-- reading coverage file: /experiment/./coverage/p320.cov
-- running coverage for: p321
-- reading coverage file: /experiment/./coverage/p321.cov
-- running coverage for: p322
-- reading coverage file: /experiment/./coverage/p322.cov
-- running coverage for: p323
-- reading coverage file: /experiment/./coverage/p323.cov
-- running coverage for: p324
-- reading coverage file: /experiment/./coverage/p324.cov
-- running coverage for: p325
-- reading coverage file: /experiment/./coverage/p325.cov
-- running coverage for: p326
-- reading coverage file: /experiment/./coverage/p326.cov
-- running coverage for: p327
-- reading coverage file: /experiment/./coverage/p327.cov
-- running coverage for: p328
-- reading coverage file: /experiment/./coverage/p328.cov
-- running coverage for: p329
-- reading coverage file: /experiment/./coverage/p329.cov
-- running coverage for: p330
-- reading coverage file: /experiment/./coverage/p330.cov
-- running coverage for: p331
-- reading coverage file: /experiment/./coverage/p331.cov
-- running coverage for: p332
-- reading coverage file: /experiment/./coverage/p332.cov
-- running coverage for: p333
-- reading coverage file: /experiment/./coverage/p333.cov
-- running coverage for: p334
-- reading coverage file: /experiment/./coverage/p334.cov
-- running coverage for: p335
-- reading coverage file: /experiment/./coverage/p335.cov
-- running coverage for: p336
-- reading coverage file: /experiment/./coverage/p336.cov
-- running coverage for: p337
-- reading coverage file: /experiment/./coverage/p337.cov
-- running coverage for: p338
-- reading coverage file: /experiment/./coverage/p338.cov
-- running coverage for: p339
-- reading coverage file: /experiment/./coverage/p339.cov
-- running coverage for: p340
-- reading coverage file: /experiment/./coverage/p340.cov
-- running coverage for: p341
-- reading coverage file: /experiment/./coverage/p341.cov
-- running coverage for: p342
-- reading coverage file: /experiment/./coverage/p342.cov
-- running coverage for: p343
-- reading coverage file: /experiment/./coverage/p343.cov
-- running coverage for: p344
-- reading coverage file: /experiment/./coverage/p344.cov
-- running coverage for: p345
-- reading coverage file: /experiment/./coverage/p345.cov
-- running coverage for: p346
-- reading coverage file: /experiment/./coverage/p346.cov
-- running coverage for: p347
-- reading coverage file: /experiment/./coverage/p347.cov
-- running coverage for: p348
-- reading coverage file: /experiment/./coverage/p348.cov
-- running coverage for: p349
-- reading coverage file: /experiment/./coverage/p349.cov
-- running coverage for: p350
-- reading coverage file: /experiment/./coverage/p350.cov
-- running coverage for: p351
-- reading coverage file: /experiment/./coverage/p351.cov
-- running coverage for: p352
-- reading coverage file: /experiment/./coverage/p352.cov
-- running coverage for: p353
-- reading coverage file: /experiment/./coverage/p353.cov
-- running coverage for: p354
-- reading coverage file: /experiment/./coverage/p354.cov
-- running coverage for: p355
-- reading coverage file: /experiment/./coverage/p355.cov
-- running coverage for: p356
-- reading coverage file: /experiment/./coverage/p356.cov
-- running coverage for: p357
-- reading coverage file: /experiment/./coverage/p357.cov
-- running coverage for: n1
-- reading coverage file: /experiment/./coverage/n1.cov
-- running coverage for: n2
-- reading coverage file: /experiment/./coverage/n2.cov
-- running coverage for: n3
-- reading coverage file: /experiment/./coverage/n3.cov
-- 1111 statements in fault localisation
building donor pool...
-- initial size: 5270
-- performed syntatic equality reduction (reduced by 1062)
-- removed empty statements (reduced by 21)
-- restricted to executed statements (reduced by 2366)
-- final size: 1821
built donor pool
SID [5270] -> Line 7166
#line 7166
return;
---------
SID [5269] -> Line 7165
#line 7165
preg->translate = (char *)((void *)0);
---------
SID [5268] -> Line -1

---------
SID [5267] -> Line 7164
#line 7164
free((void *)preg->translate);
---------
SID [5266] -> Line 7163
#line 7163
if ((unsigned long )preg->translate != (unsigned long )((void *)0)) {
#line 7164
  free((void *)preg->translate);
} else {

}
---------
SID [5265] -> Line 7161
#line 7161
preg->fastmap_accurate = 0U;
---------
SID [5264] -> Line 7160
#line 7160
preg->fastmap = (char *)((void *)0);
---------
SID [5263] -> Line -1

---------
SID [5262] -> Line 7159
#line 7159
free((void *)preg->fastmap);
---------
SID [5261] -> Line 7158
#line 7158
if ((unsigned long )preg->fastmap != (unsigned long )((void *)0)) {
#line 7159
  free((void *)preg->fastmap);
} else {

}
---------
SID [5260] -> Line 7156
#line 7156
preg->used = 0UL;
---------
SID [5259] -> Line 7155
#line 7155
preg->allocated = 0UL;
---------
SID [5258] -> Line 7153
#line 7153
preg->buffer = (unsigned char *)((void *)0);
---------
SID [5257] -> Line -1

---------
SID [5256] -> Line 7152
#line 7152
free((void *)preg->buffer);
---------
SID [5255] -> Line 7151
#line 7151
if ((unsigned long )preg->buffer != (unsigned long )((void *)0)) {
#line 7152
  free((void *)preg->buffer);
} else {

}
---------
SID [5254] -> Line 7141
#line 7141
return (msg_size);
---------
SID [5253] -> Line -1

---------
SID [5252] -> Line 7138
#line 7138
strcpy((char */* __restrict  */)errbuf, (char const   */* __restrict  */)msg);
---------
SID [5251] -> Line 7135
#line 7135
*(errbuf + (errbuf_size - 1UL)) = (char)0;
---------
SID [5250] -> Line 7134
#line 7134
strncpy((char */* __restrict  */)errbuf, (char const   */* __restrict  */)msg,
        errbuf_size - 1UL);
---------
SID [5249] -> Line 7132
#line 7132
if (msg_size > errbuf_size) {
#line 7134
  strncpy((char */* __restrict  */)errbuf,
          (char const   */* __restrict  */)msg, errbuf_size - 1UL);
#line 7135
  *(errbuf + (errbuf_size - 1UL)) = (char)0;
} else {
#line 7138
  strcpy((char */* __restrict  */)errbuf, (char const   */* __restrict  */)msg);
}
---------
SID [5248] -> Line 7130
#line 7130
if (errbuf_size != 0UL) {
#line 7132
  if (msg_size > errbuf_size) {
#line 7134
    strncpy((char */* __restrict  */)errbuf,
            (char const   */* __restrict  */)msg, errbuf_size - 1UL);
#line 7135
    *(errbuf + (errbuf_size - 1UL)) = (char)0;
  } else {
#line 7138
    strcpy((char */* __restrict  */)errbuf,
           (char const   */* __restrict  */)msg);
  }
} else {

}
---------
SID [5247] -> Line 7128
#line 7128
msg_size = tmp___0 + 1UL;
---------
SID [5246] -> Line 7128
#line 7128
tmp___0 = strlen(msg);
---------
SID [5245] -> Line -1

---------
SID [5244] -> Line 7126
#line 7126
msg = "Success";
---------
SID [5243] -> Line 7125
#line 7125
if (! msg) {
#line 7126
  msg = "Success";
} else {

}
---------
SID [5242] -> Line 7121
#line 7121
msg = re_error_msg[errcode];
---------
SID [5241] -> Line -1

---------
SID [5240] -> Line 7119
#line 7119
abort();
---------
SID [5239] -> Line 7113
#line 7113
if ((unsigned long )errcode >= sizeof(re_error_msg) / sizeof(re_error_msg[0])) {
#line 7119
  abort();
} else {

}
---------
SID [5238] -> Line 7119
#line 7119
abort();
---------
SID [5237] -> Line 7113
#line 7113
if (errcode < 0) {
#line 7119
  abort();
} else
#line 7113
if ((unsigned long )errcode >= sizeof(re_error_msg) / sizeof(re_error_msg[0])) {
#line 7119
  abort();
} else {

}
---------
SID [5236] -> Line 7096
#line 7096
return (tmp___5);
---------
SID [5235] -> Line 7096
#line 7096
tmp___5 = 1;
---------
SID [5234] -> Line 7096
#line 7096
tmp___5 = 0;
---------
SID [5233] -> Line 7096
#line 7096
if (ret >= 0) {
#line 7096
  tmp___5 = 0;
} else {
#line 7096
  tmp___5 = 1;
}
---------
SID [5232] -> Line -1

---------
SID [5231] -> Line 7092
#line 7092
free((void *)regs___0.end);
---------
SID [5230] -> Line 7091
#line 7091
free((void *)regs___0.start);
---------
SID [5229] -> Line -1

---------
SID [5228] -> Line 7083
#line 7083
r ++;
---------
SID [5227] -> Line 7086
#line 7086
(pmatch + r)->rm_eo = *(regs___0.end + r);
---------
SID [5226] -> Line 7085
#line 7085
(pmatch + r)->rm_so = *(regs___0.start + r);
---------
SID [5225] -> Line 7083
#line 7083
break;
---------
SID [5224] -> Line -1

---------
SID [5223] -> Line 7083
#line 7083
if ((size_t )r < nmatch) {

} else {
#line 7083
  break;
}
---------
SID [5222] -> Line 7083
#line 7083
while ((size_t )r < nmatch) {
#line 7085
  (pmatch + r)->rm_so = *(regs___0.start + r);
#line 7086
  (pmatch + r)->rm_eo = *(regs___0.end + r);
#line 7083
  r ++;
}
---------
SID [5221] -> Line 7083
#line 7083
r = 0U;
---------
SID [5220] -> Line 7079
#line 7079
if (ret >= 0) {
#line 7083
  r = 0U;
#line 7083
  while ((size_t )r < nmatch) {
#line 7085
    (pmatch + r)->rm_so = *(regs___0.start + r);
#line 7086
    (pmatch + r)->rm_eo = *(regs___0.end + r);
#line 7083
    r ++;
  }
} else {

}
---------
SID [5219] -> Line 7077
#line 7077
if (want_reg_info) {
#line 7079
  if (ret >= 0) {
#line 7083
    r = 0U;
#line 7083
    while ((size_t )r < nmatch) {
#line 7085
      (pmatch + r)->rm_so = *(regs___0.start + r);
#line 7086
      (pmatch + r)->rm_eo = *(regs___0.end + r);
#line 7083
      r ++;
    }
  } else {

  }
#line 7091
  free((void *)regs___0.start);
#line 7092
  free((void *)regs___0.end);
} else {

}
---------
SID [5218] -> Line 7072
#line 7072
ret = re_search(& private_preg, string, len, 0, len, tmp___4);
---------
SID [5217] -> Line 7072
#line 7072
tmp___4 = (struct re_registers *)0;
---------
SID [5216] -> Line 7072
#line 7072
tmp___4 = & regs___0;
---------
SID [5215] -> Line 7072
#line 7072
if (want_reg_info) {
#line 7072
  tmp___4 = & regs___0;
} else {
#line 7072
  tmp___4 = (struct re_registers *)0;
}
---------
SID [5214] -> Line -1

---------
SID [5213] -> Line -1

---------
SID [5212] -> Line 7068
#line 7068
return (1);
---------
SID [5211] -> Line 7067
#line 7067
if ((unsigned long )regs___0.end == (unsigned long )((void *)0)) {
#line 7068
  return (1);
} else {

}
---------
SID [5210] -> Line 7068
#line 7068
return (1);
---------
SID [5209] -> Line 7067
#line 7067
if ((unsigned long )regs___0.start == (unsigned long )((void *)0)) {
#line 7068
  return (1);
} else
#line 7067
if ((unsigned long )regs___0.end == (unsigned long )((void *)0)) {
#line 7068
  return (1);
} else {

}
---------
SID [5208] -> Line 7066
#line 7066
regs___0.end = (regoff_t *)tmp___3;
---------
SID [5207] -> Line 7066
#line 7066
tmp___3 = malloc(nmatch * sizeof(regoff_t ));
---------
SID [5206] -> Line 7065
#line 7065
regs___0.start = (regoff_t *)tmp___2;
---------
SID [5205] -> Line 7065
#line 7065
tmp___2 = malloc(nmatch * sizeof(regoff_t ));
---------
SID [5204] -> Line 7064
#line 7064
regs___0.num_regs = (unsigned int )nmatch;
---------
SID [5203] -> Line 7062
#line 7062
if (want_reg_info) {
#line 7064
  regs___0.num_regs = (unsigned int )nmatch;
#line 7065
  tmp___2 = malloc(nmatch * sizeof(regoff_t ));
#line 7065
  regs___0.start = (regoff_t *)tmp___2;
#line 7066
  tmp___3 = malloc(nmatch * sizeof(regoff_t ));
#line 7066
  regs___0.end = (regoff_t *)tmp___3;
#line 7067
  if ((unsigned long )regs___0.start == (unsigned long )((void *)0)) {
#line 7068
    return (1);
  } else
#line 7067
  if ((unsigned long )regs___0.end == (unsigned long )((void *)0)) {
#line 7068
    return (1);
  } else {

  }
} else {

}
---------
SID [5202] -> Line 7060
#line 7060
private_preg.regs_allocated = 2U;
---------
SID [5201] -> Line 7055
#line 7055
private_preg.not_eol = (unsigned int )(! (! (eflags & (1 << 1))));
---------
SID [5200] -> Line 7054
#line 7054
private_preg.not_bol = (unsigned int )(! (! (eflags & 1)));
---------
SID [5199] -> Line 7052
#line 7052
private_preg = (regex_t )*preg;
---------
SID [5198] -> Line 7050
#line 7050
want_reg_info = (boolean )tmp___1;
---------
SID [5197] -> Line 7050
#line 7050
tmp___1 = 0;
---------
SID [5196] -> Line 7050
#line 7050
tmp___1 = 0;
---------
SID [5195] -> Line 7050
#line 7050
tmp___1 = 1;
---------
SID [5194] -> Line 7050
#line 7050
if (nmatch > 0UL) {
#line 7050
  tmp___1 = 1;
} else {
#line 7050
  tmp___1 = 0;
}
---------
SID [5193] -> Line 7050
#line 7050
if (! preg->no_sub) {
#line 7050
  if (nmatch > 0UL) {
#line 7050
    tmp___1 = 1;
  } else {
#line 7050
    tmp___1 = 0;
  }
} else {
#line 7050
  tmp___1 = 0;
}
---------
SID [5192] -> Line 7049
#line 7049
len = (int )tmp___0;
---------
SID [5191] -> Line 7049
#line 7049
tmp___0 = strlen(string);
---------
SID [5190] -> Line 7020
#line 7020
return ((int )ret);
---------
SID [5189] -> Line -1

---------
SID [5188] -> Line 7018
#line 7018
ret = (reg_errcode_t )8;
---------
SID [5187] -> Line 7018
#line 7018
if ((unsigned int )ret == 16U) {
#line 7018
  ret = (reg_errcode_t )8;
} else {

}
---------
SID [5186] -> Line 7014
#line 7014
ret = regex_compile(pattern, (int )tmp___5, syntax, preg);
---------
SID [5185] -> Line 7014
#line 7014
tmp___5 = strlen(pattern);
---------
SID [5184] -> Line 7010
#line 7010
preg->no_sub = (unsigned int )(! (! (cflags & (((1 << 1) << 1) << 1))));
---------
SID [5183] -> Line 7008
#line 7008
preg->newline_anchor = 0U;
---------
SID [5182] -> Line 7005
#line 7005
preg->newline_anchor = 1U;
---------
SID [5181] -> Line 7003
#line 7003
syntax |= (unsigned int )((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1);
---------
SID [5180] -> Line 7002
#line 7002
syntax &= (unsigned int )(~ ((((((1 << 1) << 1) << 1) << 1) << 1) << 1));
---------
SID [5179] -> Line 7000
#line 7000
if (cflags & ((1 << 1) << 1)) {
#line 7002
  syntax &= (unsigned int )(~ ((((((1 << 1) << 1) << 1) << 1) << 1) << 1));
#line 7003
  syntax |= (unsigned int )((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1);
#line 7005
  preg->newline_anchor = 1U;
} else {
#line 7008
  preg->newline_anchor = 0U;
}
---------
SID [5178] -> Line 6997
#line 6997
preg->translate = (char *)((void *)0);
---------
SID [5177] -> Line 6993
#line 6993
i ++;
---------
SID [5176] -> Line 6994
#line 6994
*(preg->translate + i) = (char )i;
---------
SID [5175] -> Line 6994
#line 6994
*(preg->translate + i) = (char )i;
---------
SID [5174] -> Line 6994
#line 6994
*(preg->translate + i) = (char )tmp___3;
---------
SID [5173] -> Line 6994
#line 6994
tmp___3 = tolower((int )i);
---------
SID [5172] -> Line 6994
#line 6994
if ((int const   )*(*tmp___4 + (int )i) & 256) {
#line 6994
  tmp___3 = tolower((int )i);
#line 6994
  *(preg->translate + i) = (char )tmp___3;
} else {
#line 6994
  *(preg->translate + i) = (char )i;
}
---------
SID [5171] -> Line 6994
#line 6994
tmp___4 = __ctype_b_loc();
---------
SID [5170] -> Line 6994
#line 6994
if ((i & 4294967168U) == 0U) {
#line 6994
  tmp___4 = __ctype_b_loc();
#line 6994
  if ((int const   )*(*tmp___4 + (int )i) & 256) {
#line 6994
    tmp___3 = tolower((int )i);
#line 6994
    *(preg->translate + i) = (char )tmp___3;
  } else {
#line 6994
    *(preg->translate + i) = (char )i;
  }
} else {
#line 6994
  *(preg->translate + i) = (char )i;
}
---------
SID [5169] -> Line 6993
#line 6993
break;
---------
SID [5168] -> Line -1

---------
SID [5167] -> Line 6993
#line 6993
if (i < 256U) {

} else {
#line 6993
  break;
}
---------
SID [5166] -> Line 6993
#line 6993
while (i < 256U) {
#line 6994
  if ((i & 4294967168U) == 0U) {
#line 6994
    tmp___4 = __ctype_b_loc();
#line 6994
    if ((int const   )*(*tmp___4 + (int )i) & 256) {
#line 6994
      tmp___3 = tolower((int )i);
#line 6994
      *(preg->translate + i) = (char )tmp___3;
    } else {
#line 6994
      *(preg->translate + i) = (char )i;
    }
  } else {
#line 6994
    *(preg->translate + i) = (char )i;
  }
#line 6993
  i ++;
}
---------
SID [5165] -> Line 6993
#line 6993
i = 0U;
---------
SID [5164] -> Line -1

---------
SID [5163] -> Line 6990
#line 6990
return (12);
---------
SID [5162] -> Line 6989
#line 6989
if ((unsigned long )preg->translate == (unsigned long )((void *)0)) {
#line 6990
  return (12);
} else {

}
---------
SID [5161] -> Line 6988
#line 6988
preg->translate = (char *)tmp___1;
---------
SID [5160] -> Line 6988
#line 6988
tmp___1 = malloc((size_t )256);
---------
SID [5159] -> Line 6984
#line 6984
if (cflags & (1 << 1)) {
#line 6988
  tmp___1 = malloc((size_t )256);
#line 6988
  preg->translate = (char *)tmp___1;
#line 6989
  if ((unsigned long )preg->translate == (unsigned long )((void *)0)) {
#line 6990
    return (12);
  } else {

  }
#line 6993
  i = 0U;
#line 6993
  while (i < 256U) {
#line 6994
    if ((i & 4294967168U) == 0U) {
#line 6994
      tmp___4 = __ctype_b_loc();
#line 6994
      if ((int const   )*(*tmp___4 + (int )i) & 256) {
#line 6994
        tmp___3 = tolower((int )i);
#line 6994
        *(preg->translate + i) = (char )tmp___3;
      } else {
#line 6994
        *(preg->translate + i) = (char )i;
      }
    } else {
#line 6994
      *(preg->translate + i) = (char )i;
    }
#line 6993
    i ++;
  }
} else {
#line 6997
  preg->translate = (char *)((void *)0);
}
---------
SID [5158] -> Line 6982
#line 6982
preg->fastmap = (char *)0;
---------
SID [5157] -> Line 6976
#line 6976
preg->allocated = 0UL;
---------
SID [5156] -> Line 6975
#line 6975
preg->buffer = (unsigned char *)0;
---------
SID [5155] -> Line 6970
#line 6970
syntax = (unsigned int )tmp___0;
---------
SID [5154] -> Line 6970
#line 6970
tmp___0 = ((((((1 << 1) << 1) | ((((((1 << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | ((((((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (1 << 1);
---------
SID [5153] -> Line 6970
#line 6970
tmp___0 = (((((((((((1 << 1) << 1) | ((((((1 << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | ((((((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((1 << 1) << 1) << 1)) | ((((1 << 1) << 1) << 1) << 1)) | ((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1);
---------
SID [5152] -> Line 6970
#line 6970
if (cflags & 1) {
#line 6970
  tmp___0 = (((((((((((1 << 1) << 1) | ((((((1 << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | ((((((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((1 << 1) << 1) << 1)) | ((((1 << 1) << 1) << 1) << 1)) | ((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1);
} else {
#line 6970
  tmp___0 = ((((((1 << 1) << 1) | ((((((1 << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | ((((((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (1 << 1);
}
---------
SID [5151] -> Line 6866
#line 6866
return (re_error_msg[(int )ret]);
---------
SID [5150] -> Line 6864
#line 6864
ret = regex_compile(pattern, length, re_syntax_options, bufp);
---------
SID [5149] -> Line 6862
#line 6862
bufp->newline_anchor = 1U;
---------
SID [5148] -> Line 6859
#line 6859
bufp->no_sub = 0U;
---------
SID [5147] -> Line 6854
#line 6854
bufp->regs_allocated = 0U;
---------
SID [5146] -> Line 6830
#line 6830
return (0);
---------
SID [5145] -> Line 6828
#line 6828
len --;
---------
SID [5144] -> Line -1

---------
SID [5143] -> Line 6827
#line 6827
return (1);
---------
SID [5142] -> Line 6827
#line 6827
if ((int )*(translate + *tmp___0) != (int )*(translate + *tmp___1)) {
#line 6827
  return (1);
} else {

}
---------
SID [5141] -> Line 6827
#line 6827
p2 ++;
---------
SID [5140] -> Line 6827
#line 6827
tmp___1 = p2;
---------
SID [5139] -> Line 6827
#line 6827
p1 ++;
---------
SID [5138] -> Line 6827
#line 6827
tmp___0 = p1;
---------
SID [5137] -> Line 6825
#line 6825
break;
---------
SID [5136] -> Line -1

---------
SID [5135] -> Line 6825
#line 6825
if (len) {

} else {
#line 6825
  break;
}
---------
SID [5134] -> Line 6825
#line 6825
while (len) {
#line 6827
  tmp___0 = p1;
#line 6827
  p1 ++;
#line 6827
  tmp___1 = p2;
#line 6827
  p2 ++;
#line 6827
  if ((int )*(translate + *tmp___0) != (int )*(translate + *tmp___1)) {
#line 6827
    return (1);
  } else {

  }
#line 6828
  len --;
}
---------
SID [5133] -> Line 6824
#line 6824
p2 = s2;
---------
SID [5132] -> Line 6824
#line 6824
p1 = s1;
---------
SID [5131] -> Line 6811
#line 6811
return ((boolean )1);
---------
SID [5130] -> Line 6810
#line 6810
*p = p1;
---------
SID [5129] -> Line 6807
default: 
#line 6807
return ((boolean )0);
---------
SID [5128] -> Line 6803
case 22U: 
#line 6803
p1 += 4;
---------
SID [5127] -> Line 6800
#line 6800
break;
---------
SID [5126] -> Line -1

---------
SID [5125] -> Line 6799
#line 6799
return ((boolean )0);
---------
SID [5124] -> Line 6798
case 7U: 
#line 6798
if (! (reg_info + *p1)->bits.match_null_string_p) {
#line 6799
  return ((boolean )0);
} else {

}
---------
SID [5123] -> Line 6795
#line 6795
break;
---------
SID [5122] -> Line 6794
#line 6794
return ((boolean )0);
---------
SID [5121] -> Line 6791
#line 6791
p1 += mcnt;
---------
SID [5120] -> Line 6790
#line 6790
break;
---------
SID [5119] -> Line 6790
#line 6790
p1 += 2;
---------
SID [5118] -> Line 6790
#line 6790
break;
---------
SID [5117] -> Line 6790
#line 6790
mcnt += (int )((signed char )*(p1 + 1)) << 8;
---------
SID [5116] -> Line 6790
#line 6790
mcnt = (int )*p1 & 255;
---------
SID [5115] -> Line 6790
#line 6790
while (1) {
#line 6790
  mcnt = (int )*p1 & 255;
#line 6790
  mcnt += (int )((signed char )*(p1 + 1)) << 8;
#line 6790
  break;
}
---------
SID [5114] -> Line 6790
#line 6790
while (1) {
#line 6790
  while (1) {
#line 6790
    mcnt = (int )*p1 & 255;
#line 6790
    mcnt += (int )((signed char )*(p1 + 1)) << 8;
#line 6790
    break;
  }
#line 6790
  p1 += 2;
#line 6790
  break;
}
---------
SID [5113] -> Line 6789
#line 6789
p1 -= 4;
---------
SID [5112] -> Line 6787
#line 6787
if (mcnt == 0) {
#line 6789
  p1 -= 4;
#line 6790
  while (1) {
#line 6790
    while (1) {
#line 6790
      mcnt = (int )*p1 & 255;
#line 6790
      mcnt += (int )((signed char )*(p1 + 1)) << 8;
#line 6790
      break;
    }
#line 6790
    p1 += 2;
#line 6790
    break;
  }
#line 6791
  p1 += mcnt;
} else {
#line 6794
  return ((boolean )0);
}
---------
SID [5111] -> Line 6785
#line 6785
break;
---------
SID [5110] -> Line 6785
#line 6785
p1 += 2;
---------
SID [5109] -> Line 6785
#line 6785
break;
---------
SID [5108] -> Line 6785
#line 6785
mcnt += (int )((signed char )*(p1 + 1)) << 8;
---------
SID [5107] -> Line 6785
#line 6785
mcnt = (int )*p1 & 255;
---------
SID [5106] -> Line 6785
#line 6785
while (1) {
#line 6785
  mcnt = (int )*p1 & 255;
#line 6785
  mcnt += (int )((signed char )*(p1 + 1)) << 8;
#line 6785
  break;
}
---------
SID [5105] -> Line 6785
#line 6785
while (1) {
#line 6785
  while (1) {
#line 6785
    mcnt = (int )*p1 & 255;
#line 6785
    mcnt += (int )((signed char )*(p1 + 1)) << 8;
#line 6785
    break;
  }
#line 6785
  p1 += 2;
#line 6785
  break;
}
---------
SID [5104] -> Line 6784
case 20U: 
#line 6784
p1 += 2;
---------
SID [5103] -> Line 6780
#line 6780
break;
---------
SID [5102] -> Line 6779
#line 6779
return ((boolean )0);
---------
SID [5101] -> Line 6777
#line 6777
p1 += mcnt;
---------
SID [5100] -> Line 6776
#line 6776
if (mcnt >= 0) {
#line 6777
  p1 += mcnt;
} else {
#line 6779
  return ((boolean )0);
}
---------
SID [5099] -> Line 6775
#line 6775
break;
---------
SID [5098] -> Line 6775
#line 6775
p1 += 2;
---------
SID [5097] -> Line 6775
#line 6775
break;
---------
SID [5096] -> Line 6775
#line 6775
mcnt += (int )((signed char )*(p1 + 1)) << 8;
---------
SID [5095] -> Line 6775
#line 6775
mcnt = (int )*p1 & 255;
---------
SID [5094] -> Line 6775
#line 6775
while (1) {
#line 6775
  mcnt = (int )*p1 & 255;
#line 6775
  mcnt += (int )((signed char )*(p1 + 1)) << 8;
#line 6775
  break;
}
---------
SID [5093] -> Line 6775
case 12U: 
#line 6775
while (1) {
#line 6775
  while (1) {
#line 6775
    mcnt = (int )*p1 & 255;
#line 6775
    mcnt += (int )((signed char )*(p1 + 1)) << 8;
#line 6775
    break;
  }
#line 6775
  p1 += 2;
#line 6775
  break;
}
---------
SID [5092] -> Line 6771
#line 6771
break;
---------
SID [5091] -> Line -1

---------
SID [5090] -> Line 6770
#line 6770
return ((boolean )0);
---------
SID [5089] -> Line 6769
#line 6769
if (! ret) {
#line 6770
  return ((boolean )0);
} else {

}
---------
SID [5088] -> Line -1

---------
SID [5087] -> Line 6767
#line 6767
(reg_info + reg_no)->bits.match_null_string_p = (unsigned int )ret;
---------
SID [5086] -> Line 6766
#line 6766
if ((reg_info + reg_no)->bits.match_null_string_p == 3U) {
#line 6767
  (reg_info + reg_no)->bits.match_null_string_p = (unsigned int )ret;
} else {

}
---------
SID [5085] -> Line 6761
#line 6761
ret = group_match_null_string_p(& p1, end, reg_info);
---------
SID [5084] -> Line 6759
case 5U: 
#line 6759
reg_no = (int )*p1;
---------
SID [5083] -> Line 6756
case 28U: 
case 27U: 
case 26U: 
case 25U: 
case 11U: 
case 10U: 
case 9U: 
case 8U: 
case 0U: 
#line 6756
break;
---------
SID [5082] -> Line 6740
#line 6740
switch ((unsigned int )((re_opcode_t )*tmp___0)) {
case 28U: 
case 27U: 
case 26U: 
case 25U: 
case 11U: 
case 10U: 
case 9U: 
case 8U: 
case 0U: 
#line 6756
break;
case 5U: 
#line 6759
reg_no = (int )*p1;
#line 6761
ret = group_match_null_string_p(& p1, end, reg_info);
#line 6766
if ((reg_info + reg_no)->bits.match_null_string_p == 3U) {
#line 6767
  (reg_info + reg_no)->bits.match_null_string_p = (unsigned int )ret;
} else {

}
#line 6769
if (! ret) {
#line 6770
  return ((boolean )0);
} else {

}
#line 6771
break;
case 12U: 
#line 6775
while (1) {
#line 6775
  while (1) {
#line 6775
    mcnt = (int )*p1 & 255;
#line 6775
    mcnt += (int )((signed char )*(p1 + 1)) << 8;
#line 6775
    break;
  }
#line 6775
  p1 += 2;
#line 6775
  break;
}
#line 6776
if (mcnt >= 0) {
#line 6777
  p1 += mcnt;
} else {
#line 6779
  return ((boolean )0);
}
#line 6780
break;
case 20U: 
#line 6784
p1 += 2;
#line 6785
while (1) {
#line 6785
  while (1) {
#line 6785
    mcnt = (int )*p1 & 255;
#line 6785
    mcnt += (int )((signed char )*(p1 + 1)) << 8;
#line 6785
    break;
  }
#line 6785
  p1 += 2;
#line 6785
  break;
}
#line 6787
if (mcnt == 0) {
#line 6789
  p1 -= 4;
#line 6790
  while (1) {
#line 6790
    while (1) {
#line 6790
      mcnt = (int )*p1 & 255;
#line 6790
      mcnt += (int )((signed char )*(p1 + 1)) << 8;
#line 6790
      break;
    }
#line 6790
    p1 += 2;
#line 6790
    break;
  }
#line 6791
  p1 += mcnt;
} else {
#line 6794
  return ((boolean )0);
}
#line 6795
break;
case 7U: 
#line 6798
if (! (reg_info + *p1)->bits.match_null_string_p) {
#line 6799
  return ((boolean )0);
} else {

}
#line 6800
break;
case 22U: 
#line 6803
p1 += 4;
default: 
#line 6807
return ((boolean )0);
}
---------
SID [5081] -> Line 6740
#line 6740
p1 ++;
---------
SID [5080] -> Line 6740
#line 6740
tmp___0 = p1;
---------
SID [5079] -> Line 6738
#line 6738
p1 = *p;
---------
SID [5078] -> Line 6721
#line 6721
return ((boolean )1);
---------
SID [5077] -> Line 6717
#line 6717
return ((boolean )0);
---------
SID [5076] -> Line -1

---------
SID [5075] -> Line 6716
#line 6716
if (tmp___0) {

} else {
#line 6717
  return ((boolean )0);
}
---------
SID [5074] -> Line 6716
default: 
#line 6716
tmp___0 = common_op_match_null_string_p(& p1, end, reg_info);
---------
SID [5073] -> Line 6713
#line 6713
break;
---------
SID [5072] -> Line 6712
#line 6712
p1 += mcnt;
---------
SID [5071] -> Line 6711
#line 6711
break;
---------
SID [5070] -> Line 6711
#line 6711
p1 += 2;
---------
SID [5069] -> Line 6711
#line 6711
break;
---------
SID [5068] -> Line 6711
#line 6711
mcnt += (int )((signed char )*(p1 + 1)) << 8;
---------
SID [5067] -> Line 6711
#line 6711
mcnt = (int )*p1 & 255;
---------
SID [5066] -> Line 6711
#line 6711
while (1) {
#line 6711
  mcnt = (int )*p1 & 255;
#line 6711
  mcnt += (int )((signed char )*(p1 + 1)) << 8;
#line 6711
  break;
}
---------
SID [5065] -> Line 6711
#line 6711
while (1) {
#line 6711
  while (1) {
#line 6711
    mcnt = (int )*p1 & 255;
#line 6711
    mcnt += (int )((signed char )*(p1 + 1)) << 8;
#line 6711
    break;
  }
#line 6711
  p1 += 2;
#line 6711
  break;
}
---------
SID [5064] -> Line 6710
case 14U: 
#line 6710
p1 ++;
---------
SID [5063] -> Line 6706
#line 6706
switch ((unsigned int )((re_opcode_t )*p1)) {
case 14U: 
#line 6710
p1 ++;
#line 6711
while (1) {
#line 6711
  while (1) {
#line 6711
    mcnt = (int )*p1 & 255;
#line 6711
    mcnt += (int )((signed char )*(p1 + 1)) << 8;
#line 6711
    break;
  }
#line 6711
  p1 += 2;
#line 6711
  break;
}
#line 6712
p1 += mcnt;
#line 6713
break;
default: 
#line 6716
tmp___0 = common_op_match_null_string_p(& p1, end, reg_info);
#line 6716
if (tmp___0) {

} else {
#line 6717
  return ((boolean )0);
}
}
---------
SID [5062] -> Line 6701
#line 6701
break;
---------
SID [5061] -> Line -1

---------
SID [5060] -> Line 6701
#line 6701
if ((unsigned long )p1 < (unsigned long )end) {

} else {
#line 6701
  break;
}
---------
SID [5059] -> Line 6701
#line 6701
while ((unsigned long )p1 < (unsigned long )end) {
#line 6706
  switch ((unsigned int )((re_opcode_t )*p1)) {
  case 14U: 
#line 6710
  p1 ++;
#line 6711
  while (1) {
#line 6711
    while (1) {
#line 6711
      mcnt = (int )*p1 & 255;
#line 6711
      mcnt += (int )((signed char )*(p1 + 1)) << 8;
#line 6711
      break;
    }
#line 6711
    p1 += 2;
#line 6711
    break;
  }
#line 6712
  p1 += mcnt;
#line 6713
  break;
  default: 
#line 6716
  tmp___0 = common_op_match_null_string_p(& p1, end, reg_info);
#line 6716
  if (tmp___0) {

  } else {
#line 6717
    return ((boolean )0);
  }
  }
}
---------
SID [5058] -> Line 6699
#line 6699
p1 = p;
---------
SID [5057] -> Line 6685
#line 6685
return ((boolean )0);
---------
SID [5056] -> Line 6681
#line 6681
return ((boolean )0);
---------
SID [5055] -> Line -1

---------
SID [5054] -> Line 6680
#line 6680
if (tmp___2) {

} else {
#line 6681
  return ((boolean )0);
}
---------
SID [5053] -> Line 6680
default: 
#line 6680
tmp___2 = common_op_match_null_string_p(& p1, end, reg_info);
---------
SID [5052] -> Line 6676
#line 6676
return ((boolean )1);
---------
SID [5051] -> Line 6675
case 6U: 
#line 6675
*p = p1 + 2;
---------
SID [5050] -> Line 6670
#line 6670
break;
---------
SID [5049] -> Line -1

---------
SID [5048] -> Line 6668
#line 6668
p1 += mcnt;
---------
SID [5047] -> Line 6666
#line 6666
return ((boolean )0);
---------
SID [5046] -> Line -1

---------
SID [5045] -> Line 6665
#line 6665
if (tmp___1) {

} else {
#line 6666
  return ((boolean )0);
}
---------
SID [5044] -> Line 6665
#line 6665
tmp___1 = alt_match_null_string_p(p1, p1 + mcnt, reg_info);
---------
SID [5043] -> Line 6663
#line 6663
break;
---------
SID [5042] -> Line 6663
#line 6663
mcnt += (int )((signed char )*((p1 - 2) + 1)) << 8;
---------
SID [5041] -> Line 6663
#line 6663
mcnt = (int )*(p1 - 2) & 255;
---------
SID [5040] -> Line 6663
#line 6663
while (1) {
#line 6663
  mcnt = (int )*(p1 - 2) & 255;
#line 6663
  mcnt += (int )((signed char )*((p1 - 2) + 1)) << 8;
#line 6663
  break;
}
---------
SID [5039] -> Line -1

---------
SID [5038] -> Line 6656
#line 6656
break;
---------
SID [5037] -> Line 6655
#line 6655
p1 -= 3;
---------
SID [5036] -> Line 6652
#line 6652
if ((unsigned int )((re_opcode_t )*(p1 + (mcnt - 3))) != 13U) {
#line 6655
  p1 -= 3;
#line 6656
  break;
} else {

}
---------
SID [5035] -> Line 6651
#line 6651
break;
---------
SID [5034] -> Line 6651
#line 6651
p1 += 2;
---------
SID [5033] -> Line 6651
#line 6651
break;
---------
SID [5032] -> Line 6651
#line 6651
mcnt += (int )((signed char )*(p1 + 1)) << 8;
---------
SID [5031] -> Line 6651
#line 6651
mcnt = (int )*p1 & 255;
---------
SID [5030] -> Line 6651
#line 6651
while (1) {
#line 6651
  mcnt = (int )*p1 & 255;
#line 6651
  mcnt += (int )((signed char )*(p1 + 1)) << 8;
#line 6651
  break;
}
---------
SID [5029] -> Line 6651
#line 6651
while (1) {
#line 6651
  while (1) {
#line 6651
    mcnt = (int )*p1 & 255;
#line 6651
    mcnt += (int )((signed char )*(p1 + 1)) << 8;
#line 6651
    break;
  }
#line 6651
  p1 += 2;
#line 6651
  break;
}
---------
SID [5028] -> Line 6650
#line 6650
p1 ++;
---------
SID [5027] -> Line -1

---------
SID [5026] -> Line 6646
#line 6646
break;
---------
SID [5025] -> Line 6645
#line 6645
if ((unsigned int )((re_opcode_t )*p1) != 14U) {
#line 6646
  break;
} else {

}
---------
SID [5024] -> Line 6641
#line 6641
p1 += mcnt;
---------
SID [5023] -> Line 6637
#line 6637
return ((boolean )0);
---------
SID [5022] -> Line -1

---------
SID [5021] -> Line 6635
#line 6635
if (tmp___0) {

} else {
#line 6637
  return ((boolean )0);
}
---------
SID [5020] -> Line 6635
#line 6635
tmp___0 = alt_match_null_string_p(p1, (p1 + mcnt) - 3, reg_info);
---------
SID [5019] -> Line 6629
#line 6629
break;
---------
SID [5018] -> Line -1

---------
SID [5017] -> Line 6629
#line 6629
if ((unsigned int )((re_opcode_t )*(p1 + (mcnt - 3))) == 13U) {

} else {
#line 6629
  break;
}
---------
SID [5016] -> Line 6629
#line 6629
while ((unsigned int )((re_opcode_t )*(p1 + (mcnt - 3))) == 13U) {
#line 6635
  tmp___0 = alt_match_null_string_p(p1, (p1 + mcnt) - 3, reg_info);
#line 6635
  if (tmp___0) {

  } else {
#line 6637
    return ((boolean )0);
  }
#line 6641
  p1 += mcnt;
#line 6645
  if ((unsigned int )((re_opcode_t )*p1) != 14U) {
#line 6646
    break;
  } else {

  }
#line 6650
  p1 ++;
#line 6651
  while (1) {
#line 6651
    while (1) {
#line 6651
      mcnt = (int )*p1 & 255;
#line 6651
      mcnt += (int )((signed char )*(p1 + 1)) << 8;
#line 6651
      break;
    }
#line 6651
    p1 += 2;
#line 6651
    break;
  }
#line 6652
  if ((unsigned int )((re_opcode_t )*(p1 + (mcnt - 3))) != 13U) {
#line 6655
    p1 -= 3;
#line 6656
    break;
  } else {

  }
}
---------
SID [5015] -> Line 6609
#line 6609
if (mcnt >= 0) {
#line 6629
  while ((unsigned int )((re_opcode_t )*(p1 + (mcnt - 3))) == 13U) {
#line 6635
    tmp___0 = alt_match_null_string_p(p1, (p1 + mcnt) - 3, reg_info);
#line 6635
    if (tmp___0) {

    } else {
#line 6637
      return ((boolean )0);
    }
#line 6641
    p1 += mcnt;
#line 6645
    if ((unsigned int )((re_opcode_t )*p1) != 14U) {
#line 6646
      break;
    } else {

    }
#line 6650
    p1 ++;
#line 6651
    while (1) {
#line 6651
      while (1) {
#line 6651
        mcnt = (int )*p1 & 255;
#line 6651
        mcnt += (int )((signed char )*(p1 + 1)) << 8;
#line 6651
        break;
      }
#line 6651
      p1 += 2;
#line 6651
      break;
    }
#line 6652
    if ((unsigned int )((re_opcode_t )*(p1 + (mcnt - 3))) != 13U) {
#line 6655
      p1 -= 3;
#line 6656
      break;
    } else {

    }
  }
#line 6663
  while (1) {
#line 6663
    mcnt = (int )*(p1 - 2) & 255;
#line 6663
    mcnt += (int )((signed char )*((p1 - 2) + 1)) << 8;
#line 6663
    break;
  }
#line 6665
  tmp___1 = alt_match_null_string_p(p1, p1 + mcnt, reg_info);
#line 6665
  if (tmp___1) {

  } else {
#line 6666
    return ((boolean )0);
  }
#line 6668
  p1 += mcnt;
} else {

}
---------
SID [5014] -> Line 6604
#line 6604
break;
---------
SID [5013] -> Line 6604
#line 6604
p1 += 2;
---------
SID [5012] -> Line 6604
#line 6604
break;
---------
SID [5011] -> Line 6604
#line 6604
mcnt += (int )((signed char )*(p1 + 1)) << 8;
---------
SID [5010] -> Line 6604
#line 6604
mcnt = (int )*p1 & 255;
---------
SID [5009] -> Line 6604
#line 6604
while (1) {
#line 6604
  mcnt = (int )*p1 & 255;
#line 6604
  mcnt += (int )((signed char )*(p1 + 1)) << 8;
#line 6604
  break;
}
---------
SID [5008] -> Line 6604
#line 6604
while (1) {
#line 6604
  while (1) {
#line 6604
    mcnt = (int )*p1 & 255;
#line 6604
    mcnt += (int )((signed char )*(p1 + 1)) << 8;
#line 6604
    break;
  }
#line 6604
  p1 += 2;
#line 6604
  break;
}
---------
SID [5007] -> Line 6603
case 14U: 
#line 6603
p1 ++;
---------
SID [5006] -> Line 6599
#line 6599
switch ((unsigned int )((re_opcode_t )*p1)) {
case 14U: 
#line 6603
p1 ++;
#line 6604
while (1) {
#line 6604
  while (1) {
#line 6604
    mcnt = (int )*p1 & 255;
#line 6604
    mcnt += (int )((signed char )*(p1 + 1)) << 8;
#line 6604
    break;
  }
#line 6604
  p1 += 2;
#line 6604
  break;
}
#line 6609
if (mcnt >= 0) {
#line 6629
  while ((unsigned int )((re_opcode_t )*(p1 + (mcnt - 3))) == 13U) {
#line 6635
    tmp___0 = alt_match_null_string_p(p1, (p1 + mcnt) - 3, reg_info);
#line 6635
    if (tmp___0) {

    } else {
#line 6637
      return ((boolean )0);
    }
#line 6641
    p1 += mcnt;
#line 6645
    if ((unsigned int )((re_opcode_t )*p1) != 14U) {
#line 6646
      break;
    } else {

    }
#line 6650
    p1 ++;
#line 6651
    while (1) {
#line 6651
      while (1) {
#line 6651
        mcnt = (int )*p1 & 255;
#line 6651
        mcnt += (int )((signed char )*(p1 + 1)) << 8;
#line 6651
        break;
      }
#line 6651
      p1 += 2;
#line 6651
      break;
    }
#line 6652
    if ((unsigned int )((re_opcode_t )*(p1 + (mcnt - 3))) != 13U) {
#line 6655
      p1 -= 3;
#line 6656
      break;
    } else {

    }
  }
#line 6663
  while (1) {
#line 6663
    mcnt = (int )*(p1 - 2) & 255;
#line 6663
    mcnt += (int )((signed char )*((p1 - 2) + 1)) << 8;
#line 6663
    break;
  }
#line 6665
  tmp___1 = alt_match_null_string_p(p1, p1 + mcnt, reg_info);
#line 6665
  if (tmp___1) {

  } else {
#line 6666
    return ((boolean )0);
  }
#line 6668
  p1 += mcnt;
} else {

}
#line 6670
break;
case 6U: 
#line 6675
*p = p1 + 2;
#line 6676
return ((boolean )1);
default: 
#line 6680
tmp___2 = common_op_match_null_string_p(& p1, end, reg_info);
#line 6680
if (tmp___2) {

} else {
#line 6681
  return ((boolean )0);
}
}
---------
SID [5005] -> Line 6593
#line 6593
break;
---------
SID [5004] -> Line -1

---------
SID [5003] -> Line 6593
#line 6593
if ((unsigned long )p1 < (unsigned long )end) {

} else {
#line 6593
  break;
}
---------
SID [5002] -> Line 6593
#line 6593
while ((unsigned long )p1 < (unsigned long )end) {
#line 6599
  switch ((unsigned int )((re_opcode_t )*p1)) {
  case 14U: 
#line 6603
  p1 ++;
#line 6604
  while (1) {
#line 6604
    while (1) {
#line 6604
      mcnt = (int )*p1 & 255;
#line 6604
      mcnt += (int )((signed char )*(p1 + 1)) << 8;
#line 6604
      break;
    }
#line 6604
    p1 += 2;
#line 6604
    break;
  }
#line 6609
  if (mcnt >= 0) {
#line 6629
    while ((unsigned int )((re_opcode_t )*(p1 + (mcnt - 3))) == 13U) {
#line 6635
      tmp___0 = alt_match_null_string_p(p1, (p1 + mcnt) - 3, reg_info);
#line 6635
      if (tmp___0) {

      } else {
#line 6637
        return ((boolean )0);
      }
#line 6641
      p1 += mcnt;
#line 6645
      if ((unsigned int )((re_opcode_t )*p1) != 14U) {
#line 6646
        break;
      } else {

      }
#line 6650
      p1 ++;
#line 6651
      while (1) {
#line 6651
        while (1) {
#line 6651
          mcnt = (int )*p1 & 255;
#line 6651
          mcnt += (int )((signed char )*(p1 + 1)) << 8;
#line 6651
          break;
        }
#line 6651
        p1 += 2;
#line 6651
        break;
      }
#line 6652
      if ((unsigned int )((re_opcode_t )*(p1 + (mcnt - 3))) != 13U) {
#line 6655
        p1 -= 3;
#line 6656
        break;
      } else {

      }
    }
#line 6663
    while (1) {
#line 6663
      mcnt = (int )*(p1 - 2) & 255;
#line 6663
      mcnt += (int )((signed char )*((p1 - 2) + 1)) << 8;
#line 6663
      break;
    }
#line 6665
    tmp___1 = alt_match_null_string_p(p1, p1 + mcnt, reg_info);
#line 6665
    if (tmp___1) {

    } else {
#line 6666
      return ((boolean )0);
    }
#line 6668
    p1 += mcnt;
  } else {

  }
#line 6670
  break;
  case 6U: 
#line 6675
  *p = p1 + 2;
#line 6676
  return ((boolean )1);
  default: 
#line 6680
  tmp___2 = common_op_match_null_string_p(& p1, end, reg_info);
#line 6680
  if (tmp___2) {

  } else {
#line 6681
    return ((boolean )0);
  }
  }
}
---------
SID [5001] -> Line 6591
#line 6591
p1 = *p + 2;
---------
SID [5000] -> Line 6568
#line 6568
return (-1);
---------
SID [4999] -> Line 6566
#line 6566
__builtin_alloca(0UL);
---------
SID [4998] -> Line -1

---------
SID [4997] -> Line 6564
#line 6564
goto restore_best_regs;
---------
SID [4996] -> Line 6563
#line 6563
if (best_regs_set) {
#line 6564
  goto restore_best_regs;
} else {

}
---------
SID [4995] -> Line -1
__Cont: /* CIL Label */ ;
---------
SID [4994] -> Line 6560
#line 6560
break;
---------
SID [4993] -> Line -1

---------
SID [4992] -> Line -1

---------
SID [4991] -> Line 6557
#line 6557
dend = end_match_1;
---------
SID [4990] -> Line 6556
#line 6556
if ((unsigned long )d <= (unsigned long )end1) {
#line 6557
  dend = end_match_1;
} else {

}
---------
SID [4989] -> Line 6556
#line 6556
if ((unsigned long )d >= (unsigned long )string1) {
#line 6556
  if ((unsigned long )d <= (unsigned long )end1) {
#line 6557
    dend = end_match_1;
  } else {

  }
} else {

}
---------
SID [4988] -> Line -1

---------
SID [4987] -> Line -1
default: ;
---------
SID [4986] -> Line 6550
#line 6550
break;
---------
SID [4985] -> Line -1

---------
SID [4984] -> Line -1

---------
SID [4983] -> Line 6549
#line 6549
goto fail;
---------
SID [4982] -> Line 6546
#line 6546
if ((unsigned int )((re_opcode_t )*p1) == 14U) {
#line 6549
  goto fail;
} else {

}
---------
SID [4981] -> Line 6546
_L___7: /* CIL Label */ 
#line 6546
if (! is_a_jump_n___0) {
#line 6546
  if ((unsigned int )((re_opcode_t )*p1) == 14U) {
#line 6549
    goto fail;
  } else {

  }
} else {

}
---------
SID [4980] -> Line 6546
#line 6546
goto _L___7;
---------
SID [4979] -> Line 6549
#line 6549
goto fail;
---------
SID [4978] -> Line 6546
#line 6546
if ((unsigned int )((re_opcode_t )*p1) == 20U) {
#line 6549
  goto fail;
} else {
#line 6546
  goto _L___7;
}
---------
SID [4977] -> Line 6546
#line 6546
if (is_a_jump_n___0) {
#line 6546
  if ((unsigned int )((re_opcode_t )*p1) == 20U) {
#line 6549
    goto fail;
  } else {
#line 6546
    goto _L___7;
  }
} else
_L___7: /* CIL Label */ 
#line 6546
if (! is_a_jump_n___0) {
#line 6546
  if ((unsigned int )((re_opcode_t )*p1) == 14U) {
#line 6549
    goto fail;
  } else {

  }
} else {

}
---------
SID [4976] -> Line 6544
#line 6544
p1 += mcnt;
---------
SID [4975] -> Line 6543
#line 6543
break;
---------
SID [4974] -> Line 6543
#line 6543
p1 += 2;
---------
SID [4973] -> Line 6543
#line 6543
break;
---------
SID [4972] -> Line 6543
#line 6543
mcnt += (int )((signed char )*(p1 + 1)) << 8;
---------
SID [4971] -> Line 6543
#line 6543
mcnt = (int )*p1 & 255;
---------
SID [4970] -> Line 6543
#line 6543
while (1) {
#line 6543
  mcnt = (int )*p1 & 255;
#line 6543
  mcnt += (int )((signed char )*(p1 + 1)) << 8;
#line 6543
  break;
}
---------
SID [4969] -> Line 6543
#line 6543
while (1) {
#line 6543
  while (1) {
#line 6543
    mcnt = (int )*p1 & 255;
#line 6543
    mcnt += (int )((signed char )*(p1 + 1)) << 8;
#line 6543
    break;
  }
#line 6543
  p1 += 2;
#line 6543
  break;
}
---------
SID [4968] -> Line 6542
case 12U: 
case 16U: 
case 17U: 
#line 6542
p1 = p + 1;
---------
SID [4967] -> Line 6538
case 21U: 
#line 6538
is_a_jump_n___0 = (boolean )1;
---------
SID [4966] -> Line 6535
#line 6535
switch ((unsigned int )((re_opcode_t )*p)) {
case 21U: 
#line 6538
is_a_jump_n___0 = (boolean )1;
case 12U: 
case 16U: 
case 17U: 
#line 6542
p1 = p + 1;
#line 6543
while (1) {
#line 6543
  while (1) {
#line 6543
    mcnt = (int )*p1 & 255;
#line 6543
    mcnt += (int )((signed char )*(p1 + 1)) << 8;
#line 6543
    break;
  }
#line 6543
  p1 += 2;
#line 6543
  break;
}
#line 6544
p1 += mcnt;
#line 6546
if (is_a_jump_n___0) {
#line 6546
  if ((unsigned int )((re_opcode_t )*p1) == 20U) {
#line 6549
    goto fail;
  } else {
#line 6546
    goto _L___7;
  }
} else
_L___7: /* CIL Label */ 
#line 6546
if (! is_a_jump_n___0) {
#line 6546
  if ((unsigned int )((re_opcode_t )*p1) == 14U) {
#line 6549
    goto fail;
  } else {

  }
} else {

}
#line 6550
break;
default: ;
}
---------
SID [4965] -> Line 6531
#line 6531
is_a_jump_n___0 = (boolean )0;
---------
SID [4964] -> Line 6529
#line 6529
if ((unsigned long )p < (unsigned long )pend) {
#line 6531
  is_a_jump_n___0 = (boolean )0;
#line 6535
  switch ((unsigned int )((re_opcode_t )*p)) {
  case 21U: 
#line 6538
  is_a_jump_n___0 = (boolean )1;
  case 12U: 
  case 16U: 
  case 17U: 
#line 6542
  p1 = p + 1;
#line 6543
  while (1) {
#line 6543
    while (1) {
#line 6543
      mcnt = (int )*p1 & 255;
#line 6543
      mcnt += (int )((signed char )*(p1 + 1)) << 8;
#line 6543
      break;
    }
#line 6543
    p1 += 2;
#line 6543
    break;
  }
#line 6544
  p1 += mcnt;
#line 6546
  if (is_a_jump_n___0) {
#line 6546
    if ((unsigned int )((re_opcode_t )*p1) == 20U) {
#line 6549
      goto fail;
    } else {
#line 6546
      goto _L___7;
    }
  } else
  _L___7: /* CIL Label */ 
#line 6546
  if (! is_a_jump_n___0) {
#line 6546
    if ((unsigned int )((re_opcode_t )*p1) == 14U) {
#line 6549
      goto fail;
    } else {

    }
  } else {

  }
#line 6550
  break;
  default: ;
  }
} else {

}
---------
SID [4963] -> Line -1

---------
SID [4962] -> Line 6525
#line 6525
goto fail;
---------
SID [4961] -> Line 6524
#line 6524
if (! p) {
#line 6525
  goto fail;
} else {

}
---------
SID [4960] -> Line 6519
#line 6519
this_reg___5 --;
---------
SID [4959] -> Line 6519
#line 6519
*(regstart + this_reg___5) = (char const   *)*(fail_stack.stack + fail_stack.avail);
---------
SID [4958] -> Line 6519
#line 6519
(fail_stack.avail) --;
---------
SID [4957] -> Line 6519
#line 6519
*(regend + this_reg___5) = (char const   *)*(fail_stack.stack + fail_stack.avail);
---------
SID [4956] -> Line 6519
#line 6519
(fail_stack.avail) --;
---------
SID [4955] -> Line 6519
#line 6519
(reg_info + this_reg___5)->word = *(fail_stack.stack + fail_stack.avail);
---------
SID [4954] -> Line 6519
#line 6519
(fail_stack.avail) --;
---------
SID [4953] -> Line 6519
#line 6519
break;
---------
SID [4952] -> Line -1

---------
SID [4951] -> Line 6519
#line 6519
if ((unsigned int )this_reg___5 >= lowest_active_reg) {

} else {
#line 6519
  break;
}
---------
SID [4950] -> Line 6519
#line 6519
while ((unsigned int )this_reg___5 >= lowest_active_reg) {
#line 6519
  (fail_stack.avail) --;
#line 6519
  (reg_info + this_reg___5)->word = *(fail_stack.stack + fail_stack.avail);
#line 6519
  (fail_stack.avail) --;
#line 6519
  *(regend + this_reg___5) = (char const   *)*(fail_stack.stack + fail_stack.avail);
#line 6519
  (fail_stack.avail) --;
#line 6519
  *(regstart + this_reg___5) = (char const   *)*(fail_stack.stack + fail_stack.avail);
#line 6519
  this_reg___5 --;
}
---------
SID [4949] -> Line 6519
#line 6519
this_reg___5 = (int )highest_active_reg;
---------
SID [4948] -> Line 6519
#line 6519
lowest_active_reg = (unsigned int )*(fail_stack.stack + fail_stack.avail);
---------
SID [4947] -> Line 6519
#line 6519
(fail_stack.avail) --;
---------
SID [4946] -> Line 6519
#line 6519
highest_active_reg = (unsigned int )*(fail_stack.stack + fail_stack.avail);
---------
SID [4945] -> Line 6519
#line 6519
(fail_stack.avail) --;
---------
SID [4944] -> Line 6519
#line 6519
p = (unsigned char *)*(fail_stack.stack + fail_stack.avail);
---------
SID [4943] -> Line 6519
#line 6519
(fail_stack.avail) --;
---------
SID [4942] -> Line -1

---------
SID [4941] -> Line 6519
#line 6519
d = (char const   *)string_temp___0;
---------
SID [4940] -> Line 6519
#line 6519
if ((unsigned long )string_temp___0 != (unsigned long )((void *)0)) {
#line 6519
  d = (char const   *)string_temp___0;
} else {

}
---------
SID [4939] -> Line 6519
#line 6519
string_temp___0 = *(fail_stack.stack + fail_stack.avail);
---------
SID [4938] -> Line 6519
#line 6519
(fail_stack.avail) --;
---------
SID [4937] -> Line 6516
fail: 
#line 6516
if (! (fail_stack.avail == 0U)) {
#line 6519
  (fail_stack.avail) --;
#line 6519
  string_temp___0 = *(fail_stack.stack + fail_stack.avail);
#line 6519
  if ((unsigned long )string_temp___0 != (unsigned long )((void *)0)) {
#line 6519
    d = (char const   *)string_temp___0;
  } else {

  }
#line 6519
  (fail_stack.avail) --;
#line 6519
  p = (unsigned char *)*(fail_stack.stack + fail_stack.avail);
#line 6519
  (fail_stack.avail) --;
#line 6519
  highest_active_reg = (unsigned int )*(fail_stack.stack + fail_stack.avail);
#line 6519
  (fail_stack.avail) --;
#line 6519
  lowest_active_reg = (unsigned int )*(fail_stack.stack + fail_stack.avail);
#line 6519
  this_reg___5 = (int )highest_active_reg;
#line 6519
  while ((unsigned int )this_reg___5 >= lowest_active_reg) {
#line 6519
    (fail_stack.avail) --;
#line 6519
    (reg_info + this_reg___5)->word = *(fail_stack.stack + fail_stack.avail);
#line 6519
    (fail_stack.avail) --;
#line 6519
    *(regend + this_reg___5) = (char const   *)*(fail_stack.stack + fail_stack.avail);
#line 6519
    (fail_stack.avail) --;
#line 6519
    *(regstart + this_reg___5) = (char const   *)*(fail_stack.stack + fail_stack.avail);
#line 6519
    this_reg___5 --;
  }
#line 6524
  if (! p) {
#line 6525
    goto fail;
  } else {

  }
#line 6529
  if ((unsigned long )p < (unsigned long )pend) {
#line 6531
    is_a_jump_n___0 = (boolean )0;
#line 6535
    switch ((unsigned int )((re_opcode_t )*p)) {
    case 21U: 
#line 6538
    is_a_jump_n___0 = (boolean )1;
    case 12U: 
    case 16U: 
    case 17U: 
#line 6542
    p1 = p + 1;
#line 6543
    while (1) {
#line 6543
      while (1) {
#line 6543
        mcnt = (int )*p1 & 255;
#line 6543
        mcnt += (int )((signed char )*(p1 + 1)) << 8;
#line 6543
        break;
      }
#line 6543
      p1 += 2;
#line 6543
      break;
    }
#line 6544
    p1 += mcnt;
#line 6546
    if (is_a_jump_n___0) {
#line 6546
      if ((unsigned int )((re_opcode_t )*p1) == 20U) {
#line 6549
        goto fail;
      } else {
#line 6546
        goto _L___7;
      }
    } else
    _L___7: /* CIL Label */ 
#line 6546
    if (! is_a_jump_n___0) {
#line 6546
      if ((unsigned int )((re_opcode_t )*p1) == 14U) {
#line 6549
        goto fail;
      } else {

      }
    } else {

    }
#line 6550
    break;
    default: ;
    }
  } else {

  }
#line 6556
  if ((unsigned long )d >= (unsigned long )string1) {
#line 6556
    if ((unsigned long )d <= (unsigned long )end1) {
#line 6557
      dend = end_match_1;
    } else {

    }
  } else {

  }
} else {
#line 6560
  break;
}
---------
SID [4936] -> Line 6511
#line 6511
goto __Cont;
---------
SID [4935] -> Line 6509
default: 
#line 6509
abort();
---------
SID [4934] -> Line 6505
#line 6505
break;
---------
SID [4933] -> Line 6504
#line 6504
d ++;
---------
SID [4932] -> Line 6503
#line 6503
break;
---------
SID [4931] -> Line 6503
#line 6503
r___5 ++;
---------
SID [4930] -> Line 6503
#line 6503
(reg_info + r___5)->bits.matched_something = tmp___124;
---------
SID [4929] -> Line 6503
#line 6503
(reg_info + r___5)->bits.ever_matched_something = tmp___124;
---------
SID [4928] -> Line 6503
#line 6503
tmp___124 = 1U;
---------
SID [4927] -> Line 6503
#line 6503
break;
---------
SID [4926] -> Line -1

---------
SID [4925] -> Line 6503
#line 6503
if (r___5 <= highest_active_reg) {

} else {
#line 6503
  break;
}
---------
SID [4924] -> Line 6503
#line 6503
while (r___5 <= highest_active_reg) {
#line 6503
  tmp___124 = 1U;
#line 6503
  (reg_info + r___5)->bits.ever_matched_something = tmp___124;
#line 6503
  (reg_info + r___5)->bits.matched_something = tmp___124;
#line 6503
  r___5 ++;
}
---------
SID [4923] -> Line 6503
#line 6503
r___5 = lowest_active_reg;
---------
SID [4922] -> Line 6503
#line 6503
while (1) {
#line 6503
  r___5 = lowest_active_reg;
#line 6503
  while (r___5 <= highest_active_reg) {
#line 6503
    tmp___124 = 1U;
#line 6503
    (reg_info + r___5)->bits.ever_matched_something = tmp___124;
#line 6503
    (reg_info + r___5)->bits.matched_something = tmp___124;
#line 6503
    r___5 ++;
  }
#line 6503
  break;
}
---------
SID [4921] -> Line -1

---------
SID [4920] -> Line 6502
#line 6502
goto fail;
---------
SID [4919] -> Line 6501
#line 6501
if ((int )re_syntax_table[tmp___123] == 1) {
#line 6502
  goto fail;
} else {

}
---------
SID [4918] -> Line 6501
#line 6501
tmp___123 = tmp___122;
---------
SID [4917] -> Line 6501
#line 6501
tmp___122 = (int const   )*d;
---------
SID [4916] -> Line 6501
#line 6501
tmp___122 = (int const   )*(end1 - 1);
---------
SID [4915] -> Line 6501
#line 6501
if ((unsigned long )d == (unsigned long )(string2 - 1)) {
#line 6501
  tmp___122 = (int const   )*(end1 - 1);
} else {
#line 6501
  tmp___122 = (int const   )*d;
}
---------
SID [4914] -> Line 6501
#line 6501
tmp___123 = (int const   )*string2;
---------
SID [4913] -> Line 6501
#line 6501
if ((unsigned long )d == (unsigned long )end1) {
#line 6501
  tmp___123 = (int const   )*string2;
} else {
#line 6501
  if ((unsigned long )d == (unsigned long )(string2 - 1)) {
#line 6501
    tmp___122 = (int const   )*(end1 - 1);
  } else {
#line 6501
    tmp___122 = (int const   )*d;
  }
#line 6501
  tmp___123 = tmp___122;
}
---------
SID [4912] -> Line 6500
#line 6500
dend = end_match_2;
---------
SID [4911] -> Line 6500
#line 6500
d = string2;
---------
SID [4910] -> Line -1

---------
SID [4909] -> Line 6500
#line 6500
goto fail;
---------
SID [4908] -> Line 6500
#line 6500
if ((unsigned long )dend == (unsigned long )end_match_2) {
#line 6500
  goto fail;
} else {

}
---------
SID [4907] -> Line 6500
#line 6500
break;
---------
SID [4906] -> Line -1

---------
SID [4905] -> Line 6500
#line 6500
if ((unsigned long )d == (unsigned long )dend) {

} else {
#line 6500
  break;
}
---------
SID [4904] -> Line 6500
#line 6500
while ((unsigned long )d == (unsigned long )dend) {
#line 6500
  if ((unsigned long )dend == (unsigned long )end_match_2) {
#line 6500
    goto fail;
  } else {

  }
#line 6500
  d = string2;
#line 6500
  dend = end_match_2;
}
---------
SID [4903] -> Line -1
case 24U: ;
---------
SID [4902] -> Line 6496
#line 6496
break;
---------
SID [4901] -> Line 6495
#line 6495
d ++;
---------
SID [4900] -> Line 6494
#line 6494
break;
---------
SID [4899] -> Line 6494
#line 6494
r___4 ++;
---------
SID [4898] -> Line 6494
#line 6494
(reg_info + r___4)->bits.matched_something = tmp___121;
---------
SID [4897] -> Line 6494
#line 6494
(reg_info + r___4)->bits.ever_matched_something = tmp___121;
---------
SID [4896] -> Line 6494
#line 6494
tmp___121 = 1U;
---------
SID [4895] -> Line 6494
#line 6494
break;
---------
SID [4894] -> Line -1

---------
SID [4893] -> Line 6494
#line 6494
if (r___4 <= highest_active_reg) {

} else {
#line 6494
  break;
}
---------
SID [4892] -> Line 6494
#line 6494
while (r___4 <= highest_active_reg) {
#line 6494
  tmp___121 = 1U;
#line 6494
  (reg_info + r___4)->bits.ever_matched_something = tmp___121;
#line 6494
  (reg_info + r___4)->bits.matched_something = tmp___121;
#line 6494
  r___4 ++;
}
---------
SID [4891] -> Line 6494
#line 6494
r___4 = lowest_active_reg;
---------
SID [4890] -> Line 6494
#line 6494
while (1) {
#line 6494
  r___4 = lowest_active_reg;
#line 6494
  while (r___4 <= highest_active_reg) {
#line 6494
    tmp___121 = 1U;
#line 6494
    (reg_info + r___4)->bits.ever_matched_something = tmp___121;
#line 6494
    (reg_info + r___4)->bits.matched_something = tmp___121;
#line 6494
    r___4 ++;
  }
#line 6494
  break;
}
---------
SID [4889] -> Line 6493
#line 6493
goto fail;
---------
SID [4888] -> Line -1

---------
SID [4887] -> Line 6492
#line 6492
if ((int )re_syntax_table[tmp___120] == 1) {

} else {
#line 6493
  goto fail;
}
---------
SID [4886] -> Line 6492
#line 6492
tmp___120 = tmp___119;
---------
SID [4885] -> Line 6492
#line 6492
tmp___119 = (int const   )*d;
---------
SID [4884] -> Line 6492
#line 6492
tmp___119 = (int const   )*(end1 - 1);
---------
SID [4883] -> Line 6492
#line 6492
if ((unsigned long )d == (unsigned long )(string2 - 1)) {
#line 6492
  tmp___119 = (int const   )*(end1 - 1);
} else {
#line 6492
  tmp___119 = (int const   )*d;
}
---------
SID [4882] -> Line 6492
#line 6492
tmp___120 = (int const   )*string2;
---------
SID [4881] -> Line 6492
#line 6492
if ((unsigned long )d == (unsigned long )end1) {
#line 6492
  tmp___120 = (int const   )*string2;
} else {
#line 6492
  if ((unsigned long )d == (unsigned long )(string2 - 1)) {
#line 6492
    tmp___119 = (int const   )*(end1 - 1);
  } else {
#line 6492
    tmp___119 = (int const   )*d;
  }
#line 6492
  tmp___120 = tmp___119;
}
---------
SID [4880] -> Line 6491
#line 6491
dend = end_match_2;
---------
SID [4879] -> Line 6491
#line 6491
d = string2;
---------
SID [4878] -> Line -1

---------
SID [4877] -> Line 6491
#line 6491
goto fail;
---------
SID [4876] -> Line 6491
#line 6491
if ((unsigned long )dend == (unsigned long )end_match_2) {
#line 6491
  goto fail;
} else {

}
---------
SID [4875] -> Line 6491
#line 6491
break;
---------
SID [4874] -> Line -1

---------
SID [4873] -> Line 6491
#line 6491
if ((unsigned long )d == (unsigned long )dend) {

} else {
#line 6491
  break;
}
---------
SID [4872] -> Line 6491
#line 6491
while ((unsigned long )d == (unsigned long )dend) {
#line 6491
  if ((unsigned long )dend == (unsigned long )end_match_2) {
#line 6491
    goto fail;
  } else {

  }
#line 6491
  d = string2;
#line 6491
  dend = end_match_2;
}
---------
SID [4871] -> Line -1
case 23U: ;
---------
SID [4870] -> Line 6429
#line 6429
goto fail;
---------
SID [4869] -> Line -1

---------
SID [4868] -> Line 6428
#line 6428
break;
---------
SID [4867] -> Line -1

---------
SID [4866] -> Line 6428
#line 6428
break;
---------
SID [4865] -> Line 6426
#line 6426
if ((unsigned long )d == (unsigned long )end2) {
#line 6428
  break;
} else {

}
---------
SID [4864] -> Line 6426
#line 6426
if ((int )re_syntax_table[tmp___118] == 1) {
#line 6426
  if ((unsigned long )d == (unsigned long )end2) {
#line 6428
    break;
  } else {

  }
} else {
#line 6428
  break;
}
---------
SID [4863] -> Line 6426
#line 6426
tmp___118 = tmp___117;
---------
SID [4862] -> Line 6426
#line 6426
tmp___117 = (int const   )*d;
---------
SID [4861] -> Line 6426
#line 6426
tmp___117 = (int const   )*(end1 - 1);
---------
SID [4860] -> Line 6426
#line 6426
if ((unsigned long )d == (unsigned long )(string2 - 1)) {
#line 6426
  tmp___117 = (int const   )*(end1 - 1);
} else {
#line 6426
  tmp___117 = (int const   )*d;
}
---------
SID [4859] -> Line 6426
#line 6426
tmp___118 = (int const   )*string2;
---------
SID [4858] -> Line 6426
#line 6426
if ((unsigned long )d == (unsigned long )end1) {
#line 6426
  tmp___118 = (int const   )*string2;
} else {
#line 6426
  if ((unsigned long )d == (unsigned long )(string2 - 1)) {
#line 6426
    tmp___117 = (int const   )*(end1 - 1);
  } else {
#line 6426
    tmp___117 = (int const   )*d;
  }
#line 6426
  tmp___118 = tmp___117;
}
---------
SID [4857] -> Line 6426
#line 6426
if ((int )re_syntax_table[tmp___116] == 1) {
#line 6426
  if ((unsigned long )d == (unsigned long )end1) {
#line 6426
    tmp___118 = (int const   )*string2;
  } else {
#line 6426
    if ((unsigned long )d == (unsigned long )(string2 - 1)) {
#line 6426
      tmp___117 = (int const   )*(end1 - 1);
    } else {
#line 6426
      tmp___117 = (int const   )*d;
    }
#line 6426
    tmp___118 = tmp___117;
  }
#line 6426
  if ((int )re_syntax_table[tmp___118] == 1) {
#line 6426
    if ((unsigned long )d == (unsigned long )end2) {
#line 6428
      break;
    } else {

    }
  } else {
#line 6428
    break;
  }
} else {

}
---------
SID [4856] -> Line 6426
#line 6426
tmp___116 = tmp___115;
---------
SID [4855] -> Line 6426
#line 6426
tmp___115 = (int const   )*(d - 1);
---------
SID [4854] -> Line 6426
#line 6426
tmp___115 = (int const   )*(end1 - 1);
---------
SID [4853] -> Line 6426
#line 6426
if ((unsigned long )(d - 1) == (unsigned long )(string2 - 1)) {
#line 6426
  tmp___115 = (int const   )*(end1 - 1);
} else {
#line 6426
  tmp___115 = (int const   )*(d - 1);
}
---------
SID [4852] -> Line 6426
#line 6426
tmp___116 = (int const   )*string2;
---------
SID [4851] -> Line 6426
#line 6426
if ((unsigned long )(d - 1) == (unsigned long )end1) {
#line 6426
  tmp___116 = (int const   )*string2;
} else {
#line 6426
  if ((unsigned long )(d - 1) == (unsigned long )(string2 - 1)) {
#line 6426
    tmp___115 = (int const   )*(end1 - 1);
  } else {
#line 6426
    tmp___115 = (int const   )*(d - 1);
  }
#line 6426
  tmp___116 = tmp___115;
}
---------
SID [4850] -> Line -1

---------
SID [4849] -> Line 6426
#line 6426
if (! size2) {

} else {
#line 6426
  if ((unsigned long )(d - 1) == (unsigned long )end1) {
#line 6426
    tmp___116 = (int const   )*string2;
  } else {
#line 6426
    if ((unsigned long )(d - 1) == (unsigned long )(string2 - 1)) {
#line 6426
      tmp___115 = (int const   )*(end1 - 1);
    } else {
#line 6426
      tmp___115 = (int const   )*(d - 1);
    }
#line 6426
    tmp___116 = tmp___115;
  }
#line 6426
  if ((int )re_syntax_table[tmp___116] == 1) {
#line 6426
    if ((unsigned long )d == (unsigned long )end1) {
#line 6426
      tmp___118 = (int const   )*string2;
    } else {
#line 6426
      if ((unsigned long )d == (unsigned long )(string2 - 1)) {
#line 6426
        tmp___117 = (int const   )*(end1 - 1);
      } else {
#line 6426
        tmp___117 = (int const   )*d;
      }
#line 6426
      tmp___118 = tmp___117;
    }
#line 6426
    if ((int )re_syntax_table[tmp___118] == 1) {
#line 6426
      if ((unsigned long )d == (unsigned long )end2) {
#line 6428
        break;
      } else {

      }
    } else {
#line 6428
      break;
    }
  } else {

  }
}
---------
SID [4848] -> Line -1

---------
SID [4847] -> Line 6426
#line 6426
if ((unsigned long )d == (unsigned long )tmp___114) {

} else
#line 6426
if (! size2) {

} else {
#line 6426
  if ((unsigned long )(d - 1) == (unsigned long )end1) {
#line 6426
    tmp___116 = (int const   )*string2;
  } else {
#line 6426
    if ((unsigned long )(d - 1) == (unsigned long )(string2 - 1)) {
#line 6426
      tmp___115 = (int const   )*(end1 - 1);
    } else {
#line 6426
      tmp___115 = (int const   )*(d - 1);
    }
#line 6426
    tmp___116 = tmp___115;
  }
#line 6426
  if ((int )re_syntax_table[tmp___116] == 1) {
#line 6426
    if ((unsigned long )d == (unsigned long )end1) {
#line 6426
      tmp___118 = (int const   )*string2;
    } else {
#line 6426
      if ((unsigned long )d == (unsigned long )(string2 - 1)) {
#line 6426
        tmp___117 = (int const   )*(end1 - 1);
      } else {
#line 6426
        tmp___117 = (int const   )*d;
      }
#line 6426
      tmp___118 = tmp___117;
    }
#line 6426
    if ((int )re_syntax_table[tmp___118] == 1) {
#line 6426
      if ((unsigned long )d == (unsigned long )end2) {
#line 6428
        break;
      } else {

      }
    } else {
#line 6428
      break;
    }
  } else {

  }
}
---------
SID [4846] -> Line 6426
#line 6426
tmp___114 = string2;
---------
SID [4845] -> Line 6426
#line 6426
tmp___114 = string1;
---------
SID [4844] -> Line 6426
#line 6426
if (size1) {
#line 6426
  tmp___114 = string1;
} else {
#line 6426
  tmp___114 = string2;
}
---------
SID [4843] -> Line -1
case 26U: ;
---------
SID [4842] -> Line 6422
#line 6422
goto fail;
---------
SID [4841] -> Line -1

---------
SID [4840] -> Line 6421
#line 6421
break;
---------
SID [4839] -> Line -1

---------
SID [4838] -> Line 6420
#line 6420
if ((int )re_syntax_table[tmp___113] == 1) {

} else {
#line 6421
  break;
}
---------
SID [4837] -> Line 6420
#line 6420
tmp___113 = tmp___112;
---------
SID [4836] -> Line 6420
#line 6420
tmp___112 = (int const   )*(d - 1);
---------
SID [4835] -> Line 6420
#line 6420
tmp___112 = (int const   )*(end1 - 1);
---------
SID [4834] -> Line 6420
#line 6420
if ((unsigned long )(d - 1) == (unsigned long )(string2 - 1)) {
#line 6420
  tmp___112 = (int const   )*(end1 - 1);
} else {
#line 6420
  tmp___112 = (int const   )*(d - 1);
}
---------
SID [4833] -> Line 6420
#line 6420
tmp___113 = (int const   )*string2;
---------
SID [4832] -> Line 6420
#line 6420
if ((unsigned long )(d - 1) == (unsigned long )end1) {
#line 6420
  tmp___113 = (int const   )*string2;
} else {
#line 6420
  if ((unsigned long )(d - 1) == (unsigned long )(string2 - 1)) {
#line 6420
    tmp___112 = (int const   )*(end1 - 1);
  } else {
#line 6420
    tmp___112 = (int const   )*(d - 1);
  }
#line 6420
  tmp___113 = tmp___112;
}
---------
SID [4831] -> Line 6421
#line 6421
break;
---------
SID [4830] -> Line 6420
#line 6420
if (! size2) {
#line 6421
  break;
} else {
#line 6420
  if ((unsigned long )(d - 1) == (unsigned long )end1) {
#line 6420
    tmp___113 = (int const   )*string2;
  } else {
#line 6420
    if ((unsigned long )(d - 1) == (unsigned long )(string2 - 1)) {
#line 6420
      tmp___112 = (int const   )*(end1 - 1);
    } else {
#line 6420
      tmp___112 = (int const   )*(d - 1);
    }
#line 6420
    tmp___113 = tmp___112;
  }
#line 6420
  if ((int )re_syntax_table[tmp___113] == 1) {

  } else {
#line 6421
    break;
  }
}
---------
SID [4829] -> Line 6421
#line 6421
break;
---------
SID [4828] -> Line 6420
#line 6420
if ((unsigned long )d == (unsigned long )tmp___111) {
#line 6421
  break;
} else
#line 6420
if (! size2) {
#line 6421
  break;
} else {
#line 6420
  if ((unsigned long )(d - 1) == (unsigned long )end1) {
#line 6420
    tmp___113 = (int const   )*string2;
  } else {
#line 6420
    if ((unsigned long )(d - 1) == (unsigned long )(string2 - 1)) {
#line 6420
      tmp___112 = (int const   )*(end1 - 1);
    } else {
#line 6420
      tmp___112 = (int const   )*(d - 1);
    }
#line 6420
    tmp___113 = tmp___112;
  }
#line 6420
  if ((int )re_syntax_table[tmp___113] == 1) {

  } else {
#line 6421
    break;
  }
}
---------
SID [4827] -> Line 6420
#line 6420
tmp___111 = string2;
---------
SID [4826] -> Line 6420
#line 6420
tmp___111 = string1;
---------
SID [4825] -> Line 6420
#line 6420
if (size1) {
#line 6420
  tmp___111 = string1;
} else {
#line 6420
  tmp___111 = string2;
}
---------
SID [4824] -> Line 6420
#line 6420
if ((int )re_syntax_table[tmp___110] == 1) {
#line 6420
  if (size1) {
#line 6420
    tmp___111 = string1;
  } else {
#line 6420
    tmp___111 = string2;
  }
#line 6420
  if ((unsigned long )d == (unsigned long )tmp___111) {
#line 6421
    break;
  } else
#line 6420
  if (! size2) {
#line 6421
    break;
  } else {
#line 6420
    if ((unsigned long )(d - 1) == (unsigned long )end1) {
#line 6420
      tmp___113 = (int const   )*string2;
    } else {
#line 6420
      if ((unsigned long )(d - 1) == (unsigned long )(string2 - 1)) {
#line 6420
        tmp___112 = (int const   )*(end1 - 1);
      } else {
#line 6420
        tmp___112 = (int const   )*(d - 1);
      }
#line 6420
      tmp___113 = tmp___112;
    }
#line 6420
    if ((int )re_syntax_table[tmp___113] == 1) {

    } else {
#line 6421
      break;
    }
  }
} else {

}
---------
SID [4823] -> Line 6420
#line 6420
tmp___110 = tmp___109;
---------
SID [4822] -> Line 6420
#line 6420
tmp___109 = (int const   )*d;
---------
SID [4821] -> Line 6420
#line 6420
tmp___109 = (int const   )*(end1 - 1);
---------
SID [4820] -> Line 6420
#line 6420
if ((unsigned long )d == (unsigned long )(string2 - 1)) {
#line 6420
  tmp___109 = (int const   )*(end1 - 1);
} else {
#line 6420
  tmp___109 = (int const   )*d;
}
---------
SID [4819] -> Line 6420
#line 6420
tmp___110 = (int const   )*string2;
---------
SID [4818] -> Line 6420
#line 6420
if ((unsigned long )d == (unsigned long )end1) {
#line 6420
  tmp___110 = (int const   )*string2;
} else {
#line 6420
  if ((unsigned long )d == (unsigned long )(string2 - 1)) {
#line 6420
    tmp___109 = (int const   )*(end1 - 1);
  } else {
#line 6420
    tmp___109 = (int const   )*d;
  }
#line 6420
  tmp___110 = tmp___109;
}
---------
SID [4817] -> Line -1
case 25U: ;
---------
SID [4816] -> Line 6416
#line 6416
break;
---------
SID [4815] -> Line -1

---------
SID [4814] -> Line 6415
#line 6415
goto fail;
---------
SID [4813] -> Line 6414
#line 6414
if (((int )re_syntax_table[tmp___106] == 1) != ((int )re_syntax_table[tmp___108] == 1)) {
#line 6415
  goto fail;
} else {

}
---------
SID [4812] -> Line 6414
#line 6414
tmp___108 = tmp___107;
---------
SID [4811] -> Line 6414
#line 6414
tmp___107 = (int const   )*d;
---------
SID [4810] -> Line 6414
#line 6414
tmp___107 = (int const   )*(end1 - 1);
---------
SID [4809] -> Line 6414
#line 6414
if ((unsigned long )d == (unsigned long )(string2 - 1)) {
#line 6414
  tmp___107 = (int const   )*(end1 - 1);
} else {
#line 6414
  tmp___107 = (int const   )*d;
}
---------
SID [4808] -> Line 6414
#line 6414
tmp___108 = (int const   )*string2;
---------
SID [4807] -> Line 6414
#line 6414
if ((unsigned long )d == (unsigned long )end1) {
#line 6414
  tmp___108 = (int const   )*string2;
} else {
#line 6414
  if ((unsigned long )d == (unsigned long )(string2 - 1)) {
#line 6414
    tmp___107 = (int const   )*(end1 - 1);
  } else {
#line 6414
    tmp___107 = (int const   )*d;
  }
#line 6414
  tmp___108 = tmp___107;
}
---------
SID [4806] -> Line 6414
#line 6414
tmp___106 = tmp___105;
---------
SID [4805] -> Line 6414
#line 6414
tmp___105 = (int const   )*(d - 1);
---------
SID [4804] -> Line 6414
#line 6414
tmp___105 = (int const   )*(end1 - 1);
---------
SID [4803] -> Line 6414
#line 6414
if ((unsigned long )(d - 1) == (unsigned long )(string2 - 1)) {
#line 6414
  tmp___105 = (int const   )*(end1 - 1);
} else {
#line 6414
  tmp___105 = (int const   )*(d - 1);
}
---------
SID [4802] -> Line 6414
#line 6414
tmp___106 = (int const   )*string2;
---------
SID [4801] -> Line 6414
#line 6414
if ((unsigned long )(d - 1) == (unsigned long )end1) {
#line 6414
  tmp___106 = (int const   )*string2;
} else {
#line 6414
  if ((unsigned long )(d - 1) == (unsigned long )(string2 - 1)) {
#line 6414
    tmp___105 = (int const   )*(end1 - 1);
  } else {
#line 6414
    tmp___105 = (int const   )*(d - 1);
  }
#line 6414
  tmp___106 = tmp___105;
}
---------
SID [4800] -> Line 6415
#line 6415
goto fail;
---------
SID [4799] -> Line 6414
#line 6414
if ((unsigned long )d == (unsigned long )end2) {
#line 6415
  goto fail;
} else {
#line 6414
  if ((unsigned long )(d - 1) == (unsigned long )end1) {
#line 6414
    tmp___106 = (int const   )*string2;
  } else {
#line 6414
    if ((unsigned long )(d - 1) == (unsigned long )(string2 - 1)) {
#line 6414
      tmp___105 = (int const   )*(end1 - 1);
    } else {
#line 6414
      tmp___105 = (int const   )*(d - 1);
    }
#line 6414
    tmp___106 = tmp___105;
  }
#line 6414
  if ((unsigned long )d == (unsigned long )end1) {
#line 6414
    tmp___108 = (int const   )*string2;
  } else {
#line 6414
    if ((unsigned long )d == (unsigned long )(string2 - 1)) {
#line 6414
      tmp___107 = (int const   )*(end1 - 1);
    } else {
#line 6414
      tmp___107 = (int const   )*d;
    }
#line 6414
    tmp___108 = tmp___107;
  }
#line 6414
  if (((int )re_syntax_table[tmp___106] == 1) != ((int )re_syntax_table[tmp___108] == 1)) {
#line 6415
    goto fail;
  } else {

  }
}
---------
SID [4798] -> Line 6415
#line 6415
goto fail;
---------
SID [4797] -> Line 6414
#line 6414
if (! size2) {
#line 6415
  goto fail;
} else
#line 6414
if ((unsigned long )d == (unsigned long )end2) {
#line 6415
  goto fail;
} else {
#line 6414
  if ((unsigned long )(d - 1) == (unsigned long )end1) {
#line 6414
    tmp___106 = (int const   )*string2;
  } else {
#line 6414
    if ((unsigned long )(d - 1) == (unsigned long )(string2 - 1)) {
#line 6414
      tmp___105 = (int const   )*(end1 - 1);
    } else {
#line 6414
      tmp___105 = (int const   )*(d - 1);
    }
#line 6414
    tmp___106 = tmp___105;
  }
#line 6414
  if ((unsigned long )d == (unsigned long )end1) {
#line 6414
    tmp___108 = (int const   )*string2;
  } else {
#line 6414
    if ((unsigned long )d == (unsigned long )(string2 - 1)) {
#line 6414
      tmp___107 = (int const   )*(end1 - 1);
    } else {
#line 6414
      tmp___107 = (int const   )*d;
    }
#line 6414
    tmp___108 = tmp___107;
  }
#line 6414
  if (((int )re_syntax_table[tmp___106] == 1) != ((int )re_syntax_table[tmp___108] == 1)) {
#line 6415
    goto fail;
  } else {

  }
}
---------
SID [4796] -> Line 6415
#line 6415
goto fail;
---------
SID [4795] -> Line 6414
#line 6414
if ((unsigned long )d == (unsigned long )tmp___104) {
#line 6415
  goto fail;
} else
#line 6414
if (! size2) {
#line 6415
  goto fail;
} else
#line 6414
if ((unsigned long )d == (unsigned long )end2) {
#line 6415
  goto fail;
} else {
#line 6414
  if ((unsigned long )(d - 1) == (unsigned long )end1) {
#line 6414
    tmp___106 = (int const   )*string2;
  } else {
#line 6414
    if ((unsigned long )(d - 1) == (unsigned long )(string2 - 1)) {
#line 6414
      tmp___105 = (int const   )*(end1 - 1);
    } else {
#line 6414
      tmp___105 = (int const   )*(d - 1);
    }
#line 6414
    tmp___106 = tmp___105;
  }
#line 6414
  if ((unsigned long )d == (unsigned long )end1) {
#line 6414
    tmp___108 = (int const   )*string2;
  } else {
#line 6414
    if ((unsigned long )d == (unsigned long )(string2 - 1)) {
#line 6414
      tmp___107 = (int const   )*(end1 - 1);
    } else {
#line 6414
      tmp___107 = (int const   )*d;
    }
#line 6414
    tmp___108 = tmp___107;
  }
#line 6414
  if (((int )re_syntax_table[tmp___106] == 1) != ((int )re_syntax_table[tmp___108] == 1)) {
#line 6415
    goto fail;
  } else {

  }
}
---------
SID [4794] -> Line 6414
#line 6414
tmp___104 = string2;
---------
SID [4793] -> Line 6414
#line 6414
tmp___104 = string1;
---------
SID [4792] -> Line 6414
#line 6414
if (size1) {
#line 6414
  tmp___104 = string1;
} else {
#line 6414
  tmp___104 = string2;
}
---------
SID [4791] -> Line -1
case 28U: ;
---------
SID [4790] -> Line 6410
#line 6410
goto fail;
---------
SID [4789] -> Line -1

---------
SID [4788] -> Line 6409
#line 6409
break;
---------
SID [4787] -> Line 6408
#line 6408
if (((int )re_syntax_table[tmp___101] == 1) != ((int )re_syntax_table[tmp___103] == 1)) {
#line 6409
  break;
} else {

}
---------
SID [4786] -> Line 6408
#line 6408
tmp___103 = tmp___102;
---------
SID [4785] -> Line 6408
#line 6408
tmp___102 = (int const   )*d;
---------
SID [4784] -> Line 6408
#line 6408
tmp___102 = (int const   )*(end1 - 1);
---------
SID [4783] -> Line 6408
#line 6408
if ((unsigned long )d == (unsigned long )(string2 - 1)) {
#line 6408
  tmp___102 = (int const   )*(end1 - 1);
} else {
#line 6408
  tmp___102 = (int const   )*d;
}
---------
SID [4782] -> Line 6408
#line 6408
tmp___103 = (int const   )*string2;
---------
SID [4781] -> Line 6408
#line 6408
if ((unsigned long )d == (unsigned long )end1) {
#line 6408
  tmp___103 = (int const   )*string2;
} else {
#line 6408
  if ((unsigned long )d == (unsigned long )(string2 - 1)) {
#line 6408
    tmp___102 = (int const   )*(end1 - 1);
  } else {
#line 6408
    tmp___102 = (int const   )*d;
  }
#line 6408
  tmp___103 = tmp___102;
}
---------
SID [4780] -> Line 6408
#line 6408
tmp___101 = tmp___100;
---------
SID [4779] -> Line 6408
#line 6408
tmp___100 = (int const   )*(d - 1);
---------
SID [4778] -> Line 6408
#line 6408
tmp___100 = (int const   )*(end1 - 1);
---------
SID [4777] -> Line 6408
#line 6408
if ((unsigned long )(d - 1) == (unsigned long )(string2 - 1)) {
#line 6408
  tmp___100 = (int const   )*(end1 - 1);
} else {
#line 6408
  tmp___100 = (int const   )*(d - 1);
}
---------
SID [4776] -> Line 6408
#line 6408
tmp___101 = (int const   )*string2;
---------
SID [4775] -> Line 6408
#line 6408
if ((unsigned long )(d - 1) == (unsigned long )end1) {
#line 6408
  tmp___101 = (int const   )*string2;
} else {
#line 6408
  if ((unsigned long )(d - 1) == (unsigned long )(string2 - 1)) {
#line 6408
    tmp___100 = (int const   )*(end1 - 1);
  } else {
#line 6408
    tmp___100 = (int const   )*(d - 1);
  }
#line 6408
  tmp___101 = tmp___100;
}
---------
SID [4774] -> Line 6409
#line 6409
break;
---------
SID [4773] -> Line 6408
#line 6408
if ((unsigned long )d == (unsigned long )end2) {
#line 6409
  break;
} else {
#line 6408
  if ((unsigned long )(d - 1) == (unsigned long )end1) {
#line 6408
    tmp___101 = (int const   )*string2;
  } else {
#line 6408
    if ((unsigned long )(d - 1) == (unsigned long )(string2 - 1)) {
#line 6408
      tmp___100 = (int const   )*(end1 - 1);
    } else {
#line 6408
      tmp___100 = (int const   )*(d - 1);
    }
#line 6408
    tmp___101 = tmp___100;
  }
#line 6408
  if ((unsigned long )d == (unsigned long )end1) {
#line 6408
    tmp___103 = (int const   )*string2;
  } else {
#line 6408
    if ((unsigned long )d == (unsigned long )(string2 - 1)) {
#line 6408
      tmp___102 = (int const   )*(end1 - 1);
    } else {
#line 6408
      tmp___102 = (int const   )*d;
    }
#line 6408
    tmp___103 = tmp___102;
  }
#line 6408
  if (((int )re_syntax_table[tmp___101] == 1) != ((int )re_syntax_table[tmp___103] == 1)) {
#line 6409
    break;
  } else {

  }
}
---------
SID [4772] -> Line 6409
#line 6409
break;
---------
SID [4771] -> Line 6408
#line 6408
if (! size2) {
#line 6409
  break;
} else
#line 6408
if ((unsigned long )d == (unsigned long )end2) {
#line 6409
  break;
} else {
#line 6408
  if ((unsigned long )(d - 1) == (unsigned long )end1) {
#line 6408
    tmp___101 = (int const   )*string2;
  } else {
#line 6408
    if ((unsigned long )(d - 1) == (unsigned long )(string2 - 1)) {
#line 6408
      tmp___100 = (int const   )*(end1 - 1);
    } else {
#line 6408
      tmp___100 = (int const   )*(d - 1);
    }
#line 6408
    tmp___101 = tmp___100;
  }
#line 6408
  if ((unsigned long )d == (unsigned long )end1) {
#line 6408
    tmp___103 = (int const   )*string2;
  } else {
#line 6408
    if ((unsigned long )d == (unsigned long )(string2 - 1)) {
#line 6408
      tmp___102 = (int const   )*(end1 - 1);
    } else {
#line 6408
      tmp___102 = (int const   )*d;
    }
#line 6408
    tmp___103 = tmp___102;
  }
#line 6408
  if (((int )re_syntax_table[tmp___101] == 1) != ((int )re_syntax_table[tmp___103] == 1)) {
#line 6409
    break;
  } else {

  }
}
---------
SID [4770] -> Line 6409
#line 6409
break;
---------
SID [4769] -> Line 6408
#line 6408
if ((unsigned long )d == (unsigned long )tmp___99) {
#line 6409
  break;
} else
#line 6408
if (! size2) {
#line 6409
  break;
} else
#line 6408
if ((unsigned long )d == (unsigned long )end2) {
#line 6409
  break;
} else {
#line 6408
  if ((unsigned long )(d - 1) == (unsigned long )end1) {
#line 6408
    tmp___101 = (int const   )*string2;
  } else {
#line 6408
    if ((unsigned long )(d - 1) == (unsigned long )(string2 - 1)) {
#line 6408
      tmp___100 = (int const   )*(end1 - 1);
    } else {
#line 6408
      tmp___100 = (int const   )*(d - 1);
    }
#line 6408
    tmp___101 = tmp___100;
  }
#line 6408
  if ((unsigned long )d == (unsigned long )end1) {
#line 6408
    tmp___103 = (int const   )*string2;
  } else {
#line 6408
    if ((unsigned long )d == (unsigned long )(string2 - 1)) {
#line 6408
      tmp___102 = (int const   )*(end1 - 1);
    } else {
#line 6408
      tmp___102 = (int const   )*d;
    }
#line 6408
    tmp___103 = tmp___102;
  }
#line 6408
  if (((int )re_syntax_table[tmp___101] == 1) != ((int )re_syntax_table[tmp___103] == 1)) {
#line 6409
    break;
  } else {

  }
}
---------
SID [4768] -> Line 6408
#line 6408
tmp___99 = string2;
---------
SID [4767] -> Line 6408
#line 6408
tmp___99 = string1;
---------
SID [4766] -> Line 6408
#line 6408
if (size1) {
#line 6408
  tmp___99 = string1;
} else {
#line 6408
  tmp___99 = string2;
}
---------
SID [4765] -> Line -1
case 27U: ;
---------
SID [4764] -> Line 6403
#line 6403
break;
---------
SID [4763] -> Line 6402
#line 6402
break;
---------
SID [4762] -> Line 6402
#line 6402
*(p1 + 1) = (unsigned char )(mcnt >> 8);
---------
SID [4761] -> Line 6402
#line 6402
*(p1 + 0) = (unsigned char )(mcnt & 255);
---------
SID [4760] -> Line 6402
#line 6402
while (1) {
#line 6402
  *(p1 + 0) = (unsigned char )(mcnt & 255);
#line 6402
  *(p1 + 1) = (unsigned char )(mcnt >> 8);
#line 6402
  break;
}
---------
SID [4759] -> Line 6400
#line 6400
break;
---------
SID [4758] -> Line 6400
#line 6400
p += 2;
---------
SID [4757] -> Line 6400
#line 6400
break;
---------
SID [4756] -> Line 6400
#line 6400
mcnt += (int )((signed char )*(p + 1)) << 8;
---------
SID [4755] -> Line 6400
#line 6400
mcnt = (int )*p & 255;
---------
SID [4754] -> Line 6400
#line 6400
while (1) {
#line 6400
  mcnt = (int )*p & 255;
#line 6400
  mcnt += (int )((signed char )*(p + 1)) << 8;
#line 6400
  break;
}
---------
SID [4753] -> Line 6400
#line 6400
while (1) {
#line 6400
  while (1) {
#line 6400
    mcnt = (int )*p & 255;
#line 6400
    mcnt += (int )((signed char )*(p + 1)) << 8;
#line 6400
    break;
  }
#line 6400
  p += 2;
#line 6400
  break;
}
---------
SID [4752] -> Line 6399
#line 6399
p1 = p + mcnt;
---------
SID [4751] -> Line 6398
#line 6398
break;
---------
SID [4750] -> Line 6398
#line 6398
p += 2;
---------
SID [4749] -> Line 6398
#line 6398
break;
---------
SID [4748] -> Line 6398
#line 6398
mcnt += (int )((signed char )*(p + 1)) << 8;
---------
SID [4747] -> Line 6398
#line 6398
mcnt = (int )*p & 255;
---------
SID [4746] -> Line 6398
#line 6398
while (1) {
#line 6398
  mcnt = (int )*p & 255;
#line 6398
  mcnt += (int )((signed char )*(p + 1)) << 8;
#line 6398
  break;
}
---------
SID [4745] -> Line 6398
case 22U: 
#line 6398
while (1) {
#line 6398
  while (1) {
#line 6398
    mcnt = (int )*p & 255;
#line 6398
    mcnt += (int )((signed char )*(p + 1)) << 8;
#line 6398
    break;
  }
#line 6398
  p += 2;
#line 6398
  break;
}
---------
SID [4744] -> Line 6392
#line 6392
break;
---------
SID [4743] -> Line 6391
#line 6391
p += 4;
---------
SID [4742] -> Line 6387
#line 6387
goto unconditional_jump;
---------
SID [4741] -> Line 6386
#line 6386
break;
---------
SID [4740] -> Line 6386
#line 6386
*((p + 2) + 1) = (unsigned char )(mcnt >> 8);
---------
SID [4739] -> Line 6386
#line 6386
*((p + 2) + 0) = (unsigned char )(mcnt & 255);
---------
SID [4738] -> Line 6386
#line 6386
while (1) {
#line 6386
  *((p + 2) + 0) = (unsigned char )(mcnt & 255);
#line 6386
  *((p + 2) + 1) = (unsigned char )(mcnt >> 8);
#line 6386
  break;
}
---------
SID [4737] -> Line 6385
#line 6385
mcnt --;
---------
SID [4736] -> Line 6383
#line 6383
if (mcnt) {
#line 6385
  mcnt --;
#line 6386
  while (1) {
#line 6386
    *((p + 2) + 0) = (unsigned char )(mcnt & 255);
#line 6386
    *((p + 2) + 1) = (unsigned char )(mcnt >> 8);
#line 6386
    break;
  }
#line 6387
  goto unconditional_jump;
} else {
#line 6391
  p += 4;
}
---------
SID [4735] -> Line 6379
#line 6379
break;
---------
SID [4734] -> Line 6379
#line 6379
mcnt += (int )((signed char )*((p + 2) + 1)) << 8;
---------
SID [4733] -> Line 6379
#line 6379
mcnt = (int )*(p + 2) & 255;
---------
SID [4732] -> Line 6379
case 21U: 
#line 6379
while (1) {
#line 6379
  mcnt = (int )*(p + 2) & 255;
#line 6379
  mcnt += (int )((signed char )*((p + 2) + 1)) << 8;
#line 6379
  break;
}
---------
SID [4731] -> Line 6376
#line 6376
break;
---------
SID [4730] -> Line -1

---------
SID [4729] -> Line 6374
#line 6374
goto on_failure;
---------
SID [4728] -> Line 6373
#line 6373
*(p + 3) = (unsigned char)0;
---------
SID [4727] -> Line 6372
#line 6372
*(p + 2) = (unsigned char)0;
---------
SID [4726] -> Line 6369
#line 6369
if (mcnt == 0) {
#line 6372
  *(p + 2) = (unsigned char)0;
#line 6373
  *(p + 3) = (unsigned char)0;
#line 6374
  goto on_failure;
} else {

}
---------
SID [4725] -> Line 6366
#line 6366
break;
---------
SID [4724] -> Line 6366
#line 6366
p += 2;
---------
SID [4723] -> Line 6366
#line 6366
break;
---------
SID [4722] -> Line 6366
#line 6366
*(p + 1) = (unsigned char )(mcnt >> 8);
---------
SID [4721] -> Line 6366
#line 6366
*(p + 0) = (unsigned char )(mcnt & 255);
---------
SID [4720] -> Line 6366
#line 6366
while (1) {
#line 6366
  *(p + 0) = (unsigned char )(mcnt & 255);
#line 6366
  *(p + 1) = (unsigned char )(mcnt >> 8);
#line 6366
  break;
}
---------
SID [4719] -> Line 6366
#line 6366
while (1) {
#line 6366
  while (1) {
#line 6366
    *(p + 0) = (unsigned char )(mcnt & 255);
#line 6366
    *(p + 1) = (unsigned char )(mcnt >> 8);
#line 6366
    break;
  }
#line 6366
  p += 2;
#line 6366
  break;
}
---------
SID [4718] -> Line 6365
#line 6365
p += 2;
---------
SID [4717] -> Line 6364
#line 6364
mcnt --;
---------
SID [4716] -> Line 6362
#line 6362
if (mcnt > 0) {
#line 6364
  mcnt --;
#line 6365
  p += 2;
#line 6366
  while (1) {
#line 6366
    while (1) {
#line 6366
      *(p + 0) = (unsigned char )(mcnt & 255);
#line 6366
      *(p + 1) = (unsigned char )(mcnt >> 8);
#line 6366
      break;
    }
#line 6366
    p += 2;
#line 6366
    break;
  }
} else
#line 6369
if (mcnt == 0) {
#line 6372
  *(p + 2) = (unsigned char)0;
#line 6373
  *(p + 3) = (unsigned char)0;
#line 6374
  goto on_failure;
} else {

}
---------
SID [4715] -> Line 6357
#line 6357
break;
---------
SID [4714] -> Line 6357
#line 6357
mcnt += (int )((signed char )*((p + 2) + 1)) << 8;
---------
SID [4713] -> Line 6357
#line 6357
mcnt = (int )*(p + 2) & 255;
---------
SID [4712] -> Line 6357
case 20U: 
#line 6357
while (1) {
#line 6357
  mcnt = (int )*(p + 2) & 255;
#line 6357
  mcnt += (int )((signed char )*((p + 2) + 1)) << 8;
#line 6357
  break;
}
---------
SID [4711] -> Line 6352
#line 6352
break;
---------
SID [4710] -> Line 6351
#line 6351
break;
---------
SID [4709] -> Line 6351
#line 6351
*(fail_stack.stack + tmp___98) = (fail_stack_elt_t )0;
---------
SID [4708] -> Line 6351
#line 6351
(fail_stack.avail) ++;
---------
SID [4707] -> Line 6351
#line 6351
tmp___98 = fail_stack.avail;
---------
SID [4706] -> Line 6351
#line 6351
*(fail_stack.stack + tmp___97) = (fail_stack_elt_t )0;
---------
SID [4705] -> Line 6351
#line 6351
(fail_stack.avail) ++;
---------
SID [4704] -> Line 6351
#line 6351
tmp___97 = fail_stack.avail;
---------
SID [4703] -> Line 6351
#line 6351
*(fail_stack.stack + tmp___96) = (fail_stack_elt_t )highest_active_reg;
---------
SID [4702] -> Line 6351
#line 6351
(fail_stack.avail) ++;
---------
SID [4701] -> Line 6351
#line 6351
tmp___96 = fail_stack.avail;
---------
SID [4700] -> Line 6351
#line 6351
*(fail_stack.stack + tmp___95) = (fail_stack_elt_t )lowest_active_reg;
---------
SID [4699] -> Line 6351
#line 6351
(fail_stack.avail) ++;
---------
SID [4698] -> Line 6351
#line 6351
tmp___95 = fail_stack.avail;
---------
SID [4697] -> Line 6351
#line 6351
this_reg___4 ++;
---------
SID [4696] -> Line 6351
#line 6351
*(fail_stack.stack + tmp___94) = (reg_info + this_reg___4)->word;
---------
SID [4695] -> Line 6351
#line 6351
(fail_stack.avail) ++;
---------
SID [4694] -> Line 6351
#line 6351
tmp___94 = fail_stack.avail;
---------
SID [4693] -> Line 6351
#line 6351
*(fail_stack.stack + tmp___93) = (fail_stack_elt_t )*(regend + this_reg___4);
---------
SID [4692] -> Line 6351
#line 6351
(fail_stack.avail) ++;
---------
SID [4691] -> Line 6351
#line 6351
tmp___93 = fail_stack.avail;
---------
SID [4690] -> Line 6351
#line 6351
*(fail_stack.stack + tmp___92) = (fail_stack_elt_t )*(regstart + this_reg___4);
---------
SID [4689] -> Line 6351
#line 6351
(fail_stack.avail) ++;
---------
SID [4688] -> Line 6351
#line 6351
tmp___92 = fail_stack.avail;
---------
SID [4687] -> Line 6351
#line 6351
break;
---------
SID [4686] -> Line -1

---------
SID [4685] -> Line 6351
#line 6351
if ((unsigned int )this_reg___4 <= highest_active_reg) {

} else {
#line 6351
  break;
}
---------
SID [4684] -> Line 6351
#line 6351
while ((unsigned int )this_reg___4 <= highest_active_reg) {
#line 6351
  tmp___92 = fail_stack.avail;
#line 6351
  (fail_stack.avail) ++;
#line 6351
  *(fail_stack.stack + tmp___92) = (fail_stack_elt_t )*(regstart + this_reg___4);
#line 6351
  tmp___93 = fail_stack.avail;
#line 6351
  (fail_stack.avail) ++;
#line 6351
  *(fail_stack.stack + tmp___93) = (fail_stack_elt_t )*(regend + this_reg___4);
#line 6351
  tmp___94 = fail_stack.avail;
#line 6351
  (fail_stack.avail) ++;
#line 6351
  *(fail_stack.stack + tmp___94) = (reg_info + this_reg___4)->word;
#line 6351
  this_reg___4 ++;
}
---------
SID [4683] -> Line 6351
#line 6351
this_reg___4 = (int )lowest_active_reg;
---------
SID [4682] -> Line 6351
#line 6351
return (-2);
---------
SID [4681] -> Line -1

---------
SID [4680] -> Line 6351
#line 6351
if (tmp___91) {

} else {
#line 6351
  return (-2);
}
---------
SID [4679] -> Line 6351
#line 6351
tmp___91 = tmp___90;
---------
SID [4678] -> Line 6351
#line 6351
tmp___90 = 1;
---------
SID [4677] -> Line 6351
#line 6351
fail_stack.size <<= 1;
---------
SID [4676] -> Line 6351
#line 6351
tmp___90 = 0;
---------
SID [4675] -> Line 6351
#line 6351
if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
#line 6351
  tmp___90 = 0;
} else {
#line 6351
  fail_stack.size <<= 1;
#line 6351
  tmp___90 = 1;
}
---------
SID [4674] -> Line 6351
#line 6351
fail_stack.stack = (fail_stack_elt_t *)destination___3;
---------
SID [4673] -> Line 6351
#line 6351
memcpy((void */* __restrict  */)destination___3,
       (void const   */* __restrict  */)fail_stack.stack,
       (unsigned long )fail_stack.size * sizeof(fail_stack_elt_t ));
---------
SID [4672] -> Line 6351
#line 6351
destination___3 = (char *)tmp___89;
---------
SID [4671] -> Line 6351
#line 6351
tmp___89 = __builtin_alloca((unsigned long )(fail_stack.size << 1) * sizeof(fail_stack_elt_t ));
---------
SID [4670] -> Line 6351
#line 6351
tmp___91 = 0;
---------
SID [4669] -> Line 6351
#line 6351
if (fail_stack.size > (unsigned int )re_max_failures * ((num_regs - 1U) * 3U + 4U)) {
#line 6351
  tmp___91 = 0;
} else {
#line 6351
  tmp___89 = __builtin_alloca((unsigned long )(fail_stack.size << 1) * sizeof(fail_stack_elt_t ));
#line 6351
  destination___3 = (char *)tmp___89;
#line 6351
  memcpy((void */* __restrict  */)destination___3,
         (void const   */* __restrict  */)fail_stack.stack,
         (unsigned long )fail_stack.size * sizeof(fail_stack_elt_t ));
#line 6351
  fail_stack.stack = (fail_stack_elt_t *)destination___3;
#line 6351
  if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
#line 6351
    tmp___90 = 0;
  } else {
#line 6351
    fail_stack.size <<= 1;
#line 6351
    tmp___90 = 1;
  }
#line 6351
  tmp___91 = tmp___90;
}
---------
SID [4668] -> Line 6351
#line 6351
break;
---------
SID [4667] -> Line -1

---------
SID [4666] -> Line 6351
#line 6351
if (fail_stack.size - fail_stack.avail < ((highest_active_reg - lowest_active_reg) + 1U) * 3U + 4U) {

} else {
#line 6351
  break;
}
---------
SID [4665] -> Line 6351
#line 6351
while (fail_stack.size - fail_stack.avail < ((highest_active_reg - lowest_active_reg) + 1U) * 3U + 4U) {
#line 6351
  if (fail_stack.size > (unsigned int )re_max_failures * ((num_regs - 1U) * 3U + 4U)) {
#line 6351
    tmp___91 = 0;
  } else {
#line 6351
    tmp___89 = __builtin_alloca((unsigned long )(fail_stack.size << 1) * sizeof(fail_stack_elt_t ));
#line 6351
    destination___3 = (char *)tmp___89;
#line 6351
    memcpy((void */* __restrict  */)destination___3,
           (void const   */* __restrict  */)fail_stack.stack,
           (unsigned long )fail_stack.size * sizeof(fail_stack_elt_t ));
#line 6351
    fail_stack.stack = (fail_stack_elt_t *)destination___3;
#line 6351
    if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
#line 6351
      tmp___90 = 0;
    } else {
#line 6351
      fail_stack.size <<= 1;
#line 6351
      tmp___90 = 1;
    }
#line 6351
    tmp___91 = tmp___90;
  }
#line 6351
  if (tmp___91) {

  } else {
#line 6351
    return (-2);
  }
}
---------
SID [4664] -> Line 6351
#line 6351
while (1) {
#line 6351
  while (fail_stack.size - fail_stack.avail < ((highest_active_reg - lowest_active_reg) + 1U) * 3U + 4U) {
#line 6351
    if (fail_stack.size > (unsigned int )re_max_failures * ((num_regs - 1U) * 3U + 4U)) {
#line 6351
      tmp___91 = 0;
    } else {
#line 6351
      tmp___89 = __builtin_alloca((unsigned long )(fail_stack.size << 1) * sizeof(fail_stack_elt_t ));
#line 6351
      destination___3 = (char *)tmp___89;
#line 6351
      memcpy((void */* __restrict  */)destination___3,
             (void const   */* __restrict  */)fail_stack.stack,
             (unsigned long )fail_stack.size * sizeof(fail_stack_elt_t ));
#line 6351
      fail_stack.stack = (fail_stack_elt_t *)destination___3;
#line 6351
      if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
#line 6351
        tmp___90 = 0;
      } else {
#line 6351
        fail_stack.size <<= 1;
#line 6351
        tmp___90 = 1;
      }
#line 6351
      tmp___91 = tmp___90;
    }
#line 6351
    if (tmp___91) {

    } else {
#line 6351
      return (-2);
    }
  }
#line 6351
  this_reg___4 = (int )lowest_active_reg;
#line 6351
  while ((unsigned int )this_reg___4 <= highest_active_reg) {
#line 6351
    tmp___92 = fail_stack.avail;
#line 6351
    (fail_stack.avail) ++;
#line 6351
    *(fail_stack.stack + tmp___92) = (fail_stack_elt_t )*(regstart + this_reg___4);
#line 6351
    tmp___93 = fail_stack.avail;
#line 6351
    (fail_stack.avail) ++;
#line 6351
    *(fail_stack.stack + tmp___93) = (fail_stack_elt_t )*(regend + this_reg___4);
#line 6351
    tmp___94 = fail_stack.avail;
#line 6351
    (fail_stack.avail) ++;
#line 6351
    *(fail_stack.stack + tmp___94) = (reg_info + this_reg___4)->word;
#line 6351
    this_reg___4 ++;
  }
#line 6351
  tmp___95 = fail_stack.avail;
#line 6351
  (fail_stack.avail) ++;
#line 6351
  *(fail_stack.stack + tmp___95) = (fail_stack_elt_t )lowest_active_reg;
#line 6351
  tmp___96 = fail_stack.avail;
#line 6351
  (fail_stack.avail) ++;
#line 6351
  *(fail_stack.stack + tmp___96) = (fail_stack_elt_t )highest_active_reg;
#line 6351
  tmp___97 = fail_stack.avail;
#line 6351
  (fail_stack.avail) ++;
#line 6351
  *(fail_stack.stack + tmp___97) = (fail_stack_elt_t )0;
#line 6351
  tmp___98 = fail_stack.avail;
#line 6351
  (fail_stack.avail) ++;
#line 6351
  *(fail_stack.stack + tmp___98) = (fail_stack_elt_t )0;
#line 6351
  break;
}
---------
SID [4663] -> Line -1
case 19U: ;
---------
SID [4662] -> Line 6339
#line 6339
goto unconditional_jump;
---------
SID [4661] -> Line 6338
#line 6338
break;
---------
SID [4660] -> Line 6338
#line 6338
*(fail_stack.stack + tmp___88) = (fail_stack_elt_t )0;
---------
SID [4659] -> Line 6338
#line 6338
(fail_stack.avail) ++;
---------
SID [4658] -> Line 6338
#line 6338
tmp___88 = fail_stack.avail;
---------
SID [4657] -> Line 6338
#line 6338
*(fail_stack.stack + tmp___87) = (fail_stack_elt_t )0;
---------
SID [4656] -> Line 6338
#line 6338
(fail_stack.avail) ++;
---------
SID [4655] -> Line 6338
#line 6338
tmp___87 = fail_stack.avail;
---------
SID [4654] -> Line 6338
#line 6338
*(fail_stack.stack + tmp___86) = (fail_stack_elt_t )highest_active_reg;
---------
SID [4653] -> Line 6338
#line 6338
(fail_stack.avail) ++;
---------
SID [4652] -> Line 6338
#line 6338
tmp___86 = fail_stack.avail;
---------
SID [4651] -> Line 6338
#line 6338
*(fail_stack.stack + tmp___85) = (fail_stack_elt_t )lowest_active_reg;
---------
SID [4650] -> Line 6338
#line 6338
(fail_stack.avail) ++;
---------
SID [4649] -> Line 6338
#line 6338
tmp___85 = fail_stack.avail;
---------
SID [4648] -> Line 6338
#line 6338
this_reg___3 ++;
---------
SID [4647] -> Line 6338
#line 6338
*(fail_stack.stack + tmp___84) = (reg_info + this_reg___3)->word;
---------
SID [4646] -> Line 6338
#line 6338
(fail_stack.avail) ++;
---------
SID [4645] -> Line 6338
#line 6338
tmp___84 = fail_stack.avail;
---------
SID [4644] -> Line 6338
#line 6338
*(fail_stack.stack + tmp___83) = (fail_stack_elt_t )*(regend + this_reg___3);
---------
SID [4643] -> Line 6338
#line 6338
(fail_stack.avail) ++;
---------
SID [4642] -> Line 6338
#line 6338
tmp___83 = fail_stack.avail;
---------
SID [4641] -> Line 6338
#line 6338
*(fail_stack.stack + tmp___82) = (fail_stack_elt_t )*(regstart + this_reg___3);
---------
SID [4640] -> Line 6338
#line 6338
(fail_stack.avail) ++;
---------
SID [4639] -> Line 6338
#line 6338
tmp___82 = fail_stack.avail;
---------
SID [4638] -> Line 6338
#line 6338
break;
---------
SID [4637] -> Line -1

---------
SID [4636] -> Line 6338
#line 6338
if ((unsigned int )this_reg___3 <= highest_active_reg) {

} else {
#line 6338
  break;
}
---------
SID [4635] -> Line 6338
#line 6338
while ((unsigned int )this_reg___3 <= highest_active_reg) {
#line 6338
  tmp___82 = fail_stack.avail;
#line 6338
  (fail_stack.avail) ++;
#line 6338
  *(fail_stack.stack + tmp___82) = (fail_stack_elt_t )*(regstart + this_reg___3);
#line 6338
  tmp___83 = fail_stack.avail;
#line 6338
  (fail_stack.avail) ++;
#line 6338
  *(fail_stack.stack + tmp___83) = (fail_stack_elt_t )*(regend + this_reg___3);
#line 6338
  tmp___84 = fail_stack.avail;
#line 6338
  (fail_stack.avail) ++;
#line 6338
  *(fail_stack.stack + tmp___84) = (reg_info + this_reg___3)->word;
#line 6338
  this_reg___3 ++;
}
---------
SID [4634] -> Line 6338
#line 6338
this_reg___3 = (int )lowest_active_reg;
---------
SID [4633] -> Line 6338
#line 6338
return (-2);
---------
SID [4632] -> Line -1

---------
SID [4631] -> Line 6338
#line 6338
if (tmp___81) {

} else {
#line 6338
  return (-2);
}
---------
SID [4630] -> Line 6338
#line 6338
tmp___81 = tmp___80;
---------
SID [4629] -> Line 6338
#line 6338
tmp___80 = 1;
---------
SID [4628] -> Line 6338
#line 6338
fail_stack.size <<= 1;
---------
SID [4627] -> Line 6338
#line 6338
tmp___80 = 0;
---------
SID [4626] -> Line 6338
#line 6338
if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
#line 6338
  tmp___80 = 0;
} else {
#line 6338
  fail_stack.size <<= 1;
#line 6338
  tmp___80 = 1;
}
---------
SID [4625] -> Line 6338
#line 6338
fail_stack.stack = (fail_stack_elt_t *)destination___2;
---------
SID [4624] -> Line 6338
#line 6338
memcpy((void */* __restrict  */)destination___2,
       (void const   */* __restrict  */)fail_stack.stack,
       (unsigned long )fail_stack.size * sizeof(fail_stack_elt_t ));
---------
SID [4623] -> Line 6338
#line 6338
destination___2 = (char *)tmp___79;
---------
SID [4622] -> Line 6338
#line 6338
tmp___79 = __builtin_alloca((unsigned long )(fail_stack.size << 1) * sizeof(fail_stack_elt_t ));
---------
SID [4621] -> Line 6338
#line 6338
tmp___81 = 0;
---------
SID [4620] -> Line 6338
#line 6338
if (fail_stack.size > (unsigned int )re_max_failures * ((num_regs - 1U) * 3U + 4U)) {
#line 6338
  tmp___81 = 0;
} else {
#line 6338
  tmp___79 = __builtin_alloca((unsigned long )(fail_stack.size << 1) * sizeof(fail_stack_elt_t ));
#line 6338
  destination___2 = (char *)tmp___79;
#line 6338
  memcpy((void */* __restrict  */)destination___2,
         (void const   */* __restrict  */)fail_stack.stack,
         (unsigned long )fail_stack.size * sizeof(fail_stack_elt_t ));
#line 6338
  fail_stack.stack = (fail_stack_elt_t *)destination___2;
#line 6338
  if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
#line 6338
    tmp___80 = 0;
  } else {
#line 6338
    fail_stack.size <<= 1;
#line 6338
    tmp___80 = 1;
  }
#line 6338
  tmp___81 = tmp___80;
}
---------
SID [4619] -> Line 6338
#line 6338
break;
---------
SID [4618] -> Line -1

---------
SID [4617] -> Line 6338
#line 6338
if (fail_stack.size - fail_stack.avail < ((highest_active_reg - lowest_active_reg) + 1U) * 3U + 4U) {

} else {
#line 6338
  break;
}
---------
SID [4616] -> Line 6338
#line 6338
while (fail_stack.size - fail_stack.avail < ((highest_active_reg - lowest_active_reg) + 1U) * 3U + 4U) {
#line 6338
  if (fail_stack.size > (unsigned int )re_max_failures * ((num_regs - 1U) * 3U + 4U)) {
#line 6338
    tmp___81 = 0;
  } else {
#line 6338
    tmp___79 = __builtin_alloca((unsigned long )(fail_stack.size << 1) * sizeof(fail_stack_elt_t ));
#line 6338
    destination___2 = (char *)tmp___79;
#line 6338
    memcpy((void */* __restrict  */)destination___2,
           (void const   */* __restrict  */)fail_stack.stack,
           (unsigned long )fail_stack.size * sizeof(fail_stack_elt_t ));
#line 6338
    fail_stack.stack = (fail_stack_elt_t *)destination___2;
#line 6338
    if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
#line 6338
      tmp___80 = 0;
    } else {
#line 6338
      fail_stack.size <<= 1;
#line 6338
      tmp___80 = 1;
    }
#line 6338
    tmp___81 = tmp___80;
  }
#line 6338
  if (tmp___81) {

  } else {
#line 6338
    return (-2);
  }
}
---------
SID [4615] -> Line 6338
#line 6338
while (1) {
#line 6338
  while (fail_stack.size - fail_stack.avail < ((highest_active_reg - lowest_active_reg) + 1U) * 3U + 4U) {
#line 6338
    if (fail_stack.size > (unsigned int )re_max_failures * ((num_regs - 1U) * 3U + 4U)) {
#line 6338
      tmp___81 = 0;
    } else {
#line 6338
      tmp___79 = __builtin_alloca((unsigned long )(fail_stack.size << 1) * sizeof(fail_stack_elt_t ));
#line 6338
      destination___2 = (char *)tmp___79;
#line 6338
      memcpy((void */* __restrict  */)destination___2,
             (void const   */* __restrict  */)fail_stack.stack,
             (unsigned long )fail_stack.size * sizeof(fail_stack_elt_t ));
#line 6338
      fail_stack.stack = (fail_stack_elt_t *)destination___2;
#line 6338
      if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
#line 6338
        tmp___80 = 0;
      } else {
#line 6338
        fail_stack.size <<= 1;
#line 6338
        tmp___80 = 1;
      }
#line 6338
      tmp___81 = tmp___80;
    }
#line 6338
    if (tmp___81) {

    } else {
#line 6338
      return (-2);
    }
  }
#line 6338
  this_reg___3 = (int )lowest_active_reg;
#line 6338
  while ((unsigned int )this_reg___3 <= highest_active_reg) {
#line 6338
    tmp___82 = fail_stack.avail;
#line 6338
    (fail_stack.avail) ++;
#line 6338
    *(fail_stack.stack + tmp___82) = (fail_stack_elt_t )*(regstart + this_reg___3);
#line 6338
    tmp___83 = fail_stack.avail;
#line 6338
    (fail_stack.avail) ++;
#line 6338
    *(fail_stack.stack + tmp___83) = (fail_stack_elt_t )*(regend + this_reg___3);
#line 6338
    tmp___84 = fail_stack.avail;
#line 6338
    (fail_stack.avail) ++;
#line 6338
    *(fail_stack.stack + tmp___84) = (reg_info + this_reg___3)->word;
#line 6338
    this_reg___3 ++;
  }
#line 6338
  tmp___85 = fail_stack.avail;
#line 6338
  (fail_stack.avail) ++;
#line 6338
  *(fail_stack.stack + tmp___85) = (fail_stack_elt_t )lowest_active_reg;
#line 6338
  tmp___86 = fail_stack.avail;
#line 6338
  (fail_stack.avail) ++;
#line 6338
  *(fail_stack.stack + tmp___86) = (fail_stack_elt_t )highest_active_reg;
#line 6338
  tmp___87 = fail_stack.avail;
#line 6338
  (fail_stack.avail) ++;
#line 6338
  *(fail_stack.stack + tmp___87) = (fail_stack_elt_t )0;
#line 6338
  tmp___88 = fail_stack.avail;
#line 6338
  (fail_stack.avail) ++;
#line 6338
  *(fail_stack.stack + tmp___88) = (fail_stack_elt_t )0;
#line 6338
  break;
}
---------
SID [4614] -> Line -1
case 18U: ;
---------
SID [4613] -> Line 6326
#line 6326
goto unconditional_jump;
---------
SID [4612] -> Line -1
case 13U: ;
---------
SID [4611] -> Line 6319
#line 6319
break;
---------
SID [4610] -> Line 6317
#line 6317
p += mcnt;
---------
SID [4609] -> Line 6315
#line 6315
break;
---------
SID [4608] -> Line 6315
#line 6315
p += 2;
---------
SID [4607] -> Line 6315
#line 6315
break;
---------
SID [4606] -> Line 6315
#line 6315
mcnt += (int )((signed char )*(p + 1)) << 8;
---------
SID [4605] -> Line 6315
#line 6315
mcnt = (int )*p & 255;
---------
SID [4604] -> Line 6315
#line 6315
while (1) {
#line 6315
  mcnt = (int )*p & 255;
#line 6315
  mcnt += (int )((signed char )*(p + 1)) << 8;
#line 6315
  break;
}
---------
SID [4603] -> Line 6315
unconditional_jump: 
case 12U: 
#line 6315
while (1) {
#line 6315
  while (1) {
#line 6315
    mcnt = (int )*p & 255;
#line 6315
    mcnt += (int )((signed char )*(p + 1)) << 8;
#line 6315
    break;
  }
#line 6315
  p += 2;
#line 6315
  break;
}
---------
SID [4602] -> Line 6305
#line 6305
this_reg___2 --;
---------
SID [4601] -> Line 6305
#line 6305
*(reg_dummy + this_reg___2) = (char const   *)*(fail_stack.stack + fail_stack.avail);
---------
SID [4600] -> Line 6305
#line 6305
(fail_stack.avail) --;
---------
SID [4599] -> Line 6305
#line 6305
*(reg_dummy + this_reg___2) = (char const   *)*(fail_stack.stack + fail_stack.avail);
---------
SID [4598] -> Line 6305
#line 6305
(fail_stack.avail) --;
---------
SID [4597] -> Line 6305
#line 6305
(reg_info_dummy + this_reg___2)->word = *(fail_stack.stack + fail_stack.avail);
---------
SID [4596] -> Line 6305
#line 6305
(fail_stack.avail) --;
---------
SID [4595] -> Line 6305
#line 6305
break;
---------
SID [4594] -> Line -1

---------
SID [4593] -> Line 6305
#line 6305
if ((unsigned int )this_reg___2 >= dummy_low_reg) {

} else {
#line 6305
  break;
}
---------
SID [4592] -> Line 6305
#line 6305
while ((unsigned int )this_reg___2 >= dummy_low_reg) {
#line 6305
  (fail_stack.avail) --;
#line 6305
  (reg_info_dummy + this_reg___2)->word = *(fail_stack.stack + fail_stack.avail);
#line 6305
  (fail_stack.avail) --;
#line 6305
  *(reg_dummy + this_reg___2) = (char const   *)*(fail_stack.stack + fail_stack.avail);
#line 6305
  (fail_stack.avail) --;
#line 6305
  *(reg_dummy + this_reg___2) = (char const   *)*(fail_stack.stack + fail_stack.avail);
#line 6305
  this_reg___2 --;
}
---------
SID [4591] -> Line 6305
#line 6305
this_reg___2 = (int )dummy_high_reg;
---------
SID [4590] -> Line 6305
#line 6305
dummy_low_reg = (unsigned int )*(fail_stack.stack + fail_stack.avail);
---------
SID [4589] -> Line 6305
#line 6305
(fail_stack.avail) --;
---------
SID [4588] -> Line 6305
#line 6305
dummy_high_reg = (unsigned int )*(fail_stack.stack + fail_stack.avail);
---------
SID [4587] -> Line 6305
#line 6305
(fail_stack.avail) --;
---------
SID [4586] -> Line 6305
#line 6305
pdummy = (unsigned char *)*(fail_stack.stack + fail_stack.avail);
---------
SID [4585] -> Line 6305
#line 6305
(fail_stack.avail) --;
---------
SID [4584] -> Line -1

---------
SID [4583] -> Line 6305
#line 6305
sdummy = (char const   *)string_temp;
---------
SID [4582] -> Line 6305
#line 6305
if ((unsigned long )string_temp != (unsigned long )((void *)0)) {
#line 6305
  sdummy = (char const   *)string_temp;
} else {

}
---------
SID [4581] -> Line 6305
#line 6305
string_temp = *(fail_stack.stack + fail_stack.avail);
---------
SID [4580] -> Line 6305
case 16U: 
#line 6305
(fail_stack.avail) --;
---------
SID [4579] -> Line -1

---------
SID [4578] -> Line 6282
#line 6282
goto unconditional_jump;
---------
SID [4577] -> Line 6280
#line 6280
*(p + -1) = (unsigned char)12;
---------
SID [4576] -> Line 6278
#line 6278
if ((unsigned int )((re_opcode_t )*(p + -1)) != 16U) {
#line 6280
  *(p + -1) = (unsigned char)12;
#line 6282
  goto unconditional_jump;
} else {

}
---------
SID [4575] -> Line 6277
#line 6277
p -= 2;
---------
SID [4574] -> Line -1

---------
SID [4573] -> Line -1

---------
SID [4572] -> Line -1

---------
SID [4571] -> Line -1

---------
SID [4570] -> Line 6271
#line 6271
*(p + -3) = (unsigned char)16;
---------
SID [4569] -> Line 6269
#line 6269
if (! not___0) {
#line 6271
  *(p + -3) = (unsigned char)16;
} else {

}
---------
SID [4568] -> Line -1

---------
SID [4567] -> Line -1

---------
SID [4566] -> Line 6265
#line 6265
not___0 = ! not___0;
---------
SID [4565] -> Line 6263
#line 6263
if ((int )*(p1 + (5 + (int )c___0 / 8)) & (1 << (int )c___0 % 8)) {
#line 6265
  not___0 = ! not___0;
} else {

}
---------
SID [4564] -> Line 6263
#line 6263
if ((int )c___0 < (int )((unsigned char )((int )*(p1 + 4) * 8))) {
#line 6263
  if ((int )*(p1 + (5 + (int )c___0 / 8)) & (1 << (int )c___0 % 8)) {
#line 6265
    not___0 = ! not___0;
  } else {

  }
} else {

}
---------
SID [4563] -> Line 6261
_L___4: /* CIL Label */ 
#line 6261
not___0 = (unsigned int )((re_opcode_t )*(p1 + 3)) == 4U;
---------
SID [4562] -> Line 6258
#line 6258
if ((unsigned int )((re_opcode_t )*(p1 + 3)) == 4U) {
  _L___4: /* CIL Label */ 
#line 6261
  not___0 = (unsigned int )((re_opcode_t )*(p1 + 3)) == 4U;
#line 6263
  if ((int )c___0 < (int )((unsigned char )((int )*(p1 + 4) * 8))) {
#line 6263
    if ((int )*(p1 + (5 + (int )c___0 / 8)) & (1 << (int )c___0 % 8)) {
#line 6265
      not___0 = ! not___0;
    } else {

    }
  } else {

  }
#line 6269
  if (! not___0) {
#line 6271
    *(p + -3) = (unsigned char)16;
  } else {

  }
} else {

}
---------
SID [4561] -> Line 6258
#line 6258
goto _L___4;
---------
SID [4560] -> Line 6258
_L___5: /* CIL Label */ 
#line 6258
if ((unsigned int )((re_opcode_t )*(p1 + 3)) == 3U) {
#line 6258
  goto _L___4;
} else
#line 6258
if ((unsigned int )((re_opcode_t )*(p1 + 3)) == 4U) {
  _L___4: /* CIL Label */ 
#line 6261
  not___0 = (unsigned int )((re_opcode_t )*(p1 + 3)) == 4U;
#line 6263
  if ((int )c___0 < (int )((unsigned char )((int )*(p1 + 4) * 8))) {
#line 6263
    if ((int )*(p1 + (5 + (int )c___0 / 8)) & (1 << (int )c___0 % 8)) {
#line 6265
      not___0 = ! not___0;
    } else {

    }
  } else {

  }
#line 6269
  if (! not___0) {
#line 6271
    *(p + -3) = (unsigned char)16;
  } else {

  }
} else {

}
---------
SID [4559] -> Line 6251
#line 6251
goto _L___5;
---------
SID [4558] -> Line 6253
#line 6253
*(p + -3) = (unsigned char)16;
---------
SID [4557] -> Line 6251
#line 6251
if ((int )*(p1 + 5) != (int )c___0) {
#line 6253
  *(p + -3) = (unsigned char)16;
} else {
#line 6251
  goto _L___5;
}
---------
SID [4556] -> Line 6251
#line 6251
if ((unsigned int )((re_opcode_t )*(p1 + 3)) == 1U) {
#line 6251
  if ((int )*(p1 + 5) != (int )c___0) {
#line 6253
    *(p + -3) = (unsigned char)16;
  } else {
#line 6251
    goto _L___5;
  }
} else
_L___5: /* CIL Label */ 
#line 6258
if ((unsigned int )((re_opcode_t )*(p1 + 3)) == 3U) {
#line 6258
  goto _L___4;
} else
#line 6258
if ((unsigned int )((re_opcode_t )*(p1 + 3)) == 4U) {
  _L___4: /* CIL Label */ 
#line 6261
  not___0 = (unsigned int )((re_opcode_t )*(p1 + 3)) == 4U;
#line 6263
  if ((int )c___0 < (int )((unsigned char )((int )*(p1 + 4) * 8))) {
#line 6263
    if ((int )*(p1 + (5 + (int )c___0 / 8)) & (1 << (int )c___0 % 8)) {
#line 6265
      not___0 = ! not___0;
    } else {

    }
  } else {

  }
#line 6269
  if (! not___0) {
#line 6271
    *(p + -3) = (unsigned char)16;
  } else {

  }
} else {

}
---------
SID [4555] -> Line 6246
#line 6246
p1 = p + mcnt;
---------
SID [4554] -> Line 6244
#line 6244
c___0 = (unsigned char )tmp___78;
---------
SID [4553] -> Line 6244
#line 6244
tmp___78 = (int )*(p2 + 2);
---------
SID [4552] -> Line 6244
#line 6244
tmp___78 = '\n';
---------
SID [4551] -> Line 6244
_L___6: /* CIL Label */ 
#line 6244
if ((int )*p2 == 9) {
#line 6244
  tmp___78 = '\n';
} else {
#line 6244
  tmp___78 = (int )*(p2 + 2);
}
---------
SID [4550] -> Line 6241
#line 6241
if ((unsigned int )((re_opcode_t )*p2) == 9U) {
  _L___6: /* CIL Label */ 
#line 6244
  if ((int )*p2 == 9) {
#line 6244
    tmp___78 = '\n';
  } else {
#line 6244
    tmp___78 = (int )*(p2 + 2);
  }
#line 6244
  c___0 = (unsigned char )tmp___78;
#line 6246
  p1 = p + mcnt;
#line 6251
  if ((unsigned int )((re_opcode_t )*(p1 + 3)) == 1U) {
#line 6251
    if ((int )*(p1 + 5) != (int )c___0) {
#line 6253
      *(p + -3) = (unsigned char)16;
    } else {
#line 6251
      goto _L___5;
    }
  } else
  _L___5: /* CIL Label */ 
#line 6258
  if ((unsigned int )((re_opcode_t )*(p1 + 3)) == 3U) {
#line 6258
    goto _L___4;
  } else
#line 6258
  if ((unsigned int )((re_opcode_t )*(p1 + 3)) == 4U) {
    _L___4: /* CIL Label */ 
#line 6261
    not___0 = (unsigned int )((re_opcode_t )*(p1 + 3)) == 4U;
#line 6263
    if ((int )c___0 < (int )((unsigned char )((int )*(p1 + 4) * 8))) {
#line 6263
      if ((int )*(p1 + (5 + (int )c___0 / 8)) & (1 << (int )c___0 % 8)) {
#line 6265
        not___0 = ! not___0;
      } else {

      }
    } else {

    }
#line 6269
    if (! not___0) {
#line 6271
      *(p + -3) = (unsigned char)16;
    } else {

    }
  } else {

  }
} else {

}
---------
SID [4549] -> Line 6241
#line 6241
if (bufp->newline_anchor) {
#line 6241
  if ((unsigned int )((re_opcode_t )*p2) == 9U) {
    _L___6: /* CIL Label */ 
#line 6244
    if ((int )*p2 == 9) {
#line 6244
      tmp___78 = '\n';
    } else {
#line 6244
      tmp___78 = (int )*(p2 + 2);
    }
#line 6244
    c___0 = (unsigned char )tmp___78;
#line 6246
    p1 = p + mcnt;
#line 6251
    if ((unsigned int )((re_opcode_t )*(p1 + 3)) == 1U) {
#line 6251
      if ((int )*(p1 + 5) != (int )c___0) {
#line 6253
        *(p + -3) = (unsigned char)16;
      } else {
#line 6251
        goto _L___5;
      }
    } else
    _L___5: /* CIL Label */ 
#line 6258
    if ((unsigned int )((re_opcode_t )*(p1 + 3)) == 3U) {
#line 6258
      goto _L___4;
    } else
#line 6258
    if ((unsigned int )((re_opcode_t )*(p1 + 3)) == 4U) {
      _L___4: /* CIL Label */ 
#line 6261
      not___0 = (unsigned int )((re_opcode_t )*(p1 + 3)) == 4U;
#line 6263
      if ((int )c___0 < (int )((unsigned char )((int )*(p1 + 4) * 8))) {
#line 6263
        if ((int )*(p1 + (5 + (int )c___0 / 8)) & (1 << (int )c___0 % 8)) {
#line 6265
          not___0 = ! not___0;
        } else {

        }
      } else {

      }
#line 6269
      if (! not___0) {
#line 6271
        *(p + -3) = (unsigned char)16;
      } else {

      }
    } else {

    }
  } else {

  }
} else {

}
---------
SID [4548] -> Line 6241
#line 6241
goto _L___6;
---------
SID [4547] -> Line 6241
#line 6241
if ((unsigned int )((re_opcode_t )*p2) == 1U) {
#line 6241
  goto _L___6;
} else
#line 6241
if (bufp->newline_anchor) {
#line 6241
  if ((unsigned int )((re_opcode_t )*p2) == 9U) {
    _L___6: /* CIL Label */ 
#line 6244
    if ((int )*p2 == 9) {
#line 6244
      tmp___78 = '\n';
    } else {
#line 6244
      tmp___78 = (int )*(p2 + 2);
    }
#line 6244
    c___0 = (unsigned char )tmp___78;
#line 6246
    p1 = p + mcnt;
#line 6251
    if ((unsigned int )((re_opcode_t )*(p1 + 3)) == 1U) {
#line 6251
      if ((int )*(p1 + 5) != (int )c___0) {
#line 6253
        *(p + -3) = (unsigned char)16;
      } else {
#line 6251
        goto _L___5;
      }
    } else
    _L___5: /* CIL Label */ 
#line 6258
    if ((unsigned int )((re_opcode_t )*(p1 + 3)) == 3U) {
#line 6258
      goto _L___4;
    } else
#line 6258
    if ((unsigned int )((re_opcode_t )*(p1 + 3)) == 4U) {
      _L___4: /* CIL Label */ 
#line 6261
      not___0 = (unsigned int )((re_opcode_t )*(p1 + 3)) == 4U;
#line 6263
      if ((int )c___0 < (int )((unsigned char )((int )*(p1 + 4) * 8))) {
#line 6263
        if ((int )*(p1 + (5 + (int )c___0 / 8)) & (1 << (int )c___0 % 8)) {
#line 6265
          not___0 = ! not___0;
        } else {

        }
      } else {

      }
#line 6269
      if (! not___0) {
#line 6271
        *(p + -3) = (unsigned char)16;
      } else {

      }
    } else {

    }
  } else {

  }
} else {

}
---------
SID [4546] -> Line 6236
#line 6236
*(p + -3) = (unsigned char)16;
---------
SID [4545] -> Line 6231
#line 6231
if ((unsigned long )p2 == (unsigned long )pend) {
#line 6236
  *(p + -3) = (unsigned char)16;
} else
#line 6241
if ((unsigned int )((re_opcode_t )*p2) == 1U) {
#line 6241
  goto _L___6;
} else
#line 6241
if (bufp->newline_anchor) {
#line 6241
  if ((unsigned int )((re_opcode_t )*p2) == 9U) {
    _L___6: /* CIL Label */ 
#line 6244
    if ((int )*p2 == 9) {
#line 6244
      tmp___78 = '\n';
    } else {
#line 6244
      tmp___78 = (int )*(p2 + 2);
    }
#line 6244
    c___0 = (unsigned char )tmp___78;
#line 6246
    p1 = p + mcnt;
#line 6251
    if ((unsigned int )((re_opcode_t )*(p1 + 3)) == 1U) {
#line 6251
      if ((int )*(p1 + 5) != (int )c___0) {
#line 6253
        *(p + -3) = (unsigned char)16;
      } else {
#line 6251
        goto _L___5;
      }
    } else
    _L___5: /* CIL Label */ 
#line 6258
    if ((unsigned int )((re_opcode_t )*(p1 + 3)) == 3U) {
#line 6258
      goto _L___4;
    } else
#line 6258
    if ((unsigned int )((re_opcode_t )*(p1 + 3)) == 4U) {
      _L___4: /* CIL Label */ 
#line 6261
      not___0 = (unsigned int )((re_opcode_t )*(p1 + 3)) == 4U;
#line 6263
      if ((int )c___0 < (int )((unsigned char )((int )*(p1 + 4) * 8))) {
#line 6263
        if ((int )*(p1 + (5 + (int )c___0 / 8)) & (1 << (int )c___0 % 8)) {
#line 6265
          not___0 = ! not___0;
        } else {

        }
      } else {

      }
#line 6269
      if (! not___0) {
#line 6271
        *(p + -3) = (unsigned char)16;
      } else {

      }
    } else {

    }
  } else {

  }
} else {

}
---------
SID [4544] -> Line 6228
#line 6228
p2 += 3;
---------
SID [4543] -> Line 6225
#line 6225
break;
---------
SID [4542] -> Line 6225
#line 6225
break;
---------
SID [4541] -> Line -1

---------
SID [4540] -> Line 6225
#line 6225
if ((unsigned int )((re_opcode_t )*p2) == 5U) {

} else {
#line 6225
  break;
}
---------
SID [4539] -> Line -1

---------
SID [4538] -> Line 6225
#line 6225
if ((unsigned int )((re_opcode_t )*p2) == 6U) {

} else
#line 6225
if ((unsigned int )((re_opcode_t )*p2) == 5U) {

} else {
#line 6225
  break;
}
---------
SID [4537] -> Line 6225
#line 6225
if ((unsigned long )(p2 + 2) < (unsigned long )pend) {
#line 6225
  if ((unsigned int )((re_opcode_t )*p2) == 6U) {

  } else
#line 6225
  if ((unsigned int )((re_opcode_t )*p2) == 5U) {

  } else {
#line 6225
    break;
  }
} else {
#line 6225
  break;
}
---------
SID [4536] -> Line 6225
#line 6225
while (1) {
#line 6225
  if ((unsigned long )(p2 + 2) < (unsigned long )pend) {
#line 6225
    if ((unsigned int )((re_opcode_t )*p2) == 6U) {

    } else
#line 6225
    if ((unsigned int )((re_opcode_t )*p2) == 5U) {

    } else {
#line 6225
      break;
    }
  } else {
#line 6225
    break;
  }
#line 6228
  p2 += 3;
}
---------
SID [4535] -> Line 6209
#line 6209
p2 = p;
---------
SID [4534] -> Line 6206
#line 6206
break;
---------
SID [4533] -> Line 6206
#line 6206
p += 2;
---------
SID [4532] -> Line 6206
#line 6206
break;
---------
SID [4531] -> Line 6206
#line 6206
mcnt += (int )((signed char )*(p + 1)) << 8;
---------
SID [4530] -> Line 6206
#line 6206
mcnt = (int )*p & 255;
---------
SID [4529] -> Line 6206
#line 6206
while (1) {
#line 6206
  mcnt = (int )*p & 255;
#line 6206
  mcnt += (int )((signed char )*(p + 1)) << 8;
#line 6206
  break;
}
---------
SID [4528] -> Line 6206
case 17U: 
#line 6206
while (1) {
#line 6206
  while (1) {
#line 6206
    mcnt = (int )*p & 255;
#line 6206
    mcnt += (int )((signed char )*(p + 1)) << 8;
#line 6206
    break;
  }
#line 6206
  p += 2;
#line 6206
  break;
}
---------
SID [4527] -> Line 6200
#line 6200
break;
---------
SID [4526] -> Line 6199
#line 6199
break;
---------
SID [4525] -> Line 6199
#line 6199
*(fail_stack.stack + tmp___77) = (fail_stack_elt_t )d;
---------
SID [4524] -> Line 6199
#line 6199
(fail_stack.avail) ++;
---------
SID [4523] -> Line 6199
#line 6199
tmp___77 = fail_stack.avail;
---------
SID [4522] -> Line 6199
#line 6199
*(fail_stack.stack + tmp___76) = (fail_stack_elt_t )p + mcnt;
---------
SID [4521] -> Line 6199
#line 6199
(fail_stack.avail) ++;
---------
SID [4520] -> Line 6199
#line 6199
tmp___76 = fail_stack.avail;
---------
SID [4519] -> Line 6199
#line 6199
*(fail_stack.stack + tmp___75) = (fail_stack_elt_t )highest_active_reg;
---------
SID [4518] -> Line 6199
#line 6199
(fail_stack.avail) ++;
---------
SID [4517] -> Line 6199
#line 6199
tmp___75 = fail_stack.avail;
---------
SID [4516] -> Line 6199
#line 6199
*(fail_stack.stack + tmp___74) = (fail_stack_elt_t )lowest_active_reg;
---------
SID [4515] -> Line 6199
#line 6199
(fail_stack.avail) ++;
---------
SID [4514] -> Line 6199
#line 6199
tmp___74 = fail_stack.avail;
---------
SID [4513] -> Line 6199
#line 6199
this_reg___1 ++;
---------
SID [4512] -> Line 6199
#line 6199
*(fail_stack.stack + tmp___73) = (reg_info + this_reg___1)->word;
---------
SID [4511] -> Line 6199
#line 6199
(fail_stack.avail) ++;
---------
SID [4510] -> Line 6199
#line 6199
tmp___73 = fail_stack.avail;
---------
SID [4509] -> Line 6199
#line 6199
*(fail_stack.stack + tmp___72) = (fail_stack_elt_t )*(regend + this_reg___1);
---------
SID [4508] -> Line 6199
#line 6199
(fail_stack.avail) ++;
---------
SID [4507] -> Line 6199
#line 6199
tmp___72 = fail_stack.avail;
---------
SID [4506] -> Line 6199
#line 6199
*(fail_stack.stack + tmp___71) = (fail_stack_elt_t )*(regstart + this_reg___1);
---------
SID [4505] -> Line 6199
#line 6199
(fail_stack.avail) ++;
---------
SID [4504] -> Line 6199
#line 6199
tmp___71 = fail_stack.avail;
---------
SID [4503] -> Line 6199
#line 6199
break;
---------
SID [4502] -> Line -1

---------
SID [4501] -> Line 6199
#line 6199
if ((unsigned int )this_reg___1 <= highest_active_reg) {

} else {
#line 6199
  break;
}
---------
SID [4500] -> Line 6199
#line 6199
while ((unsigned int )this_reg___1 <= highest_active_reg) {
#line 6199
  tmp___71 = fail_stack.avail;
#line 6199
  (fail_stack.avail) ++;
#line 6199
  *(fail_stack.stack + tmp___71) = (fail_stack_elt_t )*(regstart + this_reg___1);
#line 6199
  tmp___72 = fail_stack.avail;
#line 6199
  (fail_stack.avail) ++;
#line 6199
  *(fail_stack.stack + tmp___72) = (fail_stack_elt_t )*(regend + this_reg___1);
#line 6199
  tmp___73 = fail_stack.avail;
#line 6199
  (fail_stack.avail) ++;
#line 6199
  *(fail_stack.stack + tmp___73) = (reg_info + this_reg___1)->word;
#line 6199
  this_reg___1 ++;
}
---------
SID [4499] -> Line 6199
#line 6199
this_reg___1 = (int )lowest_active_reg;
---------
SID [4498] -> Line 6199
#line 6199
return (-2);
---------
SID [4497] -> Line -1

---------
SID [4496] -> Line 6199
#line 6199
if (tmp___70) {

} else {
#line 6199
  return (-2);
}
---------
SID [4495] -> Line 6199
#line 6199
tmp___70 = tmp___69;
---------
SID [4494] -> Line 6199
#line 6199
tmp___69 = 1;
---------
SID [4493] -> Line 6199
#line 6199
fail_stack.size <<= 1;
---------
SID [4492] -> Line 6199
#line 6199
tmp___69 = 0;
---------
SID [4491] -> Line 6199
#line 6199
if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
#line 6199
  tmp___69 = 0;
} else {
#line 6199
  fail_stack.size <<= 1;
#line 6199
  tmp___69 = 1;
}
---------
SID [4490] -> Line 6199
#line 6199
fail_stack.stack = (fail_stack_elt_t *)destination___1;
---------
SID [4489] -> Line 6199
#line 6199
memcpy((void */* __restrict  */)destination___1,
       (void const   */* __restrict  */)fail_stack.stack,
       (unsigned long )fail_stack.size * sizeof(fail_stack_elt_t ));
---------
SID [4488] -> Line 6199
#line 6199
destination___1 = (char *)tmp___68;
---------
SID [4487] -> Line 6199
#line 6199
tmp___68 = __builtin_alloca((unsigned long )(fail_stack.size << 1) * sizeof(fail_stack_elt_t ));
---------
SID [4486] -> Line 6199
#line 6199
tmp___70 = 0;
---------
SID [4485] -> Line 6199
#line 6199
if (fail_stack.size > (unsigned int )re_max_failures * ((num_regs - 1U) * 3U + 4U)) {
#line 6199
  tmp___70 = 0;
} else {
#line 6199
  tmp___68 = __builtin_alloca((unsigned long )(fail_stack.size << 1) * sizeof(fail_stack_elt_t ));
#line 6199
  destination___1 = (char *)tmp___68;
#line 6199
  memcpy((void */* __restrict  */)destination___1,
         (void const   */* __restrict  */)fail_stack.stack,
         (unsigned long )fail_stack.size * sizeof(fail_stack_elt_t ));
#line 6199
  fail_stack.stack = (fail_stack_elt_t *)destination___1;
#line 6199
  if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
#line 6199
    tmp___69 = 0;
  } else {
#line 6199
    fail_stack.size <<= 1;
#line 6199
    tmp___69 = 1;
  }
#line 6199
  tmp___70 = tmp___69;
}
---------
SID [4484] -> Line 6199
#line 6199
break;
---------
SID [4483] -> Line -1

---------
SID [4482] -> Line 6199
#line 6199
if (fail_stack.size - fail_stack.avail < ((highest_active_reg - lowest_active_reg) + 1U) * 3U + 4U) {

} else {
#line 6199
  break;
}
---------
SID [4481] -> Line 6199
#line 6199
while (fail_stack.size - fail_stack.avail < ((highest_active_reg - lowest_active_reg) + 1U) * 3U + 4U) {
#line 6199
  if (fail_stack.size > (unsigned int )re_max_failures * ((num_regs - 1U) * 3U + 4U)) {
#line 6199
    tmp___70 = 0;
  } else {
#line 6199
    tmp___68 = __builtin_alloca((unsigned long )(fail_stack.size << 1) * sizeof(fail_stack_elt_t ));
#line 6199
    destination___1 = (char *)tmp___68;
#line 6199
    memcpy((void */* __restrict  */)destination___1,
           (void const   */* __restrict  */)fail_stack.stack,
           (unsigned long )fail_stack.size * sizeof(fail_stack_elt_t ));
#line 6199
    fail_stack.stack = (fail_stack_elt_t *)destination___1;
#line 6199
    if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
#line 6199
      tmp___69 = 0;
    } else {
#line 6199
      fail_stack.size <<= 1;
#line 6199
      tmp___69 = 1;
    }
#line 6199
    tmp___70 = tmp___69;
  }
#line 6199
  if (tmp___70) {

  } else {
#line 6199
    return (-2);
  }
}
---------
SID [4480] -> Line 6199
#line 6199
while (1) {
#line 6199
  while (fail_stack.size - fail_stack.avail < ((highest_active_reg - lowest_active_reg) + 1U) * 3U + 4U) {
#line 6199
    if (fail_stack.size > (unsigned int )re_max_failures * ((num_regs - 1U) * 3U + 4U)) {
#line 6199
      tmp___70 = 0;
    } else {
#line 6199
      tmp___68 = __builtin_alloca((unsigned long )(fail_stack.size << 1) * sizeof(fail_stack_elt_t ));
#line 6199
      destination___1 = (char *)tmp___68;
#line 6199
      memcpy((void */* __restrict  */)destination___1,
             (void const   */* __restrict  */)fail_stack.stack,
             (unsigned long )fail_stack.size * sizeof(fail_stack_elt_t ));
#line 6199
      fail_stack.stack = (fail_stack_elt_t *)destination___1;
#line 6199
      if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
#line 6199
        tmp___69 = 0;
      } else {
#line 6199
        fail_stack.size <<= 1;
#line 6199
        tmp___69 = 1;
      }
#line 6199
      tmp___70 = tmp___69;
    }
#line 6199
    if (tmp___70) {

    } else {
#line 6199
      return (-2);
    }
  }
#line 6199
  this_reg___1 = (int )lowest_active_reg;
#line 6199
  while ((unsigned int )this_reg___1 <= highest_active_reg) {
#line 6199
    tmp___71 = fail_stack.avail;
#line 6199
    (fail_stack.avail) ++;
#line 6199
    *(fail_stack.stack + tmp___71) = (fail_stack_elt_t )*(regstart + this_reg___1);
#line 6199
    tmp___72 = fail_stack.avail;
#line 6199
    (fail_stack.avail) ++;
#line 6199
    *(fail_stack.stack + tmp___72) = (fail_stack_elt_t )*(regend + this_reg___1);
#line 6199
    tmp___73 = fail_stack.avail;
#line 6199
    (fail_stack.avail) ++;
#line 6199
    *(fail_stack.stack + tmp___73) = (reg_info + this_reg___1)->word;
#line 6199
    this_reg___1 ++;
  }
#line 6199
  tmp___74 = fail_stack.avail;
#line 6199
  (fail_stack.avail) ++;
#line 6199
  *(fail_stack.stack + tmp___74) = (fail_stack_elt_t )lowest_active_reg;
#line 6199
  tmp___75 = fail_stack.avail;
#line 6199
  (fail_stack.avail) ++;
#line 6199
  *(fail_stack.stack + tmp___75) = (fail_stack_elt_t )highest_active_reg;
#line 6199
  tmp___76 = fail_stack.avail;
#line 6199
  (fail_stack.avail) ++;
#line 6199
  *(fail_stack.stack + tmp___76) = (fail_stack_elt_t )p + mcnt;
#line 6199
  tmp___77 = fail_stack.avail;
#line 6199
  (fail_stack.avail) ++;
#line 6199
  *(fail_stack.stack + tmp___77) = (fail_stack_elt_t )d;
#line 6199
  break;
}
---------
SID [4479] -> Line -1

---------
SID [4478] -> Line -1

---------
SID [4477] -> Line -1

---------
SID [4476] -> Line 6195
#line 6195
lowest_active_reg = (unsigned int )*(p1 + 1);
---------
SID [4475] -> Line 6194
#line 6194
if (lowest_active_reg == (unsigned int )((1 << 8) + 1)) {
#line 6195
  lowest_active_reg = (unsigned int )*(p1 + 1);
} else {

}
---------
SID [4474] -> Line 6193
#line 6193
highest_active_reg = (unsigned int )((int )*(p1 + 1) + (int )*(p1 + 2));
---------
SID [4473] -> Line 6187
#line 6187
if ((unsigned int )((re_opcode_t )*p1) == 5U) {
#line 6193
  highest_active_reg = (unsigned int )((int )*(p1 + 1) + (int )*(p1 + 2));
#line 6194
  if (lowest_active_reg == (unsigned int )((1 << 8) + 1)) {
#line 6195
    lowest_active_reg = (unsigned int )*(p1 + 1);
  } else {

  }
} else {

}
---------
SID [4472] -> Line 6187
#line 6187
if ((unsigned long )p1 < (unsigned long )pend) {
#line 6187
  if ((unsigned int )((re_opcode_t )*p1) == 5U) {
#line 6193
    highest_active_reg = (unsigned int )((int )*(p1 + 1) + (int )*(p1 + 2));
#line 6194
    if (lowest_active_reg == (unsigned int )((1 << 8) + 1)) {
#line 6195
      lowest_active_reg = (unsigned int )*(p1 + 1);
    } else {

    }
  } else {

  }
} else {

}
---------
SID [4471] -> Line 6185
#line 6185
p1 ++;
---------
SID [4470] -> Line 6184
#line 6184
break;
---------
SID [4469] -> Line 6184
#line 6184
break;
---------
SID [4468] -> Line -1

---------
SID [4467] -> Line 6184
#line 6184
if ((unsigned int )((re_opcode_t )*p1) == 0U) {

} else {
#line 6184
  break;
}
---------
SID [4466] -> Line 6184
#line 6184
if ((unsigned long )p1 < (unsigned long )pend) {
#line 6184
  if ((unsigned int )((re_opcode_t )*p1) == 0U) {

  } else {
#line 6184
    break;
  }
} else {
#line 6184
  break;
}
---------
SID [4465] -> Line 6184
#line 6184
while (1) {
#line 6184
  if ((unsigned long )p1 < (unsigned long )pend) {
#line 6184
    if ((unsigned int )((re_opcode_t )*p1) == 0U) {

    } else {
#line 6184
      break;
    }
  } else {
#line 6184
    break;
  }
#line 6185
  p1 ++;
}
---------
SID [4464] -> Line 6178
#line 6178
p1 = p;
---------
SID [4463] -> Line 6166
#line 6166
break;
---------
SID [4462] -> Line 6166
#line 6166
p += 2;
---------
SID [4461] -> Line 6166
#line 6166
break;
---------
SID [4460] -> Line 6166
#line 6166
mcnt += (int )((signed char )*(p + 1)) << 8;
---------
SID [4459] -> Line 6166
#line 6166
mcnt = (int )*p & 255;
---------
SID [4458] -> Line 6166
#line 6166
while (1) {
#line 6166
  mcnt = (int )*p & 255;
#line 6166
  mcnt += (int )((signed char )*(p + 1)) << 8;
#line 6166
  break;
}
---------
SID [4457] -> Line 6166
#line 6166
while (1) {
#line 6166
  while (1) {
#line 6166
    mcnt = (int )*p & 255;
#line 6166
    mcnt += (int )((signed char )*(p + 1)) << 8;
#line 6166
    break;
  }
#line 6166
  p += 2;
#line 6166
  break;
}
---------
SID [4456] -> Line -1
on_failure: 
case 14U: ;
---------
SID [4455] -> Line 6147
#line 6147
break;
---------
SID [4454] -> Line 6146
#line 6146
break;
---------
SID [4453] -> Line 6146
#line 6146
*(fail_stack.stack + tmp___67) = (fail_stack_elt_t )((void *)0);
---------
SID [4452] -> Line 6146
#line 6146
(fail_stack.avail) ++;
---------
SID [4451] -> Line 6146
#line 6146
tmp___67 = fail_stack.avail;
---------
SID [4450] -> Line 6146
#line 6146
*(fail_stack.stack + tmp___66) = (fail_stack_elt_t )p + mcnt;
---------
SID [4449] -> Line 6146
#line 6146
(fail_stack.avail) ++;
---------
SID [4448] -> Line 6146
#line 6146
tmp___66 = fail_stack.avail;
---------
SID [4447] -> Line 6146
#line 6146
*(fail_stack.stack + tmp___65) = (fail_stack_elt_t )highest_active_reg;
---------
SID [4446] -> Line 6146
#line 6146
(fail_stack.avail) ++;
---------
SID [4445] -> Line 6146
#line 6146
tmp___65 = fail_stack.avail;
---------
SID [4444] -> Line 6146
#line 6146
*(fail_stack.stack + tmp___64) = (fail_stack_elt_t )lowest_active_reg;
---------
SID [4443] -> Line 6146
#line 6146
(fail_stack.avail) ++;
---------
SID [4442] -> Line 6146
#line 6146
tmp___64 = fail_stack.avail;
---------
SID [4441] -> Line 6146
#line 6146
this_reg___0 ++;
---------
SID [4440] -> Line 6146
#line 6146
*(fail_stack.stack + tmp___63) = (reg_info + this_reg___0)->word;
---------
SID [4439] -> Line 6146
#line 6146
(fail_stack.avail) ++;
---------
SID [4438] -> Line 6146
#line 6146
tmp___63 = fail_stack.avail;
---------
SID [4437] -> Line 6146
#line 6146
*(fail_stack.stack + tmp___62) = (fail_stack_elt_t )*(regend + this_reg___0);
---------
SID [4436] -> Line 6146
#line 6146
(fail_stack.avail) ++;
---------
SID [4435] -> Line 6146
#line 6146
tmp___62 = fail_stack.avail;
---------
SID [4434] -> Line 6146
#line 6146
*(fail_stack.stack + tmp___61) = (fail_stack_elt_t )*(regstart + this_reg___0);
---------
SID [4433] -> Line 6146
#line 6146
(fail_stack.avail) ++;
---------
SID [4432] -> Line 6146
#line 6146
tmp___61 = fail_stack.avail;
---------
SID [4431] -> Line 6146
#line 6146
break;
---------
SID [4430] -> Line -1

---------
SID [4429] -> Line 6146
#line 6146
if ((unsigned int )this_reg___0 <= highest_active_reg) {

} else {
#line 6146
  break;
}
---------
SID [4428] -> Line 6146
#line 6146
while ((unsigned int )this_reg___0 <= highest_active_reg) {
#line 6146
  tmp___61 = fail_stack.avail;
#line 6146
  (fail_stack.avail) ++;
#line 6146
  *(fail_stack.stack + tmp___61) = (fail_stack_elt_t )*(regstart + this_reg___0);
#line 6146
  tmp___62 = fail_stack.avail;
#line 6146
  (fail_stack.avail) ++;
#line 6146
  *(fail_stack.stack + tmp___62) = (fail_stack_elt_t )*(regend + this_reg___0);
#line 6146
  tmp___63 = fail_stack.avail;
#line 6146
  (fail_stack.avail) ++;
#line 6146
  *(fail_stack.stack + tmp___63) = (reg_info + this_reg___0)->word;
#line 6146
  this_reg___0 ++;
}
---------
SID [4427] -> Line 6146
#line 6146
this_reg___0 = (int )lowest_active_reg;
---------
SID [4426] -> Line 6146
#line 6146
return (-2);
---------
SID [4425] -> Line -1

---------
SID [4424] -> Line 6146
#line 6146
if (tmp___60) {

} else {
#line 6146
  return (-2);
}
---------
SID [4423] -> Line 6146
#line 6146
tmp___60 = tmp___59;
---------
SID [4422] -> Line 6146
#line 6146
tmp___59 = 1;
---------
SID [4421] -> Line 6146
#line 6146
fail_stack.size <<= 1;
---------
SID [4420] -> Line 6146
#line 6146
tmp___59 = 0;
---------
SID [4419] -> Line 6146
#line 6146
if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
#line 6146
  tmp___59 = 0;
} else {
#line 6146
  fail_stack.size <<= 1;
#line 6146
  tmp___59 = 1;
}
---------
SID [4418] -> Line 6146
#line 6146
fail_stack.stack = (fail_stack_elt_t *)destination___0;
---------
SID [4417] -> Line 6146
#line 6146
memcpy((void */* __restrict  */)destination___0,
       (void const   */* __restrict  */)fail_stack.stack,
       (unsigned long )fail_stack.size * sizeof(fail_stack_elt_t ));
---------
SID [4416] -> Line 6146
#line 6146
destination___0 = (char *)tmp___58;
---------
SID [4415] -> Line 6146
#line 6146
tmp___58 = __builtin_alloca((unsigned long )(fail_stack.size << 1) * sizeof(fail_stack_elt_t ));
---------
SID [4414] -> Line 6146
#line 6146
tmp___60 = 0;
---------
SID [4413] -> Line 6146
#line 6146
if (fail_stack.size > (unsigned int )re_max_failures * ((num_regs - 1U) * 3U + 4U)) {
#line 6146
  tmp___60 = 0;
} else {
#line 6146
  tmp___58 = __builtin_alloca((unsigned long )(fail_stack.size << 1) * sizeof(fail_stack_elt_t ));
#line 6146
  destination___0 = (char *)tmp___58;
#line 6146
  memcpy((void */* __restrict  */)destination___0,
         (void const   */* __restrict  */)fail_stack.stack,
         (unsigned long )fail_stack.size * sizeof(fail_stack_elt_t ));
#line 6146
  fail_stack.stack = (fail_stack_elt_t *)destination___0;
#line 6146
  if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
#line 6146
    tmp___59 = 0;
  } else {
#line 6146
    fail_stack.size <<= 1;
#line 6146
    tmp___59 = 1;
  }
#line 6146
  tmp___60 = tmp___59;
}
---------
SID [4412] -> Line 6146
#line 6146
break;
---------
SID [4411] -> Line -1

---------
SID [4410] -> Line 6146
#line 6146
if (fail_stack.size - fail_stack.avail < ((highest_active_reg - lowest_active_reg) + 1U) * 3U + 4U) {

} else {
#line 6146
  break;
}
---------
SID [4409] -> Line 6146
#line 6146
while (fail_stack.size - fail_stack.avail < ((highest_active_reg - lowest_active_reg) + 1U) * 3U + 4U) {
#line 6146
  if (fail_stack.size > (unsigned int )re_max_failures * ((num_regs - 1U) * 3U + 4U)) {
#line 6146
    tmp___60 = 0;
  } else {
#line 6146
    tmp___58 = __builtin_alloca((unsigned long )(fail_stack.size << 1) * sizeof(fail_stack_elt_t ));
#line 6146
    destination___0 = (char *)tmp___58;
#line 6146
    memcpy((void */* __restrict  */)destination___0,
           (void const   */* __restrict  */)fail_stack.stack,
           (unsigned long )fail_stack.size * sizeof(fail_stack_elt_t ));
#line 6146
    fail_stack.stack = (fail_stack_elt_t *)destination___0;
#line 6146
    if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
#line 6146
      tmp___59 = 0;
    } else {
#line 6146
      fail_stack.size <<= 1;
#line 6146
      tmp___59 = 1;
    }
#line 6146
    tmp___60 = tmp___59;
  }
#line 6146
  if (tmp___60) {

  } else {
#line 6146
    return (-2);
  }
}
---------
SID [4408] -> Line 6146
#line 6146
while (1) {
#line 6146
  while (fail_stack.size - fail_stack.avail < ((highest_active_reg - lowest_active_reg) + 1U) * 3U + 4U) {
#line 6146
    if (fail_stack.size > (unsigned int )re_max_failures * ((num_regs - 1U) * 3U + 4U)) {
#line 6146
      tmp___60 = 0;
    } else {
#line 6146
      tmp___58 = __builtin_alloca((unsigned long )(fail_stack.size << 1) * sizeof(fail_stack_elt_t ));
#line 6146
      destination___0 = (char *)tmp___58;
#line 6146
      memcpy((void */* __restrict  */)destination___0,
             (void const   */* __restrict  */)fail_stack.stack,
             (unsigned long )fail_stack.size * sizeof(fail_stack_elt_t ));
#line 6146
      fail_stack.stack = (fail_stack_elt_t *)destination___0;
#line 6146
      if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
#line 6146
        tmp___59 = 0;
      } else {
#line 6146
        fail_stack.size <<= 1;
#line 6146
        tmp___59 = 1;
      }
#line 6146
      tmp___60 = tmp___59;
    }
#line 6146
    if (tmp___60) {

    } else {
#line 6146
      return (-2);
    }
  }
#line 6146
  this_reg___0 = (int )lowest_active_reg;
#line 6146
  while ((unsigned int )this_reg___0 <= highest_active_reg) {
#line 6146
    tmp___61 = fail_stack.avail;
#line 6146
    (fail_stack.avail) ++;
#line 6146
    *(fail_stack.stack + tmp___61) = (fail_stack_elt_t )*(regstart + this_reg___0);
#line 6146
    tmp___62 = fail_stack.avail;
#line 6146
    (fail_stack.avail) ++;
#line 6146
    *(fail_stack.stack + tmp___62) = (fail_stack_elt_t )*(regend + this_reg___0);
#line 6146
    tmp___63 = fail_stack.avail;
#line 6146
    (fail_stack.avail) ++;
#line 6146
    *(fail_stack.stack + tmp___63) = (reg_info + this_reg___0)->word;
#line 6146
    this_reg___0 ++;
  }
#line 6146
  tmp___64 = fail_stack.avail;
#line 6146
  (fail_stack.avail) ++;
#line 6146
  *(fail_stack.stack + tmp___64) = (fail_stack_elt_t )lowest_active_reg;
#line 6146
  tmp___65 = fail_stack.avail;
#line 6146
  (fail_stack.avail) ++;
#line 6146
  *(fail_stack.stack + tmp___65) = (fail_stack_elt_t )highest_active_reg;
#line 6146
  tmp___66 = fail_stack.avail;
#line 6146
  (fail_stack.avail) ++;
#line 6146
  *(fail_stack.stack + tmp___66) = (fail_stack_elt_t )p + mcnt;
#line 6146
  tmp___67 = fail_stack.avail;
#line 6146
  (fail_stack.avail) ++;
#line 6146
  *(fail_stack.stack + tmp___67) = (fail_stack_elt_t )((void *)0);
#line 6146
  break;
}
---------
SID [4407] -> Line 6143
#line 6143
break;
---------
SID [4406] -> Line 6143
#line 6143
p += 2;
---------
SID [4405] -> Line 6143
#line 6143
break;
---------
SID [4404] -> Line 6143
#line 6143
mcnt += (int )((signed char )*(p + 1)) << 8;
---------
SID [4403] -> Line 6143
#line 6143
mcnt = (int )*p & 255;
---------
SID [4402] -> Line 6143
#line 6143
while (1) {
#line 6143
  mcnt = (int )*p & 255;
#line 6143
  mcnt += (int )((signed char )*(p + 1)) << 8;
#line 6143
  break;
}
---------
SID [4401] -> Line 6143
#line 6143
while (1) {
#line 6143
  while (1) {
#line 6143
    mcnt = (int )*p & 255;
#line 6143
    mcnt += (int )((signed char )*(p + 1)) << 8;
#line 6143
    break;
  }
#line 6143
  p += 2;
#line 6143
  break;
}
---------
SID [4400] -> Line -1
case 15U: ;
---------
SID [4399] -> Line 6121
#line 6121
goto fail;
---------
SID [4398] -> Line -1

---------
SID [4397] -> Line 6120
#line 6120
break;
---------
SID [4396] -> Line 6119
#line 6119
if ((unsigned long )d == (unsigned long )end2) {
#line 6120
  break;
} else {

}
---------
SID [4395] -> Line -1
case 11U: ;
---------
SID [4394] -> Line 6113
#line 6113
goto fail;
---------
SID [4393] -> Line -1

---------
SID [4392] -> Line 6112
#line 6112
break;
---------
SID [4391] -> Line 6111
#line 6111
if (! size2) {
#line 6112
  break;
} else {

}
---------
SID [4390] -> Line 6112
#line 6112
break;
---------
SID [4389] -> Line 6111
#line 6111
if ((unsigned long )d == (unsigned long )tmp___57) {
#line 6112
  break;
} else
#line 6111
if (! size2) {
#line 6112
  break;
} else {

}
---------
SID [4388] -> Line 6111
#line 6111
tmp___57 = string2;
---------
SID [4387] -> Line 6111
#line 6111
tmp___57 = string1;
---------
SID [4386] -> Line 6111
#line 6111
if (size1) {
#line 6111
  tmp___57 = string1;
} else {
#line 6111
  tmp___57 = string2;
}
---------
SID [4385] -> Line -1
case 10U: ;
---------
SID [4384] -> Line 6105
#line 6105
goto fail;
---------
SID [4383] -> Line -1

---------
SID [4382] -> Line -1

---------
SID [4381] -> Line 6103
#line 6103
break;
---------
SID [4380] -> Line 6100
#line 6100
if (bufp->newline_anchor) {
#line 6103
  break;
} else {

}
---------
SID [4379] -> Line 6100
#line 6100
if (tmp___56 == 10) {
#line 6100
  if (bufp->newline_anchor) {
#line 6103
    break;
  } else {

  }
} else {

}
---------
SID [4378] -> Line 6100
#line 6100
tmp___56 = (int const   )*d;
---------
SID [4377] -> Line 6100
#line 6100
tmp___56 = (int const   )*string2;
---------
SID [4376] -> Line 6100
#line 6100
if ((unsigned long )d == (unsigned long )end1) {
#line 6100
  tmp___56 = (int const   )*string2;
} else {
#line 6100
  tmp___56 = (int const   )*d;
}
---------
SID [4375] -> Line -1

---------
SID [4374] -> Line 6096
#line 6096
break;
---------
SID [4373] -> Line 6096
#line 6096
if (! bufp->not_eol) {
#line 6096
  break;
} else {

}
---------
SID [4372] -> Line 6094
#line 6094
if ((unsigned long )d == (unsigned long )end2) {
#line 6096
  if (! bufp->not_eol) {
#line 6096
    break;
  } else {

  }
} else {
#line 6100
  if ((unsigned long )d == (unsigned long )end1) {
#line 6100
    tmp___56 = (int const   )*string2;
  } else {
#line 6100
    tmp___56 = (int const   )*d;
  }
#line 6100
  if (tmp___56 == 10) {
#line 6100
    if (bufp->newline_anchor) {
#line 6103
      break;
    } else {

    }
  } else {

  }
}
---------
SID [4371] -> Line -1
case 9U: ;
---------
SID [4370] -> Line 6087
#line 6087
goto fail;
---------
SID [4369] -> Line -1

---------
SID [4368] -> Line -1

---------
SID [4367] -> Line 6084
#line 6084
break;
---------
SID [4366] -> Line 6082
#line 6082
if (bufp->newline_anchor) {
#line 6084
  break;
} else {

}
---------
SID [4365] -> Line 6082
#line 6082
if ((int const   )*(d + -1) == 10) {
#line 6082
  if (bufp->newline_anchor) {
#line 6084
    break;
  } else {

  }
} else {

}
---------
SID [4364] -> Line -1

---------
SID [4363] -> Line 6080
#line 6080
break;
---------
SID [4362] -> Line 6080
_L___3: /* CIL Label */ 
#line 6080
if (! bufp->not_bol) {
#line 6080
  break;
} else {

}
---------
SID [4361] -> Line 6078
#line 6078
if (! size2) {
  _L___3: /* CIL Label */ 
#line 6080
  if (! bufp->not_bol) {
#line 6080
    break;
  } else {

  }
} else
#line 6082
if ((int const   )*(d + -1) == 10) {
#line 6082
  if (bufp->newline_anchor) {
#line 6084
    break;
  } else {

  }
} else {

}
---------
SID [4360] -> Line 6078
#line 6078
goto _L___3;
---------
SID [4359] -> Line 6078
#line 6078
if ((unsigned long )d == (unsigned long )tmp___55) {
#line 6078
  goto _L___3;
} else
#line 6078
if (! size2) {
  _L___3: /* CIL Label */ 
#line 6080
  if (! bufp->not_bol) {
#line 6080
    break;
  } else {

  }
} else
#line 6082
if ((int const   )*(d + -1) == 10) {
#line 6082
  if (bufp->newline_anchor) {
#line 6084
    break;
  } else {

  }
} else {

}
---------
SID [4358] -> Line 6078
#line 6078
tmp___55 = string2;
---------
SID [4357] -> Line 6078
#line 6078
tmp___55 = string1;
---------
SID [4356] -> Line 6078
#line 6078
if (size1) {
#line 6078
  tmp___55 = string1;
} else {
#line 6078
  tmp___55 = string2;
}
---------
SID [4355] -> Line -1
case 8U: ;
---------
SID [4354] -> Line 6069
#line 6069
break;
---------
SID [4353] -> Line 6066
#line 6066
d2 += mcnt;
---------
SID [4352] -> Line 6066
#line 6066
d += mcnt;
---------
SID [4351] -> Line -1

---------
SID [4350] -> Line 6065
#line 6065
goto fail;
---------
SID [4349] -> Line 6062
#line 6062
if (tmp___54) {
#line 6065
  goto fail;
} else {

}
---------
SID [4348] -> Line 6062
#line 6062
tmp___54 = tmp___53;
---------
SID [4347] -> Line 6062
#line 6062
tmp___53 = memcmp((void const   *)d, (void const   *)d2, (size_t )mcnt);
---------
SID [4346] -> Line 6062
#line 6062
tmp___54 = tmp___52;
---------
SID [4345] -> Line 6062
#line 6062
tmp___52 = bcmp_translate(d, d2, mcnt, translate);
---------
SID [4344] -> Line 6062
#line 6062
if (translate) {
#line 6062
  tmp___52 = bcmp_translate(d, d2, mcnt, translate);
#line 6062
  tmp___54 = tmp___52;
} else {
#line 6062
  tmp___53 = memcmp((void const   *)d, (void const   *)d2, (size_t )mcnt);
#line 6062
  tmp___54 = tmp___53;
}
---------
SID [4343] -> Line -1

---------
SID [4342] -> Line 6058
#line 6058
mcnt = (int )(dend2 - d2);
---------
SID [4341] -> Line 6057
#line 6057
if ((long )mcnt > dend2 - d2) {
#line 6058
  mcnt = (int )(dend2 - d2);
} else {

}
---------
SID [4340] -> Line 6053
#line 6053
mcnt = (int )(dend - d);
---------
SID [4339] -> Line 6050
#line 6050
dend = end_match_2;
---------
SID [4338] -> Line 6050
#line 6050
d = string2;
---------
SID [4337] -> Line -1

---------
SID [4336] -> Line 6050
#line 6050
goto fail;
---------
SID [4335] -> Line 6050
#line 6050
if ((unsigned long )dend == (unsigned long )end_match_2) {
#line 6050
  goto fail;
} else {

}
---------
SID [4334] -> Line 6050
#line 6050
break;
---------
SID [4333] -> Line -1

---------
SID [4332] -> Line 6050
#line 6050
if ((unsigned long )d == (unsigned long )dend) {

} else {
#line 6050
  break;
}
---------
SID [4331] -> Line 6050
#line 6050
while ((unsigned long )d == (unsigned long )dend) {
#line 6050
  if ((unsigned long )dend == (unsigned long )end_match_2) {
#line 6050
    goto fail;
  } else {

  }
#line 6050
  d = string2;
#line 6050
  dend = end_match_2;
}
---------
SID [4330] -> Line -1

---------
SID [4329] -> Line 6047
#line 6047
break;
---------
SID [4328] -> Line 6047
#line 6047
if ((unsigned long )d2 == (unsigned long )dend2) {
#line 6047
  break;
} else {

}
---------
SID [4327] -> Line 6044
#line 6044
dend2 = *(regend + regno);
---------
SID [4326] -> Line 6043
#line 6043
d2 = string2;
---------
SID [4325] -> Line -1

---------
SID [4324] -> Line 6040
#line 6040
break;
---------
SID [4323] -> Line 6040
#line 6040
if ((unsigned long )dend2 == (unsigned long )*(regend + regno)) {
#line 6040
  break;
} else {

}
---------
SID [4322] -> Line -1

---------
SID [4321] -> Line 6039
#line 6039
break;
---------
SID [4320] -> Line 6039
#line 6039
if ((unsigned long )dend2 == (unsigned long )end_match_2) {
#line 6039
  break;
} else {

}
---------
SID [4319] -> Line 6037
#line 6037
break;
---------
SID [4318] -> Line -1

---------
SID [4317] -> Line 6037
#line 6037
if ((unsigned long )d2 == (unsigned long )dend2) {

} else {
#line 6037
  break;
}
---------
SID [4316] -> Line 6037
#line 6037
while ((unsigned long )d2 == (unsigned long )dend2) {
#line 6039
  if ((unsigned long )dend2 == (unsigned long )end_match_2) {
#line 6039
    break;
  } else {

  }
#line 6040
  if ((unsigned long )dend2 == (unsigned long )*(regend + regno)) {
#line 6040
    break;
  } else {

  }
#line 6043
  d2 = string2;
#line 6044
  dend2 = *(regend + regno);
}
---------
SID [4315] -> Line 6033
#line 6033
while (1) {
#line 6037
  while ((unsigned long )d2 == (unsigned long )dend2) {
#line 6039
    if ((unsigned long )dend2 == (unsigned long )end_match_2) {
#line 6039
      break;
    } else {

    }
#line 6040
    if ((unsigned long )dend2 == (unsigned long )*(regend + regno)) {
#line 6040
      break;
    } else {

    }
#line 6043
    d2 = string2;
#line 6044
    dend2 = *(regend + regno);
  }
#line 6047
  if ((unsigned long )d2 == (unsigned long )dend2) {
#line 6047
    break;
  } else {

  }
#line 6050
  while ((unsigned long )d == (unsigned long )dend) {
#line 6050
    if ((unsigned long )dend == (unsigned long )end_match_2) {
#line 6050
      goto fail;
    } else {

    }
#line 6050
    d = string2;
#line 6050
    dend = end_match_2;
  }
#line 6053
  mcnt = (int )(dend - d);
#line 6057
  if ((long )mcnt > dend2 - d2) {
#line 6058
    mcnt = (int )(dend2 - d2);
  } else {

  }
#line 6062
  if (translate) {
#line 6062
    tmp___52 = bcmp_translate(d, d2, mcnt, translate);
#line 6062
    tmp___54 = tmp___52;
  } else {
#line 6062
    tmp___53 = memcmp((void const   *)d, (void const   *)d2, (size_t )mcnt);
#line 6062
    tmp___54 = tmp___53;
  }
#line 6062
  if (tmp___54) {
#line 6065
    goto fail;
  } else {

  }
#line 6066
  d += mcnt;
#line 6066
  d2 += mcnt;
}
---------
SID [4314] -> Line 6030
#line 6030
dend2 = end_match_1;
---------
SID [4313] -> Line 6030
#line 6030
dend2 = *(regend + regno);
---------
SID [4312] -> Line 6030
#line 6030
if (tmp___50 == tmp___51) {
#line 6030
  dend2 = *(regend + regno);
} else {
#line 6030
  dend2 = end_match_1;
}
---------
SID [4311] -> Line 6030
#line 6030
tmp___51 = 0;
---------
SID [4310] -> Line 6030
#line 6030
tmp___51 = 0;
---------
SID [4309] -> Line 6030
#line 6030
tmp___51 = 0;
---------
SID [4308] -> Line 6030
#line 6030
tmp___51 = 1;
---------
SID [4307] -> Line 6030
#line 6030
if ((unsigned long )*(regend + regno) <= (unsigned long )(string1 + size1)) {
#line 6030
  tmp___51 = 1;
} else {
#line 6030
  tmp___51 = 0;
}
---------
SID [4306] -> Line 6030
#line 6030
if ((unsigned long )string1 <= (unsigned long )*(regend + regno)) {
#line 6030
  if ((unsigned long )*(regend + regno) <= (unsigned long )(string1 + size1)) {
#line 6030
    tmp___51 = 1;
  } else {
#line 6030
    tmp___51 = 0;
  }
} else {
#line 6030
  tmp___51 = 0;
}
---------
SID [4305] -> Line 6030
#line 6030
if (size1) {
#line 6030
  if ((unsigned long )string1 <= (unsigned long )*(regend + regno)) {
#line 6030
    if ((unsigned long )*(regend + regno) <= (unsigned long )(string1 + size1)) {
#line 6030
      tmp___51 = 1;
    } else {
#line 6030
      tmp___51 = 0;
    }
  } else {
#line 6030
    tmp___51 = 0;
  }
} else {
#line 6030
  tmp___51 = 0;
}
---------
SID [4304] -> Line 6030
#line 6030
tmp___50 = 0;
---------
SID [4303] -> Line 6030
#line 6030
tmp___50 = 0;
---------
SID [4302] -> Line 6030
#line 6030
tmp___50 = 0;
---------
SID [4301] -> Line 6030
#line 6030
tmp___50 = 1;
---------
SID [4300] -> Line 6030
#line 6030
if ((unsigned long )*(regstart + regno) <= (unsigned long )(string1 + size1)) {
#line 6030
  tmp___50 = 1;
} else {
#line 6030
  tmp___50 = 0;
}
---------
SID [4299] -> Line 6030
#line 6030
if ((unsigned long )string1 <= (unsigned long )*(regstart + regno)) {
#line 6030
  if ((unsigned long )*(regstart + regno) <= (unsigned long )(string1 + size1)) {
#line 6030
    tmp___50 = 1;
  } else {
#line 6030
    tmp___50 = 0;
  }
} else {
#line 6030
  tmp___50 = 0;
}
---------
SID [4298] -> Line 6030
#line 6030
if (size1) {
#line 6030
  if ((unsigned long )string1 <= (unsigned long )*(regstart + regno)) {
#line 6030
    if ((unsigned long )*(regstart + regno) <= (unsigned long )(string1 + size1)) {
#line 6030
      tmp___50 = 1;
    } else {
#line 6030
      tmp___50 = 0;
    }
  } else {
#line 6030
    tmp___50 = 0;
  }
} else {
#line 6030
  tmp___50 = 0;
}
---------
SID [4297] -> Line 6023
#line 6023
d2 = *(regstart + regno);
---------
SID [4296] -> Line -1

---------
SID [4295] -> Line 6020
#line 6020
goto fail;
---------
SID [4294] -> Line 6019
#line 6019
if ((unsigned long )*(regend + regno) == (unsigned long )((char *)-1)) {
#line 6020
  goto fail;
} else {

}
---------
SID [4293] -> Line 6020
#line 6020
goto fail;
---------
SID [4292] -> Line 6019
#line 6019
if ((unsigned long )*(regstart + regno) == (unsigned long )((char *)-1)) {
#line 6020
  goto fail;
} else
#line 6019
if ((unsigned long )*(regend + regno) == (unsigned long )((char *)-1)) {
#line 6020
  goto fail;
} else {

}
---------
SID [4291] -> Line 6015
#line 6015
regno = (int )*tmp___47;
---------
SID [4290] -> Line 6015
#line 6015
p ++;
---------
SID [4289] -> Line 6015
case 7U: 
#line 6015
tmp___47 = p;
---------
SID [4288] -> Line 6007
#line 6007
break;
---------
SID [4287] -> Line 6006
#line 6006
p += 2;
---------
SID [4286] -> Line -1

---------
SID [4285] -> Line -1

---------
SID [4284] -> Line -1

---------
SID [4283] -> Line -1

---------
SID [4282] -> Line -1

---------
SID [4281] -> Line -1

---------
SID [4280] -> Line 6001
#line 6001
goto fail;
---------
SID [4279] -> Line 5999
#line 5999
break;
---------
SID [4278] -> Line 5999
#line 5999
*(fail_stack.stack + tmp___46) = (fail_stack_elt_t )d;
---------
SID [4277] -> Line 5999
#line 5999
(fail_stack.avail) ++;
---------
SID [4276] -> Line 5999
#line 5999
tmp___46 = fail_stack.avail;
---------
SID [4275] -> Line 5999
#line 5999
*(fail_stack.stack + tmp___45) = (fail_stack_elt_t )p1 + mcnt;
---------
SID [4274] -> Line 5999
#line 5999
(fail_stack.avail) ++;
---------
SID [4273] -> Line 5999
#line 5999
tmp___45 = fail_stack.avail;
---------
SID [4272] -> Line 5999
#line 5999
*(fail_stack.stack + tmp___44) = (fail_stack_elt_t )highest_active_reg;
---------
SID [4271] -> Line 5999
#line 5999
(fail_stack.avail) ++;
---------
SID [4270] -> Line 5999
#line 5999
tmp___44 = fail_stack.avail;
---------
SID [4269] -> Line 5999
#line 5999
*(fail_stack.stack + tmp___43) = (fail_stack_elt_t )lowest_active_reg;
---------
SID [4268] -> Line 5999
#line 5999
(fail_stack.avail) ++;
---------
SID [4267] -> Line 5999
#line 5999
tmp___43 = fail_stack.avail;
---------
SID [4266] -> Line 5999
#line 5999
this_reg ++;
---------
SID [4265] -> Line 5999
#line 5999
*(fail_stack.stack + tmp___42) = (reg_info + this_reg)->word;
---------
SID [4264] -> Line 5999
#line 5999
(fail_stack.avail) ++;
---------
SID [4263] -> Line 5999
#line 5999
tmp___42 = fail_stack.avail;
---------
SID [4262] -> Line 5999
#line 5999
*(fail_stack.stack + tmp___41) = (fail_stack_elt_t )*(regend + this_reg);
---------
SID [4261] -> Line 5999
#line 5999
(fail_stack.avail) ++;
---------
SID [4260] -> Line 5999
#line 5999
tmp___41 = fail_stack.avail;
---------
SID [4259] -> Line 5999
#line 5999
*(fail_stack.stack + tmp___40) = (fail_stack_elt_t )*(regstart + this_reg);
---------
SID [4258] -> Line 5999
#line 5999
(fail_stack.avail) ++;
---------
SID [4257] -> Line 5999
#line 5999
tmp___40 = fail_stack.avail;
---------
SID [4256] -> Line 5999
#line 5999
break;
---------
SID [4255] -> Line -1

---------
SID [4254] -> Line 5999
#line 5999
if ((unsigned int )this_reg <= highest_active_reg) {

} else {
#line 5999
  break;
}
---------
SID [4253] -> Line 5999
#line 5999
while ((unsigned int )this_reg <= highest_active_reg) {
#line 5999
  tmp___40 = fail_stack.avail;
#line 5999
  (fail_stack.avail) ++;
#line 5999
  *(fail_stack.stack + tmp___40) = (fail_stack_elt_t )*(regstart + this_reg);
#line 5999
  tmp___41 = fail_stack.avail;
#line 5999
  (fail_stack.avail) ++;
#line 5999
  *(fail_stack.stack + tmp___41) = (fail_stack_elt_t )*(regend + this_reg);
#line 5999
  tmp___42 = fail_stack.avail;
#line 5999
  (fail_stack.avail) ++;
#line 5999
  *(fail_stack.stack + tmp___42) = (reg_info + this_reg)->word;
#line 5999
  this_reg ++;
}
---------
SID [4252] -> Line 5999
#line 5999
this_reg = (int )lowest_active_reg;
---------
SID [4251] -> Line 5999
#line 5999
return (-2);
---------
SID [4250] -> Line -1

---------
SID [4249] -> Line 5999
#line 5999
if (tmp___39) {

} else {
#line 5999
  return (-2);
}
---------
SID [4248] -> Line 5999
#line 5999
tmp___39 = tmp___38;
---------
SID [4247] -> Line 5999
#line 5999
tmp___38 = 1;
---------
SID [4246] -> Line 5999
#line 5999
fail_stack.size <<= 1;
---------
SID [4245] -> Line 5999
#line 5999
tmp___38 = 0;
---------
SID [4244] -> Line 5999
#line 5999
if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
#line 5999
  tmp___38 = 0;
} else {
#line 5999
  fail_stack.size <<= 1;
#line 5999
  tmp___38 = 1;
}
---------
SID [4243] -> Line 5999
#line 5999
fail_stack.stack = (fail_stack_elt_t *)destination;
---------
SID [4242] -> Line 5999
#line 5999
memcpy((void */* __restrict  */)destination,
       (void const   */* __restrict  */)fail_stack.stack,
       (unsigned long )fail_stack.size * sizeof(fail_stack_elt_t ));
---------
SID [4241] -> Line 5999
#line 5999
destination = (char *)tmp___37;
---------
SID [4240] -> Line 5999
#line 5999
tmp___37 = __builtin_alloca((unsigned long )(fail_stack.size << 1) * sizeof(fail_stack_elt_t ));
---------
SID [4239] -> Line 5999
#line 5999
tmp___39 = 0;
---------
SID [4238] -> Line 5999
#line 5999
if (fail_stack.size > (unsigned int )re_max_failures * ((num_regs - 1U) * 3U + 4U)) {
#line 5999
  tmp___39 = 0;
} else {
#line 5999
  tmp___37 = __builtin_alloca((unsigned long )(fail_stack.size << 1) * sizeof(fail_stack_elt_t ));
#line 5999
  destination = (char *)tmp___37;
#line 5999
  memcpy((void */* __restrict  */)destination,
         (void const   */* __restrict  */)fail_stack.stack,
         (unsigned long )fail_stack.size * sizeof(fail_stack_elt_t ));
#line 5999
  fail_stack.stack = (fail_stack_elt_t *)destination;
#line 5999
  if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
#line 5999
    tmp___38 = 0;
  } else {
#line 5999
    fail_stack.size <<= 1;
#line 5999
    tmp___38 = 1;
  }
#line 5999
  tmp___39 = tmp___38;
}
---------
SID [4237] -> Line 5999
#line 5999
break;
---------
SID [4236] -> Line -1

---------
SID [4235] -> Line 5999
#line 5999
if (fail_stack.size - fail_stack.avail < ((highest_active_reg - lowest_active_reg) + 1U) * 3U + 4U) {

} else {
#line 5999
  break;
}
---------
SID [4234] -> Line 5999
#line 5999
while (fail_stack.size - fail_stack.avail < ((highest_active_reg - lowest_active_reg) + 1U) * 3U + 4U) {
#line 5999
  if (fail_stack.size > (unsigned int )re_max_failures * ((num_regs - 1U) * 3U + 4U)) {
#line 5999
    tmp___39 = 0;
  } else {
#line 5999
    tmp___37 = __builtin_alloca((unsigned long )(fail_stack.size << 1) * sizeof(fail_stack_elt_t ));
#line 5999
    destination = (char *)tmp___37;
#line 5999
    memcpy((void */* __restrict  */)destination,
           (void const   */* __restrict  */)fail_stack.stack,
           (unsigned long )fail_stack.size * sizeof(fail_stack_elt_t ));
#line 5999
    fail_stack.stack = (fail_stack_elt_t *)destination;
#line 5999
    if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
#line 5999
      tmp___38 = 0;
    } else {
#line 5999
      fail_stack.size <<= 1;
#line 5999
      tmp___38 = 1;
    }
#line 5999
    tmp___39 = tmp___38;
  }
#line 5999
  if (tmp___39) {

  } else {
#line 5999
    return (-2);
  }
}
---------
SID [4233] -> Line 5999
#line 5999
while (1) {
#line 5999
  while (fail_stack.size - fail_stack.avail < ((highest_active_reg - lowest_active_reg) + 1U) * 3U + 4U) {
#line 5999
    if (fail_stack.size > (unsigned int )re_max_failures * ((num_regs - 1U) * 3U + 4U)) {
#line 5999
      tmp___39 = 0;
    } else {
#line 5999
      tmp___37 = __builtin_alloca((unsigned long )(fail_stack.size << 1) * sizeof(fail_stack_elt_t ));
#line 5999
      destination = (char *)tmp___37;
#line 5999
      memcpy((void */* __restrict  */)destination,
             (void const   */* __restrict  */)fail_stack.stack,
             (unsigned long )fail_stack.size * sizeof(fail_stack_elt_t ));
#line 5999
      fail_stack.stack = (fail_stack_elt_t *)destination;
#line 5999
      if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
#line 5999
        tmp___38 = 0;
      } else {
#line 5999
        fail_stack.size <<= 1;
#line 5999
        tmp___38 = 1;
      }
#line 5999
      tmp___39 = tmp___38;
    }
#line 5999
    if (tmp___39) {

    } else {
#line 5999
      return (-2);
    }
  }
#line 5999
  this_reg = (int )lowest_active_reg;
#line 5999
  while ((unsigned int )this_reg <= highest_active_reg) {
#line 5999
    tmp___40 = fail_stack.avail;
#line 5999
    (fail_stack.avail) ++;
#line 5999
    *(fail_stack.stack + tmp___40) = (fail_stack_elt_t )*(regstart + this_reg);
#line 5999
    tmp___41 = fail_stack.avail;
#line 5999
    (fail_stack.avail) ++;
#line 5999
    *(fail_stack.stack + tmp___41) = (fail_stack_elt_t )*(regend + this_reg);
#line 5999
    tmp___42 = fail_stack.avail;
#line 5999
    (fail_stack.avail) ++;
#line 5999
    *(fail_stack.stack + tmp___42) = (reg_info + this_reg)->word;
#line 5999
    this_reg ++;
  }
#line 5999
  tmp___43 = fail_stack.avail;
#line 5999
  (fail_stack.avail) ++;
#line 5999
  *(fail_stack.stack + tmp___43) = (fail_stack_elt_t )lowest_active_reg;
#line 5999
  tmp___44 = fail_stack.avail;
#line 5999
  (fail_stack.avail) ++;
#line 5999
  *(fail_stack.stack + tmp___44) = (fail_stack_elt_t )highest_active_reg;
#line 5999
  tmp___45 = fail_stack.avail;
#line 5999
  (fail_stack.avail) ++;
#line 5999
  *(fail_stack.stack + tmp___45) = (fail_stack_elt_t )p1 + mcnt;
#line 5999
  tmp___46 = fail_stack.avail;
#line 5999
  (fail_stack.avail) ++;
#line 5999
  *(fail_stack.stack + tmp___46) = (fail_stack_elt_t )d;
#line 5999
  break;
}
---------
SID [4232] -> Line 5998
#line 5998
break;
---------
SID [4231] -> Line 5998
#line 5998
p1 += 2;
---------
SID [4230] -> Line 5998
#line 5998
break;
---------
SID [4229] -> Line 5998
#line 5998
mcnt += (int )((signed char )*(p1 + 1)) << 8;
---------
SID [4228] -> Line 5998
#line 5998
mcnt = (int )*p1 & 255;
---------
SID [4227] -> Line 5998
#line 5998
while (1) {
#line 5998
  mcnt = (int )*p1 & 255;
#line 5998
  mcnt += (int )((signed char )*(p1 + 1)) << 8;
#line 5998
  break;
}
---------
SID [4226] -> Line 5998
#line 5998
while (1) {
#line 5998
  while (1) {
#line 5998
    mcnt = (int )*p1 & 255;
#line 5998
    mcnt += (int )((signed char )*(p1 + 1)) << 8;
#line 5998
    break;
  }
#line 5998
  p1 += 2;
#line 5998
  break;
}
---------
SID [4225] -> Line 5997
#line 5997
p1 ++;
---------
SID [4224] -> Line -1

---------
SID [4223] -> Line 5988
#line 5988
r___3 ++;
---------
SID [4222] -> Line -1

---------
SID [4221] -> Line 5994
#line 5994
*(regend + r___3) = *(old_regend + r___3);
---------
SID [4220] -> Line 5993
#line 5993
if ((int )*(old_regend + r___3) >= (int )*(regstart + r___3)) {
#line 5994
  *(regend + r___3) = *(old_regend + r___3);
} else {

}
---------
SID [4219] -> Line 5990
#line 5990
*(regstart + r___3) = *(old_regstart + r___3);
---------
SID [4218] -> Line 5988
#line 5988
break;
---------
SID [4217] -> Line -1

---------
SID [4216] -> Line 5988
#line 5988
if (r___3 < (unsigned int )((int )*p + (int )*(p + 1))) {

} else {
#line 5988
  break;
}
---------
SID [4215] -> Line 5988
#line 5988
while (r___3 < (unsigned int )((int )*p + (int )*(p + 1))) {
#line 5990
  *(regstart + r___3) = *(old_regstart + r___3);
#line 5993
  if ((int )*(old_regend + r___3) >= (int )*(regstart + r___3)) {
#line 5994
    *(regend + r___3) = *(old_regend + r___3);
  } else {

  }
#line 5988
  r___3 ++;
}
---------
SID [4214] -> Line 5988
#line 5988
r___3 = (unsigned int )*p;
---------
SID [4213] -> Line 5985
#line 5985
(reg_info + *p)->bits.ever_matched_something = 0U;
---------
SID [4212] -> Line 5981
#line 5981
if ((reg_info + *p)->bits.ever_matched_something) {
#line 5985
  (reg_info + *p)->bits.ever_matched_something = 0U;
#line 5988
  r___3 = (unsigned int )*p;
#line 5988
  while (r___3 < (unsigned int )((int )*p + (int )*(p + 1))) {
#line 5990
    *(regstart + r___3) = *(old_regstart + r___3);
#line 5993
    if ((int )*(old_regend + r___3) >= (int )*(regstart + r___3)) {
#line 5994
      *(regend + r___3) = *(old_regend + r___3);
    } else {

    }
#line 5988
    r___3 ++;
  }
} else {

}
---------
SID [4211] -> Line 5968
#line 5968
if ((int )*(p1 + 4) == (int )*p) {
#line 5981
  if ((reg_info + *p)->bits.ever_matched_something) {
#line 5985
    (reg_info + *p)->bits.ever_matched_something = 0U;
#line 5988
    r___3 = (unsigned int )*p;
#line 5988
    while (r___3 < (unsigned int )((int )*p + (int )*(p + 1))) {
#line 5990
      *(regstart + r___3) = *(old_regstart + r___3);
#line 5993
      if ((int )*(old_regend + r___3) >= (int )*(regstart + r___3)) {
#line 5994
        *(regend + r___3) = *(old_regend + r___3);
      } else {

      }
#line 5988
      r___3 ++;
    }
  } else {

  }
#line 5997
  p1 ++;
#line 5998
  while (1) {
#line 5998
    while (1) {
#line 5998
      mcnt = (int )*p1 & 255;
#line 5998
      mcnt += (int )((signed char )*(p1 + 1)) << 8;
#line 5998
      break;
    }
#line 5998
    p1 += 2;
#line 5998
    break;
  }
#line 5999
  while (1) {
#line 5999
    while (fail_stack.size - fail_stack.avail < ((highest_active_reg - lowest_active_reg) + 1U) * 3U + 4U) {
#line 5999
      if (fail_stack.size > (unsigned int )re_max_failures * ((num_regs - 1U) * 3U + 4U)) {
#line 5999
        tmp___39 = 0;
      } else {
#line 5999
        tmp___37 = __builtin_alloca((unsigned long )(fail_stack.size << 1) * sizeof(fail_stack_elt_t ));
#line 5999
        destination = (char *)tmp___37;
#line 5999
        memcpy((void */* __restrict  */)destination,
               (void const   */* __restrict  */)fail_stack.stack,
               (unsigned long )fail_stack.size * sizeof(fail_stack_elt_t ));
#line 5999
        fail_stack.stack = (fail_stack_elt_t *)destination;
#line 5999
        if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
#line 5999
          tmp___38 = 0;
        } else {
#line 5999
          fail_stack.size <<= 1;
#line 5999
          tmp___38 = 1;
        }
#line 5999
        tmp___39 = tmp___38;
      }
#line 5999
      if (tmp___39) {

      } else {
#line 5999
        return (-2);
      }
    }
#line 5999
    this_reg = (int )lowest_active_reg;
#line 5999
    while ((unsigned int )this_reg <= highest_active_reg) {
#line 5999
      tmp___40 = fail_stack.avail;
#line 5999
      (fail_stack.avail) ++;
#line 5999
      *(fail_stack.stack + tmp___40) = (fail_stack_elt_t )*(regstart + this_reg);
#line 5999
      tmp___41 = fail_stack.avail;
#line 5999
      (fail_stack.avail) ++;
#line 5999
      *(fail_stack.stack + tmp___41) = (fail_stack_elt_t )*(regend + this_reg);
#line 5999
      tmp___42 = fail_stack.avail;
#line 5999
      (fail_stack.avail) ++;
#line 5999
      *(fail_stack.stack + tmp___42) = (reg_info + this_reg)->word;
#line 5999
      this_reg ++;
    }
#line 5999
    tmp___43 = fail_stack.avail;
#line 5999
    (fail_stack.avail) ++;
#line 5999
    *(fail_stack.stack + tmp___43) = (fail_stack_elt_t )lowest_active_reg;
#line 5999
    tmp___44 = fail_stack.avail;
#line 5999
    (fail_stack.avail) ++;
#line 5999
    *(fail_stack.stack + tmp___44) = (fail_stack_elt_t )highest_active_reg;
#line 5999
    tmp___45 = fail_stack.avail;
#line 5999
    (fail_stack.avail) ++;
#line 5999
    *(fail_stack.stack + tmp___45) = (fail_stack_elt_t )p1 + mcnt;
#line 5999
    tmp___46 = fail_stack.avail;
#line 5999
    (fail_stack.avail) ++;
#line 5999
    *(fail_stack.stack + tmp___46) = (fail_stack_elt_t )d;
#line 5999
    break;
  }
#line 6001
  goto fail;
} else {

}
---------
SID [4210] -> Line 5968
#line 5968
if ((unsigned int )((re_opcode_t )*(p1 + 3)) == 5U) {
#line 5968
  if ((int )*(p1 + 4) == (int )*p) {
#line 5981
    if ((reg_info + *p)->bits.ever_matched_something) {
#line 5985
      (reg_info + *p)->bits.ever_matched_something = 0U;
#line 5988
      r___3 = (unsigned int )*p;
#line 5988
      while (r___3 < (unsigned int )((int )*p + (int )*(p + 1))) {
#line 5990
        *(regstart + r___3) = *(old_regstart + r___3);
#line 5993
        if ((int )*(old_regend + r___3) >= (int )*(regstart + r___3)) {
#line 5994
          *(regend + r___3) = *(old_regend + r___3);
        } else {

        }
#line 5988
        r___3 ++;
      }
    } else {

    }
#line 5997
    p1 ++;
#line 5998
    while (1) {
#line 5998
      while (1) {
#line 5998
        mcnt = (int )*p1 & 255;
#line 5998
        mcnt += (int )((signed char )*(p1 + 1)) << 8;
#line 5998
        break;
      }
#line 5998
      p1 += 2;
#line 5998
      break;
    }
#line 5999
    while (1) {
#line 5999
      while (fail_stack.size - fail_stack.avail < ((highest_active_reg - lowest_active_reg) + 1U) * 3U + 4U) {
#line 5999
        if (fail_stack.size > (unsigned int )re_max_failures * ((num_regs - 1U) * 3U + 4U)) {
#line 5999
          tmp___39 = 0;
        } else {
#line 5999
          tmp___37 = __builtin_alloca((unsigned long )(fail_stack.size << 1) * sizeof(fail_stack_elt_t ));
#line 5999
          destination = (char *)tmp___37;
#line 5999
          memcpy((void */* __restrict  */)destination,
                 (void const   */* __restrict  */)fail_stack.stack,
                 (unsigned long )fail_stack.size * sizeof(fail_stack_elt_t ));
#line 5999
          fail_stack.stack = (fail_stack_elt_t *)destination;
#line 5999
          if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
#line 5999
            tmp___38 = 0;
          } else {
#line 5999
            fail_stack.size <<= 1;
#line 5999
            tmp___38 = 1;
          }
#line 5999
          tmp___39 = tmp___38;
        }
#line 5999
        if (tmp___39) {

        } else {
#line 5999
          return (-2);
        }
      }
#line 5999
      this_reg = (int )lowest_active_reg;
#line 5999
      while ((unsigned int )this_reg <= highest_active_reg) {
#line 5999
        tmp___40 = fail_stack.avail;
#line 5999
        (fail_stack.avail) ++;
#line 5999
        *(fail_stack.stack + tmp___40) = (fail_stack_elt_t )*(regstart + this_reg);
#line 5999
        tmp___41 = fail_stack.avail;
#line 5999
        (fail_stack.avail) ++;
#line 5999
        *(fail_stack.stack + tmp___41) = (fail_stack_elt_t )*(regend + this_reg);
#line 5999
        tmp___42 = fail_stack.avail;
#line 5999
        (fail_stack.avail) ++;
#line 5999
        *(fail_stack.stack + tmp___42) = (reg_info + this_reg)->word;
#line 5999
        this_reg ++;
      }
#line 5999
      tmp___43 = fail_stack.avail;
#line 5999
      (fail_stack.avail) ++;
#line 5999
      *(fail_stack.stack + tmp___43) = (fail_stack_elt_t )lowest_active_reg;
#line 5999
      tmp___44 = fail_stack.avail;
#line 5999
      (fail_stack.avail) ++;
#line 5999
      *(fail_stack.stack + tmp___44) = (fail_stack_elt_t )highest_active_reg;
#line 5999
      tmp___45 = fail_stack.avail;
#line 5999
      (fail_stack.avail) ++;
#line 5999
      *(fail_stack.stack + tmp___45) = (fail_stack_elt_t )p1 + mcnt;
#line 5999
      tmp___46 = fail_stack.avail;
#line 5999
      (fail_stack.avail) ++;
#line 5999
      *(fail_stack.stack + tmp___46) = (fail_stack_elt_t )d;
#line 5999
      break;
    }
#line 6001
    goto fail;
  } else {

  }
} else {

}
---------
SID [4209] -> Line 5968
#line 5968
if ((unsigned int )((re_opcode_t )*p1) == 14U) {
#line 5968
  if ((unsigned int )((re_opcode_t )*(p1 + 3)) == 5U) {
#line 5968
    if ((int )*(p1 + 4) == (int )*p) {
#line 5981
      if ((reg_info + *p)->bits.ever_matched_something) {
#line 5985
        (reg_info + *p)->bits.ever_matched_something = 0U;
#line 5988
        r___3 = (unsigned int )*p;
#line 5988
        while (r___3 < (unsigned int )((int )*p + (int )*(p + 1))) {
#line 5990
          *(regstart + r___3) = *(old_regstart + r___3);
#line 5993
          if ((int )*(old_regend + r___3) >= (int )*(regstart + r___3)) {
#line 5994
            *(regend + r___3) = *(old_regend + r___3);
          } else {

          }
#line 5988
          r___3 ++;
        }
      } else {

      }
#line 5997
      p1 ++;
#line 5998
      while (1) {
#line 5998
        while (1) {
#line 5998
          mcnt = (int )*p1 & 255;
#line 5998
          mcnt += (int )((signed char )*(p1 + 1)) << 8;
#line 5998
          break;
        }
#line 5998
        p1 += 2;
#line 5998
        break;
      }
#line 5999
      while (1) {
#line 5999
        while (fail_stack.size - fail_stack.avail < ((highest_active_reg - lowest_active_reg) + 1U) * 3U + 4U) {
#line 5999
          if (fail_stack.size > (unsigned int )re_max_failures * ((num_regs - 1U) * 3U + 4U)) {
#line 5999
            tmp___39 = 0;
          } else {
#line 5999
            tmp___37 = __builtin_alloca((unsigned long )(fail_stack.size << 1) * sizeof(fail_stack_elt_t ));
#line 5999
            destination = (char *)tmp___37;
#line 5999
            memcpy((void */* __restrict  */)destination,
                   (void const   */* __restrict  */)fail_stack.stack,
                   (unsigned long )fail_stack.size * sizeof(fail_stack_elt_t ));
#line 5999
            fail_stack.stack = (fail_stack_elt_t *)destination;
#line 5999
            if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
#line 5999
              tmp___38 = 0;
            } else {
#line 5999
              fail_stack.size <<= 1;
#line 5999
              tmp___38 = 1;
            }
#line 5999
            tmp___39 = tmp___38;
          }
#line 5999
          if (tmp___39) {

          } else {
#line 5999
            return (-2);
          }
        }
#line 5999
        this_reg = (int )lowest_active_reg;
#line 5999
        while ((unsigned int )this_reg <= highest_active_reg) {
#line 5999
          tmp___40 = fail_stack.avail;
#line 5999
          (fail_stack.avail) ++;
#line 5999
          *(fail_stack.stack + tmp___40) = (fail_stack_elt_t )*(regstart + this_reg);
#line 5999
          tmp___41 = fail_stack.avail;
#line 5999
          (fail_stack.avail) ++;
#line 5999
          *(fail_stack.stack + tmp___41) = (fail_stack_elt_t )*(regend + this_reg);
#line 5999
          tmp___42 = fail_stack.avail;
#line 5999
          (fail_stack.avail) ++;
#line 5999
          *(fail_stack.stack + tmp___42) = (reg_info + this_reg)->word;
#line 5999
          this_reg ++;
        }
#line 5999
        tmp___43 = fail_stack.avail;
#line 5999
        (fail_stack.avail) ++;
#line 5999
        *(fail_stack.stack + tmp___43) = (fail_stack_elt_t )lowest_active_reg;
#line 5999
        tmp___44 = fail_stack.avail;
#line 5999
        (fail_stack.avail) ++;
#line 5999
        *(fail_stack.stack + tmp___44) = (fail_stack_elt_t )highest_active_reg;
#line 5999
        tmp___45 = fail_stack.avail;
#line 5999
        (fail_stack.avail) ++;
#line 5999
        *(fail_stack.stack + tmp___45) = (fail_stack_elt_t )p1 + mcnt;
#line 5999
        tmp___46 = fail_stack.avail;
#line 5999
        (fail_stack.avail) ++;
#line 5999
        *(fail_stack.stack + tmp___46) = (fail_stack_elt_t )d;
#line 5999
        break;
      }
#line 6001
      goto fail;
    } else {

    }
  } else {

  }
} else {

}
---------
SID [4208] -> Line 5968
#line 5968
if (mcnt < 0) {
#line 5968
  if ((unsigned int )((re_opcode_t )*p1) == 14U) {
#line 5968
    if ((unsigned int )((re_opcode_t )*(p1 + 3)) == 5U) {
#line 5968
      if ((int )*(p1 + 4) == (int )*p) {
#line 5981
        if ((reg_info + *p)->bits.ever_matched_something) {
#line 5985
          (reg_info + *p)->bits.ever_matched_something = 0U;
#line 5988
          r___3 = (unsigned int )*p;
#line 5988
          while (r___3 < (unsigned int )((int )*p + (int )*(p + 1))) {
#line 5990
            *(regstart + r___3) = *(old_regstart + r___3);
#line 5993
            if ((int )*(old_regend + r___3) >= (int )*(regstart + r___3)) {
#line 5994
              *(regend + r___3) = *(old_regend + r___3);
            } else {

            }
#line 5988
            r___3 ++;
          }
        } else {

        }
#line 5997
        p1 ++;
#line 5998
        while (1) {
#line 5998
          while (1) {
#line 5998
            mcnt = (int )*p1 & 255;
#line 5998
            mcnt += (int )((signed char )*(p1 + 1)) << 8;
#line 5998
            break;
          }
#line 5998
          p1 += 2;
#line 5998
          break;
        }
#line 5999
        while (1) {
#line 5999
          while (fail_stack.size - fail_stack.avail < ((highest_active_reg - lowest_active_reg) + 1U) * 3U + 4U) {
#line 5999
            if (fail_stack.size > (unsigned int )re_max_failures * ((num_regs - 1U) * 3U + 4U)) {
#line 5999
              tmp___39 = 0;
            } else {
#line 5999
              tmp___37 = __builtin_alloca((unsigned long )(fail_stack.size << 1) * sizeof(fail_stack_elt_t ));
#line 5999
              destination = (char *)tmp___37;
#line 5999
              memcpy((void */* __restrict  */)destination,
                     (void const   */* __restrict  */)fail_stack.stack,
                     (unsigned long )fail_stack.size * sizeof(fail_stack_elt_t ));
#line 5999
              fail_stack.stack = (fail_stack_elt_t *)destination;
#line 5999
              if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
#line 5999
                tmp___38 = 0;
              } else {
#line 5999
                fail_stack.size <<= 1;
#line 5999
                tmp___38 = 1;
              }
#line 5999
              tmp___39 = tmp___38;
            }
#line 5999
            if (tmp___39) {

            } else {
#line 5999
              return (-2);
            }
          }
#line 5999
          this_reg = (int )lowest_active_reg;
#line 5999
          while ((unsigned int )this_reg <= highest_active_reg) {
#line 5999
            tmp___40 = fail_stack.avail;
#line 5999
            (fail_stack.avail) ++;
#line 5999
            *(fail_stack.stack + tmp___40) = (fail_stack_elt_t )*(regstart + this_reg);
#line 5999
            tmp___41 = fail_stack.avail;
#line 5999
            (fail_stack.avail) ++;
#line 5999
            *(fail_stack.stack + tmp___41) = (fail_stack_elt_t )*(regend + this_reg);
#line 5999
            tmp___42 = fail_stack.avail;
#line 5999
            (fail_stack.avail) ++;
#line 5999
            *(fail_stack.stack + tmp___42) = (reg_info + this_reg)->word;
#line 5999
            this_reg ++;
          }
#line 5999
          tmp___43 = fail_stack.avail;
#line 5999
          (fail_stack.avail) ++;
#line 5999
          *(fail_stack.stack + tmp___43) = (fail_stack_elt_t )lowest_active_reg;
#line 5999
          tmp___44 = fail_stack.avail;
#line 5999
          (fail_stack.avail) ++;
#line 5999
          *(fail_stack.stack + tmp___44) = (fail_stack_elt_t )highest_active_reg;
#line 5999
          tmp___45 = fail_stack.avail;
#line 5999
          (fail_stack.avail) ++;
#line 5999
          *(fail_stack.stack + tmp___45) = (fail_stack_elt_t )p1 + mcnt;
#line 5999
          tmp___46 = fail_stack.avail;
#line 5999
          (fail_stack.avail) ++;
#line 5999
          *(fail_stack.stack + tmp___46) = (fail_stack_elt_t )d;
#line 5999
          break;
        }
#line 6001
        goto fail;
      } else {

      }
    } else {

    }
  } else {

  }
} else {

}
---------
SID [4207] -> Line 5961
#line 5961
p1 += mcnt;
---------
SID [4206] -> Line -1
default: ;
---------
SID [4205] -> Line 5956
#line 5956
break;
---------
SID [4204] -> Line -1

---------
SID [4203] -> Line 5955
#line 5955
p1 += 2;
---------
SID [4202] -> Line 5954
#line 5954
if (is_a_jump_n) {
#line 5955
  p1 += 2;
} else {

}
---------
SID [4201] -> Line 5953
#line 5953
break;
---------
SID [4200] -> Line 5953
#line 5953
p1 += 2;
---------
SID [4199] -> Line 5953
#line 5953
break;
---------
SID [4198] -> Line 5953
#line 5953
mcnt += (int )((signed char )*(p1 + 1)) << 8;
---------
SID [4197] -> Line 5953
#line 5953
mcnt = (int )*p1 & 255;
---------
SID [4196] -> Line 5953
#line 5953
while (1) {
#line 5953
  mcnt = (int )*p1 & 255;
#line 5953
  mcnt += (int )((signed char )*(p1 + 1)) << 8;
#line 5953
  break;
}
---------
SID [4195] -> Line 5953
case 18U: 
case 12U: 
case 17U: 
case 16U: 
#line 5953
while (1) {
#line 5953
  while (1) {
#line 5953
    mcnt = (int )*p1 & 255;
#line 5953
    mcnt += (int )((signed char )*(p1 + 1)) << 8;
#line 5953
    break;
  }
#line 5953
  p1 += 2;
#line 5953
  break;
}
---------
SID [4194] -> Line 5948
case 21U: 
#line 5948
is_a_jump_n = (boolean )1;
---------
SID [4193] -> Line 5945
#line 5945
switch ((unsigned int )((re_opcode_t )*tmp___36)) {
case 21U: 
#line 5948
is_a_jump_n = (boolean )1;
case 18U: 
case 12U: 
case 17U: 
case 16U: 
#line 5953
while (1) {
#line 5953
  while (1) {
#line 5953
    mcnt = (int )*p1 & 255;
#line 5953
    mcnt += (int )((signed char )*(p1 + 1)) << 8;
#line 5953
    break;
  }
#line 5953
  p1 += 2;
#line 5953
  break;
}
#line 5954
if (is_a_jump_n) {
#line 5955
  p1 += 2;
} else {

}
#line 5956
break;
default: ;
}
---------
SID [4192] -> Line 5945
#line 5945
p1 ++;
---------
SID [4191] -> Line 5945
#line 5945
tmp___36 = p1;
---------
SID [4190] -> Line 5944
#line 5944
mcnt = 0;
---------
SID [4189] -> Line 5943
#line 5943
p1 = p + 2;
---------
SID [4188] -> Line 5941
#line 5941
is_a_jump_n = (boolean )0;
---------
SID [4187] -> Line 5937
_L___2: /* CIL Label */ 
#line 5937
if ((unsigned long )(p + 2) < (unsigned long )pend) {
#line 5941
  is_a_jump_n = (boolean )0;
#line 5943
  p1 = p + 2;
#line 5944
  mcnt = 0;
#line 5945
  tmp___36 = p1;
#line 5945
  p1 ++;
#line 5945
  switch ((unsigned int )((re_opcode_t )*tmp___36)) {
  case 21U: 
#line 5948
  is_a_jump_n = (boolean )1;
  case 18U: 
  case 12U: 
  case 17U: 
  case 16U: 
#line 5953
  while (1) {
#line 5953
    while (1) {
#line 5953
      mcnt = (int )*p1 & 255;
#line 5953
      mcnt += (int )((signed char )*(p1 + 1)) << 8;
#line 5953
      break;
    }
#line 5953
    p1 += 2;
#line 5953
    break;
  }
#line 5954
  if (is_a_jump_n) {
#line 5955
    p1 += 2;
  } else {

  }
#line 5956
  break;
  default: ;
  }
#line 5961
  p1 += mcnt;
#line 5968
  if (mcnt < 0) {
#line 5968
    if ((unsigned int )((re_opcode_t )*p1) == 14U) {
#line 5968
      if ((unsigned int )((re_opcode_t )*(p1 + 3)) == 5U) {
#line 5968
        if ((int )*(p1 + 4) == (int )*p) {
#line 5981
          if ((reg_info + *p)->bits.ever_matched_something) {
#line 5985
            (reg_info + *p)->bits.ever_matched_something = 0U;
#line 5988
            r___3 = (unsigned int )*p;
#line 5988
            while (r___3 < (unsigned int )((int )*p + (int )*(p + 1))) {
#line 5990
              *(regstart + r___3) = *(old_regstart + r___3);
#line 5993
              if ((int )*(old_regend + r___3) >= (int )*(regstart + r___3)) {
#line 5994
                *(regend + r___3) = *(old_regend + r___3);
              } else {

              }
#line 5988
              r___3 ++;
            }
          } else {

          }
#line 5997
          p1 ++;
#line 5998
          while (1) {
#line 5998
            while (1) {
#line 5998
              mcnt = (int )*p1 & 255;
#line 5998
              mcnt += (int )((signed char )*(p1 + 1)) << 8;
#line 5998
              break;
            }
#line 5998
            p1 += 2;
#line 5998
            break;
          }
#line 5999
          while (1) {
#line 5999
            while (fail_stack.size - fail_stack.avail < ((highest_active_reg - lowest_active_reg) + 1U) * 3U + 4U) {
#line 5999
              if (fail_stack.size > (unsigned int )re_max_failures * ((num_regs - 1U) * 3U + 4U)) {
#line 5999
                tmp___39 = 0;
              } else {
#line 5999
                tmp___37 = __builtin_alloca((unsigned long )(fail_stack.size << 1) * sizeof(fail_stack_elt_t ));
#line 5999
                destination = (char *)tmp___37;
#line 5999
                memcpy((void */* __restrict  */)destination,
                       (void const   */* __restrict  */)fail_stack.stack,
                       (unsigned long )fail_stack.size * sizeof(fail_stack_elt_t ));
#line 5999
                fail_stack.stack = (fail_stack_elt_t *)destination;
#line 5999
                if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
#line 5999
                  tmp___38 = 0;
                } else {
#line 5999
                  fail_stack.size <<= 1;
#line 5999
                  tmp___38 = 1;
                }
#line 5999
                tmp___39 = tmp___38;
              }
#line 5999
              if (tmp___39) {

              } else {
#line 5999
                return (-2);
              }
            }
#line 5999
            this_reg = (int )lowest_active_reg;
#line 5999
            while ((unsigned int )this_reg <= highest_active_reg) {
#line 5999
              tmp___40 = fail_stack.avail;
#line 5999
              (fail_stack.avail) ++;
#line 5999
              *(fail_stack.stack + tmp___40) = (fail_stack_elt_t )*(regstart + this_reg);
#line 5999
              tmp___41 = fail_stack.avail;
#line 5999
              (fail_stack.avail) ++;
#line 5999
              *(fail_stack.stack + tmp___41) = (fail_stack_elt_t )*(regend + this_reg);
#line 5999
              tmp___42 = fail_stack.avail;
#line 5999
              (fail_stack.avail) ++;
#line 5999
              *(fail_stack.stack + tmp___42) = (reg_info + this_reg)->word;
#line 5999
              this_reg ++;
            }
#line 5999
            tmp___43 = fail_stack.avail;
#line 5999
            (fail_stack.avail) ++;
#line 5999
            *(fail_stack.stack + tmp___43) = (fail_stack_elt_t )lowest_active_reg;
#line 5999
            tmp___44 = fail_stack.avail;
#line 5999
            (fail_stack.avail) ++;
#line 5999
            *(fail_stack.stack + tmp___44) = (fail_stack_elt_t )highest_active_reg;
#line 5999
            tmp___45 = fail_stack.avail;
#line 5999
            (fail_stack.avail) ++;
#line 5999
            *(fail_stack.stack + tmp___45) = (fail_stack_elt_t )p1 + mcnt;
#line 5999
            tmp___46 = fail_stack.avail;
#line 5999
            (fail_stack.avail) ++;
#line 5999
            *(fail_stack.stack + tmp___46) = (fail_stack_elt_t )d;
#line 5999
            break;
          }
#line 6001
          goto fail;
        } else {

        }
      } else {

      }
    } else {

    }
  } else {

  }
} else {

}
---------
SID [4186] -> Line 5937
#line 5937
if ((unsigned int )((re_opcode_t )*(p + -3)) == 5U) {
  _L___2: /* CIL Label */ 
#line 5937
  if ((unsigned long )(p + 2) < (unsigned long )pend) {
#line 5941
    is_a_jump_n = (boolean )0;
#line 5943
    p1 = p + 2;
#line 5944
    mcnt = 0;
#line 5945
    tmp___36 = p1;
#line 5945
    p1 ++;
#line 5945
    switch ((unsigned int )((re_opcode_t )*tmp___36)) {
    case 21U: 
#line 5948
    is_a_jump_n = (boolean )1;
    case 18U: 
    case 12U: 
    case 17U: 
    case 16U: 
#line 5953
    while (1) {
#line 5953
      while (1) {
#line 5953
        mcnt = (int )*p1 & 255;
#line 5953
        mcnt += (int )((signed char )*(p1 + 1)) << 8;
#line 5953
        break;
      }
#line 5953
      p1 += 2;
#line 5953
      break;
    }
#line 5954
    if (is_a_jump_n) {
#line 5955
      p1 += 2;
    } else {

    }
#line 5956
    break;
    default: ;
    }
#line 5961
    p1 += mcnt;
#line 5968
    if (mcnt < 0) {
#line 5968
      if ((unsigned int )((re_opcode_t )*p1) == 14U) {
#line 5968
        if ((unsigned int )((re_opcode_t )*(p1 + 3)) == 5U) {
#line 5968
          if ((int )*(p1 + 4) == (int )*p) {
#line 5981
            if ((reg_info + *p)->bits.ever_matched_something) {
#line 5985
              (reg_info + *p)->bits.ever_matched_something = 0U;
#line 5988
              r___3 = (unsigned int )*p;
#line 5988
              while (r___3 < (unsigned int )((int )*p + (int )*(p + 1))) {
#line 5990
                *(regstart + r___3) = *(old_regstart + r___3);
#line 5993
                if ((int )*(old_regend + r___3) >= (int )*(regstart + r___3)) {
#line 5994
                  *(regend + r___3) = *(old_regend + r___3);
                } else {

                }
#line 5988
                r___3 ++;
              }
            } else {

            }
#line 5997
            p1 ++;
#line 5998
            while (1) {
#line 5998
              while (1) {
#line 5998
                mcnt = (int )*p1 & 255;
#line 5998
                mcnt += (int )((signed char )*(p1 + 1)) << 8;
#line 5998
                break;
              }
#line 5998
              p1 += 2;
#line 5998
              break;
            }
#line 5999
            while (1) {
#line 5999
              while (fail_stack.size - fail_stack.avail < ((highest_active_reg - lowest_active_reg) + 1U) * 3U + 4U) {
#line 5999
                if (fail_stack.size > (unsigned int )re_max_failures * ((num_regs - 1U) * 3U + 4U)) {
#line 5999
                  tmp___39 = 0;
                } else {
#line 5999
                  tmp___37 = __builtin_alloca((unsigned long )(fail_stack.size << 1) * sizeof(fail_stack_elt_t ));
#line 5999
                  destination = (char *)tmp___37;
#line 5999
                  memcpy((void */* __restrict  */)destination,
                         (void const   */* __restrict  */)fail_stack.stack,
                         (unsigned long )fail_stack.size * sizeof(fail_stack_elt_t ));
#line 5999
                  fail_stack.stack = (fail_stack_elt_t *)destination;
#line 5999
                  if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
#line 5999
                    tmp___38 = 0;
                  } else {
#line 5999
                    fail_stack.size <<= 1;
#line 5999
                    tmp___38 = 1;
                  }
#line 5999
                  tmp___39 = tmp___38;
                }
#line 5999
                if (tmp___39) {

                } else {
#line 5999
                  return (-2);
                }
              }
#line 5999
              this_reg = (int )lowest_active_reg;
#line 5999
              while ((unsigned int )this_reg <= highest_active_reg) {
#line 5999
                tmp___40 = fail_stack.avail;
#line 5999
                (fail_stack.avail) ++;
#line 5999
                *(fail_stack.stack + tmp___40) = (fail_stack_elt_t )*(regstart + this_reg);
#line 5999
                tmp___41 = fail_stack.avail;
#line 5999
                (fail_stack.avail) ++;
#line 5999
                *(fail_stack.stack + tmp___41) = (fail_stack_elt_t )*(regend + this_reg);
#line 5999
                tmp___42 = fail_stack.avail;
#line 5999
                (fail_stack.avail) ++;
#line 5999
                *(fail_stack.stack + tmp___42) = (reg_info + this_reg)->word;
#line 5999
                this_reg ++;
              }
#line 5999
              tmp___43 = fail_stack.avail;
#line 5999
              (fail_stack.avail) ++;
#line 5999
              *(fail_stack.stack + tmp___43) = (fail_stack_elt_t )lowest_active_reg;
#line 5999
              tmp___44 = fail_stack.avail;
#line 5999
              (fail_stack.avail) ++;
#line 5999
              *(fail_stack.stack + tmp___44) = (fail_stack_elt_t )highest_active_reg;
#line 5999
              tmp___45 = fail_stack.avail;
#line 5999
              (fail_stack.avail) ++;
#line 5999
              *(fail_stack.stack + tmp___45) = (fail_stack_elt_t )p1 + mcnt;
#line 5999
              tmp___46 = fail_stack.avail;
#line 5999
              (fail_stack.avail) ++;
#line 5999
              *(fail_stack.stack + tmp___46) = (fail_stack_elt_t )d;
#line 5999
              break;
            }
#line 6001
            goto fail;
          } else {

          }
        } else {

        }
      } else {

      }
    } else {

    }
  } else {

  }
} else {

}
---------
SID [4185] -> Line 5937
#line 5937
goto _L___2;
---------
SID [4184] -> Line 5937
#line 5937
if (! (reg_info + *p)->bits.matched_something) {
#line 5937
  goto _L___2;
} else
#line 5937
if ((unsigned int )((re_opcode_t )*(p + -3)) == 5U) {
  _L___2: /* CIL Label */ 
#line 5937
  if ((unsigned long )(p + 2) < (unsigned long )pend) {
#line 5941
    is_a_jump_n = (boolean )0;
#line 5943
    p1 = p + 2;
#line 5944
    mcnt = 0;
#line 5945
    tmp___36 = p1;
#line 5945
    p1 ++;
#line 5945
    switch ((unsigned int )((re_opcode_t )*tmp___36)) {
    case 21U: 
#line 5948
    is_a_jump_n = (boolean )1;
    case 18U: 
    case 12U: 
    case 17U: 
    case 16U: 
#line 5953
    while (1) {
#line 5953
      while (1) {
#line 5953
        mcnt = (int )*p1 & 255;
#line 5953
        mcnt += (int )((signed char )*(p1 + 1)) << 8;
#line 5953
        break;
      }
#line 5953
      p1 += 2;
#line 5953
      break;
    }
#line 5954
    if (is_a_jump_n) {
#line 5955
      p1 += 2;
    } else {

    }
#line 5956
    break;
    default: ;
    }
#line 5961
    p1 += mcnt;
#line 5968
    if (mcnt < 0) {
#line 5968
      if ((unsigned int )((re_opcode_t )*p1) == 14U) {
#line 5968
        if ((unsigned int )((re_opcode_t )*(p1 + 3)) == 5U) {
#line 5968
          if ((int )*(p1 + 4) == (int )*p) {
#line 5981
            if ((reg_info + *p)->bits.ever_matched_something) {
#line 5985
              (reg_info + *p)->bits.ever_matched_something = 0U;
#line 5988
              r___3 = (unsigned int )*p;
#line 5988
              while (r___3 < (unsigned int )((int )*p + (int )*(p + 1))) {
#line 5990
                *(regstart + r___3) = *(old_regstart + r___3);
#line 5993
                if ((int )*(old_regend + r___3) >= (int )*(regstart + r___3)) {
#line 5994
                  *(regend + r___3) = *(old_regend + r___3);
                } else {

                }
#line 5988
                r___3 ++;
              }
            } else {

            }
#line 5997
            p1 ++;
#line 5998
            while (1) {
#line 5998
              while (1) {
#line 5998
                mcnt = (int )*p1 & 255;
#line 5998
                mcnt += (int )((signed char )*(p1 + 1)) << 8;
#line 5998
                break;
              }
#line 5998
              p1 += 2;
#line 5998
              break;
            }
#line 5999
            while (1) {
#line 5999
              while (fail_stack.size - fail_stack.avail < ((highest_active_reg - lowest_active_reg) + 1U) * 3U + 4U) {
#line 5999
                if (fail_stack.size > (unsigned int )re_max_failures * ((num_regs - 1U) * 3U + 4U)) {
#line 5999
                  tmp___39 = 0;
                } else {
#line 5999
                  tmp___37 = __builtin_alloca((unsigned long )(fail_stack.size << 1) * sizeof(fail_stack_elt_t ));
#line 5999
                  destination = (char *)tmp___37;
#line 5999
                  memcpy((void */* __restrict  */)destination,
                         (void const   */* __restrict  */)fail_stack.stack,
                         (unsigned long )fail_stack.size * sizeof(fail_stack_elt_t ));
#line 5999
                  fail_stack.stack = (fail_stack_elt_t *)destination;
#line 5999
                  if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
#line 5999
                    tmp___38 = 0;
                  } else {
#line 5999
                    fail_stack.size <<= 1;
#line 5999
                    tmp___38 = 1;
                  }
#line 5999
                  tmp___39 = tmp___38;
                }
#line 5999
                if (tmp___39) {

                } else {
#line 5999
                  return (-2);
                }
              }
#line 5999
              this_reg = (int )lowest_active_reg;
#line 5999
              while ((unsigned int )this_reg <= highest_active_reg) {
#line 5999
                tmp___40 = fail_stack.avail;
#line 5999
                (fail_stack.avail) ++;
#line 5999
                *(fail_stack.stack + tmp___40) = (fail_stack_elt_t )*(regstart + this_reg);
#line 5999
                tmp___41 = fail_stack.avail;
#line 5999
                (fail_stack.avail) ++;
#line 5999
                *(fail_stack.stack + tmp___41) = (fail_stack_elt_t )*(regend + this_reg);
#line 5999
                tmp___42 = fail_stack.avail;
#line 5999
                (fail_stack.avail) ++;
#line 5999
                *(fail_stack.stack + tmp___42) = (reg_info + this_reg)->word;
#line 5999
                this_reg ++;
              }
#line 5999
              tmp___43 = fail_stack.avail;
#line 5999
              (fail_stack.avail) ++;
#line 5999
              *(fail_stack.stack + tmp___43) = (fail_stack_elt_t )lowest_active_reg;
#line 5999
              tmp___44 = fail_stack.avail;
#line 5999
              (fail_stack.avail) ++;
#line 5999
              *(fail_stack.stack + tmp___44) = (fail_stack_elt_t )highest_active_reg;
#line 5999
              tmp___45 = fail_stack.avail;
#line 5999
              (fail_stack.avail) ++;
#line 5999
              *(fail_stack.stack + tmp___45) = (fail_stack_elt_t )p1 + mcnt;
#line 5999
              tmp___46 = fail_stack.avail;
#line 5999
              (fail_stack.avail) ++;
#line 5999
              *(fail_stack.stack + tmp___46) = (fail_stack_elt_t )d;
#line 5999
              break;
            }
#line 6001
            goto fail;
          } else {

          }
        } else {

        }
      } else {

      }
    } else {

    }
  } else {

  }
} else {

}
---------
SID [4183] -> Line 5929
#line 5929
highest_active_reg = (unsigned int )r___2;
---------
SID [4182] -> Line 5926
#line 5926
highest_active_reg = (unsigned int )(1 << 8);
---------
SID [4181] -> Line 5925
#line 5925
lowest_active_reg = (unsigned int )((1 << 8) + 1);
---------
SID [4180] -> Line 5923
#line 5923
if ((int )r___2 == 0) {
#line 5925
  lowest_active_reg = (unsigned int )((1 << 8) + 1);
#line 5926
  highest_active_reg = (unsigned int )(1 << 8);
} else {
#line 5929
  highest_active_reg = (unsigned int )r___2;
}
---------
SID [4179] -> Line 5914
#line 5914
r___2 = (unsigned char )((int )r___2 - 1);
---------
SID [4178] -> Line 5913
#line 5913
break;
---------
SID [4177] -> Line 5913
#line 5913
break;
---------
SID [4176] -> Line -1

---------
SID [4175] -> Line 5913
#line 5913
if (! (reg_info + r___2)->bits.is_active) {

} else {
#line 5913
  break;
}
---------
SID [4174] -> Line 5913
#line 5913
if ((int )r___2 > 0) {
#line 5913
  if (! (reg_info + r___2)->bits.is_active) {

  } else {
#line 5913
    break;
  }
} else {
#line 5913
  break;
}
---------
SID [4173] -> Line 5913
#line 5913
while (1) {
#line 5913
  if ((int )r___2 > 0) {
#line 5913
    if (! (reg_info + r___2)->bits.is_active) {

    } else {
#line 5913
      break;
    }
  } else {
#line 5913
    break;
  }
#line 5914
  r___2 = (unsigned char )((int )r___2 - 1);
}
---------
SID [4172] -> Line 5912
#line 5912
r___2 = (unsigned char )((int )*p - 1);
---------
SID [4171] -> Line 5905
#line 5905
highest_active_reg = (unsigned int )(1 << 8);
---------
SID [4170] -> Line 5904
#line 5904
lowest_active_reg = (unsigned int )((1 << 8) + 1);
---------
SID [4169] -> Line 5902
#line 5902
if (lowest_active_reg == highest_active_reg) {
#line 5904
  lowest_active_reg = (unsigned int )((1 << 8) + 1);
#line 5905
  highest_active_reg = (unsigned int )(1 << 8);
} else {
#line 5912
  r___2 = (unsigned char )((int )*p - 1);
#line 5913
  while (1) {
#line 5913
    if ((int )r___2 > 0) {
#line 5913
      if (! (reg_info + r___2)->bits.is_active) {

      } else {
#line 5913
        break;
      }
    } else {
#line 5913
      break;
    }
#line 5914
    r___2 = (unsigned char )((int )r___2 - 1);
  }
#line 5923
  if ((int )r___2 == 0) {
#line 5925
    lowest_active_reg = (unsigned int )((1 << 8) + 1);
#line 5926
    highest_active_reg = (unsigned int )(1 << 8);
  } else {
#line 5929
    highest_active_reg = (unsigned int )r___2;
  }
}
---------
SID [4168] -> Line 5898
#line 5898
(reg_info + *p)->bits.is_active = 0U;
---------
SID [4167] -> Line 5894
#line 5894
*(regend + *p) = d;
---------
SID [4166] -> Line 5888
#line 5888
*(old_regend + *p) = *(regend + *p);
---------
SID [4165] -> Line 5888
#line 5888
*(old_regend + *p) = tmp___35;
---------
SID [4164] -> Line 5888
#line 5888
tmp___35 = *(regend + *p);
---------
SID [4163] -> Line 5888
#line 5888
tmp___35 = d;
---------
SID [4162] -> Line 5888
#line 5888
if ((unsigned long )*(regend + *p) == (unsigned long )((char *)-1)) {
#line 5888
  tmp___35 = d;
} else {
#line 5888
  tmp___35 = *(regend + *p);
}
---------
SID [4161] -> Line 5888
#line 5888
if ((reg_info + *p)->bits.match_null_string_p) {
#line 5888
  if ((unsigned long )*(regend + *p) == (unsigned long )((char *)-1)) {
#line 5888
    tmp___35 = d;
  } else {
#line 5888
    tmp___35 = *(regend + *p);
  }
#line 5888
  *(old_regend + *p) = tmp___35;
} else {
#line 5888
  *(old_regend + *p) = *(regend + *p);
}
---------
SID [4160] -> Line -1
case 6U: ;
---------
SID [4159] -> Line 5874
#line 5874
break;
---------
SID [4158] -> Line 5873
#line 5873
p += 2;
---------
SID [4157] -> Line -1

---------
SID [4156] -> Line 5870
#line 5870
lowest_active_reg = (unsigned int )*p;
---------
SID [4155] -> Line 5869
#line 5869
if (lowest_active_reg == (unsigned int )((1 << 8) + 1)) {
#line 5870
  lowest_active_reg = (unsigned int )*p;
} else {

}
---------
SID [4154] -> Line 5865
#line 5865
highest_active_reg = (unsigned int )*p;
---------
SID [4153] -> Line 5862
#line 5862
(reg_info + *p)->bits.matched_something = 0U;
---------
SID [4152] -> Line 5861
#line 5861
(reg_info + *p)->bits.is_active = 1U;
---------
SID [4151] -> Line 5858
#line 5858
*(regstart + *p) = d;
---------
SID [4150] -> Line 5852
#line 5852
*(old_regstart + *p) = *(regstart + *p);
---------
SID [4149] -> Line 5852
#line 5852
*(old_regstart + *p) = tmp___34;
---------
SID [4148] -> Line 5852
#line 5852
tmp___34 = *(regstart + *p);
---------
SID [4147] -> Line 5852
#line 5852
tmp___34 = d;
---------
SID [4146] -> Line 5852
#line 5852
if ((unsigned long )*(regstart + *p) == (unsigned long )((char *)-1)) {
#line 5852
  tmp___34 = d;
} else {
#line 5852
  tmp___34 = *(regstart + *p);
}
---------
SID [4145] -> Line 5852
#line 5852
if ((reg_info + *p)->bits.match_null_string_p) {
#line 5852
  if ((unsigned long )*(regstart + *p) == (unsigned long )((char *)-1)) {
#line 5852
    tmp___34 = d;
  } else {
#line 5852
    tmp___34 = *(regstart + *p);
  }
#line 5852
  *(old_regstart + *p) = tmp___34;
} else {
#line 5852
  *(old_regstart + *p) = *(regstart + *p);
}
---------
SID [4144] -> Line -1

---------
SID [4143] -> Line 5844
#line 5844
(reg_info + *p)->bits.match_null_string_p = (unsigned int )tmp___33;
---------
SID [4142] -> Line 5844
#line 5844
tmp___33 = group_match_null_string_p(& p1, pend, reg_info);
---------
SID [4141] -> Line 5843
#line 5843
if ((reg_info + *p)->bits.match_null_string_p == 3U) {
#line 5844
  tmp___33 = group_match_null_string_p(& p1, pend, reg_info);
#line 5844
  (reg_info + *p)->bits.match_null_string_p = (unsigned int )tmp___33;
} else {

}
---------
SID [4140] -> Line 5841
case 5U: 
#line 5841
p1 = p;
---------
SID [4139] -> Line 5828
#line 5828
break;
---------
SID [4138] -> Line 5827
#line 5827
d ++;
---------
SID [4137] -> Line 5826
#line 5826
break;
---------
SID [4136] -> Line 5826
#line 5826
r___1 ++;
---------
SID [4135] -> Line 5826
#line 5826
(reg_info + r___1)->bits.matched_something = tmp___32;
---------
SID [4134] -> Line 5826
#line 5826
(reg_info + r___1)->bits.ever_matched_something = tmp___32;
---------
SID [4133] -> Line 5826
#line 5826
tmp___32 = 1U;
---------
SID [4132] -> Line 5826
#line 5826
break;
---------
SID [4131] -> Line -1

---------
SID [4130] -> Line 5826
#line 5826
if (r___1 <= highest_active_reg) {

} else {
#line 5826
  break;
}
---------
SID [4129] -> Line 5826
#line 5826
while (r___1 <= highest_active_reg) {
#line 5826
  tmp___32 = 1U;
#line 5826
  (reg_info + r___1)->bits.ever_matched_something = tmp___32;
#line 5826
  (reg_info + r___1)->bits.matched_something = tmp___32;
#line 5826
  r___1 ++;
}
---------
SID [4128] -> Line 5826
#line 5826
r___1 = lowest_active_reg;
---------
SID [4127] -> Line 5826
#line 5826
while (1) {
#line 5826
  r___1 = lowest_active_reg;
#line 5826
  while (r___1 <= highest_active_reg) {
#line 5826
    tmp___32 = 1U;
#line 5826
    (reg_info + r___1)->bits.ever_matched_something = tmp___32;
#line 5826
    (reg_info + r___1)->bits.matched_something = tmp___32;
#line 5826
    r___1 ++;
  }
#line 5826
  break;
}
---------
SID [4126] -> Line -1

---------
SID [4125] -> Line 5824
#line 5824
goto fail;
---------
SID [4124] -> Line 5824
#line 5824
if (! not) {
#line 5824
  goto fail;
} else {

}
---------
SID [4123] -> Line 5822
#line 5822
p += 1 + (int )*p;
---------
SID [4122] -> Line -1

---------
SID [4121] -> Line -1

---------
SID [4120] -> Line 5820
#line 5820
not = (boolean )(! not);
---------
SID [4119] -> Line 5818
#line 5818
if ((int )*(p + (1 + (int )c / 8)) & (1 << (int )c % 8)) {
#line 5820
  not = (boolean )(! not);
} else {

}
---------
SID [4118] -> Line 5818
#line 5818
if ((unsigned int )c < (unsigned int )((int )*p * 8)) {
#line 5818
  if ((int )*(p + (1 + (int )c / 8)) & (1 << (int )c % 8)) {
#line 5820
    not = (boolean )(! not);
  } else {

  }
} else {

}
---------
SID [4117] -> Line 5814
#line 5814
c = (unsigned char )*d;
---------
SID [4116] -> Line 5814
#line 5814
c = (unsigned char )*(translate + (unsigned char )*d);
---------
SID [4115] -> Line 5814
#line 5814
if (translate) {
#line 5814
  c = (unsigned char )*(translate + (unsigned char )*d);
} else {
#line 5814
  c = (unsigned char )*d;
}
---------
SID [4114] -> Line 5813
#line 5813
dend = end_match_2;
---------
SID [4113] -> Line 5813
#line 5813
d = string2;
---------
SID [4112] -> Line -1

---------
SID [4111] -> Line 5813
#line 5813
goto fail;
---------
SID [4110] -> Line 5813
#line 5813
if ((unsigned long )dend == (unsigned long )end_match_2) {
#line 5813
  goto fail;
} else {

}
---------
SID [4109] -> Line 5813
#line 5813
break;
---------
SID [4108] -> Line -1

---------
SID [4107] -> Line 5813
#line 5813
if ((unsigned long )d == (unsigned long )dend) {

} else {
#line 5813
  break;
}
---------
SID [4106] -> Line 5813
#line 5813
while ((unsigned long )d == (unsigned long )dend) {
#line 5813
  if ((unsigned long )dend == (unsigned long )end_match_2) {
#line 5813
    goto fail;
  } else {

  }
#line 5813
  d = string2;
#line 5813
  dend = end_match_2;
}
---------
SID [4105] -> Line 5809
case 4U: 
case 3U: 
#line 5809
not = (boolean )((unsigned int )((re_opcode_t )*(p - 1)) == 4U);
---------
SID [4104] -> Line 5802
#line 5802
break;
---------
SID [4103] -> Line 5801
#line 5801
d ++;
---------
SID [4102] -> Line 5799
#line 5799
break;
---------
SID [4101] -> Line 5799
#line 5799
r___0 ++;
---------
SID [4100] -> Line 5799
#line 5799
(reg_info + r___0)->bits.matched_something = tmp___31;
---------
SID [4099] -> Line 5799
#line 5799
(reg_info + r___0)->bits.ever_matched_something = tmp___31;
---------
SID [4098] -> Line 5799
#line 5799
tmp___31 = 1U;
---------
SID [4097] -> Line 5799
#line 5799
break;
---------
SID [4096] -> Line -1

---------
SID [4095] -> Line 5799
#line 5799
if (r___0 <= highest_active_reg) {

} else {
#line 5799
  break;
}
---------
SID [4094] -> Line 5799
#line 5799
while (r___0 <= highest_active_reg) {
#line 5799
  tmp___31 = 1U;
#line 5799
  (reg_info + r___0)->bits.ever_matched_something = tmp___31;
#line 5799
  (reg_info + r___0)->bits.matched_something = tmp___31;
#line 5799
  r___0 ++;
}
---------
SID [4093] -> Line 5799
#line 5799
r___0 = lowest_active_reg;
---------
SID [4092] -> Line 5799
#line 5799
while (1) {
#line 5799
  r___0 = lowest_active_reg;
#line 5799
  while (r___0 <= highest_active_reg) {
#line 5799
    tmp___31 = 1U;
#line 5799
    (reg_info + r___0)->bits.ever_matched_something = tmp___31;
#line 5799
    (reg_info + r___0)->bits.matched_something = tmp___31;
#line 5799
    r___0 ++;
  }
#line 5799
  break;
}
---------
SID [4091] -> Line -1

---------
SID [4090] -> Line -1

---------
SID [4089] -> Line 5797
#line 5797
goto fail;
---------
SID [4088] -> Line 5795
#line 5795
if (tmp___30 == 0) {
#line 5797
  goto fail;
} else {

}
---------
SID [4087] -> Line 5795
#line 5795
tmp___30 = (int )*d;
---------
SID [4086] -> Line 5795
#line 5795
tmp___30 = (int )*(translate + (unsigned char )*d);
---------
SID [4085] -> Line 5795
#line 5795
if (translate) {
#line 5795
  tmp___30 = (int )*(translate + (unsigned char )*d);
} else {
#line 5795
  tmp___30 = (int )*d;
}
---------
SID [4084] -> Line 5795
_L___1: /* CIL Label */ 
#line 5795
if (bufp->syntax & (unsigned int )(((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 5795
  if (translate) {
#line 5795
    tmp___30 = (int )*(translate + (unsigned char )*d);
  } else {
#line 5795
    tmp___30 = (int )*d;
  }
#line 5795
  if (tmp___30 == 0) {
#line 5797
    goto fail;
  } else {

  }
} else {

}
---------
SID [4083] -> Line 5795
#line 5795
goto _L___1;
---------
SID [4082] -> Line 5797
#line 5797
goto fail;
---------
SID [4081] -> Line 5795
#line 5795
if (tmp___29 == 10) {
#line 5797
  goto fail;
} else {
#line 5795
  goto _L___1;
}
---------
SID [4080] -> Line 5795
#line 5795
tmp___29 = (int )*d;
---------
SID [4079] -> Line 5795
#line 5795
tmp___29 = (int )*(translate + (unsigned char )*d);
---------
SID [4078] -> Line 5795
#line 5795
if (translate) {
#line 5795
  tmp___29 = (int )*(translate + (unsigned char )*d);
} else {
#line 5795
  tmp___29 = (int )*d;
}
---------
SID [4077] -> Line 5795
#line 5795
if (! (bufp->syntax & (unsigned int )((((((1 << 1) << 1) << 1) << 1) << 1) << 1))) {
#line 5795
  if (translate) {
#line 5795
    tmp___29 = (int )*(translate + (unsigned char )*d);
  } else {
#line 5795
    tmp___29 = (int )*d;
  }
#line 5795
  if (tmp___29 == 10) {
#line 5797
    goto fail;
  } else {
#line 5795
    goto _L___1;
  }
} else
_L___1: /* CIL Label */ 
#line 5795
if (bufp->syntax & (unsigned int )(((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 5795
  if (translate) {
#line 5795
    tmp___30 = (int )*(translate + (unsigned char )*d);
  } else {
#line 5795
    tmp___30 = (int )*d;
  }
#line 5795
  if (tmp___30 == 0) {
#line 5797
    goto fail;
  } else {

  }
} else {

}
---------
SID [4076] -> Line 5793
#line 5793
dend = end_match_2;
---------
SID [4075] -> Line 5793
#line 5793
d = string2;
---------
SID [4074] -> Line -1

---------
SID [4073] -> Line 5793
#line 5793
goto fail;
---------
SID [4072] -> Line 5793
#line 5793
if ((unsigned long )dend == (unsigned long )end_match_2) {
#line 5793
  goto fail;
} else {

}
---------
SID [4071] -> Line 5793
#line 5793
break;
---------
SID [4070] -> Line -1

---------
SID [4069] -> Line 5793
#line 5793
if ((unsigned long )d == (unsigned long )dend) {

} else {
#line 5793
  break;
}
---------
SID [4068] -> Line 5793
#line 5793
while ((unsigned long )d == (unsigned long )dend) {
#line 5793
  if ((unsigned long )dend == (unsigned long )end_match_2) {
#line 5793
    goto fail;
  } else {

  }
#line 5793
  d = string2;
#line 5793
  dend = end_match_2;
}
---------
SID [4067] -> Line -1
case 2U: ;
---------
SID [4066] -> Line 5786
#line 5786
break;
---------
SID [4065] -> Line 5785
#line 5785
break;
---------
SID [4064] -> Line 5785
#line 5785
r ++;
---------
SID [4063] -> Line 5785
#line 5785
(reg_info + r)->bits.matched_something = tmp___28;
---------
SID [4062] -> Line 5785
#line 5785
(reg_info + r)->bits.ever_matched_something = tmp___28;
---------
SID [4061] -> Line 5785
#line 5785
tmp___28 = 1U;
---------
SID [4060] -> Line 5785
#line 5785
break;
---------
SID [4059] -> Line -1

---------
SID [4058] -> Line 5785
#line 5785
if (r <= highest_active_reg) {

} else {
#line 5785
  break;
}
---------
SID [4057] -> Line 5785
#line 5785
while (r <= highest_active_reg) {
#line 5785
  tmp___28 = 1U;
#line 5785
  (reg_info + r)->bits.ever_matched_something = tmp___28;
#line 5785
  (reg_info + r)->bits.matched_something = tmp___28;
#line 5785
  r ++;
}
---------
SID [4056] -> Line 5785
#line 5785
r = lowest_active_reg;
---------
SID [4055] -> Line 5785
#line 5785
while (1) {
#line 5785
  r = lowest_active_reg;
#line 5785
  while (r <= highest_active_reg) {
#line 5785
    tmp___28 = 1U;
#line 5785
    (reg_info + r)->bits.ever_matched_something = tmp___28;
#line 5785
    (reg_info + r)->bits.matched_something = tmp___28;
#line 5785
    r ++;
  }
#line 5785
  break;
}
---------
SID [4054] -> Line 5778
#line 5778
break;
---------
SID [4053] -> Line -1

---------
SID [4052] -> Line 5778
#line 5778
if (mcnt) {

} else {
#line 5778
  break;
}
---------
SID [4051] -> Line 5778
#line 5778
mcnt --;
---------
SID [4050] -> Line -1

---------
SID [4049] -> Line 5781
#line 5781
goto fail;
---------
SID [4048] -> Line 5781
#line 5781
if ((int const   )*tmp___26 != (int const   )((char )*tmp___27)) {
#line 5781
  goto fail;
} else {

}
---------
SID [4047] -> Line 5781
#line 5781
p ++;
---------
SID [4046] -> Line 5781
#line 5781
tmp___27 = p;
---------
SID [4045] -> Line 5781
#line 5781
d ++;
---------
SID [4044] -> Line 5781
#line 5781
tmp___26 = d;
---------
SID [4043] -> Line 5780
#line 5780
dend = end_match_2;
---------
SID [4042] -> Line 5780
#line 5780
d = string2;
---------
SID [4041] -> Line -1

---------
SID [4040] -> Line 5780
#line 5780
goto fail;
---------
SID [4039] -> Line 5780
#line 5780
if ((unsigned long )dend == (unsigned long )end_match_2) {
#line 5780
  goto fail;
} else {

}
---------
SID [4038] -> Line 5780
#line 5780
break;
---------
SID [4037] -> Line -1

---------
SID [4036] -> Line 5780
#line 5780
if ((unsigned long )d == (unsigned long )dend) {

} else {
#line 5780
  break;
}
---------
SID [4035] -> Line 5780
#line 5780
while ((unsigned long )d == (unsigned long )dend) {
#line 5780
  if ((unsigned long )dend == (unsigned long )end_match_2) {
#line 5780
    goto fail;
  } else {

  }
#line 5780
  d = string2;
#line 5780
  dend = end_match_2;
}
---------
SID [4034] -> Line 5778
#line 5778
while (1) {
#line 5780
  while ((unsigned long )d == (unsigned long )dend) {
#line 5780
    if ((unsigned long )dend == (unsigned long )end_match_2) {
#line 5780
      goto fail;
    } else {

    }
#line 5780
    d = string2;
#line 5780
    dend = end_match_2;
  }
#line 5781
  tmp___26 = d;
#line 5781
  d ++;
#line 5781
  tmp___27 = p;
#line 5781
  p ++;
#line 5781
  if ((int const   )*tmp___26 != (int const   )((char )*tmp___27)) {
#line 5781
    goto fail;
  } else {

  }
#line 5778
  mcnt --;
#line 5778
  if (mcnt) {

  } else {
#line 5778
    break;
  }
}
---------
SID [4033] -> Line 5768
#line 5768
break;
---------
SID [4032] -> Line -1

---------
SID [4031] -> Line 5768
#line 5768
if (mcnt) {

} else {
#line 5768
  break;
}
---------
SID [4030] -> Line 5768
#line 5768
mcnt --;
---------
SID [4029] -> Line -1

---------
SID [4028] -> Line 5772
#line 5772
goto fail;
---------
SID [4027] -> Line 5771
#line 5771
if ((int )*(translate + (unsigned char )*tmp___24) != (int )((char )*tmp___25)) {
#line 5772
  goto fail;
} else {

}
---------
SID [4026] -> Line 5771
#line 5771
p ++;
---------
SID [4025] -> Line 5771
#line 5771
tmp___25 = p;
---------
SID [4024] -> Line 5771
#line 5771
d ++;
---------
SID [4023] -> Line 5771
#line 5771
tmp___24 = d;
---------
SID [4022] -> Line 5770
#line 5770
dend = end_match_2;
---------
SID [4021] -> Line 5770
#line 5770
d = string2;
---------
SID [4020] -> Line -1

---------
SID [4019] -> Line 5770
#line 5770
goto fail;
---------
SID [4018] -> Line 5770
#line 5770
if ((unsigned long )dend == (unsigned long )end_match_2) {
#line 5770
  goto fail;
} else {

}
---------
SID [4017] -> Line 5770
#line 5770
break;
---------
SID [4016] -> Line -1

---------
SID [4015] -> Line 5770
#line 5770
if ((unsigned long )d == (unsigned long )dend) {

} else {
#line 5770
  break;
}
---------
SID [4014] -> Line 5770
#line 5770
while ((unsigned long )d == (unsigned long )dend) {
#line 5770
  if ((unsigned long )dend == (unsigned long )end_match_2) {
#line 5770
    goto fail;
  } else {

  }
#line 5770
  d = string2;
#line 5770
  dend = end_match_2;
}
---------
SID [4013] -> Line 5768
#line 5768
while (1) {
#line 5770
  while ((unsigned long )d == (unsigned long )dend) {
#line 5770
    if ((unsigned long )dend == (unsigned long )end_match_2) {
#line 5770
      goto fail;
    } else {

    }
#line 5770
    d = string2;
#line 5770
    dend = end_match_2;
  }
#line 5771
  tmp___24 = d;
#line 5771
  d ++;
#line 5771
  tmp___25 = p;
#line 5771
  p ++;
#line 5771
  if ((int )*(translate + (unsigned char )*tmp___24) != (int )((char )*tmp___25)) {
#line 5772
    goto fail;
  } else {

  }
#line 5768
  mcnt --;
#line 5768
  if (mcnt) {

  } else {
#line 5768
    break;
  }
}
---------
SID [4012] -> Line 5766
#line 5766
if (translate) {
#line 5768
  while (1) {
#line 5770
    while ((unsigned long )d == (unsigned long )dend) {
#line 5770
      if ((unsigned long )dend == (unsigned long )end_match_2) {
#line 5770
        goto fail;
      } else {

      }
#line 5770
      d = string2;
#line 5770
      dend = end_match_2;
    }
#line 5771
    tmp___24 = d;
#line 5771
    d ++;
#line 5771
    tmp___25 = p;
#line 5771
    p ++;
#line 5771
    if ((int )*(translate + (unsigned char )*tmp___24) != (int )((char )*tmp___25)) {
#line 5772
      goto fail;
    } else {

    }
#line 5768
    mcnt --;
#line 5768
    if (mcnt) {

    } else {
#line 5768
      break;
    }
  }
} else {
#line 5778
  while (1) {
#line 5780
    while ((unsigned long )d == (unsigned long )dend) {
#line 5780
      if ((unsigned long )dend == (unsigned long )end_match_2) {
#line 5780
        goto fail;
      } else {

      }
#line 5780
      d = string2;
#line 5780
      dend = end_match_2;
    }
#line 5781
    tmp___26 = d;
#line 5781
    d ++;
#line 5781
    tmp___27 = p;
#line 5781
    p ++;
#line 5781
    if ((int const   )*tmp___26 != (int const   )((char )*tmp___27)) {
#line 5781
      goto fail;
    } else {

    }
#line 5778
    mcnt --;
#line 5778
    if (mcnt) {

    } else {
#line 5778
      break;
    }
  }
}
---------
SID [4011] -> Line 5761
#line 5761
mcnt = (int )*tmp___23;
---------
SID [4010] -> Line 5761
#line 5761
p ++;
---------
SID [4009] -> Line 5761
case 1U: 
#line 5761
tmp___23 = p;
---------
SID [4008] -> Line 5754
#line 5754
break;
---------
SID [4007] -> Line -1
case 0U: ;
---------
SID [4006] -> Line 5747
#line 5747
switch ((unsigned int )((re_opcode_t )*tmp___22)) {
case 0U: ;
#line 5754
break;
case 1U: 
#line 5761
tmp___23 = p;
#line 5761
p ++;
#line 5761
mcnt = (int )*tmp___23;
#line 5766
if (translate) {
#line 5768
  while (1) {
#line 5770
    while ((unsigned long )d == (unsigned long )dend) {
#line 5770
      if ((unsigned long )dend == (unsigned long )end_match_2) {
#line 5770
        goto fail;
      } else {

      }
#line 5770
      d = string2;
#line 5770
      dend = end_match_2;
    }
#line 5771
    tmp___24 = d;
#line 5771
    d ++;
#line 5771
    tmp___25 = p;
#line 5771
    p ++;
#line 5771
    if ((int )*(translate + (unsigned char )*tmp___24) != (int )((char )*tmp___25)) {
#line 5772
      goto fail;
    } else {

    }
#line 5768
    mcnt --;
#line 5768
    if (mcnt) {

    } else {
#line 5768
      break;
    }
  }
} else {
#line 5778
  while (1) {
#line 5780
    while ((unsigned long )d == (unsigned long )dend) {
#line 5780
      if ((unsigned long )dend == (unsigned long )end_match_2) {
#line 5780
        goto fail;
      } else {

      }
#line 5780
      d = string2;
#line 5780
      dend = end_match_2;
    }
#line 5781
    tmp___26 = d;
#line 5781
    d ++;
#line 5781
    tmp___27 = p;
#line 5781
    p ++;
#line 5781
    if ((int const   )*tmp___26 != (int const   )((char )*tmp___27)) {
#line 5781
      goto fail;
    } else {

    }
#line 5778
    mcnt --;
#line 5778
    if (mcnt) {

    } else {
#line 5778
      break;
    }
  }
}
#line 5785
while (1) {
#line 5785
  r = lowest_active_reg;
#line 5785
  while (r <= highest_active_reg) {
#line 5785
    tmp___28 = 1U;
#line 5785
    (reg_info + r)->bits.ever_matched_something = tmp___28;
#line 5785
    (reg_info + r)->bits.matched_something = tmp___28;
#line 5785
    r ++;
  }
#line 5785
  break;
}
#line 5786
break;
case 2U: ;
#line 5793
while ((unsigned long )d == (unsigned long )dend) {
#line 5793
  if ((unsigned long )dend == (unsigned long )end_match_2) {
#line 5793
    goto fail;
  } else {

  }
#line 5793
  d = string2;
#line 5793
  dend = end_match_2;
}
#line 5795
if (! (bufp->syntax & (unsigned int )((((((1 << 1) << 1) << 1) << 1) << 1) << 1))) {
#line 5795
  if (translate) {
#line 5795
    tmp___29 = (int )*(translate + (unsigned char )*d);
  } else {
#line 5795
    tmp___29 = (int )*d;
  }
#line 5795
  if (tmp___29 == 10) {
#line 5797
    goto fail;
  } else {
#line 5795
    goto _L___1;
  }
} else
_L___1: /* CIL Label */ 
#line 5795
if (bufp->syntax & (unsigned int )(((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 5795
  if (translate) {
#line 5795
    tmp___30 = (int )*(translate + (unsigned char )*d);
  } else {
#line 5795
    tmp___30 = (int )*d;
  }
#line 5795
  if (tmp___30 == 0) {
#line 5797
    goto fail;
  } else {

  }
} else {

}
#line 5799
while (1) {
#line 5799
  r___0 = lowest_active_reg;
#line 5799
  while (r___0 <= highest_active_reg) {
#line 5799
    tmp___31 = 1U;
#line 5799
    (reg_info + r___0)->bits.ever_matched_something = tmp___31;
#line 5799
    (reg_info + r___0)->bits.matched_something = tmp___31;
#line 5799
    r___0 ++;
  }
#line 5799
  break;
}
#line 5801
d ++;
#line 5802
break;
case 4U: 
case 3U: 
#line 5809
not = (boolean )((unsigned int )((re_opcode_t )*(p - 1)) == 4U);
#line 5813
while ((unsigned long )d == (unsigned long )dend) {
#line 5813
  if ((unsigned long )dend == (unsigned long )end_match_2) {
#line 5813
    goto fail;
  } else {

  }
#line 5813
  d = string2;
#line 5813
  dend = end_match_2;
}
#line 5814
if (translate) {
#line 5814
  c = (unsigned char )*(translate + (unsigned char )*d);
} else {
#line 5814
  c = (unsigned char )*d;
}
#line 5818
if ((unsigned int )c < (unsigned int )((int )*p * 8)) {
#line 5818
  if ((int )*(p + (1 + (int )c / 8)) & (1 << (int )c % 8)) {
#line 5820
    not = (boolean )(! not);
  } else {

  }
} else {

}
#line 5822
p += 1 + (int )*p;
#line 5824
if (! not) {
#line 5824
  goto fail;
} else {

}
#line 5826
while (1) {
#line 5826
  r___1 = lowest_active_reg;
#line 5826
  while (r___1 <= highest_active_reg) {
#line 5826
    tmp___32 = 1U;
#line 5826
    (reg_info + r___1)->bits.ever_matched_something = tmp___32;
#line 5826
    (reg_info + r___1)->bits.matched_something = tmp___32;
#line 5826
    r___1 ++;
  }
#line 5826
  break;
}
#line 5827
d ++;
#line 5828
break;
case 5U: 
#line 5841
p1 = p;
#line 5843
if ((reg_info + *p)->bits.match_null_string_p == 3U) {
#line 5844
  tmp___33 = group_match_null_string_p(& p1, pend, reg_info);
#line 5844
  (reg_info + *p)->bits.match_null_string_p = (unsigned int )tmp___33;
} else {

}
#line 5852
if ((reg_info + *p)->bits.match_null_string_p) {
#line 5852
  if ((unsigned long )*(regstart + *p) == (unsigned long )((char *)-1)) {
#line 5852
    tmp___34 = d;
  } else {
#line 5852
    tmp___34 = *(regstart + *p);
  }
#line 5852
  *(old_regstart + *p) = tmp___34;
} else {
#line 5852
  *(old_regstart + *p) = *(regstart + *p);
}
#line 5858
*(regstart + *p) = d;
#line 5861
(reg_info + *p)->bits.is_active = 1U;
#line 5862
(reg_info + *p)->bits.matched_something = 0U;
#line 5865
highest_active_reg = (unsigned int )*p;
#line 5869
if (lowest_active_reg == (unsigned int )((1 << 8) + 1)) {
#line 5870
  lowest_active_reg = (unsigned int )*p;
} else {

}
#line 5873
p += 2;
#line 5874
break;
case 6U: ;
#line 5888
if ((reg_info + *p)->bits.match_null_string_p) {
#line 5888
  if ((unsigned long )*(regend + *p) == (unsigned long )((char *)-1)) {
#line 5888
    tmp___35 = d;
  } else {
#line 5888
    tmp___35 = *(regend + *p);
  }
#line 5888
  *(old_regend + *p) = tmp___35;
} else {
#line 5888
  *(old_regend + *p) = *(regend + *p);
}
#line 5894
*(regend + *p) = d;
#line 5898
(reg_info + *p)->bits.is_active = 0U;
#line 5902
if (lowest_active_reg == highest_active_reg) {
#line 5904
  lowest_active_reg = (unsigned int )((1 << 8) + 1);
#line 5905
  highest_active_reg = (unsigned int )(1 << 8);
} else {
#line 5912
  r___2 = (unsigned char )((int )*p - 1);
#line 5913
  while (1) {
#line 5913
    if ((int )r___2 > 0) {
#line 5913
      if (! (reg_info + r___2)->bits.is_active) {

      } else {
#line 5913
        break;
      }
    } else {
#line 5913
      break;
    }
#line 5914
    r___2 = (unsigned char )((int )r___2 - 1);
  }
#line 5923
  if ((int )r___2 == 0) {
#line 5925
    lowest_active_reg = (unsigned int )((1 << 8) + 1);
#line 5926
    highest_active_reg = (unsigned int )(1 << 8);
  } else {
#line 5929
    highest_active_reg = (unsigned int )r___2;
  }
}
#line 5937
if (! (reg_info + *p)->bits.matched_something) {
#line 5937
  goto _L___2;
} else
#line 5937
if ((unsigned int )((re_opcode_t )*(p + -3)) == 5U) {
  _L___2: /* CIL Label */ 
#line 5937
  if ((unsigned long )(p + 2) < (unsigned long )pend) {
#line 5941
    is_a_jump_n = (boolean )0;
#line 5943
    p1 = p + 2;
#line 5944
    mcnt = 0;
#line 5945
    tmp___36 = p1;
#line 5945
    p1 ++;
#line 5945
    switch ((unsigned int )((re_opcode_t )*tmp___36)) {
    case 21U: 
#line 5948
    is_a_jump_n = (boolean )1;
    case 18U: 
    case 12U: 
    case 17U: 
    case 16U: 
#line 5953
    while (1) {
#line 5953
      while (1) {
#line 5953
        mcnt = (int )*p1 & 255;
#line 5953
        mcnt += (int )((signed char )*(p1 + 1)) << 8;
#line 5953
        break;
      }
#line 5953
      p1 += 2;
#line 5953
      break;
    }
#line 5954
    if (is_a_jump_n) {
#line 5955
      p1 += 2;
    } else {

    }
#line 5956
    break;
    default: ;
    }
#line 5961
    p1 += mcnt;
#line 5968
    if (mcnt < 0) {
#line 5968
      if ((unsigned int )((re_opcode_t )*p1) == 14U) {
#line 5968
        if ((unsigned int )((re_opcode_t )*(p1 + 3)) == 5U) {
#line 5968
          if ((int )*(p1 + 4) == (int )*p) {
#line 5981
            if ((reg_info + *p)->bits.ever_matched_something) {
#line 5985
              (reg_info + *p)->bits.ever_matched_something = 0U;
#line 5988
              r___3 = (unsigned int )*p;
#line 5988
              while (r___3 < (unsigned int )((int )*p + (int )*(p + 1))) {
#line 5990
                *(regstart + r___3) = *(old_regstart + r___3);
#line 5993
                if ((int )*(old_regend + r___3) >= (int )*(regstart + r___3)) {
#line 5994
                  *(regend + r___3) = *(old_regend + r___3);
                } else {

                }
#line 5988
                r___3 ++;
              }
            } else {

            }
#line 5997
            p1 ++;
#line 5998
            while (1) {
#line 5998
              while (1) {
#line 5998
                mcnt = (int )*p1 & 255;
#line 5998
                mcnt += (int )((signed char )*(p1 + 1)) << 8;
#line 5998
                break;
              }
#line 5998
              p1 += 2;
#line 5998
              break;
            }
#line 5999
            while (1) {
#line 5999
              while (fail_stack.size - fail_stack.avail < ((highest_active_reg - lowest_active_reg) + 1U) * 3U + 4U) {
#line 5999
                if (fail_stack.size > (unsigned int )re_max_failures * ((num_regs - 1U) * 3U + 4U)) {
#line 5999
                  tmp___39 = 0;
                } else {
#line 5999
                  tmp___37 = __builtin_alloca((unsigned long )(fail_stack.size << 1) * sizeof(fail_stack_elt_t ));
#line 5999
                  destination = (char *)tmp___37;
#line 5999
                  memcpy((void */* __restrict  */)destination,
                         (void const   */* __restrict  */)fail_stack.stack,
                         (unsigned long )fail_stack.size * sizeof(fail_stack_elt_t ));
#line 5999
                  fail_stack.stack = (fail_stack_elt_t *)destination;
#line 5999
                  if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
#line 5999
                    tmp___38 = 0;
                  } else {
#line 5999
                    fail_stack.size <<= 1;
#line 5999
                    tmp___38 = 1;
                  }
#line 5999
                  tmp___39 = tmp___38;
                }
#line 5999
                if (tmp___39) {

                } else {
#line 5999
                  return (-2);
                }
              }
#line 5999
              this_reg = (int )lowest_active_reg;
#line 5999
              while ((unsigned int )this_reg <= highest_active_reg) {
#line 5999
                tmp___40 = fail_stack.avail;
#line 5999
                (fail_stack.avail) ++;
#line 5999
                *(fail_stack.stack + tmp___40) = (fail_stack_elt_t )*(regstart + this_reg);
#line 5999
                tmp___41 = fail_stack.avail;
#line 5999
                (fail_stack.avail) ++;
#line 5999
                *(fail_stack.stack + tmp___41) = (fail_stack_elt_t )*(regend + this_reg);
#line 5999
                tmp___42 = fail_stack.avail;
#line 5999
                (fail_stack.avail) ++;
#line 5999
                *(fail_stack.stack + tmp___42) = (reg_info + this_reg)->word;
#line 5999
                this_reg ++;
              }
#line 5999
              tmp___43 = fail_stack.avail;
#line 5999
              (fail_stack.avail) ++;
#line 5999
              *(fail_stack.stack + tmp___43) = (fail_stack_elt_t )lowest_active_reg;
#line 5999
              tmp___44 = fail_stack.avail;
#line 5999
              (fail_stack.avail) ++;
#line 5999
              *(fail_stack.stack + tmp___44) = (fail_stack_elt_t )highest_active_reg;
#line 5999
              tmp___45 = fail_stack.avail;
#line 5999
              (fail_stack.avail) ++;
#line 5999
              *(fail_stack.stack + tmp___45) = (fail_stack_elt_t )p1 + mcnt;
#line 5999
              tmp___46 = fail_stack.avail;
#line 5999
              (fail_stack.avail) ++;
#line 5999
              *(fail_stack.stack + tmp___46) = (fail_stack_elt_t )d;
#line 5999
              break;
            }
#line 6001
            goto fail;
          } else {

          }
        } else {

        }
      } else {

      }
    } else {

    }
  } else {

  }
} else {

}
#line 6006
p += 2;
#line 6007
break;
case 7U: 
#line 6015
tmp___47 = p;
#line 6015
p ++;
#line 6015
regno = (int )*tmp___47;
#line 6019
if ((unsigned long )*(regstart + regno) == (unsigned long )((char *)-1)) {
#line 6020
  goto fail;
} else
#line 6019
if ((unsigned long )*(regend + regno) == (unsigned long )((char *)-1)) {
#line 6020
  goto fail;
} else {

}
#line 6023
d2 = *(regstart + regno);
#line 6030
if (size1) {
#line 6030
  if ((unsigned long )string1 <= (unsigned long )*(regstart + regno)) {
#line 6030
    if ((unsigned long )*(regstart + regno) <= (unsigned long )(string1 + size1)) {
#line 6030
      tmp___50 = 1;
    } else {
#line 6030
      tmp___50 = 0;
    }
  } else {
#line 6030
    tmp___50 = 0;
  }
} else {
#line 6030
  tmp___50 = 0;
}
#line 6030
if (size1) {
#line 6030
  if ((unsigned long )string1 <= (unsigned long )*(regend + regno)) {
#line 6030
    if ((unsigned long )*(regend + regno) <= (unsigned long )(string1 + size1)) {
#line 6030
      tmp___51 = 1;
    } else {
#line 6030
      tmp___51 = 0;
    }
  } else {
#line 6030
    tmp___51 = 0;
  }
} else {
#line 6030
  tmp___51 = 0;
}
#line 6030
if (tmp___50 == tmp___51) {
#line 6030
  dend2 = *(regend + regno);
} else {
#line 6030
  dend2 = end_match_1;
}
#line 6033
while (1) {
#line 6037
  while ((unsigned long )d2 == (unsigned long )dend2) {
#line 6039
    if ((unsigned long )dend2 == (unsigned long )end_match_2) {
#line 6039
      break;
    } else {

    }
#line 6040
    if ((unsigned long )dend2 == (unsigned long )*(regend + regno)) {
#line 6040
      break;
    } else {

    }
#line 6043
    d2 = string2;
#line 6044
    dend2 = *(regend + regno);
  }
#line 6047
  if ((unsigned long )d2 == (unsigned long )dend2) {
#line 6047
    break;
  } else {

  }
#line 6050
  while ((unsigned long )d == (unsigned long )dend) {
#line 6050
    if ((unsigned long )dend == (unsigned long )end_match_2) {
#line 6050
      goto fail;
    } else {

    }
#line 6050
    d = string2;
#line 6050
    dend = end_match_2;
  }
#line 6053
  mcnt = (int )(dend - d);
#line 6057
  if ((long )mcnt > dend2 - d2) {
#line 6058
    mcnt = (int )(dend2 - d2);
  } else {

  }
#line 6062
  if (translate) {
#line 6062
    tmp___52 = bcmp_translate(d, d2, mcnt, translate);
#line 6062
    tmp___54 = tmp___52;
  } else {
#line 6062
    tmp___53 = memcmp((void const   *)d, (void const   *)d2, (size_t )mcnt);
#line 6062
    tmp___54 = tmp___53;
  }
#line 6062
  if (tmp___54) {
#line 6065
    goto fail;
  } else {

  }
#line 6066
  d += mcnt;
#line 6066
  d2 += mcnt;
}
#line 6069
break;
case 8U: ;
#line 6078
if (size1) {
#line 6078
  tmp___55 = string1;
} else {
#line 6078
  tmp___55 = string2;
}
#line 6078
if ((unsigned long )d == (unsigned long )tmp___55) {
#line 6078
  goto _L___3;
} else
#line 6078
if (! size2) {
  _L___3: /* CIL Label */ 
#line 6080
  if (! bufp->not_bol) {
#line 6080
    break;
  } else {

  }
} else
#line 6082
if ((int const   )*(d + -1) == 10) {
#line 6082
  if (bufp->newline_anchor) {
#line 6084
    break;
  } else {

  }
} else {

}
#line 6087
goto fail;
case 9U: ;
#line 6094
if ((unsigned long )d == (unsigned long )end2) {
#line 6096
  if (! bufp->not_eol) {
#line 6096
    break;
  } else {

  }
} else {
#line 6100
  if ((unsigned long )d == (unsigned long )end1) {
#line 6100
    tmp___56 = (int const   )*string2;
  } else {
#line 6100
    tmp___56 = (int const   )*d;
  }
#line 6100
  if (tmp___56 == 10) {
#line 6100
    if (bufp->newline_anchor) {
#line 6103
      break;
    } else {

    }
  } else {

  }
}
#line 6105
goto fail;
case 10U: ;
#line 6111
if (size1) {
#line 6111
  tmp___57 = string1;
} else {
#line 6111
  tmp___57 = string2;
}
#line 6111
if ((unsigned long )d == (unsigned long )tmp___57) {
#line 6112
  break;
} else
#line 6111
if (! size2) {
#line 6112
  break;
} else {

}
#line 6113
goto fail;
case 11U: ;
#line 6119
if ((unsigned long )d == (unsigned long )end2) {
#line 6120
  break;
} else {

}
#line 6121
goto fail;
case 15U: ;
#line 6143
while (1) {
#line 6143
  while (1) {
#line 6143
    mcnt = (int )*p & 255;
#line 6143
    mcnt += (int )((signed char )*(p + 1)) << 8;
#line 6143
    break;
  }
#line 6143
  p += 2;
#line 6143
  break;
}
#line 6146
while (1) {
#line 6146
  while (fail_stack.size - fail_stack.avail < ((highest_active_reg - lowest_active_reg) + 1U) * 3U + 4U) {
#line 6146
    if (fail_stack.size > (unsigned int )re_max_failures * ((num_regs - 1U) * 3U + 4U)) {
#line 6146
      tmp___60 = 0;
    } else {
#line 6146
      tmp___58 = __builtin_alloca((unsigned long )(fail_stack.size << 1) * sizeof(fail_stack_elt_t ));
#line 6146
      destination___0 = (char *)tmp___58;
#line 6146
      memcpy((void */* __restrict  */)destination___0,
             (void const   */* __restrict  */)fail_stack.stack,
             (unsigned long )fail_stack.size * sizeof(fail_stack_elt_t ));
#line 6146
      fail_stack.stack = (fail_stack_elt_t *)destination___0;
#line 6146
      if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
#line 6146
        tmp___59 = 0;
      } else {
#line 6146
        fail_stack.size <<= 1;
#line 6146
        tmp___59 = 1;
      }
#line 6146
      tmp___60 = tmp___59;
    }
#line 6146
    if (tmp___60) {

    } else {
#line 6146
      return (-2);
    }
  }
#line 6146
  this_reg___0 = (int )lowest_active_reg;
#line 6146
  while ((unsigned int )this_reg___0 <= highest_active_reg) {
#line 6146
    tmp___61 = fail_stack.avail;
#line 6146
    (fail_stack.avail) ++;
#line 6146
    *(fail_stack.stack + tmp___61) = (fail_stack_elt_t )*(regstart + this_reg___0);
#line 6146
    tmp___62 = fail_stack.avail;
#line 6146
    (fail_stack.avail) ++;
#line 6146
    *(fail_stack.stack + tmp___62) = (fail_stack_elt_t )*(regend + this_reg___0);
#line 6146
    tmp___63 = fail_stack.avail;
#line 6146
    (fail_stack.avail) ++;
#line 6146
    *(fail_stack.stack + tmp___63) = (reg_info + this_reg___0)->word;
#line 6146
    this_reg___0 ++;
  }
#line 6146
  tmp___64 = fail_stack.avail;
#line 6146
  (fail_stack.avail) ++;
#line 6146
  *(fail_stack.stack + tmp___64) = (fail_stack_elt_t )lowest_active_reg;
#line 6146
  tmp___65 = fail_stack.avail;
#line 6146
  (fail_stack.avail) ++;
#line 6146
  *(fail_stack.stack + tmp___65) = (fail_stack_elt_t )highest_active_reg;
#line 6146
  tmp___66 = fail_stack.avail;
#line 6146
  (fail_stack.avail) ++;
#line 6146
  *(fail_stack.stack + tmp___66) = (fail_stack_elt_t )p + mcnt;
#line 6146
  tmp___67 = fail_stack.avail;
#line 6146
  (fail_stack.avail) ++;
#line 6146
  *(fail_stack.stack + tmp___67) = (fail_stack_elt_t )((void *)0);
#line 6146
  break;
}
#line 6147
break;
on_failure: 
case 14U: ;
#line 6166
while (1) {
#line 6166
  while (1) {
#line 6166
    mcnt = (int )*p & 255;
#line 6166
    mcnt += (int )((signed char )*(p + 1)) << 8;
#line 6166
    break;
  }
#line 6166
  p += 2;
#line 6166
  break;
}
#line 6178
p1 = p;
#line 6184
while (1) {
#line 6184
  if ((unsigned long )p1 < (unsigned long )pend) {
#line 6184
    if ((unsigned int )((re_opcode_t )*p1) == 0U) {

    } else {
#line 6184
      break;
    }
  } else {
#line 6184
    break;
  }
#line 6185
  p1 ++;
}
#line 6187
if ((unsigned long )p1 < (unsigned long )pend) {
#line 6187
  if ((unsigned int )((re_opcode_t )*p1) == 5U) {
#line 6193
    highest_active_reg = (unsigned int )((int )*(p1 + 1) + (int )*(p1 + 2));
#line 6194
    if (lowest_active_reg == (unsigned int )((1 << 8) + 1)) {
#line 6195
      lowest_active_reg = (unsigned int )*(p1 + 1);
    } else {

    }
  } else {

  }
} else {

}
#line 6199
while (1) {
#line 6199
  while (fail_stack.size - fail_stack.avail < ((highest_active_reg - lowest_active_reg) + 1U) * 3U + 4U) {
#line 6199
    if (fail_stack.size > (unsigned int )re_max_failures * ((num_regs - 1U) * 3U + 4U)) {
#line 6199
      tmp___70 = 0;
    } else {
#line 6199
      tmp___68 = __builtin_alloca((unsigned long )(fail_stack.size << 1) * sizeof(fail_stack_elt_t ));
#line 6199
      destination___1 = (char *)tmp___68;
#line 6199
      memcpy((void */* __restrict  */)destination___1,
             (void const   */* __restrict  */)fail_stack.stack,
             (unsigned long )fail_stack.size * sizeof(fail_stack_elt_t ));
#line 6199
      fail_stack.stack = (fail_stack_elt_t *)destination___1;
#line 6199
      if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
#line 6199
        tmp___69 = 0;
      } else {
#line 6199
        fail_stack.size <<= 1;
#line 6199
        tmp___69 = 1;
      }
#line 6199
      tmp___70 = tmp___69;
    }
#line 6199
    if (tmp___70) {

    } else {
#line 6199
      return (-2);
    }
  }
#line 6199
  this_reg___1 = (int )lowest_active_reg;
#line 6199
  while ((unsigned int )this_reg___1 <= highest_active_reg) {
#line 6199
    tmp___71 = fail_stack.avail;
#line 6199
    (fail_stack.avail) ++;
#line 6199
    *(fail_stack.stack + tmp___71) = (fail_stack_elt_t )*(regstart + this_reg___1);
#line 6199
    tmp___72 = fail_stack.avail;
#line 6199
    (fail_stack.avail) ++;
#line 6199
    *(fail_stack.stack + tmp___72) = (fail_stack_elt_t )*(regend + this_reg___1);
#line 6199
    tmp___73 = fail_stack.avail;
#line 6199
    (fail_stack.avail) ++;
#line 6199
    *(fail_stack.stack + tmp___73) = (reg_info + this_reg___1)->word;
#line 6199
    this_reg___1 ++;
  }
#line 6199
  tmp___74 = fail_stack.avail;
#line 6199
  (fail_stack.avail) ++;
#line 6199
  *(fail_stack.stack + tmp___74) = (fail_stack_elt_t )lowest_active_reg;
#line 6199
  tmp___75 = fail_stack.avail;
#line 6199
  (fail_stack.avail) ++;
#line 6199
  *(fail_stack.stack + tmp___75) = (fail_stack_elt_t )highest_active_reg;
#line 6199
  tmp___76 = fail_stack.avail;
#line 6199
  (fail_stack.avail) ++;
#line 6199
  *(fail_stack.stack + tmp___76) = (fail_stack_elt_t )p + mcnt;
#line 6199
  tmp___77 = fail_stack.avail;
#line 6199
  (fail_stack.avail) ++;
#line 6199
  *(fail_stack.stack + tmp___77) = (fail_stack_elt_t )d;
#line 6199
  break;
}
#line 6200
break;
case 17U: 
#line 6206
while (1) {
#line 6206
  while (1) {
#line 6206
    mcnt = (int )*p & 255;
#line 6206
    mcnt += (int )((signed char )*(p + 1)) << 8;
#line 6206
    break;
  }
#line 6206
  p += 2;
#line 6206
  break;
}
#line 6209
p2 = p;
#line 6225
while (1) {
#line 6225
  if ((unsigned long )(p2 + 2) < (unsigned long )pend) {
#line 6225
    if ((unsigned int )((re_opcode_t )*p2) == 6U) {

    } else
#line 6225
    if ((unsigned int )((re_opcode_t )*p2) == 5U) {

    } else {
#line 6225
      break;
    }
  } else {
#line 6225
    break;
  }
#line 6228
  p2 += 3;
}
#line 6231
if ((unsigned long )p2 == (unsigned long )pend) {
#line 6236
  *(p + -3) = (unsigned char)16;
} else
#line 6241
if ((unsigned int )((re_opcode_t )*p2) == 1U) {
#line 6241
  goto _L___6;
} else
#line 6241
if (bufp->newline_anchor) {
#line 6241
  if ((unsigned int )((re_opcode_t )*p2) == 9U) {
    _L___6: /* CIL Label */ 
#line 6244
    if ((int )*p2 == 9) {
#line 6244
      tmp___78 = '\n';
    } else {
#line 6244
      tmp___78 = (int )*(p2 + 2);
    }
#line 6244
    c___0 = (unsigned char )tmp___78;
#line 6246
    p1 = p + mcnt;
#line 6251
    if ((unsigned int )((re_opcode_t )*(p1 + 3)) == 1U) {
#line 6251
      if ((int )*(p1 + 5) != (int )c___0) {
#line 6253
        *(p + -3) = (unsigned char)16;
      } else {
#line 6251
        goto _L___5;
      }
    } else
    _L___5: /* CIL Label */ 
#line 6258
    if ((unsigned int )((re_opcode_t )*(p1 + 3)) == 3U) {
#line 6258
      goto _L___4;
    } else
#line 6258
    if ((unsigned int )((re_opcode_t )*(p1 + 3)) == 4U) {
      _L___4: /* CIL Label */ 
#line 6261
      not___0 = (unsigned int )((re_opcode_t )*(p1 + 3)) == 4U;
#line 6263
      if ((int )c___0 < (int )((unsigned char )((int )*(p1 + 4) * 8))) {
#line 6263
        if ((int )*(p1 + (5 + (int )c___0 / 8)) & (1 << (int )c___0 % 8)) {
#line 6265
          not___0 = ! not___0;
        } else {

        }
      } else {

      }
#line 6269
      if (! not___0) {
#line 6271
        *(p + -3) = (unsigned char)16;
      } else {

      }
    } else {

    }
  } else {

  }
} else {

}
#line 6277
p -= 2;
#line 6278
if ((unsigned int )((re_opcode_t )*(p + -1)) != 16U) {
#line 6280
  *(p + -1) = (unsigned char)12;
#line 6282
  goto unconditional_jump;
} else {

}
case 16U: 
#line 6305
(fail_stack.avail) --;
#line 6305
string_temp = *(fail_stack.stack + fail_stack.avail);
#line 6305
if ((unsigned long )string_temp != (unsigned long )((void *)0)) {
#line 6305
  sdummy = (char const   *)string_temp;
} else {

}
#line 6305
(fail_stack.avail) --;
#line 6305
pdummy = (unsigned char *)*(fail_stack.stack + fail_stack.avail);
#line 6305
(fail_stack.avail) --;
#line 6305
dummy_high_reg = (unsigned int )*(fail_stack.stack + fail_stack.avail);
#line 6305
(fail_stack.avail) --;
#line 6305
dummy_low_reg = (unsigned int )*(fail_stack.stack + fail_stack.avail);
#line 6305
this_reg___2 = (int )dummy_high_reg;
#line 6305
while ((unsigned int )this_reg___2 >= dummy_low_reg) {
#line 6305
  (fail_stack.avail) --;
#line 6305
  (reg_info_dummy + this_reg___2)->word = *(fail_stack.stack + fail_stack.avail);
#line 6305
  (fail_stack.avail) --;
#line 6305
  *(reg_dummy + this_reg___2) = (char const   *)*(fail_stack.stack + fail_stack.avail);
#line 6305
  (fail_stack.avail) --;
#line 6305
  *(reg_dummy + this_reg___2) = (char const   *)*(fail_stack.stack + fail_stack.avail);
#line 6305
  this_reg___2 --;
}
unconditional_jump: 
case 12U: 
#line 6315
while (1) {
#line 6315
  while (1) {
#line 6315
    mcnt = (int )*p & 255;
#line 6315
    mcnt += (int )((signed char )*(p + 1)) << 8;
#line 6315
    break;
  }
#line 6315
  p += 2;
#line 6315
  break;
}
#line 6317
p += mcnt;
#line 6319
break;
case 13U: ;
#line 6326
goto unconditional_jump;
case 18U: ;
#line 6338
while (1) {
#line 6338
  while (fail_stack.size - fail_stack.avail < ((highest_active_reg - lowest_active_reg) + 1U) * 3U + 4U) {
#line 6338
    if (fail_stack.size > (unsigned int )re_max_failures * ((num_regs - 1U) * 3U + 4U)) {
#line 6338
      tmp___81 = 0;
    } else {
#line 6338
      tmp___79 = __builtin_alloca((unsigned long )(fail_stack.size << 1) * sizeof(fail_stack_elt_t ));
#line 6338
      destination___2 = (char *)tmp___79;
#line 6338
      memcpy((void */* __restrict  */)destination___2,
             (void const   */* __restrict  */)fail_stack.stack,
             (unsigned long )fail_stack.size * sizeof(fail_stack_elt_t ));
#line 6338
      fail_stack.stack = (fail_stack_elt_t *)destination___2;
#line 6338
      if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
#line 6338
        tmp___80 = 0;
      } else {
#line 6338
        fail_stack.size <<= 1;
#line 6338
        tmp___80 = 1;
      }
#line 6338
      tmp___81 = tmp___80;
    }
#line 6338
    if (tmp___81) {

    } else {
#line 6338
      return (-2);
    }
  }
#line 6338
  this_reg___3 = (int )lowest_active_reg;
#line 6338
  while ((unsigned int )this_reg___3 <= highest_active_reg) {
#line 6338
    tmp___82 = fail_stack.avail;
#line 6338
    (fail_stack.avail) ++;
#line 6338
    *(fail_stack.stack + tmp___82) = (fail_stack_elt_t )*(regstart + this_reg___3);
#line 6338
    tmp___83 = fail_stack.avail;
#line 6338
    (fail_stack.avail) ++;
#line 6338
    *(fail_stack.stack + tmp___83) = (fail_stack_elt_t )*(regend + this_reg___3);
#line 6338
    tmp___84 = fail_stack.avail;
#line 6338
    (fail_stack.avail) ++;
#line 6338
    *(fail_stack.stack + tmp___84) = (reg_info + this_reg___3)->word;
#line 6338
    this_reg___3 ++;
  }
#line 6338
  tmp___85 = fail_stack.avail;
#line 6338
  (fail_stack.avail) ++;
#line 6338
  *(fail_stack.stack + tmp___85) = (fail_stack_elt_t )lowest_active_reg;
#line 6338
  tmp___86 = fail_stack.avail;
#line 6338
  (fail_stack.avail) ++;
#line 6338
  *(fail_stack.stack + tmp___86) = (fail_stack_elt_t )highest_active_reg;
#line 6338
  tmp___87 = fail_stack.avail;
#line 6338
  (fail_stack.avail) ++;
#line 6338
  *(fail_stack.stack + tmp___87) = (fail_stack_elt_t )0;
#line 6338
  tmp___88 = fail_stack.avail;
#line 6338
  (fail_stack.avail) ++;
#line 6338
  *(fail_stack.stack + tmp___88) = (fail_stack_elt_t )0;
#line 6338
  break;
}
#line 6339
goto unconditional_jump;
case 19U: ;
#line 6351
while (1) {
#line 6351
  while (fail_stack.size - fail_stack.avail < ((highest_active_reg - lowest_active_reg) + 1U) * 3U + 4U) {
#line 6351
    if (fail_stack.size > (unsigned int )re_max_failures * ((num_regs - 1U) * 3U + 4U)) {
#line 6351
      tmp___91 = 0;
    } else {
#line 6351
      tmp___89 = __builtin_alloca((unsigned long )(fail_stack.size << 1) * sizeof(fail_stack_elt_t ));
#line 6351
      destination___3 = (char *)tmp___89;
#line 6351
      memcpy((void */* __restrict  */)destination___3,
             (void const   */* __restrict  */)fail_stack.stack,
             (unsigned long )fail_stack.size * sizeof(fail_stack_elt_t ));
#line 6351
      fail_stack.stack = (fail_stack_elt_t *)destination___3;
#line 6351
      if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
#line 6351
        tmp___90 = 0;
      } else {
#line 6351
        fail_stack.size <<= 1;
#line 6351
        tmp___90 = 1;
      }
#line 6351
      tmp___91 = tmp___90;
    }
#line 6351
    if (tmp___91) {

    } else {
#line 6351
      return (-2);
    }
  }
#line 6351
  this_reg___4 = (int )lowest_active_reg;
#line 6351
  while ((unsigned int )this_reg___4 <= highest_active_reg) {
#line 6351
    tmp___92 = fail_stack.avail;
#line 6351
    (fail_stack.avail) ++;
#line 6351
    *(fail_stack.stack + tmp___92) = (fail_stack_elt_t )*(regstart + this_reg___4);
#line 6351
    tmp___93 = fail_stack.avail;
#line 6351
    (fail_stack.avail) ++;
#line 6351
    *(fail_stack.stack + tmp___93) = (fail_stack_elt_t )*(regend + this_reg___4);
#line 6351
    tmp___94 = fail_stack.avail;
#line 6351
    (fail_stack.avail) ++;
#line 6351
    *(fail_stack.stack + tmp___94) = (reg_info + this_reg___4)->word;
#line 6351
    this_reg___4 ++;
  }
#line 6351
  tmp___95 = fail_stack.avail;
#line 6351
  (fail_stack.avail) ++;
#line 6351
  *(fail_stack.stack + tmp___95) = (fail_stack_elt_t )lowest_active_reg;
#line 6351
  tmp___96 = fail_stack.avail;
#line 6351
  (fail_stack.avail) ++;
#line 6351
  *(fail_stack.stack + tmp___96) = (fail_stack_elt_t )highest_active_reg;
#line 6351
  tmp___97 = fail_stack.avail;
#line 6351
  (fail_stack.avail) ++;
#line 6351
  *(fail_stack.stack + tmp___97) = (fail_stack_elt_t )0;
#line 6351
  tmp___98 = fail_stack.avail;
#line 6351
  (fail_stack.avail) ++;
#line 6351
  *(fail_stack.stack + tmp___98) = (fail_stack_elt_t )0;
#line 6351
  break;
}
#line 6352
break;
case 20U: 
#line 6357
while (1) {
#line 6357
  mcnt = (int )*(p + 2) & 255;
#line 6357
  mcnt += (int )((signed char )*((p + 2) + 1)) << 8;
#line 6357
  break;
}
#line 6362
if (mcnt > 0) {
#line 6364
  mcnt --;
#line 6365
  p += 2;
#line 6366
  while (1) {
#line 6366
    while (1) {
#line 6366
      *(p + 0) = (unsigned char )(mcnt & 255);
#line 6366
      *(p + 1) = (unsigned char )(mcnt >> 8);
#line 6366
      break;
    }
#line 6366
    p += 2;
#line 6366
    break;
  }
} else
#line 6369
if (mcnt == 0) {
#line 6372
  *(p + 2) = (unsigned char)0;
#line 6373
  *(p + 3) = (unsigned char)0;
#line 6374
  goto on_failure;
} else {

}
#line 6376
break;
case 21U: 
#line 6379
while (1) {
#line 6379
  mcnt = (int )*(p + 2) & 255;
#line 6379
  mcnt += (int )((signed char )*((p + 2) + 1)) << 8;
#line 6379
  break;
}
#line 6383
if (mcnt) {
#line 6385
  mcnt --;
#line 6386
  while (1) {
#line 6386
    *((p + 2) + 0) = (unsigned char )(mcnt & 255);
#line 6386
    *((p + 2) + 1) = (unsigned char )(mcnt >> 8);
#line 6386
    break;
  }
#line 6387
  goto unconditional_jump;
} else {
#line 6391
  p += 4;
}
#line 6392
break;
case 22U: 
#line 6398
while (1) {
#line 6398
  while (1) {
#line 6398
    mcnt = (int )*p & 255;
#line 6398
    mcnt += (int )((signed char )*(p + 1)) << 8;
#line 6398
    break;
  }
#line 6398
  p += 2;
#line 6398
  break;
}
#line 6399
p1 = p + mcnt;
#line 6400
while (1) {
#line 6400
  while (1) {
#line 6400
    mcnt = (int )*p & 255;
#line 6400
    mcnt += (int )((signed char )*(p + 1)) << 8;
#line 6400
    break;
  }
#line 6400
  p += 2;
#line 6400
  break;
}
#line 6402
while (1) {
#line 6402
  *(p1 + 0) = (unsigned char )(mcnt & 255);
#line 6402
  *(p1 + 1) = (unsigned char )(mcnt >> 8);
#line 6402
  break;
}
#line 6403
break;
case 27U: ;
#line 6408
if (size1) {
#line 6408
  tmp___99 = string1;
} else {
#line 6408
  tmp___99 = string2;
}
#line 6408
if ((unsigned long )d == (unsigned long )tmp___99) {
#line 6409
  break;
} else
#line 6408
if (! size2) {
#line 6409
  break;
} else
#line 6408
if ((unsigned long )d == (unsigned long )end2) {
#line 6409
  break;
} else {
#line 6408
  if ((unsigned long )(d - 1) == (unsigned long )end1) {
#line 6408
    tmp___101 = (int const   )*string2;
  } else {
#line 6408
    if ((unsigned long )(d - 1) == (unsigned long )(string2 - 1)) {
#line 6408
      tmp___100 = (int const   )*(end1 - 1);
    } else {
#line 6408
      tmp___100 = (int const   )*(d - 1);
    }
#line 6408
    tmp___101 = tmp___100;
  }
#line 6408
  if ((unsigned long )d == (unsigned long )end1) {
#line 6408
    tmp___103 = (int const   )*string2;
  } else {
#line 6408
    if ((unsigned long )d == (unsigned long )(string2 - 1)) {
#line 6408
      tmp___102 = (int const   )*(end1 - 1);
    } else {
#line 6408
      tmp___102 = (int const   )*d;
    }
#line 6408
    tmp___103 = tmp___102;
  }
#line 6408
  if (((int )re_syntax_table[tmp___101] == 1) != ((int )re_syntax_table[tmp___103] == 1)) {
#line 6409
    break;
  } else {

  }
}
#line 6410
goto fail;
case 28U: ;
#line 6414
if (size1) {
#line 6414
  tmp___104 = string1;
} else {
#line 6414
  tmp___104 = string2;
}
#line 6414
if ((unsigned long )d == (unsigned long )tmp___104) {
#line 6415
  goto fail;
} else
#line 6414
if (! size2) {
#line 6415
  goto fail;
} else
#line 6414
if ((unsigned long )d == (unsigned long )end2) {
#line 6415
  goto fail;
} else {
#line 6414
  if ((unsigned long )(d - 1) == (unsigned long )end1) {
#line 6414
    tmp___106 = (int const   )*string2;
  } else {
#line 6414
    if ((unsigned long )(d - 1) == (unsigned long )(string2 - 1)) {
#line 6414
      tmp___105 = (int const   )*(end1 - 1);
    } else {
#line 6414
      tmp___105 = (int const   )*(d - 1);
    }
#line 6414
    tmp___106 = tmp___105;
  }
#line 6414
  if ((unsigned long )d == (unsigned long )end1) {
#line 6414
    tmp___108 = (int const   )*string2;
  } else {
#line 6414
    if ((unsigned long )d == (unsigned long )(string2 - 1)) {
#line 6414
      tmp___107 = (int const   )*(end1 - 1);
    } else {
#line 6414
      tmp___107 = (int const   )*d;
    }
#line 6414
    tmp___108 = tmp___107;
  }
#line 6414
  if (((int )re_syntax_table[tmp___106] == 1) != ((int )re_syntax_table[tmp___108] == 1)) {
#line 6415
    goto fail;
  } else {

  }
}
#line 6416
break;
case 25U: ;
#line 6420
if ((unsigned long )d == (unsigned long )end1) {
#line 6420
  tmp___110 = (int const   )*string2;
} else {
#line 6420
  if ((unsigned long )d == (unsigned long )(string2 - 1)) {
#line 6420
    tmp___109 = (int const   )*(end1 - 1);
  } else {
#line 6420
    tmp___109 = (int const   )*d;
  }
#line 6420
  tmp___110 = tmp___109;
}
#line 6420
if ((int )re_syntax_table[tmp___110] == 1) {
#line 6420
  if (size1) {
#line 6420
    tmp___111 = string1;
  } else {
#line 6420
    tmp___111 = string2;
  }
#line 6420
  if ((unsigned long )d == (unsigned long )tmp___111) {
#line 6421
    break;
  } else
#line 6420
  if (! size2) {
#line 6421
    break;
  } else {
#line 6420
    if ((unsigned long )(d - 1) == (unsigned long )end1) {
#line 6420
      tmp___113 = (int const   )*string2;
    } else {
#line 6420
      if ((unsigned long )(d - 1) == (unsigned long )(string2 - 1)) {
#line 6420
        tmp___112 = (int const   )*(end1 - 1);
      } else {
#line 6420
        tmp___112 = (int const   )*(d - 1);
      }
#line 6420
      tmp___113 = tmp___112;
    }
#line 6420
    if ((int )re_syntax_table[tmp___113] == 1) {

    } else {
#line 6421
      break;
    }
  }
} else {

}
#line 6422
goto fail;
case 26U: ;
#line 6426
if (size1) {
#line 6426
  tmp___114 = string1;
} else {
#line 6426
  tmp___114 = string2;
}
#line 6426
if ((unsigned long )d == (unsigned long )tmp___114) {

} else
#line 6426
if (! size2) {

} else {
#line 6426
  if ((unsigned long )(d - 1) == (unsigned long )end1) {
#line 6426
    tmp___116 = (int const   )*string2;
  } else {
#line 6426
    if ((unsigned long )(d - 1) == (unsigned long )(string2 - 1)) {
#line 6426
      tmp___115 = (int const   )*(end1 - 1);
    } else {
#line 6426
      tmp___115 = (int const   )*(d - 1);
    }
#line 6426
    tmp___116 = tmp___115;
  }
#line 6426
  if ((int )re_syntax_table[tmp___116] == 1) {
#line 6426
    if ((unsigned long )d == (unsigned long )end1) {
#line 6426
      tmp___118 = (int const   )*string2;
    } else {
#line 6426
      if ((unsigned long )d == (unsigned long )(string2 - 1)) {
#line 6426
        tmp___117 = (int const   )*(end1 - 1);
      } else {
#line 6426
        tmp___117 = (int const   )*d;
      }
#line 6426
      tmp___118 = tmp___117;
    }
#line 6426
    if ((int )re_syntax_table[tmp___118] == 1) {
#line 6426
      if ((unsigned long )d == (unsigned long )end2) {
#line 6428
        break;
      } else {

      }
    } else {
#line 6428
      break;
    }
  } else {

  }
}
#line 6429
goto fail;
case 23U: ;
#line 6491
while ((unsigned long )d == (unsigned long )dend) {
#line 6491
  if ((unsigned long )dend == (unsigned long )end_match_2) {
#line 6491
    goto fail;
  } else {

  }
#line 6491
  d = string2;
#line 6491
  dend = end_match_2;
}
#line 6492
if ((unsigned long )d == (unsigned long )end1) {
#line 6492
  tmp___120 = (int const   )*string2;
} else {
#line 6492
  if ((unsigned long )d == (unsigned long )(string2 - 1)) {
#line 6492
    tmp___119 = (int const   )*(end1 - 1);
  } else {
#line 6492
    tmp___119 = (int const   )*d;
  }
#line 6492
  tmp___120 = tmp___119;
}
#line 6492
if ((int )re_syntax_table[tmp___120] == 1) {

} else {
#line 6493
  goto fail;
}
#line 6494
while (1) {
#line 6494
  r___4 = lowest_active_reg;
#line 6494
  while (r___4 <= highest_active_reg) {
#line 6494
    tmp___121 = 1U;
#line 6494
    (reg_info + r___4)->bits.ever_matched_something = tmp___121;
#line 6494
    (reg_info + r___4)->bits.matched_something = tmp___121;
#line 6494
    r___4 ++;
  }
#line 6494
  break;
}
#line 6495
d ++;
#line 6496
break;
case 24U: ;
#line 6500
while ((unsigned long )d == (unsigned long )dend) {
#line 6500
  if ((unsigned long )dend == (unsigned long )end_match_2) {
#line 6500
    goto fail;
  } else {

  }
#line 6500
  d = string2;
#line 6500
  dend = end_match_2;
}
#line 6501
if ((unsigned long )d == (unsigned long )end1) {
#line 6501
  tmp___123 = (int const   )*string2;
} else {
#line 6501
  if ((unsigned long )d == (unsigned long )(string2 - 1)) {
#line 6501
    tmp___122 = (int const   )*(end1 - 1);
  } else {
#line 6501
    tmp___122 = (int const   )*d;
  }
#line 6501
  tmp___123 = tmp___122;
}
#line 6501
if ((int )re_syntax_table[tmp___123] == 1) {
#line 6502
  goto fail;
} else {

}
#line 6503
while (1) {
#line 6503
  r___5 = lowest_active_reg;
#line 6503
  while (r___5 <= highest_active_reg) {
#line 6503
    tmp___124 = 1U;
#line 6503
    (reg_info + r___5)->bits.ever_matched_something = tmp___124;
#line 6503
    (reg_info + r___5)->bits.matched_something = tmp___124;
#line 6503
    r___5 ++;
  }
#line 6503
  break;
}
#line 6504
d ++;
#line 6505
break;
default: 
#line 6509
abort();
}
---------
SID [4005] -> Line 5747
#line 5747
p ++;
---------
SID [4004] -> Line 5747
#line 5747
tmp___22 = p;
---------
SID [4003] -> Line -1

---------
SID [4002] -> Line 5740
#line 5740
return (mcnt);
---------
SID [4001] -> Line 5734
#line 5734
mcnt = (int )((d - pos) - tmp___21);
---------
SID [4000] -> Line 5734
#line 5734
tmp___21 = string2 - size1;
---------
SID [3999] -> Line 5734
#line 5734
tmp___21 = string1;
---------
SID [3998] -> Line 5734
#line 5734
if ((unsigned long )dend == (unsigned long )end_match_1) {
#line 5734
  tmp___21 = string1;
} else {
#line 5734
  tmp___21 = string2 - size1;
}
---------
SID [3997] -> Line 5728
#line 5728
__builtin_alloca(0UL);
---------
SID [3996] -> Line -1

---------
SID [3995] -> Line -1

---------
SID [3994] -> Line 5724
#line 5724
mcnt ++;
---------
SID [3993] -> Line 5725
#line 5725
*(regs___0->start + mcnt) = tmp___20;
---------
SID [3992] -> Line 5725
#line 5725
*(regs___0->end + mcnt) = tmp___20;
---------
SID [3991] -> Line 5725
#line 5725
tmp___20 = -1;
---------
SID [3990] -> Line 5724
#line 5724
break;
---------
SID [3989] -> Line -1

---------
SID [3988] -> Line 5724
#line 5724
if ((unsigned int )mcnt < regs___0->num_regs) {

} else {
#line 5724
  break;
}
---------
SID [3987] -> Line 5724
#line 5724
while ((unsigned int )mcnt < regs___0->num_regs) {
#line 5725
  tmp___20 = -1;
#line 5725
  *(regs___0->end + mcnt) = tmp___20;
#line 5725
  *(regs___0->start + mcnt) = tmp___20;
#line 5724
  mcnt ++;
}
---------
SID [3986] -> Line 5724
#line 5724
mcnt = (int )num_regs;
---------
SID [3985] -> Line 5708
#line 5708
mcnt ++;
---------
SID [3984] -> Line 5715
#line 5715
*(regs___0->end + mcnt) = (regoff_t )((*(regend + mcnt) - string2) + (long )size1);
---------
SID [3983] -> Line 5715
#line 5715
*(regs___0->end + mcnt) = (regoff_t )((*(regend + mcnt) - string2) + (long )size1);
---------
SID [3982] -> Line 5715
#line 5715
*(regs___0->end + mcnt) = (regoff_t )((*(regend + mcnt) - string2) + (long )size1);
---------
SID [3981] -> Line 5715
#line 5715
*(regs___0->end + mcnt) = (regoff_t )(*(regend + mcnt) - string1);
---------
SID [3980] -> Line 5715
#line 5715
if ((unsigned long )*(regend + mcnt) <= (unsigned long )(string1 + size1)) {
#line 5715
  *(regs___0->end + mcnt) = (regoff_t )(*(regend + mcnt) - string1);
} else {
#line 5715
  *(regs___0->end + mcnt) = (regoff_t )((*(regend + mcnt) - string2) + (long )size1);
}
---------
SID [3979] -> Line 5715
#line 5715
if ((unsigned long )string1 <= (unsigned long )*(regend + mcnt)) {
#line 5715
  if ((unsigned long )*(regend + mcnt) <= (unsigned long )(string1 + size1)) {
#line 5715
    *(regs___0->end + mcnt) = (regoff_t )(*(regend + mcnt) - string1);
  } else {
#line 5715
    *(regs___0->end + mcnt) = (regoff_t )((*(regend + mcnt) - string2) + (long )size1);
  }
} else {
#line 5715
  *(regs___0->end + mcnt) = (regoff_t )((*(regend + mcnt) - string2) + (long )size1);
}
---------
SID [3978] -> Line 5715
#line 5715
if (size1) {
#line 5715
  if ((unsigned long )string1 <= (unsigned long )*(regend + mcnt)) {
#line 5715
    if ((unsigned long )*(regend + mcnt) <= (unsigned long )(string1 + size1)) {
#line 5715
      *(regs___0->end + mcnt) = (regoff_t )(*(regend + mcnt) - string1);
    } else {
#line 5715
      *(regs___0->end + mcnt) = (regoff_t )((*(regend + mcnt) - string2) + (long )size1);
    }
  } else {
#line 5715
    *(regs___0->end + mcnt) = (regoff_t )((*(regend + mcnt) - string2) + (long )size1);
  }
} else {
#line 5715
  *(regs___0->end + mcnt) = (regoff_t )((*(regend + mcnt) - string2) + (long )size1);
}
---------
SID [3977] -> Line 5714
#line 5714
*(regs___0->start + mcnt) = (regoff_t )((*(regstart + mcnt) - string2) + (long )size1);
---------
SID [3976] -> Line 5714
#line 5714
*(regs___0->start + mcnt) = (regoff_t )((*(regstart + mcnt) - string2) + (long )size1);
---------
SID [3975] -> Line 5714
#line 5714
*(regs___0->start + mcnt) = (regoff_t )((*(regstart + mcnt) - string2) + (long )size1);
---------
SID [3974] -> Line 5714
#line 5714
*(regs___0->start + mcnt) = (regoff_t )(*(regstart + mcnt) - string1);
---------
SID [3973] -> Line 5714
#line 5714
if ((unsigned long )*(regstart + mcnt) <= (unsigned long )(string1 + size1)) {
#line 5714
  *(regs___0->start + mcnt) = (regoff_t )(*(regstart + mcnt) - string1);
} else {
#line 5714
  *(regs___0->start + mcnt) = (regoff_t )((*(regstart + mcnt) - string2) + (long )size1);
}
---------
SID [3972] -> Line 5714
#line 5714
if ((unsigned long )string1 <= (unsigned long )*(regstart + mcnt)) {
#line 5714
  if ((unsigned long )*(regstart + mcnt) <= (unsigned long )(string1 + size1)) {
#line 5714
    *(regs___0->start + mcnt) = (regoff_t )(*(regstart + mcnt) - string1);
  } else {
#line 5714
    *(regs___0->start + mcnt) = (regoff_t )((*(regstart + mcnt) - string2) + (long )size1);
  }
} else {
#line 5714
  *(regs___0->start + mcnt) = (regoff_t )((*(regstart + mcnt) - string2) + (long )size1);
}
---------
SID [3971] -> Line 5714
#line 5714
if (size1) {
#line 5714
  if ((unsigned long )string1 <= (unsigned long )*(regstart + mcnt)) {
#line 5714
    if ((unsigned long )*(regstart + mcnt) <= (unsigned long )(string1 + size1)) {
#line 5714
      *(regs___0->start + mcnt) = (regoff_t )(*(regstart + mcnt) - string1);
    } else {
#line 5714
      *(regs___0->start + mcnt) = (regoff_t )((*(regstart + mcnt) - string2) + (long )size1);
    }
  } else {
#line 5714
    *(regs___0->start + mcnt) = (regoff_t )((*(regstart + mcnt) - string2) + (long )size1);
  }
} else {
#line 5714
  *(regs___0->start + mcnt) = (regoff_t )((*(regstart + mcnt) - string2) + (long )size1);
}
---------
SID [3970] -> Line 5711
#line 5711
*(regs___0->start + mcnt) = tmp___18;
---------
SID [3969] -> Line 5711
#line 5711
*(regs___0->end + mcnt) = tmp___18;
---------
SID [3968] -> Line 5711
#line 5711
tmp___18 = -1;
---------
SID [3967] -> Line 5710
#line 5710
if ((unsigned long )*(regend + mcnt) == (unsigned long )((char *)-1)) {
#line 5711
  tmp___18 = -1;
#line 5711
  *(regs___0->end + mcnt) = tmp___18;
#line 5711
  *(regs___0->start + mcnt) = tmp___18;
} else {
#line 5714
  if (size1) {
#line 5714
    if ((unsigned long )string1 <= (unsigned long )*(regstart + mcnt)) {
#line 5714
      if ((unsigned long )*(regstart + mcnt) <= (unsigned long )(string1 + size1)) {
#line 5714
        *(regs___0->start + mcnt) = (regoff_t )(*(regstart + mcnt) - string1);
      } else {
#line 5714
        *(regs___0->start + mcnt) = (regoff_t )((*(regstart + mcnt) - string2) + (long )size1);
      }
    } else {
#line 5714
      *(regs___0->start + mcnt) = (regoff_t )((*(regstart + mcnt) - string2) + (long )size1);
    }
  } else {
#line 5714
    *(regs___0->start + mcnt) = (regoff_t )((*(regstart + mcnt) - string2) + (long )size1);
  }
#line 5715
  if (size1) {
#line 5715
    if ((unsigned long )string1 <= (unsigned long )*(regend + mcnt)) {
#line 5715
      if ((unsigned long )*(regend + mcnt) <= (unsigned long )(string1 + size1)) {
#line 5715
        *(regs___0->end + mcnt) = (regoff_t )(*(regend + mcnt) - string1);
      } else {
#line 5715
        *(regs___0->end + mcnt) = (regoff_t )((*(regend + mcnt) - string2) + (long )size1);
      }
    } else {
#line 5715
      *(regs___0->end + mcnt) = (regoff_t )((*(regend + mcnt) - string2) + (long )size1);
    }
  } else {
#line 5715
    *(regs___0->end + mcnt) = (regoff_t )((*(regend + mcnt) - string2) + (long )size1);
  }
}
---------
SID [3966] -> Line 5711
#line 5711
*(regs___0->start + mcnt) = tmp___18;
---------
SID [3965] -> Line 5711
#line 5711
*(regs___0->end + mcnt) = tmp___18;
---------
SID [3964] -> Line 5711
#line 5711
tmp___18 = -1;
---------
SID [3963] -> Line 5710
#line 5710
if ((unsigned long )*(regstart + mcnt) == (unsigned long )((char *)-1)) {
#line 5711
  tmp___18 = -1;
#line 5711
  *(regs___0->end + mcnt) = tmp___18;
#line 5711
  *(regs___0->start + mcnt) = tmp___18;
} else
#line 5710
if ((unsigned long )*(regend + mcnt) == (unsigned long )((char *)-1)) {
#line 5711
  tmp___18 = -1;
#line 5711
  *(regs___0->end + mcnt) = tmp___18;
#line 5711
  *(regs___0->start + mcnt) = tmp___18;
} else {
#line 5714
  if (size1) {
#line 5714
    if ((unsigned long )string1 <= (unsigned long )*(regstart + mcnt)) {
#line 5714
      if ((unsigned long )*(regstart + mcnt) <= (unsigned long )(string1 + size1)) {
#line 5714
        *(regs___0->start + mcnt) = (regoff_t )(*(regstart + mcnt) - string1);
      } else {
#line 5714
        *(regs___0->start + mcnt) = (regoff_t )((*(regstart + mcnt) - string2) + (long )size1);
      }
    } else {
#line 5714
      *(regs___0->start + mcnt) = (regoff_t )((*(regstart + mcnt) - string2) + (long )size1);
    }
  } else {
#line 5714
    *(regs___0->start + mcnt) = (regoff_t )((*(regstart + mcnt) - string2) + (long )size1);
  }
#line 5715
  if (size1) {
#line 5715
    if ((unsigned long )string1 <= (unsigned long )*(regend + mcnt)) {
#line 5715
      if ((unsigned long )*(regend + mcnt) <= (unsigned long )(string1 + size1)) {
#line 5715
        *(regs___0->end + mcnt) = (regoff_t )(*(regend + mcnt) - string1);
      } else {
#line 5715
        *(regs___0->end + mcnt) = (regoff_t )((*(regend + mcnt) - string2) + (long )size1);
      }
    } else {
#line 5715
      *(regs___0->end + mcnt) = (regoff_t )((*(regend + mcnt) - string2) + (long )size1);
    }
  } else {
#line 5715
    *(regs___0->end + mcnt) = (regoff_t )((*(regend + mcnt) - string2) + (long )size1);
  }
}
---------
SID [3962] -> Line 5708
#line 5708
break;
---------
SID [3961] -> Line -1

---------
SID [3960] -> Line 5708
#line 5708
if ((unsigned int )mcnt < tmp___19) {

} else {
#line 5708
  break;
}
---------
SID [3959] -> Line 5708
#line 5708
tmp___19 = regs___0->num_regs;
---------
SID [3958] -> Line 5708
#line 5708
tmp___19 = num_regs;
---------
SID [3957] -> Line 5708
#line 5708
if (num_regs < regs___0->num_regs) {
#line 5708
  tmp___19 = num_regs;
} else {
#line 5708
  tmp___19 = regs___0->num_regs;
}
---------
SID [3956] -> Line 5708
#line 5708
while (1) {
#line 5708
  if (num_regs < regs___0->num_regs) {
#line 5708
    tmp___19 = num_regs;
  } else {
#line 5708
    tmp___19 = regs___0->num_regs;
  }
#line 5708
  if ((unsigned int )mcnt < tmp___19) {

  } else {
#line 5708
    break;
  }
#line 5710
  if ((unsigned long )*(regstart + mcnt) == (unsigned long )((char *)-1)) {
#line 5711
    tmp___18 = -1;
#line 5711
    *(regs___0->end + mcnt) = tmp___18;
#line 5711
    *(regs___0->start + mcnt) = tmp___18;
  } else
#line 5710
  if ((unsigned long )*(regend + mcnt) == (unsigned long )((char *)-1)) {
#line 5711
    tmp___18 = -1;
#line 5711
    *(regs___0->end + mcnt) = tmp___18;
#line 5711
    *(regs___0->start + mcnt) = tmp___18;
  } else {
#line 5714
    if (size1) {
#line 5714
      if ((unsigned long )string1 <= (unsigned long )*(regstart + mcnt)) {
#line 5714
        if ((unsigned long )*(regstart + mcnt) <= (unsigned long )(string1 + size1)) {
#line 5714
          *(regs___0->start + mcnt) = (regoff_t )(*(regstart + mcnt) - string1);
        } else {
#line 5714
          *(regs___0->start + mcnt) = (regoff_t )((*(regstart + mcnt) - string2) + (long )size1);
        }
      } else {
#line 5714
        *(regs___0->start + mcnt) = (regoff_t )((*(regstart + mcnt) - string2) + (long )size1);
      }
    } else {
#line 5714
      *(regs___0->start + mcnt) = (regoff_t )((*(regstart + mcnt) - string2) + (long )size1);
    }
#line 5715
    if (size1) {
#line 5715
      if ((unsigned long )string1 <= (unsigned long )*(regend + mcnt)) {
#line 5715
        if ((unsigned long )*(regend + mcnt) <= (unsigned long )(string1 + size1)) {
#line 5715
          *(regs___0->end + mcnt) = (regoff_t )(*(regend + mcnt) - string1);
        } else {
#line 5715
          *(regs___0->end + mcnt) = (regoff_t )((*(regend + mcnt) - string2) + (long )size1);
        }
      } else {
#line 5715
        *(regs___0->end + mcnt) = (regoff_t )((*(regend + mcnt) - string2) + (long )size1);
      }
    } else {
#line 5715
      *(regs___0->end + mcnt) = (regoff_t )((*(regend + mcnt) - string2) + (long )size1);
    }
  }
#line 5708
  mcnt ++;
}
---------
SID [3955] -> Line 5708
#line 5708
mcnt = 1;
---------
SID [3954] -> Line -1

---------
SID [3953] -> Line 5702
#line 5702
*(regs___0->end + 0) = (regoff_t )((d - string2) + (long )size1);
---------
SID [3952] -> Line 5702
#line 5702
*(regs___0->end + 0) = (regoff_t )(d - string1);
---------
SID [3951] -> Line 5702
#line 5702
if ((unsigned long )dend == (unsigned long )end_match_1) {
#line 5702
  *(regs___0->end + 0) = (regoff_t )(d - string1);
} else {
#line 5702
  *(regs___0->end + 0) = (regoff_t )((d - string2) + (long )size1);
}
---------
SID [3950] -> Line 5701
#line 5701
*(regs___0->start + 0) = pos;
---------
SID [3949] -> Line 5699
#line 5699
if (regs___0->num_regs > 0U) {
#line 5701
  *(regs___0->start + 0) = pos;
#line 5702
  if ((unsigned long )dend == (unsigned long )end_match_1) {
#line 5702
    *(regs___0->end + 0) = (regoff_t )(d - string1);
  } else {
#line 5702
    *(regs___0->end + 0) = (regoff_t )((d - string2) + (long )size1);
  }
} else {

}
---------
SID [3948] -> Line -1

---------
SID [3947] -> Line -1

---------
SID [3946] -> Line -1

---------
SID [3945] -> Line 5690
#line 5690
return (-2);
---------
SID [3944] -> Line 5689
#line 5689
if ((unsigned long )regs___0->end == (unsigned long )((void *)0)) {
#line 5690
  return (-2);
} else {

}
---------
SID [3943] -> Line 5690
#line 5690
return (-2);
---------
SID [3942] -> Line 5689
#line 5689
if ((unsigned long )regs___0->start == (unsigned long )((void *)0)) {
#line 5690
  return (-2);
} else
#line 5689
if ((unsigned long )regs___0->end == (unsigned long )((void *)0)) {
#line 5690
  return (-2);
} else {

}
---------
SID [3941] -> Line 5688
#line 5688
regs___0->end = (regoff_t *)tmp___17;
---------
SID [3940] -> Line 5688
#line 5688
tmp___17 = realloc((void *)regs___0->end,
                   (unsigned long )regs___0->num_regs * sizeof(regoff_t ));
---------
SID [3939] -> Line 5687
#line 5687
regs___0->start = (regoff_t *)tmp___16;
---------
SID [3938] -> Line 5687
#line 5687
tmp___16 = realloc((void *)regs___0->start,
                   (unsigned long )regs___0->num_regs * sizeof(regoff_t ));
---------
SID [3937] -> Line 5686
#line 5686
regs___0->num_regs = num_regs + 1U;
---------
SID [3936] -> Line 5684
#line 5684
if (regs___0->num_regs < num_regs + 1U) {
#line 5686
  regs___0->num_regs = num_regs + 1U;
#line 5687
  tmp___16 = realloc((void *)regs___0->start,
                     (unsigned long )regs___0->num_regs * sizeof(regoff_t ));
#line 5687
  regs___0->start = (regoff_t *)tmp___16;
#line 5688
  tmp___17 = realloc((void *)regs___0->end,
                     (unsigned long )regs___0->num_regs * sizeof(regoff_t ));
#line 5688
  regs___0->end = (regoff_t *)tmp___17;
#line 5689
  if ((unsigned long )regs___0->start == (unsigned long )((void *)0)) {
#line 5690
    return (-2);
  } else
#line 5689
  if ((unsigned long )regs___0->end == (unsigned long )((void *)0)) {
#line 5690
    return (-2);
  } else {

  }
} else {

}
---------
SID [3935] -> Line 5680
#line 5680
if (bufp->regs_allocated == 1U) {
#line 5684
  if (regs___0->num_regs < num_regs + 1U) {
#line 5686
    regs___0->num_regs = num_regs + 1U;
#line 5687
    tmp___16 = realloc((void *)regs___0->start,
                       (unsigned long )regs___0->num_regs * sizeof(regoff_t ));
#line 5687
    regs___0->start = (regoff_t *)tmp___16;
#line 5688
    tmp___17 = realloc((void *)regs___0->end,
                       (unsigned long )regs___0->num_regs * sizeof(regoff_t ));
#line 5688
    regs___0->end = (regoff_t *)tmp___17;
#line 5689
    if ((unsigned long )regs___0->start == (unsigned long )((void *)0)) {
#line 5690
      return (-2);
    } else
#line 5689
    if ((unsigned long )regs___0->end == (unsigned long )((void *)0)) {
#line 5690
      return (-2);
    } else {

    }
  } else {

  }
} else {

}
---------
SID [3934] -> Line 5678
#line 5678
bufp->regs_allocated = 1U;
---------
SID [3933] -> Line -1

---------
SID [3932] -> Line 5677
#line 5677
return (-2);
---------
SID [3931] -> Line 5676
#line 5676
if ((unsigned long )regs___0->end == (unsigned long )((void *)0)) {
#line 5677
  return (-2);
} else {

}
---------
SID [3930] -> Line 5677
#line 5677
return (-2);
---------
SID [3929] -> Line 5676
#line 5676
if ((unsigned long )regs___0->start == (unsigned long )((void *)0)) {
#line 5677
  return (-2);
} else
#line 5676
if ((unsigned long )regs___0->end == (unsigned long )((void *)0)) {
#line 5677
  return (-2);
} else {

}
---------
SID [3928] -> Line 5675
#line 5675
regs___0->end = (regoff_t *)tmp___15;
---------
SID [3927] -> Line 5675
#line 5675
tmp___15 = malloc((unsigned long )regs___0->num_regs * sizeof(regoff_t ));
---------
SID [3926] -> Line 5674
#line 5674
regs___0->start = (regoff_t *)tmp___14;
---------
SID [3925] -> Line 5674
#line 5674
tmp___14 = malloc((unsigned long )regs___0->num_regs * sizeof(regoff_t ));
---------
SID [3924] -> Line 5673
#line 5673
regs___0->num_regs = num_regs + 1U;
---------
SID [3923] -> Line 5673
#line 5673
regs___0->num_regs = 30U;
---------
SID [3922] -> Line 5673
#line 5673
if (30U > num_regs + 1U) {
#line 5673
  regs___0->num_regs = 30U;
} else {
#line 5673
  regs___0->num_regs = num_regs + 1U;
}
---------
SID [3921] -> Line 5669
#line 5669
if (bufp->regs_allocated == 0U) {
#line 5673
  if (30U > num_regs + 1U) {
#line 5673
    regs___0->num_regs = 30U;
  } else {
#line 5673
    regs___0->num_regs = num_regs + 1U;
  }
#line 5674
  tmp___14 = malloc((unsigned long )regs___0->num_regs * sizeof(regoff_t ));
#line 5674
  regs___0->start = (regoff_t *)tmp___14;
#line 5675
  tmp___15 = malloc((unsigned long )regs___0->num_regs * sizeof(regoff_t ));
#line 5675
  regs___0->end = (regoff_t *)tmp___15;
#line 5676
  if ((unsigned long )regs___0->start == (unsigned long )((void *)0)) {
#line 5677
    return (-2);
  } else
#line 5676
  if ((unsigned long )regs___0->end == (unsigned long )((void *)0)) {
#line 5677
    return (-2);
  } else {

  }
#line 5678
  bufp->regs_allocated = 1U;
} else
#line 5680
if (bufp->regs_allocated == 1U) {
#line 5684
  if (regs___0->num_regs < num_regs + 1U) {
#line 5686
    regs___0->num_regs = num_regs + 1U;
#line 5687
    tmp___16 = realloc((void *)regs___0->start,
                       (unsigned long )regs___0->num_regs * sizeof(regoff_t ));
#line 5687
    regs___0->start = (regoff_t *)tmp___16;
#line 5688
    tmp___17 = realloc((void *)regs___0->end,
                       (unsigned long )regs___0->num_regs * sizeof(regoff_t ));
#line 5688
    regs___0->end = (regoff_t *)tmp___17;
#line 5689
    if ((unsigned long )regs___0->start == (unsigned long )((void *)0)) {
#line 5690
      return (-2);
    } else
#line 5689
    if ((unsigned long )regs___0->end == (unsigned long )((void *)0)) {
#line 5690
      return (-2);
    } else {

    }
  } else {

  }
} else {

}
---------
SID [3920] -> Line 5666
#line 5666
if (! bufp->no_sub) {
#line 5669
  if (bufp->regs_allocated == 0U) {
#line 5673
    if (30U > num_regs + 1U) {
#line 5673
      regs___0->num_regs = 30U;
    } else {
#line 5673
      regs___0->num_regs = num_regs + 1U;
    }
#line 5674
    tmp___14 = malloc((unsigned long )regs___0->num_regs * sizeof(regoff_t ));
#line 5674
    regs___0->start = (regoff_t *)tmp___14;
#line 5675
    tmp___15 = malloc((unsigned long )regs___0->num_regs * sizeof(regoff_t ));
#line 5675
    regs___0->end = (regoff_t *)tmp___15;
#line 5676
    if ((unsigned long )regs___0->start == (unsigned long )((void *)0)) {
#line 5677
      return (-2);
    } else
#line 5676
    if ((unsigned long )regs___0->end == (unsigned long )((void *)0)) {
#line 5677
      return (-2);
    } else {

    }
#line 5678
    bufp->regs_allocated = 1U;
  } else
#line 5680
  if (bufp->regs_allocated == 1U) {
#line 5684
    if (regs___0->num_regs < num_regs + 1U) {
#line 5686
      regs___0->num_regs = num_regs + 1U;
#line 5687
      tmp___16 = realloc((void *)regs___0->start,
                         (unsigned long )regs___0->num_regs * sizeof(regoff_t ));
#line 5687
      regs___0->start = (regoff_t *)tmp___16;
#line 5688
      tmp___17 = realloc((void *)regs___0->end,
                         (unsigned long )regs___0->num_regs * sizeof(regoff_t ));
#line 5688
      regs___0->end = (regoff_t *)tmp___17;
#line 5689
      if ((unsigned long )regs___0->start == (unsigned long )((void *)0)) {
#line 5690
        return (-2);
      } else
#line 5689
      if ((unsigned long )regs___0->end == (unsigned long )((void *)0)) {
#line 5690
        return (-2);
      } else {

      }
    } else {

    }
  } else {

  }
#line 5699
  if (regs___0->num_regs > 0U) {
#line 5701
    *(regs___0->start + 0) = pos;
#line 5702
    if ((unsigned long )dend == (unsigned long )end_match_1) {
#line 5702
      *(regs___0->end + 0) = (regoff_t )(d - string1);
    } else {
#line 5702
      *(regs___0->end + 0) = (regoff_t )((d - string2) + (long )size1);
    }
  } else {

  }
#line 5708
  mcnt = 1;
#line 5708
  while (1) {
#line 5708
    if (num_regs < regs___0->num_regs) {
#line 5708
      tmp___19 = num_regs;
    } else {
#line 5708
      tmp___19 = regs___0->num_regs;
    }
#line 5708
    if ((unsigned int )mcnt < tmp___19) {

    } else {
#line 5708
      break;
    }
#line 5710
    if ((unsigned long )*(regstart + mcnt) == (unsigned long )((char *)-1)) {
#line 5711
      tmp___18 = -1;
#line 5711
      *(regs___0->end + mcnt) = tmp___18;
#line 5711
      *(regs___0->start + mcnt) = tmp___18;
    } else
#line 5710
    if ((unsigned long )*(regend + mcnt) == (unsigned long )((char *)-1)) {
#line 5711
      tmp___18 = -1;
#line 5711
      *(regs___0->end + mcnt) = tmp___18;
#line 5711
      *(regs___0->start + mcnt) = tmp___18;
    } else {
#line 5714
      if (size1) {
#line 5714
        if ((unsigned long )string1 <= (unsigned long )*(regstart + mcnt)) {
#line 5714
          if ((unsigned long )*(regstart + mcnt) <= (unsigned long )(string1 + size1)) {
#line 5714
            *(regs___0->start + mcnt) = (regoff_t )(*(regstart + mcnt) - string1);
          } else {
#line 5714
            *(regs___0->start + mcnt) = (regoff_t )((*(regstart + mcnt) - string2) + (long )size1);
          }
        } else {
#line 5714
          *(regs___0->start + mcnt) = (regoff_t )((*(regstart + mcnt) - string2) + (long )size1);
        }
      } else {
#line 5714
        *(regs___0->start + mcnt) = (regoff_t )((*(regstart + mcnt) - string2) + (long )size1);
      }
#line 5715
      if (size1) {
#line 5715
        if ((unsigned long )string1 <= (unsigned long )*(regend + mcnt)) {
#line 5715
          if ((unsigned long )*(regend + mcnt) <= (unsigned long )(string1 + size1)) {
#line 5715
            *(regs___0->end + mcnt) = (regoff_t )(*(regend + mcnt) - string1);
          } else {
#line 5715
            *(regs___0->end + mcnt) = (regoff_t )((*(regend + mcnt) - string2) + (long )size1);
          }
        } else {
#line 5715
          *(regs___0->end + mcnt) = (regoff_t )((*(regend + mcnt) - string2) + (long )size1);
        }
      } else {
#line 5715
        *(regs___0->end + mcnt) = (regoff_t )((*(regend + mcnt) - string2) + (long )size1);
      }
    }
#line 5708
    mcnt ++;
  }
#line 5724
  mcnt = (int )num_regs;
#line 5724
  while ((unsigned int )mcnt < regs___0->num_regs) {
#line 5725
    tmp___20 = -1;
#line 5725
    *(regs___0->end + mcnt) = tmp___20;
#line 5725
    *(regs___0->start + mcnt) = tmp___20;
#line 5724
    mcnt ++;
  }
} else {

}
---------
SID [3919] -> Line 5666
#line 5666
if (regs___0) {
#line 5666
  if (! bufp->no_sub) {
#line 5669
    if (bufp->regs_allocated == 0U) {
#line 5673
      if (30U > num_regs + 1U) {
#line 5673
        regs___0->num_regs = 30U;
      } else {
#line 5673
        regs___0->num_regs = num_regs + 1U;
      }
#line 5674
      tmp___14 = malloc((unsigned long )regs___0->num_regs * sizeof(regoff_t ));
#line 5674
      regs___0->start = (regoff_t *)tmp___14;
#line 5675
      tmp___15 = malloc((unsigned long )regs___0->num_regs * sizeof(regoff_t ));
#line 5675
      regs___0->end = (regoff_t *)tmp___15;
#line 5676
      if ((unsigned long )regs___0->start == (unsigned long )((void *)0)) {
#line 5677
        return (-2);
      } else
#line 5676
      if ((unsigned long )regs___0->end == (unsigned long )((void *)0)) {
#line 5677
        return (-2);
      } else {

      }
#line 5678
      bufp->regs_allocated = 1U;
    } else
#line 5680
    if (bufp->regs_allocated == 1U) {
#line 5684
      if (regs___0->num_regs < num_regs + 1U) {
#line 5686
        regs___0->num_regs = num_regs + 1U;
#line 5687
        tmp___16 = realloc((void *)regs___0->start,
                           (unsigned long )regs___0->num_regs * sizeof(regoff_t ));
#line 5687
        regs___0->start = (regoff_t *)tmp___16;
#line 5688
        tmp___17 = realloc((void *)regs___0->end,
                           (unsigned long )regs___0->num_regs * sizeof(regoff_t ));
#line 5688
        regs___0->end = (regoff_t *)tmp___17;
#line 5689
        if ((unsigned long )regs___0->start == (unsigned long )((void *)0)) {
#line 5690
          return (-2);
        } else
#line 5689
        if ((unsigned long )regs___0->end == (unsigned long )((void *)0)) {
#line 5690
          return (-2);
        } else {

        }
      } else {

      }
    } else {

    }
#line 5699
    if (regs___0->num_regs > 0U) {
#line 5701
      *(regs___0->start + 0) = pos;
#line 5702
      if ((unsigned long )dend == (unsigned long )end_match_1) {
#line 5702
        *(regs___0->end + 0) = (regoff_t )(d - string1);
      } else {
#line 5702
        *(regs___0->end + 0) = (regoff_t )((d - string2) + (long )size1);
      }
    } else {

    }
#line 5708
    mcnt = 1;
#line 5708
    while (1) {
#line 5708
      if (num_regs < regs___0->num_regs) {
#line 5708
        tmp___19 = num_regs;
      } else {
#line 5708
        tmp___19 = regs___0->num_regs;
      }
#line 5708
      if ((unsigned int )mcnt < tmp___19) {

      } else {
#line 5708
        break;
      }
#line 5710
      if ((unsigned long )*(regstart + mcnt) == (unsigned long )((char *)-1)) {
#line 5711
        tmp___18 = -1;
#line 5711
        *(regs___0->end + mcnt) = tmp___18;
#line 5711
        *(regs___0->start + mcnt) = tmp___18;
      } else
#line 5710
      if ((unsigned long )*(regend + mcnt) == (unsigned long )((char *)-1)) {
#line 5711
        tmp___18 = -1;
#line 5711
        *(regs___0->end + mcnt) = tmp___18;
#line 5711
        *(regs___0->start + mcnt) = tmp___18;
      } else {
#line 5714
        if (size1) {
#line 5714
          if ((unsigned long )string1 <= (unsigned long )*(regstart + mcnt)) {
#line 5714
            if ((unsigned long )*(regstart + mcnt) <= (unsigned long )(string1 + size1)) {
#line 5714
              *(regs___0->start + mcnt) = (regoff_t )(*(regstart + mcnt) - string1);
            } else {
#line 5714
              *(regs___0->start + mcnt) = (regoff_t )((*(regstart + mcnt) - string2) + (long )size1);
            }
          } else {
#line 5714
            *(regs___0->start + mcnt) = (regoff_t )((*(regstart + mcnt) - string2) + (long )size1);
          }
        } else {
#line 5714
          *(regs___0->start + mcnt) = (regoff_t )((*(regstart + mcnt) - string2) + (long )size1);
        }
#line 5715
        if (size1) {
#line 5715
          if ((unsigned long )string1 <= (unsigned long )*(regend + mcnt)) {
#line 5715
            if ((unsigned long )*(regend + mcnt) <= (unsigned long )(string1 + size1)) {
#line 5715
              *(regs___0->end + mcnt) = (regoff_t )(*(regend + mcnt) - string1);
            } else {
#line 5715
              *(regs___0->end + mcnt) = (regoff_t )((*(regend + mcnt) - string2) + (long )size1);
            }
          } else {
#line 5715
            *(regs___0->end + mcnt) = (regoff_t )((*(regend + mcnt) - string2) + (long )size1);
          }
        } else {
#line 5715
          *(regs___0->end + mcnt) = (regoff_t )((*(regend + mcnt) - string2) + (long )size1);
        }
      }
#line 5708
      mcnt ++;
    }
#line 5724
    mcnt = (int )num_regs;
#line 5724
    while ((unsigned int )mcnt < regs___0->num_regs) {
#line 5725
      tmp___20 = -1;
#line 5725
      *(regs___0->end + mcnt) = tmp___20;
#line 5725
      *(regs___0->start + mcnt) = tmp___20;
#line 5724
      mcnt ++;
    }
  } else {

  }
} else {

}
---------
SID [3918] -> Line -1

---------
SID [3917] -> Line -1

---------
SID [3916] -> Line 5655
#line 5655
mcnt ++;
---------
SID [3915] -> Line 5658
#line 5658
*(regend + mcnt) = *(best_regend + mcnt);
---------
SID [3914] -> Line 5657
#line 5657
*(regstart + mcnt) = *(best_regstart + mcnt);
---------
SID [3913] -> Line 5655
#line 5655
break;
---------
SID [3912] -> Line -1

---------
SID [3911] -> Line 5655
#line 5655
if ((unsigned int )mcnt < num_regs) {

} else {
#line 5655
  break;
}
---------
SID [3910] -> Line 5655
#line 5655
while ((unsigned int )mcnt < num_regs) {
#line 5657
  *(regstart + mcnt) = *(best_regstart + mcnt);
#line 5658
  *(regend + mcnt) = *(best_regend + mcnt);
#line 5655
  mcnt ++;
}
---------
SID [3909] -> Line 5655
#line 5655
mcnt = 1;
---------
SID [3908] -> Line 5652
#line 5652
dend = end_match_2;
---------
SID [3907] -> Line 5652
#line 5652
dend = end_match_2;
---------
SID [3906] -> Line 5652
#line 5652
dend = end_match_1;
---------
SID [3905] -> Line 5652
#line 5652
if ((unsigned long )d <= (unsigned long )end1) {
#line 5652
  dend = end_match_1;
} else {
#line 5652
  dend = end_match_2;
}
---------
SID [3904] -> Line 5652
#line 5652
if ((unsigned long )d >= (unsigned long )string1) {
#line 5652
  if ((unsigned long )d <= (unsigned long )end1) {
#line 5652
    dend = end_match_1;
  } else {
#line 5652
    dend = end_match_2;
  }
} else {
#line 5652
  dend = end_match_2;
}
---------
SID [3903] -> Line 5651
restore_best_regs: 
#line 5651
d = match_end;
---------
SID [3902] -> Line 5641
#line 5641
if (best_regs_set) {
  restore_best_regs: 
#line 5651
  d = match_end;
#line 5652
  if ((unsigned long )d >= (unsigned long )string1) {
#line 5652
    if ((unsigned long )d <= (unsigned long )end1) {
#line 5652
      dend = end_match_1;
    } else {
#line 5652
      dend = end_match_2;
    }
  } else {
#line 5652
    dend = end_match_2;
  }
#line 5655
  mcnt = 1;
#line 5655
  while ((unsigned int )mcnt < num_regs) {
#line 5657
    *(regstart + mcnt) = *(best_regstart + mcnt);
#line 5658
    *(regend + mcnt) = *(best_regend + mcnt);
#line 5655
    mcnt ++;
  }
} else {

}
---------
SID [3901] -> Line 5637
#line 5637
goto fail;
---------
SID [3900] -> Line -1

---------
SID [3899] -> Line -1

---------
SID [3898] -> Line 5631
#line 5631
mcnt ++;
---------
SID [3897] -> Line 5634
#line 5634
*(best_regend + mcnt) = *(regend + mcnt);
---------
SID [3896] -> Line 5633
#line 5633
*(best_regstart + mcnt) = *(regstart + mcnt);
---------
SID [3895] -> Line 5631
#line 5631
break;
---------
SID [3894] -> Line -1

---------
SID [3893] -> Line 5631
#line 5631
if ((unsigned int )mcnt < num_regs) {

} else {
#line 5631
  break;
}
---------
SID [3892] -> Line 5631
#line 5631
while ((unsigned int )mcnt < num_regs) {
#line 5633
  *(best_regstart + mcnt) = *(regstart + mcnt);
#line 5634
  *(best_regend + mcnt) = *(regend + mcnt);
#line 5631
  mcnt ++;
}
---------
SID [3891] -> Line 5631
#line 5631
mcnt = 1;
---------
SID [3890] -> Line 5627
#line 5627
match_end = d;
---------
SID [3889] -> Line 5626
_L: /* CIL Label */ 
#line 5626
best_regs_set = 1U;
---------
SID [3888] -> Line 5622
#line 5622
if (! ((unsigned long )dend == (unsigned long )end_match_1)) {
  _L: /* CIL Label */ 
#line 5626
  best_regs_set = 1U;
#line 5627
  match_end = d;
#line 5631
  mcnt = 1;
#line 5631
  while ((unsigned int )mcnt < num_regs) {
#line 5633
    *(best_regstart + mcnt) = *(regstart + mcnt);
#line 5634
    *(best_regend + mcnt) = *(regend + mcnt);
#line 5631
    mcnt ++;
  }
} else {

}
---------
SID [3887] -> Line 5622
_L___0: /* CIL Label */ 
#line 5622
if (! same_str_p) {
#line 5622
  if (! ((unsigned long )dend == (unsigned long )end_match_1)) {
    _L: /* CIL Label */ 
#line 5626
    best_regs_set = 1U;
#line 5627
    match_end = d;
#line 5631
    mcnt = 1;
#line 5631
    while ((unsigned int )mcnt < num_regs) {
#line 5633
      *(best_regstart + mcnt) = *(regstart + mcnt);
#line 5634
      *(best_regend + mcnt) = *(regend + mcnt);
#line 5631
      mcnt ++;
    }
  } else {

  }
} else {

}
---------
SID [3886] -> Line 5622
#line 5622
goto _L___0;
---------
SID [3885] -> Line 5622
#line 5622
goto _L;
---------
SID [3884] -> Line 5622
#line 5622
if ((unsigned long )d > (unsigned long )match_end) {
#line 5622
  goto _L;
} else {
#line 5622
  goto _L___0;
}
---------
SID [3883] -> Line 5622
#line 5622
if (same_str_p) {
#line 5622
  if ((unsigned long )d > (unsigned long )match_end) {
#line 5622
    goto _L;
  } else {
#line 5622
    goto _L___0;
  }
} else
_L___0: /* CIL Label */ 
#line 5622
if (! same_str_p) {
#line 5622
  if (! ((unsigned long )dend == (unsigned long )end_match_1)) {
    _L: /* CIL Label */ 
#line 5626
    best_regs_set = 1U;
#line 5627
    match_end = d;
#line 5631
    mcnt = 1;
#line 5631
    while ((unsigned int )mcnt < num_regs) {
#line 5633
      *(best_regstart + mcnt) = *(regstart + mcnt);
#line 5634
      *(best_regend + mcnt) = *(regend + mcnt);
#line 5631
      mcnt ++;
    }
  } else {

  }
} else {

}
---------
SID [3882] -> Line 5622
#line 5622
goto _L;
---------
SID [3881] -> Line 5622
#line 5622
if (! best_regs_set) {
#line 5622
  goto _L;
} else
#line 5622
if (same_str_p) {
#line 5622
  if ((unsigned long )d > (unsigned long )match_end) {
#line 5622
    goto _L;
  } else {
#line 5622
    goto _L___0;
  }
} else
_L___0: /* CIL Label */ 
#line 5622
if (! same_str_p) {
#line 5622
  if (! ((unsigned long )dend == (unsigned long )end_match_1)) {
    _L: /* CIL Label */ 
#line 5626
    best_regs_set = 1U;
#line 5627
    match_end = d;
#line 5631
    mcnt = 1;
#line 5631
    while ((unsigned int )mcnt < num_regs) {
#line 5633
      *(best_regstart + mcnt) = *(regstart + mcnt);
#line 5634
      *(best_regend + mcnt) = *(regend + mcnt);
#line 5631
      mcnt ++;
    }
  } else {

  }
} else {

}
---------
SID [3880] -> Line 5618
#line 5618
same_str_p = (boolean )(tmp___13 == ((unsigned long )dend == (unsigned long )end_match_1));
---------
SID [3879] -> Line 5618
#line 5618
tmp___13 = 0;
---------
SID [3878] -> Line 5618
#line 5618
tmp___13 = 0;
---------
SID [3877] -> Line 5618
#line 5618
tmp___13 = 0;
---------
SID [3876] -> Line 5618
#line 5618
tmp___13 = 1;
---------
SID [3875] -> Line 5618
#line 5618
if ((unsigned long )match_end <= (unsigned long )(string1 + size1)) {
#line 5618
  tmp___13 = 1;
} else {
#line 5618
  tmp___13 = 0;
}
---------
SID [3874] -> Line 5618
#line 5618
if ((unsigned long )string1 <= (unsigned long )match_end) {
#line 5618
  if ((unsigned long )match_end <= (unsigned long )(string1 + size1)) {
#line 5618
    tmp___13 = 1;
  } else {
#line 5618
    tmp___13 = 0;
  }
} else {
#line 5618
  tmp___13 = 0;
}
---------
SID [3873] -> Line 5618
#line 5618
if (size1) {
#line 5618
  if ((unsigned long )string1 <= (unsigned long )match_end) {
#line 5618
    if ((unsigned long )match_end <= (unsigned long )(string1 + size1)) {
#line 5618
      tmp___13 = 1;
    } else {
#line 5618
      tmp___13 = 0;
    }
  } else {
#line 5618
    tmp___13 = 0;
  }
} else {
#line 5618
  tmp___13 = 0;
}
---------
SID [3872] -> Line 5616
#line 5616
if (! (fail_stack.avail == 0U)) {
#line 5618
  if (size1) {
#line 5618
    if ((unsigned long )string1 <= (unsigned long )match_end) {
#line 5618
      if ((unsigned long )match_end <= (unsigned long )(string1 + size1)) {
#line 5618
        tmp___13 = 1;
      } else {
#line 5618
        tmp___13 = 0;
      }
    } else {
#line 5618
      tmp___13 = 0;
    }
  } else {
#line 5618
    tmp___13 = 0;
  }
#line 5618
  same_str_p = (boolean )(tmp___13 == ((unsigned long )dend == (unsigned long )end_match_1));
#line 5622
  if (! best_regs_set) {
#line 5622
    goto _L;
  } else
#line 5622
  if (same_str_p) {
#line 5622
    if ((unsigned long )d > (unsigned long )match_end) {
#line 5622
      goto _L;
    } else {
#line 5622
      goto _L___0;
    }
  } else
  _L___0: /* CIL Label */ 
#line 5622
  if (! same_str_p) {
#line 5622
    if (! ((unsigned long )dend == (unsigned long )end_match_1)) {
      _L: /* CIL Label */ 
#line 5626
      best_regs_set = 1U;
#line 5627
      match_end = d;
#line 5631
      mcnt = 1;
#line 5631
      while ((unsigned int )mcnt < num_regs) {
#line 5633
        *(best_regstart + mcnt) = *(regstart + mcnt);
#line 5634
        *(best_regend + mcnt) = *(regend + mcnt);
#line 5631
        mcnt ++;
      }
    } else {

    }
  } else {

  }
#line 5637
  goto fail;
} else
#line 5641
if (best_regs_set) {
  restore_best_regs: 
#line 5651
  d = match_end;
#line 5652
  if ((unsigned long )d >= (unsigned long )string1) {
#line 5652
    if ((unsigned long )d <= (unsigned long )end1) {
#line 5652
      dend = end_match_1;
    } else {
#line 5652
      dend = end_match_2;
    }
  } else {
#line 5652
    dend = end_match_2;
  }
#line 5655
  mcnt = 1;
#line 5655
  while ((unsigned int )mcnt < num_regs) {
#line 5657
    *(regstart + mcnt) = *(best_regstart + mcnt);
#line 5658
    *(regend + mcnt) = *(best_regend + mcnt);
#line 5655
    mcnt ++;
  }
} else {

}
---------
SID [3871] -> Line 5612
#line 5612
if ((unsigned long )d != (unsigned long )end_match_2) {
#line 5616
  if (! (fail_stack.avail == 0U)) {
#line 5618
    if (size1) {
#line 5618
      if ((unsigned long )string1 <= (unsigned long )match_end) {
#line 5618
        if ((unsigned long )match_end <= (unsigned long )(string1 + size1)) {
#line 5618
          tmp___13 = 1;
        } else {
#line 5618
          tmp___13 = 0;
        }
      } else {
#line 5618
        tmp___13 = 0;
      }
    } else {
#line 5618
      tmp___13 = 0;
    }
#line 5618
    same_str_p = (boolean )(tmp___13 == ((unsigned long )dend == (unsigned long )end_match_1));
#line 5622
    if (! best_regs_set) {
#line 5622
      goto _L;
    } else
#line 5622
    if (same_str_p) {
#line 5622
      if ((unsigned long )d > (unsigned long )match_end) {
#line 5622
        goto _L;
      } else {
#line 5622
        goto _L___0;
      }
    } else
    _L___0: /* CIL Label */ 
#line 5622
    if (! same_str_p) {
#line 5622
      if (! ((unsigned long )dend == (unsigned long )end_match_1)) {
        _L: /* CIL Label */ 
#line 5626
        best_regs_set = 1U;
#line 5627
        match_end = d;
#line 5631
        mcnt = 1;
#line 5631
        while ((unsigned int )mcnt < num_regs) {
#line 5633
          *(best_regstart + mcnt) = *(regstart + mcnt);
#line 5634
          *(best_regend + mcnt) = *(regend + mcnt);
#line 5631
          mcnt ++;
        }
      } else {

      }
    } else {

    }
#line 5637
    goto fail;
  } else
#line 5641
  if (best_regs_set) {
    restore_best_regs: 
#line 5651
    d = match_end;
#line 5652
    if ((unsigned long )d >= (unsigned long )string1) {
#line 5652
      if ((unsigned long )d <= (unsigned long )end1) {
#line 5652
        dend = end_match_1;
      } else {
#line 5652
        dend = end_match_2;
      }
    } else {
#line 5652
      dend = end_match_2;
    }
#line 5655
    mcnt = 1;
#line 5655
    while ((unsigned int )mcnt < num_regs) {
#line 5657
      *(regstart + mcnt) = *(best_regstart + mcnt);
#line 5658
      *(regend + mcnt) = *(best_regend + mcnt);
#line 5655
      mcnt ++;
    }
  } else {

  }
} else {

}
---------
SID [3870] -> Line 5606
#line 5606
if ((unsigned long )p == (unsigned long )pend) {
#line 5612
  if ((unsigned long )d != (unsigned long )end_match_2) {
#line 5616
    if (! (fail_stack.avail == 0U)) {
#line 5618
      if (size1) {
#line 5618
        if ((unsigned long )string1 <= (unsigned long )match_end) {
#line 5618
          if ((unsigned long )match_end <= (unsigned long )(string1 + size1)) {
#line 5618
            tmp___13 = 1;
          } else {
#line 5618
            tmp___13 = 0;
          }
        } else {
#line 5618
          tmp___13 = 0;
        }
      } else {
#line 5618
        tmp___13 = 0;
      }
#line 5618
      same_str_p = (boolean )(tmp___13 == ((unsigned long )dend == (unsigned long )end_match_1));
#line 5622
      if (! best_regs_set) {
#line 5622
        goto _L;
      } else
#line 5622
      if (same_str_p) {
#line 5622
        if ((unsigned long )d > (unsigned long )match_end) {
#line 5622
          goto _L;
        } else {
#line 5622
          goto _L___0;
        }
      } else
      _L___0: /* CIL Label */ 
#line 5622
      if (! same_str_p) {
#line 5622
        if (! ((unsigned long )dend == (unsigned long )end_match_1)) {
          _L: /* CIL Label */ 
#line 5626
          best_regs_set = 1U;
#line 5627
          match_end = d;
#line 5631
          mcnt = 1;
#line 5631
          while ((unsigned int )mcnt < num_regs) {
#line 5633
            *(best_regstart + mcnt) = *(regstart + mcnt);
#line 5634
            *(best_regend + mcnt) = *(regend + mcnt);
#line 5631
            mcnt ++;
          }
        } else {

        }
      } else {

      }
#line 5637
      goto fail;
    } else
#line 5641
    if (best_regs_set) {
      restore_best_regs: 
#line 5651
      d = match_end;
#line 5652
      if ((unsigned long )d >= (unsigned long )string1) {
#line 5652
        if ((unsigned long )d <= (unsigned long )end1) {
#line 5652
          dend = end_match_1;
        } else {
#line 5652
          dend = end_match_2;
        }
      } else {
#line 5652
        dend = end_match_2;
      }
#line 5655
      mcnt = 1;
#line 5655
      while ((unsigned int )mcnt < num_regs) {
#line 5657
        *(regstart + mcnt) = *(best_regstart + mcnt);
#line 5658
        *(regend + mcnt) = *(best_regend + mcnt);
#line 5655
        mcnt ++;
      }
    } else {

    }
  } else {

  }
#line 5666
  if (regs___0) {
#line 5666
    if (! bufp->no_sub) {
#line 5669
      if (bufp->regs_allocated == 0U) {
#line 5673
        if (30U > num_regs + 1U) {
#line 5673
          regs___0->num_regs = 30U;
        } else {
#line 5673
          regs___0->num_regs = num_regs + 1U;
        }
#line 5674
        tmp___14 = malloc((unsigned long )regs___0->num_regs * sizeof(regoff_t ));
#line 5674
        regs___0->start = (regoff_t *)tmp___14;
#line 5675
        tmp___15 = malloc((unsigned long )regs___0->num_regs * sizeof(regoff_t ));
#line 5675
        regs___0->end = (regoff_t *)tmp___15;
#line 5676
        if ((unsigned long )regs___0->start == (unsigned long )((void *)0)) {
#line 5677
          return (-2);
        } else
#line 5676
        if ((unsigned long )regs___0->end == (unsigned long )((void *)0)) {
#line 5677
          return (-2);
        } else {

        }
#line 5678
        bufp->regs_allocated = 1U;
      } else
#line 5680
      if (bufp->regs_allocated == 1U) {
#line 5684
        if (regs___0->num_regs < num_regs + 1U) {
#line 5686
          regs___0->num_regs = num_regs + 1U;
#line 5687
          tmp___16 = realloc((void *)regs___0->start,
                             (unsigned long )regs___0->num_regs * sizeof(regoff_t ));
#line 5687
          regs___0->start = (regoff_t *)tmp___16;
#line 5688
          tmp___17 = realloc((void *)regs___0->end,
                             (unsigned long )regs___0->num_regs * sizeof(regoff_t ));
#line 5688
          regs___0->end = (regoff_t *)tmp___17;
#line 5689
          if ((unsigned long )regs___0->start == (unsigned long )((void *)0)) {
#line 5690
            return (-2);
          } else
#line 5689
          if ((unsigned long )regs___0->end == (unsigned long )((void *)0)) {
#line 5690
            return (-2);
          } else {

          }
        } else {

        }
      } else {

      }
#line 5699
      if (regs___0->num_regs > 0U) {
#line 5701
        *(regs___0->start + 0) = pos;
#line 5702
        if ((unsigned long )dend == (unsigned long )end_match_1) {
#line 5702
          *(regs___0->end + 0) = (regoff_t )(d - string1);
        } else {
#line 5702
          *(regs___0->end + 0) = (regoff_t )((d - string2) + (long )size1);
        }
      } else {

      }
#line 5708
      mcnt = 1;
#line 5708
      while (1) {
#line 5708
        if (num_regs < regs___0->num_regs) {
#line 5708
          tmp___19 = num_regs;
        } else {
#line 5708
          tmp___19 = regs___0->num_regs;
        }
#line 5708
        if ((unsigned int )mcnt < tmp___19) {

        } else {
#line 5708
          break;
        }
#line 5710
        if ((unsigned long )*(regstart + mcnt) == (unsigned long )((char *)-1)) {
#line 5711
          tmp___18 = -1;
#line 5711
          *(regs___0->end + mcnt) = tmp___18;
#line 5711
          *(regs___0->start + mcnt) = tmp___18;
        } else
#line 5710
        if ((unsigned long )*(regend + mcnt) == (unsigned long )((char *)-1)) {
#line 5711
          tmp___18 = -1;
#line 5711
          *(regs___0->end + mcnt) = tmp___18;
#line 5711
          *(regs___0->start + mcnt) = tmp___18;
        } else {
#line 5714
          if (size1) {
#line 5714
            if ((unsigned long )string1 <= (unsigned long )*(regstart + mcnt)) {
#line 5714
              if ((unsigned long )*(regstart + mcnt) <= (unsigned long )(string1 + size1)) {
#line 5714
                *(regs___0->start + mcnt) = (regoff_t )(*(regstart + mcnt) - string1);
              } else {
#line 5714
                *(regs___0->start + mcnt) = (regoff_t )((*(regstart + mcnt) - string2) + (long )size1);
              }
            } else {
#line 5714
              *(regs___0->start + mcnt) = (regoff_t )((*(regstart + mcnt) - string2) + (long )size1);
            }
          } else {
#line 5714
            *(regs___0->start + mcnt) = (regoff_t )((*(regstart + mcnt) - string2) + (long )size1);
          }
#line 5715
          if (size1) {
#line 5715
            if ((unsigned long )string1 <= (unsigned long )*(regend + mcnt)) {
#line 5715
              if ((unsigned long )*(regend + mcnt) <= (unsigned long )(string1 + size1)) {
#line 5715
                *(regs___0->end + mcnt) = (regoff_t )(*(regend + mcnt) - string1);
              } else {
#line 5715
                *(regs___0->end + mcnt) = (regoff_t )((*(regend + mcnt) - string2) + (long )size1);
              }
            } else {
#line 5715
              *(regs___0->end + mcnt) = (regoff_t )((*(regend + mcnt) - string2) + (long )size1);
            }
          } else {
#line 5715
            *(regs___0->end + mcnt) = (regoff_t )((*(regend + mcnt) - string2) + (long )size1);
          }
        }
#line 5708
        mcnt ++;
      }
#line 5724
      mcnt = (int )num_regs;
#line 5724
      while ((unsigned int )mcnt < regs___0->num_regs) {
#line 5725
        tmp___20 = -1;
#line 5725
        *(regs___0->end + mcnt) = tmp___20;
#line 5725
        *(regs___0->start + mcnt) = tmp___20;
#line 5724
        mcnt ++;
      }
    } else {

    }
  } else {

  }
#line 5728
  __builtin_alloca(0UL);
#line 5734
  if ((unsigned long )dend == (unsigned long )end_match_1) {
#line 5734
    tmp___21 = string1;
  } else {
#line 5734
    tmp___21 = string2 - size1;
  }
#line 5734
  mcnt = (int )((d - pos) - tmp___21);
#line 5740
  return (mcnt);
} else {

}
---------
SID [3869] -> Line 5602
#line 5602
while (1) {
#line 5606
  if ((unsigned long )p == (unsigned long )pend) {
#line 5612
    if ((unsigned long )d != (unsigned long )end_match_2) {
#line 5616
      if (! (fail_stack.avail == 0U)) {
#line 5618
        if (size1) {
#line 5618
          if ((unsigned long )string1 <= (unsigned long )match_end) {
#line 5618
            if ((unsigned long )match_end <= (unsigned long )(string1 + size1)) {
#line 5618
              tmp___13 = 1;
            } else {
#line 5618
              tmp___13 = 0;
            }
          } else {
#line 5618
            tmp___13 = 0;
          }
        } else {
#line 5618
          tmp___13 = 0;
        }
#line 5618
        same_str_p = (boolean )(tmp___13 == ((unsigned long )dend == (unsigned long )end_match_1));
#line 5622
        if (! best_regs_set) {
#line 5622
          goto _L;
        } else
#line 5622
        if (same_str_p) {
#line 5622
          if ((unsigned long )d > (unsigned long )match_end) {
#line 5622
            goto _L;
          } else {
#line 5622
            goto _L___0;
          }
        } else
        _L___0: /* CIL Label */ 
#line 5622
        if (! same_str_p) {
#line 5622
          if (! ((unsigned long )dend == (unsigned long )end_match_1)) {
            _L: /* CIL Label */ 
#line 5626
            best_regs_set = 1U;
#line 5627
            match_end = d;
#line 5631
            mcnt = 1;
#line 5631
            while ((unsigned int )mcnt < num_regs) {
#line 5633
              *(best_regstart + mcnt) = *(regstart + mcnt);
#line 5634
              *(best_regend + mcnt) = *(regend + mcnt);
#line 5631
              mcnt ++;
            }
          } else {

          }
        } else {

        }
#line 5637
        goto fail;
      } else
#line 5641
      if (best_regs_set) {
        restore_best_regs: 
#line 5651
        d = match_end;
#line 5652
        if ((unsigned long )d >= (unsigned long )string1) {
#line 5652
          if ((unsigned long )d <= (unsigned long )end1) {
#line 5652
            dend = end_match_1;
          } else {
#line 5652
            dend = end_match_2;
          }
        } else {
#line 5652
          dend = end_match_2;
        }
#line 5655
        mcnt = 1;
#line 5655
        while ((unsigned int )mcnt < num_regs) {
#line 5657
          *(regstart + mcnt) = *(best_regstart + mcnt);
#line 5658
          *(regend + mcnt) = *(best_regend + mcnt);
#line 5655
          mcnt ++;
        }
      } else {

      }
    } else {

    }
#line 5666
    if (regs___0) {
#line 5666
      if (! bufp->no_sub) {
#line 5669
        if (bufp->regs_allocated == 0U) {
#line 5673
          if (30U > num_regs + 1U) {
#line 5673
            regs___0->num_regs = 30U;
          } else {
#line 5673
            regs___0->num_regs = num_regs + 1U;
          }
#line 5674
          tmp___14 = malloc((unsigned long )regs___0->num_regs * sizeof(regoff_t ));
#line 5674
          regs___0->start = (regoff_t *)tmp___14;
#line 5675
          tmp___15 = malloc((unsigned long )regs___0->num_regs * sizeof(regoff_t ));
#line 5675
          regs___0->end = (regoff_t *)tmp___15;
#line 5676
          if ((unsigned long )regs___0->start == (unsigned long )((void *)0)) {
#line 5677
            return (-2);
          } else
#line 5676
          if ((unsigned long )regs___0->end == (unsigned long )((void *)0)) {
#line 5677
            return (-2);
          } else {

          }
#line 5678
          bufp->regs_allocated = 1U;
        } else
#line 5680
        if (bufp->regs_allocated == 1U) {
#line 5684
          if (regs___0->num_regs < num_regs + 1U) {
#line 5686
            regs___0->num_regs = num_regs + 1U;
#line 5687
            tmp___16 = realloc((void *)regs___0->start,
                               (unsigned long )regs___0->num_regs * sizeof(regoff_t ));
#line 5687
            regs___0->start = (regoff_t *)tmp___16;
#line 5688
            tmp___17 = realloc((void *)regs___0->end,
                               (unsigned long )regs___0->num_regs * sizeof(regoff_t ));
#line 5688
            regs___0->end = (regoff_t *)tmp___17;
#line 5689
            if ((unsigned long )regs___0->start == (unsigned long )((void *)0)) {
#line 5690
              return (-2);
            } else
#line 5689
            if ((unsigned long )regs___0->end == (unsigned long )((void *)0)) {
#line 5690
              return (-2);
            } else {

            }
          } else {

          }
        } else {

        }
#line 5699
        if (regs___0->num_regs > 0U) {
#line 5701
          *(regs___0->start + 0) = pos;
#line 5702
          if ((unsigned long )dend == (unsigned long )end_match_1) {
#line 5702
            *(regs___0->end + 0) = (regoff_t )(d - string1);
          } else {
#line 5702
            *(regs___0->end + 0) = (regoff_t )((d - string2) + (long )size1);
          }
        } else {

        }
#line 5708
        mcnt = 1;
#line 5708
        while (1) {
#line 5708
          if (num_regs < regs___0->num_regs) {
#line 5708
            tmp___19 = num_regs;
          } else {
#line 5708
            tmp___19 = regs___0->num_regs;
          }
#line 5708
          if ((unsigned int )mcnt < tmp___19) {

          } else {
#line 5708
            break;
          }
#line 5710
          if ((unsigned long )*(regstart + mcnt) == (unsigned long )((char *)-1)) {
#line 5711
            tmp___18 = -1;
#line 5711
            *(regs___0->end + mcnt) = tmp___18;
#line 5711
            *(regs___0->start + mcnt) = tmp___18;
          } else
#line 5710
          if ((unsigned long )*(regend + mcnt) == (unsigned long )((char *)-1)) {
#line 5711
            tmp___18 = -1;
#line 5711
            *(regs___0->end + mcnt) = tmp___18;
#line 5711
            *(regs___0->start + mcnt) = tmp___18;
          } else {
#line 5714
            if (size1) {
#line 5714
              if ((unsigned long )string1 <= (unsigned long )*(regstart + mcnt)) {
#line 5714
                if ((unsigned long )*(regstart + mcnt) <= (unsigned long )(string1 + size1)) {
#line 5714
                  *(regs___0->start + mcnt) = (regoff_t )(*(regstart + mcnt) - string1);
                } else {
#line 5714
                  *(regs___0->start + mcnt) = (regoff_t )((*(regstart + mcnt) - string2) + (long )size1);
                }
              } else {
#line 5714
                *(regs___0->start + mcnt) = (regoff_t )((*(regstart + mcnt) - string2) + (long )size1);
              }
            } else {
#line 5714
              *(regs___0->start + mcnt) = (regoff_t )((*(regstart + mcnt) - string2) + (long )size1);
            }
#line 5715
            if (size1) {
#line 5715
              if ((unsigned long )string1 <= (unsigned long )*(regend + mcnt)) {
#line 5715
                if ((unsigned long )*(regend + mcnt) <= (unsigned long )(string1 + size1)) {
#line 5715
                  *(regs___0->end + mcnt) = (regoff_t )(*(regend + mcnt) - string1);
                } else {
#line 5715
                  *(regs___0->end + mcnt) = (regoff_t )((*(regend + mcnt) - string2) + (long )size1);
                }
              } else {
#line 5715
                *(regs___0->end + mcnt) = (regoff_t )((*(regend + mcnt) - string2) + (long )size1);
              }
            } else {
#line 5715
              *(regs___0->end + mcnt) = (regoff_t )((*(regend + mcnt) - string2) + (long )size1);
            }
          }
#line 5708
          mcnt ++;
        }
#line 5724
        mcnt = (int )num_regs;
#line 5724
        while ((unsigned int )mcnt < regs___0->num_regs) {
#line 5725
          tmp___20 = -1;
#line 5725
          *(regs___0->end + mcnt) = tmp___20;
#line 5725
          *(regs___0->start + mcnt) = tmp___20;
#line 5724
          mcnt ++;
        }
      } else {

      }
    } else {

    }
#line 5728
    __builtin_alloca(0UL);
#line 5734
    if ((unsigned long )dend == (unsigned long )end_match_1) {
#line 5734
      tmp___21 = string1;
    } else {
#line 5734
      tmp___21 = string2 - size1;
    }
#line 5734
    mcnt = (int )((d - pos) - tmp___21);
#line 5740
    return (mcnt);
  } else {

  }
#line 5747
  tmp___22 = p;
#line 5747
  p ++;
#line 5747
  switch ((unsigned int )((re_opcode_t )*tmp___22)) {
  case 0U: ;
#line 5754
  break;
  case 1U: 
#line 5761
  tmp___23 = p;
#line 5761
  p ++;
#line 5761
  mcnt = (int )*tmp___23;
#line 5766
  if (translate) {
#line 5768
    while (1) {
#line 5770
      while ((unsigned long )d == (unsigned long )dend) {
#line 5770
        if ((unsigned long )dend == (unsigned long )end_match_2) {
#line 5770
          goto fail;
        } else {

        }
#line 5770
        d = string2;
#line 5770
        dend = end_match_2;
      }
#line 5771
      tmp___24 = d;
#line 5771
      d ++;
#line 5771
      tmp___25 = p;
#line 5771
      p ++;
#line 5771
      if ((int )*(translate + (unsigned char )*tmp___24) != (int )((char )*tmp___25)) {
#line 5772
        goto fail;
      } else {

      }
#line 5768
      mcnt --;
#line 5768
      if (mcnt) {

      } else {
#line 5768
        break;
      }
    }
  } else {
#line 5778
    while (1) {
#line 5780
      while ((unsigned long )d == (unsigned long )dend) {
#line 5780
        if ((unsigned long )dend == (unsigned long )end_match_2) {
#line 5780
          goto fail;
        } else {

        }
#line 5780
        d = string2;
#line 5780
        dend = end_match_2;
      }
#line 5781
      tmp___26 = d;
#line 5781
      d ++;
#line 5781
      tmp___27 = p;
#line 5781
      p ++;
#line 5781
      if ((int const   )*tmp___26 != (int const   )((char )*tmp___27)) {
#line 5781
        goto fail;
      } else {

      }
#line 5778
      mcnt --;
#line 5778
      if (mcnt) {

      } else {
#line 5778
        break;
      }
    }
  }
#line 5785
  while (1) {
#line 5785
    r = lowest_active_reg;
#line 5785
    while (r <= highest_active_reg) {
#line 5785
      tmp___28 = 1U;
#line 5785
      (reg_info + r)->bits.ever_matched_something = tmp___28;
#line 5785
      (reg_info + r)->bits.matched_something = tmp___28;
#line 5785
      r ++;
    }
#line 5785
    break;
  }
#line 5786
  break;
  case 2U: ;
#line 5793
  while ((unsigned long )d == (unsigned long )dend) {
#line 5793
    if ((unsigned long )dend == (unsigned long )end_match_2) {
#line 5793
      goto fail;
    } else {

    }
#line 5793
    d = string2;
#line 5793
    dend = end_match_2;
  }
#line 5795
  if (! (bufp->syntax & (unsigned int )((((((1 << 1) << 1) << 1) << 1) << 1) << 1))) {
#line 5795
    if (translate) {
#line 5795
      tmp___29 = (int )*(translate + (unsigned char )*d);
    } else {
#line 5795
      tmp___29 = (int )*d;
    }
#line 5795
    if (tmp___29 == 10) {
#line 5797
      goto fail;
    } else {
#line 5795
      goto _L___1;
    }
  } else
  _L___1: /* CIL Label */ 
#line 5795
  if (bufp->syntax & (unsigned int )(((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 5795
    if (translate) {
#line 5795
      tmp___30 = (int )*(translate + (unsigned char )*d);
    } else {
#line 5795
      tmp___30 = (int )*d;
    }
#line 5795
    if (tmp___30 == 0) {
#line 5797
      goto fail;
    } else {

    }
  } else {

  }
#line 5799
  while (1) {
#line 5799
    r___0 = lowest_active_reg;
#line 5799
    while (r___0 <= highest_active_reg) {
#line 5799
      tmp___31 = 1U;
#line 5799
      (reg_info + r___0)->bits.ever_matched_something = tmp___31;
#line 5799
      (reg_info + r___0)->bits.matched_something = tmp___31;
#line 5799
      r___0 ++;
    }
#line 5799
    break;
  }
#line 5801
  d ++;
#line 5802
  break;
  case 4U: 
  case 3U: 
#line 5809
  not = (boolean )((unsigned int )((re_opcode_t )*(p - 1)) == 4U);
#line 5813
  while ((unsigned long )d == (unsigned long )dend) {
#line 5813
    if ((unsigned long )dend == (unsigned long )end_match_2) {
#line 5813
      goto fail;
    } else {

    }
#line 5813
    d = string2;
#line 5813
    dend = end_match_2;
  }
#line 5814
  if (translate) {
#line 5814
    c = (unsigned char )*(translate + (unsigned char )*d);
  } else {
#line 5814
    c = (unsigned char )*d;
  }
#line 5818
  if ((unsigned int )c < (unsigned int )((int )*p * 8)) {
#line 5818
    if ((int )*(p + (1 + (int )c / 8)) & (1 << (int )c % 8)) {
#line 5820
      not = (boolean )(! not);
    } else {

    }
  } else {

  }
#line 5822
  p += 1 + (int )*p;
#line 5824
  if (! not) {
#line 5824
    goto fail;
  } else {

  }
#line 5826
  while (1) {
#line 5826
    r___1 = lowest_active_reg;
#line 5826
    while (r___1 <= highest_active_reg) {
#line 5826
      tmp___32 = 1U;
#line 5826
      (reg_info + r___1)->bits.ever_matched_something = tmp___32;
#line 5826
      (reg_info + r___1)->bits.matched_something = tmp___32;
#line 5826
      r___1 ++;
    }
#line 5826
    break;
  }
#line 5827
  d ++;
#line 5828
  break;
  case 5U: 
#line 5841
  p1 = p;
#line 5843
  if ((reg_info + *p)->bits.match_null_string_p == 3U) {
#line 5844
    tmp___33 = group_match_null_string_p(& p1, pend, reg_info);
#line 5844
    (reg_info + *p)->bits.match_null_string_p = (unsigned int )tmp___33;
  } else {

  }
#line 5852
  if ((reg_info + *p)->bits.match_null_string_p) {
#line 5852
    if ((unsigned long )*(regstart + *p) == (unsigned long )((char *)-1)) {
#line 5852
      tmp___34 = d;
    } else {
#line 5852
      tmp___34 = *(regstart + *p);
    }
#line 5852
    *(old_regstart + *p) = tmp___34;
  } else {
#line 5852
    *(old_regstart + *p) = *(regstart + *p);
  }
#line 5858
  *(regstart + *p) = d;
#line 5861
  (reg_info + *p)->bits.is_active = 1U;
#line 5862
  (reg_info + *p)->bits.matched_something = 0U;
#line 5865
  highest_active_reg = (unsigned int )*p;
#line 5869
  if (lowest_active_reg == (unsigned int )((1 << 8) + 1)) {
#line 5870
    lowest_active_reg = (unsigned int )*p;
  } else {

  }
#line 5873
  p += 2;
#line 5874
  break;
  case 6U: ;
#line 5888
  if ((reg_info + *p)->bits.match_null_string_p) {
#line 5888
    if ((unsigned long )*(regend + *p) == (unsigned long )((char *)-1)) {
#line 5888
      tmp___35 = d;
    } else {
#line 5888
      tmp___35 = *(regend + *p);
    }
#line 5888
    *(old_regend + *p) = tmp___35;
  } else {
#line 5888
    *(old_regend + *p) = *(regend + *p);
  }
#line 5894
  *(regend + *p) = d;
#line 5898
  (reg_info + *p)->bits.is_active = 0U;
#line 5902
  if (lowest_active_reg == highest_active_reg) {
#line 5904
    lowest_active_reg = (unsigned int )((1 << 8) + 1);
#line 5905
    highest_active_reg = (unsigned int )(1 << 8);
  } else {
#line 5912
    r___2 = (unsigned char )((int )*p - 1);
#line 5913
    while (1) {
#line 5913
      if ((int )r___2 > 0) {
#line 5913
        if (! (reg_info + r___2)->bits.is_active) {

        } else {
#line 5913
          break;
        }
      } else {
#line 5913
        break;
      }
#line 5914
      r___2 = (unsigned char )((int )r___2 - 1);
    }
#line 5923
    if ((int )r___2 == 0) {
#line 5925
      lowest_active_reg = (unsigned int )((1 << 8) + 1);
#line 5926
      highest_active_reg = (unsigned int )(1 << 8);
    } else {
#line 5929
      highest_active_reg = (unsigned int )r___2;
    }
  }
#line 5937
  if (! (reg_info + *p)->bits.matched_something) {
#line 5937
    goto _L___2;
  } else
#line 5937
  if ((unsigned int )((re_opcode_t )*(p + -3)) == 5U) {
    _L___2: /* CIL Label */ 
#line 5937
    if ((unsigned long )(p + 2) < (unsigned long )pend) {
#line 5941
      is_a_jump_n = (boolean )0;
#line 5943
      p1 = p + 2;
#line 5944
      mcnt = 0;
#line 5945
      tmp___36 = p1;
#line 5945
      p1 ++;
#line 5945
      switch ((unsigned int )((re_opcode_t )*tmp___36)) {
      case 21U: 
#line 5948
      is_a_jump_n = (boolean )1;
      case 18U: 
      case 12U: 
      case 17U: 
      case 16U: 
#line 5953
      while (1) {
#line 5953
        while (1) {
#line 5953
          mcnt = (int )*p1 & 255;
#line 5953
          mcnt += (int )((signed char )*(p1 + 1)) << 8;
#line 5953
          break;
        }
#line 5953
        p1 += 2;
#line 5953
        break;
      }
#line 5954
      if (is_a_jump_n) {
#line 5955
        p1 += 2;
      } else {

      }
#line 5956
      break;
      default: ;
      }
#line 5961
      p1 += mcnt;
#line 5968
      if (mcnt < 0) {
#line 5968
        if ((unsigned int )((re_opcode_t )*p1) == 14U) {
#line 5968
          if ((unsigned int )((re_opcode_t )*(p1 + 3)) == 5U) {
#line 5968
            if ((int )*(p1 + 4) == (int )*p) {
#line 5981
              if ((reg_info + *p)->bits.ever_matched_something) {
#line 5985
                (reg_info + *p)->bits.ever_matched_something = 0U;
#line 5988
                r___3 = (unsigned int )*p;
#line 5988
                while (r___3 < (unsigned int )((int )*p + (int )*(p + 1))) {
#line 5990
                  *(regstart + r___3) = *(old_regstart + r___3);
#line 5993
                  if ((int )*(old_regend + r___3) >= (int )*(regstart + r___3)) {
#line 5994
                    *(regend + r___3) = *(old_regend + r___3);
                  } else {

                  }
#line 5988
                  r___3 ++;
                }
              } else {

              }
#line 5997
              p1 ++;
#line 5998
              while (1) {
#line 5998
                while (1) {
#line 5998
                  mcnt = (int )*p1 & 255;
#line 5998
                  mcnt += (int )((signed char )*(p1 + 1)) << 8;
#line 5998
                  break;
                }
#line 5998
                p1 += 2;
#line 5998
                break;
              }
#line 5999
              while (1) {
#line 5999
                while (fail_stack.size - fail_stack.avail < ((highest_active_reg - lowest_active_reg) + 1U) * 3U + 4U) {
#line 5999
                  if (fail_stack.size > (unsigned int )re_max_failures * ((num_regs - 1U) * 3U + 4U)) {
#line 5999
                    tmp___39 = 0;
                  } else {
#line 5999
                    tmp___37 = __builtin_alloca((unsigned long )(fail_stack.size << 1) * sizeof(fail_stack_elt_t ));
#line 5999
                    destination = (char *)tmp___37;
#line 5999
                    memcpy((void */* __restrict  */)destination,
                           (void const   */* __restrict  */)fail_stack.stack,
                           (unsigned long )fail_stack.size * sizeof(fail_stack_elt_t ));
#line 5999
                    fail_stack.stack = (fail_stack_elt_t *)destination;
#line 5999
                    if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
#line 5999
                      tmp___38 = 0;
                    } else {
#line 5999
                      fail_stack.size <<= 1;
#line 5999
                      tmp___38 = 1;
                    }
#line 5999
                    tmp___39 = tmp___38;
                  }
#line 5999
                  if (tmp___39) {

                  } else {
#line 5999
                    return (-2);
                  }
                }
#line 5999
                this_reg = (int )lowest_active_reg;
#line 5999
                while ((unsigned int )this_reg <= highest_active_reg) {
#line 5999
                  tmp___40 = fail_stack.avail;
#line 5999
                  (fail_stack.avail) ++;
#line 5999
                  *(fail_stack.stack + tmp___40) = (fail_stack_elt_t )*(regstart + this_reg);
#line 5999
                  tmp___41 = fail_stack.avail;
#line 5999
                  (fail_stack.avail) ++;
#line 5999
                  *(fail_stack.stack + tmp___41) = (fail_stack_elt_t )*(regend + this_reg);
#line 5999
                  tmp___42 = fail_stack.avail;
#line 5999
                  (fail_stack.avail) ++;
#line 5999
                  *(fail_stack.stack + tmp___42) = (reg_info + this_reg)->word;
#line 5999
                  this_reg ++;
                }
#line 5999
                tmp___43 = fail_stack.avail;
#line 5999
                (fail_stack.avail) ++;
#line 5999
                *(fail_stack.stack + tmp___43) = (fail_stack_elt_t )lowest_active_reg;
#line 5999
                tmp___44 = fail_stack.avail;
#line 5999
                (fail_stack.avail) ++;
#line 5999
                *(fail_stack.stack + tmp___44) = (fail_stack_elt_t )highest_active_reg;
#line 5999
                tmp___45 = fail_stack.avail;
#line 5999
                (fail_stack.avail) ++;
#line 5999
                *(fail_stack.stack + tmp___45) = (fail_stack_elt_t )p1 + mcnt;
#line 5999
                tmp___46 = fail_stack.avail;
#line 5999
                (fail_stack.avail) ++;
#line 5999
                *(fail_stack.stack + tmp___46) = (fail_stack_elt_t )d;
#line 5999
                break;
              }
#line 6001
              goto fail;
            } else {

            }
          } else {

          }
        } else {

        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 6006
  p += 2;
#line 6007
  break;
  case 7U: 
#line 6015
  tmp___47 = p;
#line 6015
  p ++;
#line 6015
  regno = (int )*tmp___47;
#line 6019
  if ((unsigned long )*(regstart + regno) == (unsigned long )((char *)-1)) {
#line 6020
    goto fail;
  } else
#line 6019
  if ((unsigned long )*(regend + regno) == (unsigned long )((char *)-1)) {
#line 6020
    goto fail;
  } else {

  }
#line 6023
  d2 = *(regstart + regno);
#line 6030
  if (size1) {
#line 6030
    if ((unsigned long )string1 <= (unsigned long )*(regstart + regno)) {
#line 6030
      if ((unsigned long )*(regstart + regno) <= (unsigned long )(string1 + size1)) {
#line 6030
        tmp___50 = 1;
      } else {
#line 6030
        tmp___50 = 0;
      }
    } else {
#line 6030
      tmp___50 = 0;
    }
  } else {
#line 6030
    tmp___50 = 0;
  }
#line 6030
  if (size1) {
#line 6030
    if ((unsigned long )string1 <= (unsigned long )*(regend + regno)) {
#line 6030
      if ((unsigned long )*(regend + regno) <= (unsigned long )(string1 + size1)) {
#line 6030
        tmp___51 = 1;
      } else {
#line 6030
        tmp___51 = 0;
      }
    } else {
#line 6030
      tmp___51 = 0;
    }
  } else {
#line 6030
    tmp___51 = 0;
  }
#line 6030
  if (tmp___50 == tmp___51) {
#line 6030
    dend2 = *(regend + regno);
  } else {
#line 6030
    dend2 = end_match_1;
  }
#line 6033
  while (1) {
#line 6037
    while ((unsigned long )d2 == (unsigned long )dend2) {
#line 6039
      if ((unsigned long )dend2 == (unsigned long )end_match_2) {
#line 6039
        break;
      } else {

      }
#line 6040
      if ((unsigned long )dend2 == (unsigned long )*(regend + regno)) {
#line 6040
        break;
      } else {

      }
#line 6043
      d2 = string2;
#line 6044
      dend2 = *(regend + regno);
    }
#line 6047
    if ((unsigned long )d2 == (unsigned long )dend2) {
#line 6047
      break;
    } else {

    }
#line 6050
    while ((unsigned long )d == (unsigned long )dend) {
#line 6050
      if ((unsigned long )dend == (unsigned long )end_match_2) {
#line 6050
        goto fail;
      } else {

      }
#line 6050
      d = string2;
#line 6050
      dend = end_match_2;
    }
#line 6053
    mcnt = (int )(dend - d);
#line 6057
    if ((long )mcnt > dend2 - d2) {
#line 6058
      mcnt = (int )(dend2 - d2);
    } else {

    }
#line 6062
    if (translate) {
#line 6062
      tmp___52 = bcmp_translate(d, d2, mcnt, translate);
#line 6062
      tmp___54 = tmp___52;
    } else {
#line 6062
      tmp___53 = memcmp((void const   *)d, (void const   *)d2, (size_t )mcnt);
#line 6062
      tmp___54 = tmp___53;
    }
#line 6062
    if (tmp___54) {
#line 6065
      goto fail;
    } else {

    }
#line 6066
    d += mcnt;
#line 6066
    d2 += mcnt;
  }
#line 6069
  break;
  case 8U: ;
#line 6078
  if (size1) {
#line 6078
    tmp___55 = string1;
  } else {
#line 6078
    tmp___55 = string2;
  }
#line 6078
  if ((unsigned long )d == (unsigned long )tmp___55) {
#line 6078
    goto _L___3;
  } else
#line 6078
  if (! size2) {
    _L___3: /* CIL Label */ 
#line 6080
    if (! bufp->not_bol) {
#line 6080
      break;
    } else {

    }
  } else
#line 6082
  if ((int const   )*(d + -1) == 10) {
#line 6082
    if (bufp->newline_anchor) {
#line 6084
      break;
    } else {

    }
  } else {

  }
#line 6087
  goto fail;
  case 9U: ;
#line 6094
  if ((unsigned long )d == (unsigned long )end2) {
#line 6096
    if (! bufp->not_eol) {
#line 6096
      break;
    } else {

    }
  } else {
#line 6100
    if ((unsigned long )d == (unsigned long )end1) {
#line 6100
      tmp___56 = (int const   )*string2;
    } else {
#line 6100
      tmp___56 = (int const   )*d;
    }
#line 6100
    if (tmp___56 == 10) {
#line 6100
      if (bufp->newline_anchor) {
#line 6103
        break;
      } else {

      }
    } else {

    }
  }
#line 6105
  goto fail;
  case 10U: ;
#line 6111
  if (size1) {
#line 6111
    tmp___57 = string1;
  } else {
#line 6111
    tmp___57 = string2;
  }
#line 6111
  if ((unsigned long )d == (unsigned long )tmp___57) {
#line 6112
    break;
  } else
#line 6111
  if (! size2) {
#line 6112
    break;
  } else {

  }
#line 6113
  goto fail;
  case 11U: ;
#line 6119
  if ((unsigned long )d == (unsigned long )end2) {
#line 6120
    break;
  } else {

  }
#line 6121
  goto fail;
  case 15U: ;
#line 6143
  while (1) {
#line 6143
    while (1) {
#line 6143
      mcnt = (int )*p & 255;
#line 6143
      mcnt += (int )((signed char )*(p + 1)) << 8;
#line 6143
      break;
    }
#line 6143
    p += 2;
#line 6143
    break;
  }
#line 6146
  while (1) {
#line 6146
    while (fail_stack.size - fail_stack.avail < ((highest_active_reg - lowest_active_reg) + 1U) * 3U + 4U) {
#line 6146
      if (fail_stack.size > (unsigned int )re_max_failures * ((num_regs - 1U) * 3U + 4U)) {
#line 6146
        tmp___60 = 0;
      } else {
#line 6146
        tmp___58 = __builtin_alloca((unsigned long )(fail_stack.size << 1) * sizeof(fail_stack_elt_t ));
#line 6146
        destination___0 = (char *)tmp___58;
#line 6146
        memcpy((void */* __restrict  */)destination___0,
               (void const   */* __restrict  */)fail_stack.stack,
               (unsigned long )fail_stack.size * sizeof(fail_stack_elt_t ));
#line 6146
        fail_stack.stack = (fail_stack_elt_t *)destination___0;
#line 6146
        if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
#line 6146
          tmp___59 = 0;
        } else {
#line 6146
          fail_stack.size <<= 1;
#line 6146
          tmp___59 = 1;
        }
#line 6146
        tmp___60 = tmp___59;
      }
#line 6146
      if (tmp___60) {

      } else {
#line 6146
        return (-2);
      }
    }
#line 6146
    this_reg___0 = (int )lowest_active_reg;
#line 6146
    while ((unsigned int )this_reg___0 <= highest_active_reg) {
#line 6146
      tmp___61 = fail_stack.avail;
#line 6146
      (fail_stack.avail) ++;
#line 6146
      *(fail_stack.stack + tmp___61) = (fail_stack_elt_t )*(regstart + this_reg___0);
#line 6146
      tmp___62 = fail_stack.avail;
#line 6146
      (fail_stack.avail) ++;
#line 6146
      *(fail_stack.stack + tmp___62) = (fail_stack_elt_t )*(regend + this_reg___0);
#line 6146
      tmp___63 = fail_stack.avail;
#line 6146
      (fail_stack.avail) ++;
#line 6146
      *(fail_stack.stack + tmp___63) = (reg_info + this_reg___0)->word;
#line 6146
      this_reg___0 ++;
    }
#line 6146
    tmp___64 = fail_stack.avail;
#line 6146
    (fail_stack.avail) ++;
#line 6146
    *(fail_stack.stack + tmp___64) = (fail_stack_elt_t )lowest_active_reg;
#line 6146
    tmp___65 = fail_stack.avail;
#line 6146
    (fail_stack.avail) ++;
#line 6146
    *(fail_stack.stack + tmp___65) = (fail_stack_elt_t )highest_active_reg;
#line 6146
    tmp___66 = fail_stack.avail;
#line 6146
    (fail_stack.avail) ++;
#line 6146
    *(fail_stack.stack + tmp___66) = (fail_stack_elt_t )p + mcnt;
#line 6146
    tmp___67 = fail_stack.avail;
#line 6146
    (fail_stack.avail) ++;
#line 6146
    *(fail_stack.stack + tmp___67) = (fail_stack_elt_t )((void *)0);
#line 6146
    break;
  }
#line 6147
  break;
  on_failure: 
  case 14U: ;
#line 6166
  while (1) {
#line 6166
    while (1) {
#line 6166
      mcnt = (int )*p & 255;
#line 6166
      mcnt += (int )((signed char )*(p + 1)) << 8;
#line 6166
      break;
    }
#line 6166
    p += 2;
#line 6166
    break;
  }
#line 6178
  p1 = p;
#line 6184
  while (1) {
#line 6184
    if ((unsigned long )p1 < (unsigned long )pend) {
#line 6184
      if ((unsigned int )((re_opcode_t )*p1) == 0U) {

      } else {
#line 6184
        break;
      }
    } else {
#line 6184
      break;
    }
#line 6185
    p1 ++;
  }
#line 6187
  if ((unsigned long )p1 < (unsigned long )pend) {
#line 6187
    if ((unsigned int )((re_opcode_t )*p1) == 5U) {
#line 6193
      highest_active_reg = (unsigned int )((int )*(p1 + 1) + (int )*(p1 + 2));
#line 6194
      if (lowest_active_reg == (unsigned int )((1 << 8) + 1)) {
#line 6195
        lowest_active_reg = (unsigned int )*(p1 + 1);
      } else {

      }
    } else {

    }
  } else {

  }
#line 6199
  while (1) {
#line 6199
    while (fail_stack.size - fail_stack.avail < ((highest_active_reg - lowest_active_reg) + 1U) * 3U + 4U) {
#line 6199
      if (fail_stack.size > (unsigned int )re_max_failures * ((num_regs - 1U) * 3U + 4U)) {
#line 6199
        tmp___70 = 0;
      } else {
#line 6199
        tmp___68 = __builtin_alloca((unsigned long )(fail_stack.size << 1) * sizeof(fail_stack_elt_t ));
#line 6199
        destination___1 = (char *)tmp___68;
#line 6199
        memcpy((void */* __restrict  */)destination___1,
               (void const   */* __restrict  */)fail_stack.stack,
               (unsigned long )fail_stack.size * sizeof(fail_stack_elt_t ));
#line 6199
        fail_stack.stack = (fail_stack_elt_t *)destination___1;
#line 6199
        if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
#line 6199
          tmp___69 = 0;
        } else {
#line 6199
          fail_stack.size <<= 1;
#line 6199
          tmp___69 = 1;
        }
#line 6199
        tmp___70 = tmp___69;
      }
#line 6199
      if (tmp___70) {

      } else {
#line 6199
        return (-2);
      }
    }
#line 6199
    this_reg___1 = (int )lowest_active_reg;
#line 6199
    while ((unsigned int )this_reg___1 <= highest_active_reg) {
#line 6199
      tmp___71 = fail_stack.avail;
#line 6199
      (fail_stack.avail) ++;
#line 6199
      *(fail_stack.stack + tmp___71) = (fail_stack_elt_t )*(regstart + this_reg___1);
#line 6199
      tmp___72 = fail_stack.avail;
#line 6199
      (fail_stack.avail) ++;
#line 6199
      *(fail_stack.stack + tmp___72) = (fail_stack_elt_t )*(regend + this_reg___1);
#line 6199
      tmp___73 = fail_stack.avail;
#line 6199
      (fail_stack.avail) ++;
#line 6199
      *(fail_stack.stack + tmp___73) = (reg_info + this_reg___1)->word;
#line 6199
      this_reg___1 ++;
    }
#line 6199
    tmp___74 = fail_stack.avail;
#line 6199
    (fail_stack.avail) ++;
#line 6199
    *(fail_stack.stack + tmp___74) = (fail_stack_elt_t )lowest_active_reg;
#line 6199
    tmp___75 = fail_stack.avail;
#line 6199
    (fail_stack.avail) ++;
#line 6199
    *(fail_stack.stack + tmp___75) = (fail_stack_elt_t )highest_active_reg;
#line 6199
    tmp___76 = fail_stack.avail;
#line 6199
    (fail_stack.avail) ++;
#line 6199
    *(fail_stack.stack + tmp___76) = (fail_stack_elt_t )p + mcnt;
#line 6199
    tmp___77 = fail_stack.avail;
#line 6199
    (fail_stack.avail) ++;
#line 6199
    *(fail_stack.stack + tmp___77) = (fail_stack_elt_t )d;
#line 6199
    break;
  }
#line 6200
  break;
  case 17U: 
#line 6206
  while (1) {
#line 6206
    while (1) {
#line 6206
      mcnt = (int )*p & 255;
#line 6206
      mcnt += (int )((signed char )*(p + 1)) << 8;
#line 6206
      break;
    }
#line 6206
    p += 2;
#line 6206
    break;
  }
#line 6209
  p2 = p;
#line 6225
  while (1) {
#line 6225
    if ((unsigned long )(p2 + 2) < (unsigned long )pend) {
#line 6225
      if ((unsigned int )((re_opcode_t )*p2) == 6U) {

      } else
#line 6225
      if ((unsigned int )((re_opcode_t )*p2) == 5U) {

      } else {
#line 6225
        break;
      }
    } else {
#line 6225
      break;
    }
#line 6228
    p2 += 3;
  }
#line 6231
  if ((unsigned long )p2 == (unsigned long )pend) {
#line 6236
    *(p + -3) = (unsigned char)16;
  } else
#line 6241
  if ((unsigned int )((re_opcode_t )*p2) == 1U) {
#line 6241
    goto _L___6;
  } else
#line 6241
  if (bufp->newline_anchor) {
#line 6241
    if ((unsigned int )((re_opcode_t )*p2) == 9U) {
      _L___6: /* CIL Label */ 
#line 6244
      if ((int )*p2 == 9) {
#line 6244
        tmp___78 = '\n';
      } else {
#line 6244
        tmp___78 = (int )*(p2 + 2);
      }
#line 6244
      c___0 = (unsigned char )tmp___78;
#line 6246
      p1 = p + mcnt;
#line 6251
      if ((unsigned int )((re_opcode_t )*(p1 + 3)) == 1U) {
#line 6251
        if ((int )*(p1 + 5) != (int )c___0) {
#line 6253
          *(p + -3) = (unsigned char)16;
        } else {
#line 6251
          goto _L___5;
        }
      } else
      _L___5: /* CIL Label */ 
#line 6258
      if ((unsigned int )((re_opcode_t )*(p1 + 3)) == 3U) {
#line 6258
        goto _L___4;
      } else
#line 6258
      if ((unsigned int )((re_opcode_t )*(p1 + 3)) == 4U) {
        _L___4: /* CIL Label */ 
#line 6261
        not___0 = (unsigned int )((re_opcode_t )*(p1 + 3)) == 4U;
#line 6263
        if ((int )c___0 < (int )((unsigned char )((int )*(p1 + 4) * 8))) {
#line 6263
          if ((int )*(p1 + (5 + (int )c___0 / 8)) & (1 << (int )c___0 % 8)) {
#line 6265
            not___0 = ! not___0;
          } else {

          }
        } else {

        }
#line 6269
        if (! not___0) {
#line 6271
          *(p + -3) = (unsigned char)16;
        } else {

        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 6277
  p -= 2;
#line 6278
  if ((unsigned int )((re_opcode_t )*(p + -1)) != 16U) {
#line 6280
    *(p + -1) = (unsigned char)12;
#line 6282
    goto unconditional_jump;
  } else {

  }
  case 16U: 
#line 6305
  (fail_stack.avail) --;
#line 6305
  string_temp = *(fail_stack.stack + fail_stack.avail);
#line 6305
  if ((unsigned long )string_temp != (unsigned long )((void *)0)) {
#line 6305
    sdummy = (char const   *)string_temp;
  } else {

  }
#line 6305
  (fail_stack.avail) --;
#line 6305
  pdummy = (unsigned char *)*(fail_stack.stack + fail_stack.avail);
#line 6305
  (fail_stack.avail) --;
#line 6305
  dummy_high_reg = (unsigned int )*(fail_stack.stack + fail_stack.avail);
#line 6305
  (fail_stack.avail) --;
#line 6305
  dummy_low_reg = (unsigned int )*(fail_stack.stack + fail_stack.avail);
#line 6305
  this_reg___2 = (int )dummy_high_reg;
#line 6305
  while ((unsigned int )this_reg___2 >= dummy_low_reg) {
#line 6305
    (fail_stack.avail) --;
#line 6305
    (reg_info_dummy + this_reg___2)->word = *(fail_stack.stack + fail_stack.avail);
#line 6305
    (fail_stack.avail) --;
#line 6305
    *(reg_dummy + this_reg___2) = (char const   *)*(fail_stack.stack + fail_stack.avail);
#line 6305
    (fail_stack.avail) --;
#line 6305
    *(reg_dummy + this_reg___2) = (char const   *)*(fail_stack.stack + fail_stack.avail);
#line 6305
    this_reg___2 --;
  }
  unconditional_jump: 
  case 12U: 
#line 6315
  while (1) {
#line 6315
    while (1) {
#line 6315
      mcnt = (int )*p & 255;
#line 6315
      mcnt += (int )((signed char )*(p + 1)) << 8;
#line 6315
      break;
    }
#line 6315
    p += 2;
#line 6315
    break;
  }
#line 6317
  p += mcnt;
#line 6319
  break;
  case 13U: ;
#line 6326
  goto unconditional_jump;
  case 18U: ;
#line 6338
  while (1) {
#line 6338
    while (fail_stack.size - fail_stack.avail < ((highest_active_reg - lowest_active_reg) + 1U) * 3U + 4U) {
#line 6338
      if (fail_stack.size > (unsigned int )re_max_failures * ((num_regs - 1U) * 3U + 4U)) {
#line 6338
        tmp___81 = 0;
      } else {
#line 6338
        tmp___79 = __builtin_alloca((unsigned long )(fail_stack.size << 1) * sizeof(fail_stack_elt_t ));
#line 6338
        destination___2 = (char *)tmp___79;
#line 6338
        memcpy((void */* __restrict  */)destination___2,
               (void const   */* __restrict  */)fail_stack.stack,
               (unsigned long )fail_stack.size * sizeof(fail_stack_elt_t ));
#line 6338
        fail_stack.stack = (fail_stack_elt_t *)destination___2;
#line 6338
        if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
#line 6338
          tmp___80 = 0;
        } else {
#line 6338
          fail_stack.size <<= 1;
#line 6338
          tmp___80 = 1;
        }
#line 6338
        tmp___81 = tmp___80;
      }
#line 6338
      if (tmp___81) {

      } else {
#line 6338
        return (-2);
      }
    }
#line 6338
    this_reg___3 = (int )lowest_active_reg;
#line 6338
    while ((unsigned int )this_reg___3 <= highest_active_reg) {
#line 6338
      tmp___82 = fail_stack.avail;
#line 6338
      (fail_stack.avail) ++;
#line 6338
      *(fail_stack.stack + tmp___82) = (fail_stack_elt_t )*(regstart + this_reg___3);
#line 6338
      tmp___83 = fail_stack.avail;
#line 6338
      (fail_stack.avail) ++;
#line 6338
      *(fail_stack.stack + tmp___83) = (fail_stack_elt_t )*(regend + this_reg___3);
#line 6338
      tmp___84 = fail_stack.avail;
#line 6338
      (fail_stack.avail) ++;
#line 6338
      *(fail_stack.stack + tmp___84) = (reg_info + this_reg___3)->word;
#line 6338
      this_reg___3 ++;
    }
#line 6338
    tmp___85 = fail_stack.avail;
#line 6338
    (fail_stack.avail) ++;
#line 6338
    *(fail_stack.stack + tmp___85) = (fail_stack_elt_t )lowest_active_reg;
#line 6338
    tmp___86 = fail_stack.avail;
#line 6338
    (fail_stack.avail) ++;
#line 6338
    *(fail_stack.stack + tmp___86) = (fail_stack_elt_t )highest_active_reg;
#line 6338
    tmp___87 = fail_stack.avail;
#line 6338
    (fail_stack.avail) ++;
#line 6338
    *(fail_stack.stack + tmp___87) = (fail_stack_elt_t )0;
#line 6338
    tmp___88 = fail_stack.avail;
#line 6338
    (fail_stack.avail) ++;
#line 6338
    *(fail_stack.stack + tmp___88) = (fail_stack_elt_t )0;
#line 6338
    break;
  }
#line 6339
  goto unconditional_jump;
  case 19U: ;
#line 6351
  while (1) {
#line 6351
    while (fail_stack.size - fail_stack.avail < ((highest_active_reg - lowest_active_reg) + 1U) * 3U + 4U) {
#line 6351
      if (fail_stack.size > (unsigned int )re_max_failures * ((num_regs - 1U) * 3U + 4U)) {
#line 6351
        tmp___91 = 0;
      } else {
#line 6351
        tmp___89 = __builtin_alloca((unsigned long )(fail_stack.size << 1) * sizeof(fail_stack_elt_t ));
#line 6351
        destination___3 = (char *)tmp___89;
#line 6351
        memcpy((void */* __restrict  */)destination___3,
               (void const   */* __restrict  */)fail_stack.stack,
               (unsigned long )fail_stack.size * sizeof(fail_stack_elt_t ));
#line 6351
        fail_stack.stack = (fail_stack_elt_t *)destination___3;
#line 6351
        if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
#line 6351
          tmp___90 = 0;
        } else {
#line 6351
          fail_stack.size <<= 1;
#line 6351
          tmp___90 = 1;
        }
#line 6351
        tmp___91 = tmp___90;
      }
#line 6351
      if (tmp___91) {

      } else {
#line 6351
        return (-2);
      }
    }
#line 6351
    this_reg___4 = (int )lowest_active_reg;
#line 6351
    while ((unsigned int )this_reg___4 <= highest_active_reg) {
#line 6351
      tmp___92 = fail_stack.avail;
#line 6351
      (fail_stack.avail) ++;
#line 6351
      *(fail_stack.stack + tmp___92) = (fail_stack_elt_t )*(regstart + this_reg___4);
#line 6351
      tmp___93 = fail_stack.avail;
#line 6351
      (fail_stack.avail) ++;
#line 6351
      *(fail_stack.stack + tmp___93) = (fail_stack_elt_t )*(regend + this_reg___4);
#line 6351
      tmp___94 = fail_stack.avail;
#line 6351
      (fail_stack.avail) ++;
#line 6351
      *(fail_stack.stack + tmp___94) = (reg_info + this_reg___4)->word;
#line 6351
      this_reg___4 ++;
    }
#line 6351
    tmp___95 = fail_stack.avail;
#line 6351
    (fail_stack.avail) ++;
#line 6351
    *(fail_stack.stack + tmp___95) = (fail_stack_elt_t )lowest_active_reg;
#line 6351
    tmp___96 = fail_stack.avail;
#line 6351
    (fail_stack.avail) ++;
#line 6351
    *(fail_stack.stack + tmp___96) = (fail_stack_elt_t )highest_active_reg;
#line 6351
    tmp___97 = fail_stack.avail;
#line 6351
    (fail_stack.avail) ++;
#line 6351
    *(fail_stack.stack + tmp___97) = (fail_stack_elt_t )0;
#line 6351
    tmp___98 = fail_stack.avail;
#line 6351
    (fail_stack.avail) ++;
#line 6351
    *(fail_stack.stack + tmp___98) = (fail_stack_elt_t )0;
#line 6351
    break;
  }
#line 6352
  break;
  case 20U: 
#line 6357
  while (1) {
#line 6357
    mcnt = (int )*(p + 2) & 255;
#line 6357
    mcnt += (int )((signed char )*((p + 2) + 1)) << 8;
#line 6357
    break;
  }
#line 6362
  if (mcnt > 0) {
#line 6364
    mcnt --;
#line 6365
    p += 2;
#line 6366
    while (1) {
#line 6366
      while (1) {
#line 6366
        *(p + 0) = (unsigned char )(mcnt & 255);
#line 6366
        *(p + 1) = (unsigned char )(mcnt >> 8);
#line 6366
        break;
      }
#line 6366
      p += 2;
#line 6366
      break;
    }
  } else
#line 6369
  if (mcnt == 0) {
#line 6372
    *(p + 2) = (unsigned char)0;
#line 6373
    *(p + 3) = (unsigned char)0;
#line 6374
    goto on_failure;
  } else {

  }
#line 6376
  break;
  case 21U: 
#line 6379
  while (1) {
#line 6379
    mcnt = (int )*(p + 2) & 255;
#line 6379
    mcnt += (int )((signed char )*((p + 2) + 1)) << 8;
#line 6379
    break;
  }
#line 6383
  if (mcnt) {
#line 6385
    mcnt --;
#line 6386
    while (1) {
#line 6386
      *((p + 2) + 0) = (unsigned char )(mcnt & 255);
#line 6386
      *((p + 2) + 1) = (unsigned char )(mcnt >> 8);
#line 6386
      break;
    }
#line 6387
    goto unconditional_jump;
  } else {
#line 6391
    p += 4;
  }
#line 6392
  break;
  case 22U: 
#line 6398
  while (1) {
#line 6398
    while (1) {
#line 6398
      mcnt = (int )*p & 255;
#line 6398
      mcnt += (int )((signed char )*(p + 1)) << 8;
#line 6398
      break;
    }
#line 6398
    p += 2;
#line 6398
    break;
  }
#line 6399
  p1 = p + mcnt;
#line 6400
  while (1) {
#line 6400
    while (1) {
#line 6400
      mcnt = (int )*p & 255;
#line 6400
      mcnt += (int )((signed char )*(p + 1)) << 8;
#line 6400
      break;
    }
#line 6400
    p += 2;
#line 6400
    break;
  }
#line 6402
  while (1) {
#line 6402
    *(p1 + 0) = (unsigned char )(mcnt & 255);
#line 6402
    *(p1 + 1) = (unsigned char )(mcnt >> 8);
#line 6402
    break;
  }
#line 6403
  break;
  case 27U: ;
#line 6408
  if (size1) {
#line 6408
    tmp___99 = string1;
  } else {
#line 6408
    tmp___99 = string2;
  }
#line 6408
  if ((unsigned long )d == (unsigned long )tmp___99) {
#line 6409
    break;
  } else
#line 6408
  if (! size2) {
#line 6409
    break;
  } else
#line 6408
  if ((unsigned long )d == (unsigned long )end2) {
#line 6409
    break;
  } else {
#line 6408
    if ((unsigned long )(d - 1) == (unsigned long )end1) {
#line 6408
      tmp___101 = (int const   )*string2;
    } else {
#line 6408
      if ((unsigned long )(d - 1) == (unsigned long )(string2 - 1)) {
#line 6408
        tmp___100 = (int const   )*(end1 - 1);
      } else {
#line 6408
        tmp___100 = (int const   )*(d - 1);
      }
#line 6408
      tmp___101 = tmp___100;
    }
#line 6408
    if ((unsigned long )d == (unsigned long )end1) {
#line 6408
      tmp___103 = (int const   )*string2;
    } else {
#line 6408
      if ((unsigned long )d == (unsigned long )(string2 - 1)) {
#line 6408
        tmp___102 = (int const   )*(end1 - 1);
      } else {
#line 6408
        tmp___102 = (int const   )*d;
      }
#line 6408
      tmp___103 = tmp___102;
    }
#line 6408
    if (((int )re_syntax_table[tmp___101] == 1) != ((int )re_syntax_table[tmp___103] == 1)) {
#line 6409
      break;
    } else {

    }
  }
#line 6410
  goto fail;
  case 28U: ;
#line 6414
  if (size1) {
#line 6414
    tmp___104 = string1;
  } else {
#line 6414
    tmp___104 = string2;
  }
#line 6414
  if ((unsigned long )d == (unsigned long )tmp___104) {
#line 6415
    goto fail;
  } else
#line 6414
  if (! size2) {
#line 6415
    goto fail;
  } else
#line 6414
  if ((unsigned long )d == (unsigned long )end2) {
#line 6415
    goto fail;
  } else {
#line 6414
    if ((unsigned long )(d - 1) == (unsigned long )end1) {
#line 6414
      tmp___106 = (int const   )*string2;
    } else {
#line 6414
      if ((unsigned long )(d - 1) == (unsigned long )(string2 - 1)) {
#line 6414
        tmp___105 = (int const   )*(end1 - 1);
      } else {
#line 6414
        tmp___105 = (int const   )*(d - 1);
      }
#line 6414
      tmp___106 = tmp___105;
    }
#line 6414
    if ((unsigned long )d == (unsigned long )end1) {
#line 6414
      tmp___108 = (int const   )*string2;
    } else {
#line 6414
      if ((unsigned long )d == (unsigned long )(string2 - 1)) {
#line 6414
        tmp___107 = (int const   )*(end1 - 1);
      } else {
#line 6414
        tmp___107 = (int const   )*d;
      }
#line 6414
      tmp___108 = tmp___107;
    }
#line 6414
    if (((int )re_syntax_table[tmp___106] == 1) != ((int )re_syntax_table[tmp___108] == 1)) {
#line 6415
      goto fail;
    } else {

    }
  }
#line 6416
  break;
  case 25U: ;
#line 6420
  if ((unsigned long )d == (unsigned long )end1) {
#line 6420
    tmp___110 = (int const   )*string2;
  } else {
#line 6420
    if ((unsigned long )d == (unsigned long )(string2 - 1)) {
#line 6420
      tmp___109 = (int const   )*(end1 - 1);
    } else {
#line 6420
      tmp___109 = (int const   )*d;
    }
#line 6420
    tmp___110 = tmp___109;
  }
#line 6420
  if ((int )re_syntax_table[tmp___110] == 1) {
#line 6420
    if (size1) {
#line 6420
      tmp___111 = string1;
    } else {
#line 6420
      tmp___111 = string2;
    }
#line 6420
    if ((unsigned long )d == (unsigned long )tmp___111) {
#line 6421
      break;
    } else
#line 6420
    if (! size2) {
#line 6421
      break;
    } else {
#line 6420
      if ((unsigned long )(d - 1) == (unsigned long )end1) {
#line 6420
        tmp___113 = (int const   )*string2;
      } else {
#line 6420
        if ((unsigned long )(d - 1) == (unsigned long )(string2 - 1)) {
#line 6420
          tmp___112 = (int const   )*(end1 - 1);
        } else {
#line 6420
          tmp___112 = (int const   )*(d - 1);
        }
#line 6420
        tmp___113 = tmp___112;
      }
#line 6420
      if ((int )re_syntax_table[tmp___113] == 1) {

      } else {
#line 6421
        break;
      }
    }
  } else {

  }
#line 6422
  goto fail;
  case 26U: ;
#line 6426
  if (size1) {
#line 6426
    tmp___114 = string1;
  } else {
#line 6426
    tmp___114 = string2;
  }
#line 6426
  if ((unsigned long )d == (unsigned long )tmp___114) {

  } else
#line 6426
  if (! size2) {

  } else {
#line 6426
    if ((unsigned long )(d - 1) == (unsigned long )end1) {
#line 6426
      tmp___116 = (int const   )*string2;
    } else {
#line 6426
      if ((unsigned long )(d - 1) == (unsigned long )(string2 - 1)) {
#line 6426
        tmp___115 = (int const   )*(end1 - 1);
      } else {
#line 6426
        tmp___115 = (int const   )*(d - 1);
      }
#line 6426
      tmp___116 = tmp___115;
    }
#line 6426
    if ((int )re_syntax_table[tmp___116] == 1) {
#line 6426
      if ((unsigned long )d == (unsigned long )end1) {
#line 6426
        tmp___118 = (int const   )*string2;
      } else {
#line 6426
        if ((unsigned long )d == (unsigned long )(string2 - 1)) {
#line 6426
          tmp___117 = (int const   )*(end1 - 1);
        } else {
#line 6426
          tmp___117 = (int const   )*d;
        }
#line 6426
        tmp___118 = tmp___117;
      }
#line 6426
      if ((int )re_syntax_table[tmp___118] == 1) {
#line 6426
        if ((unsigned long )d == (unsigned long )end2) {
#line 6428
          break;
        } else {

        }
      } else {
#line 6428
        break;
      }
    } else {

    }
  }
#line 6429
  goto fail;
  case 23U: ;
#line 6491
  while ((unsigned long )d == (unsigned long )dend) {
#line 6491
    if ((unsigned long )dend == (unsigned long )end_match_2) {
#line 6491
      goto fail;
    } else {

    }
#line 6491
    d = string2;
#line 6491
    dend = end_match_2;
  }
#line 6492
  if ((unsigned long )d == (unsigned long )end1) {
#line 6492
    tmp___120 = (int const   )*string2;
  } else {
#line 6492
    if ((unsigned long )d == (unsigned long )(string2 - 1)) {
#line 6492
      tmp___119 = (int const   )*(end1 - 1);
    } else {
#line 6492
      tmp___119 = (int const   )*d;
    }
#line 6492
    tmp___120 = tmp___119;
  }
#line 6492
  if ((int )re_syntax_table[tmp___120] == 1) {

  } else {
#line 6493
    goto fail;
  }
#line 6494
  while (1) {
#line 6494
    r___4 = lowest_active_reg;
#line 6494
    while (r___4 <= highest_active_reg) {
#line 6494
      tmp___121 = 1U;
#line 6494
      (reg_info + r___4)->bits.ever_matched_something = tmp___121;
#line 6494
      (reg_info + r___4)->bits.matched_something = tmp___121;
#line 6494
      r___4 ++;
    }
#line 6494
    break;
  }
#line 6495
  d ++;
#line 6496
  break;
  case 24U: ;
#line 6500
  while ((unsigned long )d == (unsigned long )dend) {
#line 6500
    if ((unsigned long )dend == (unsigned long )end_match_2) {
#line 6500
      goto fail;
    } else {

    }
#line 6500
    d = string2;
#line 6500
    dend = end_match_2;
  }
#line 6501
  if ((unsigned long )d == (unsigned long )end1) {
#line 6501
    tmp___123 = (int const   )*string2;
  } else {
#line 6501
    if ((unsigned long )d == (unsigned long )(string2 - 1)) {
#line 6501
      tmp___122 = (int const   )*(end1 - 1);
    } else {
#line 6501
      tmp___122 = (int const   )*d;
    }
#line 6501
    tmp___123 = tmp___122;
  }
#line 6501
  if ((int )re_syntax_table[tmp___123] == 1) {
#line 6502
    goto fail;
  } else {

  }
#line 6503
  while (1) {
#line 6503
    r___5 = lowest_active_reg;
#line 6503
    while (r___5 <= highest_active_reg) {
#line 6503
      tmp___124 = 1U;
#line 6503
      (reg_info + r___5)->bits.ever_matched_something = tmp___124;
#line 6503
      (reg_info + r___5)->bits.matched_something = tmp___124;
#line 6503
      r___5 ++;
    }
#line 6503
    break;
  }
#line 6504
  d ++;
#line 6505
  break;
  default: 
#line 6509
  abort();
  }
#line 6511
  goto __Cont;
  fail: 
#line 6516
  if (! (fail_stack.avail == 0U)) {
#line 6519
    (fail_stack.avail) --;
#line 6519
    string_temp___0 = *(fail_stack.stack + fail_stack.avail);
#line 6519
    if ((unsigned long )string_temp___0 != (unsigned long )((void *)0)) {
#line 6519
      d = (char const   *)string_temp___0;
    } else {

    }
#line 6519
    (fail_stack.avail) --;
#line 6519
    p = (unsigned char *)*(fail_stack.stack + fail_stack.avail);
#line 6519
    (fail_stack.avail) --;
#line 6519
    highest_active_reg = (unsigned int )*(fail_stack.stack + fail_stack.avail);
#line 6519
    (fail_stack.avail) --;
#line 6519
    lowest_active_reg = (unsigned int )*(fail_stack.stack + fail_stack.avail);
#line 6519
    this_reg___5 = (int )highest_active_reg;
#line 6519
    while ((unsigned int )this_reg___5 >= lowest_active_reg) {
#line 6519
      (fail_stack.avail) --;
#line 6519
      (reg_info + this_reg___5)->word = *(fail_stack.stack + fail_stack.avail);
#line 6519
      (fail_stack.avail) --;
#line 6519
      *(regend + this_reg___5) = (char const   *)*(fail_stack.stack + fail_stack.avail);
#line 6519
      (fail_stack.avail) --;
#line 6519
      *(regstart + this_reg___5) = (char const   *)*(fail_stack.stack + fail_stack.avail);
#line 6519
      this_reg___5 --;
    }
#line 6524
    if (! p) {
#line 6525
      goto fail;
    } else {

    }
#line 6529
    if ((unsigned long )p < (unsigned long )pend) {
#line 6531
      is_a_jump_n___0 = (boolean )0;
#line 6535
      switch ((unsigned int )((re_opcode_t )*p)) {
      case 21U: 
#line 6538
      is_a_jump_n___0 = (boolean )1;
      case 12U: 
      case 16U: 
      case 17U: 
#line 6542
      p1 = p + 1;
#line 6543
      while (1) {
#line 6543
        while (1) {
#line 6543
          mcnt = (int )*p1 & 255;
#line 6543
          mcnt += (int )((signed char )*(p1 + 1)) << 8;
#line 6543
          break;
        }
#line 6543
        p1 += 2;
#line 6543
        break;
      }
#line 6544
      p1 += mcnt;
#line 6546
      if (is_a_jump_n___0) {
#line 6546
        if ((unsigned int )((re_opcode_t )*p1) == 20U) {
#line 6549
          goto fail;
        } else {
#line 6546
          goto _L___7;
        }
      } else
      _L___7: /* CIL Label */ 
#line 6546
      if (! is_a_jump_n___0) {
#line 6546
        if ((unsigned int )((re_opcode_t )*p1) == 14U) {
#line 6549
          goto fail;
        } else {

        }
      } else {

      }
#line 6550
      break;
      default: ;
      }
    } else {

    }
#line 6556
    if ((unsigned long )d >= (unsigned long )string1) {
#line 6556
      if ((unsigned long )d <= (unsigned long )end1) {
#line 6557
        dend = end_match_1;
      } else {

      }
    } else {

    }
  } else {
#line 6560
    break;
  }
  __Cont: /* CIL Label */ ;
}
---------
SID [3868] -> Line 5590
#line 5590
dend = end_match_2;
---------
SID [3867] -> Line 5589
#line 5589
d = (string2 + pos) - size1;
---------
SID [3866] -> Line 5590
#line 5590
dend = end_match_2;
---------
SID [3865] -> Line 5589
#line 5589
d = (string2 + pos) - size1;
---------
SID [3864] -> Line 5585
#line 5585
dend = end_match_1;
---------
SID [3863] -> Line 5584
#line 5584
d = string1 + pos;
---------
SID [3862] -> Line 5582
#line 5582
if (pos <= size1) {
#line 5584
  d = string1 + pos;
#line 5585
  dend = end_match_1;
} else {
#line 5589
  d = (string2 + pos) - size1;
#line 5590
  dend = end_match_2;
}
---------
SID [3861] -> Line 5582
#line 5582
if (size1 > 0) {
#line 5582
  if (pos <= size1) {
#line 5584
    d = string1 + pos;
#line 5585
    dend = end_match_1;
  } else {
#line 5589
    d = (string2 + pos) - size1;
#line 5590
    dend = end_match_2;
  }
} else {
#line 5589
  d = (string2 + pos) - size1;
#line 5590
  dend = end_match_2;
}
---------
SID [3860] -> Line 5573
#line 5573
end_match_2 = (string2 + stop) - size1;
---------
SID [3859] -> Line 5572
#line 5572
end_match_1 = end1;
---------
SID [3858] -> Line 5568
#line 5568
end_match_2 = string2;
---------
SID [3857] -> Line 5567
#line 5567
end_match_1 = string1 + stop;
---------
SID [3856] -> Line 5565
#line 5565
if (stop <= size1) {
#line 5567
  end_match_1 = string1 + stop;
#line 5568
  end_match_2 = string2;
} else {
#line 5572
  end_match_1 = end1;
#line 5573
  end_match_2 = (string2 + stop) - size1;
}
---------
SID [3855] -> Line 5562
#line 5562
end2 = string2 + size2;
---------
SID [3854] -> Line 5561
#line 5561
end1 = string1 + size1;
---------
SID [3853] -> Line -1

---------
SID [3852] -> Line -1

---------
SID [3851] -> Line 5559
#line 5559
size1 = 0;
---------
SID [3850] -> Line 5558
#line 5558
string1 = (char const   *)0;
---------
SID [3849] -> Line 5557
#line 5557
size2 = size1;
---------
SID [3848] -> Line 5556
#line 5556
string2 = string1;
---------
SID [3847] -> Line 5554
#line 5554
if ((unsigned long )string1 != (unsigned long )((void *)0)) {
#line 5556
  string2 = string1;
#line 5557
  size2 = size1;
#line 5558
  string1 = (char const   *)0;
#line 5559
  size1 = 0;
} else {

}
---------
SID [3846] -> Line 5554
#line 5554
if (size2 == 0) {
#line 5554
  if ((unsigned long )string1 != (unsigned long )((void *)0)) {
#line 5556
    string2 = string1;
#line 5557
    size2 = size1;
#line 5558
    string1 = (char const   *)0;
#line 5559
    size1 = 0;
  } else {

  }
} else {

}
---------
SID [3845] -> Line 5541
#line 5541
mcnt ++;
---------
SID [3844] -> Line 5549
#line 5549
(reg_info + mcnt)->bits.ever_matched_something = 0U;
---------
SID [3843] -> Line 5548
#line 5548
(reg_info + mcnt)->bits.matched_something = 0U;
---------
SID [3842] -> Line 5547
#line 5547
(reg_info + mcnt)->bits.is_active = 0U;
---------
SID [3841] -> Line 5546
#line 5546
(reg_info + mcnt)->bits.match_null_string_p = 3U;
---------
SID [3840] -> Line 5543
#line 5543
*(regstart + mcnt) = tmp___10;
---------
SID [3839] -> Line 5543
#line 5543
*(regend + mcnt) = tmp___10;
---------
SID [3838] -> Line 5543
#line 5543
tmp___10 = tmp___11;
---------
SID [3837] -> Line 5543
#line 5543
*(old_regstart + mcnt) = tmp___11;
---------
SID [3836] -> Line 5543
#line 5543
tmp___11 = tmp___12;
---------
SID [3835] -> Line 5543
#line 5543
*(old_regend + mcnt) = tmp___12;
---------
SID [3834] -> Line 5543
#line 5543
tmp___12 = (char const   *)((char *)-1);
---------
SID [3833] -> Line 5541
#line 5541
break;
---------
SID [3832] -> Line -1

---------
SID [3831] -> Line 5541
#line 5541
if ((unsigned int )mcnt < num_regs) {

} else {
#line 5541
  break;
}
---------
SID [3830] -> Line 5541
#line 5541
while ((unsigned int )mcnt < num_regs) {
#line 5543
  tmp___12 = (char const   *)((char *)-1);
#line 5543
  *(old_regend + mcnt) = tmp___12;
#line 5543
  tmp___11 = tmp___12;
#line 5543
  *(old_regstart + mcnt) = tmp___11;
#line 5543
  tmp___10 = tmp___11;
#line 5543
  *(regend + mcnt) = tmp___10;
#line 5543
  *(regstart + mcnt) = tmp___10;
#line 5546
  (reg_info + mcnt)->bits.match_null_string_p = 3U;
#line 5547
  (reg_info + mcnt)->bits.is_active = 0U;
#line 5548
  (reg_info + mcnt)->bits.matched_something = 0U;
#line 5549
  (reg_info + mcnt)->bits.ever_matched_something = 0U;
#line 5541
  mcnt ++;
}
---------
SID [3829] -> Line 5541
#line 5541
mcnt = 1;
---------
SID [3828] -> Line -1

---------
SID [3827] -> Line 5535
#line 5535
return (-1);
---------
SID [3826] -> Line 5534
#line 5534
__builtin_alloca(0UL);
---------
SID [3825] -> Line 5532
#line 5532
if (pos > size1 + size2) {
#line 5534
  __builtin_alloca(0UL);
#line 5535
  return (-1);
} else {

}
---------
SID [3824] -> Line 5535
#line 5535
return (-1);
---------
SID [3823] -> Line 5534
#line 5534
__builtin_alloca(0UL);
---------
SID [3822] -> Line 5532
#line 5532
if (pos < 0) {
#line 5534
  __builtin_alloca(0UL);
#line 5535
  return (-1);
} else
#line 5532
if (pos > size1 + size2) {
#line 5534
  __builtin_alloca(0UL);
#line 5535
  return (-1);
} else {

}
---------
SID [3821] -> Line -1

---------
SID [3820] -> Line 5517
#line 5517
return (-2);
---------
SID [3819] -> Line 5516
#line 5516
__builtin_alloca(0UL);
---------
SID [3818] -> Line 5517
#line 5517
return (-2);
---------
SID [3817] -> Line 5516
#line 5516
__builtin_alloca(0UL);
---------
SID [3816] -> Line 5517
#line 5517
return (-2);
---------
SID [3815] -> Line 5516
#line 5516
__builtin_alloca(0UL);
---------
SID [3814] -> Line 5517
#line 5517
return (-2);
---------
SID [3813] -> Line 5516
#line 5516
__builtin_alloca(0UL);
---------
SID [3812] -> Line 5517
#line 5517
return (-2);
---------
SID [3811] -> Line 5516
#line 5516
__builtin_alloca(0UL);
---------
SID [3810] -> Line 5517
#line 5517
return (-2);
---------
SID [3809] -> Line 5516
#line 5516
__builtin_alloca(0UL);
---------
SID [3808] -> Line 5517
#line 5517
return (-2);
---------
SID [3807] -> Line 5516
#line 5516
__builtin_alloca(0UL);
---------
SID [3806] -> Line 5517
#line 5517
return (-2);
---------
SID [3805] -> Line 5516
#line 5516
__builtin_alloca(0UL);
---------
SID [3804] -> Line 5517
#line 5517
return (-2);
---------
SID [3803] -> Line 5516
#line 5516
__builtin_alloca(0UL);
---------
SID [3802] -> Line -1

---------
SID [3801] -> Line 5513
#line 5513
if (reg_info_dummy) {

} else {
#line 5516
  __builtin_alloca(0UL);
#line 5517
  return (-2);
}
---------
SID [3800] -> Line 5513
#line 5513
if (reg_dummy) {
#line 5513
  if (reg_info_dummy) {

  } else {
#line 5516
    __builtin_alloca(0UL);
#line 5517
    return (-2);
  }
} else {
#line 5516
  __builtin_alloca(0UL);
#line 5517
  return (-2);
}
---------
SID [3799] -> Line 5513
#line 5513
if (best_regend) {
#line 5513
  if (reg_dummy) {
#line 5513
    if (reg_info_dummy) {

    } else {
#line 5516
      __builtin_alloca(0UL);
#line 5517
      return (-2);
    }
  } else {
#line 5516
    __builtin_alloca(0UL);
#line 5517
    return (-2);
  }
} else {
#line 5516
  __builtin_alloca(0UL);
#line 5517
  return (-2);
}
---------
SID [3798] -> Line 5513
#line 5513
if (best_regstart) {
#line 5513
  if (best_regend) {
#line 5513
    if (reg_dummy) {
#line 5513
      if (reg_info_dummy) {

      } else {
#line 5516
        __builtin_alloca(0UL);
#line 5517
        return (-2);
      }
    } else {
#line 5516
      __builtin_alloca(0UL);
#line 5517
      return (-2);
    }
  } else {
#line 5516
    __builtin_alloca(0UL);
#line 5517
    return (-2);
  }
} else {
#line 5516
  __builtin_alloca(0UL);
#line 5517
  return (-2);
}
---------
SID [3797] -> Line 5513
#line 5513
if (reg_info) {
#line 5513
  if (best_regstart) {
#line 5513
    if (best_regend) {
#line 5513
      if (reg_dummy) {
#line 5513
        if (reg_info_dummy) {

        } else {
#line 5516
          __builtin_alloca(0UL);
#line 5517
          return (-2);
        }
      } else {
#line 5516
        __builtin_alloca(0UL);
#line 5517
        return (-2);
      }
    } else {
#line 5516
      __builtin_alloca(0UL);
#line 5517
      return (-2);
    }
  } else {
#line 5516
    __builtin_alloca(0UL);
#line 5517
    return (-2);
  }
} else {
#line 5516
  __builtin_alloca(0UL);
#line 5517
  return (-2);
}
---------
SID [3796] -> Line 5513
#line 5513
if (old_regend) {
#line 5513
  if (reg_info) {
#line 5513
    if (best_regstart) {
#line 5513
      if (best_regend) {
#line 5513
        if (reg_dummy) {
#line 5513
          if (reg_info_dummy) {

          } else {
#line 5516
            __builtin_alloca(0UL);
#line 5517
            return (-2);
          }
        } else {
#line 5516
          __builtin_alloca(0UL);
#line 5517
          return (-2);
        }
      } else {
#line 5516
        __builtin_alloca(0UL);
#line 5517
        return (-2);
      }
    } else {
#line 5516
      __builtin_alloca(0UL);
#line 5517
      return (-2);
    }
  } else {
#line 5516
    __builtin_alloca(0UL);
#line 5517
    return (-2);
  }
} else {
#line 5516
  __builtin_alloca(0UL);
#line 5517
  return (-2);
}
---------
SID [3795] -> Line 5513
#line 5513
if (old_regstart) {
#line 5513
  if (old_regend) {
#line 5513
    if (reg_info) {
#line 5513
      if (best_regstart) {
#line 5513
        if (best_regend) {
#line 5513
          if (reg_dummy) {
#line 5513
            if (reg_info_dummy) {

            } else {
#line 5516
              __builtin_alloca(0UL);
#line 5517
              return (-2);
            }
          } else {
#line 5516
            __builtin_alloca(0UL);
#line 5517
            return (-2);
          }
        } else {
#line 5516
          __builtin_alloca(0UL);
#line 5517
          return (-2);
        }
      } else {
#line 5516
        __builtin_alloca(0UL);
#line 5517
        return (-2);
      }
    } else {
#line 5516
      __builtin_alloca(0UL);
#line 5517
      return (-2);
    }
  } else {
#line 5516
    __builtin_alloca(0UL);
#line 5517
    return (-2);
  }
} else {
#line 5516
  __builtin_alloca(0UL);
#line 5517
  return (-2);
}
---------
SID [3794] -> Line 5513
#line 5513
if (regend) {
#line 5513
  if (old_regstart) {
#line 5513
    if (old_regend) {
#line 5513
      if (reg_info) {
#line 5513
        if (best_regstart) {
#line 5513
          if (best_regend) {
#line 5513
            if (reg_dummy) {
#line 5513
              if (reg_info_dummy) {

              } else {
#line 5516
                __builtin_alloca(0UL);
#line 5517
                return (-2);
              }
            } else {
#line 5516
              __builtin_alloca(0UL);
#line 5517
              return (-2);
            }
          } else {
#line 5516
            __builtin_alloca(0UL);
#line 5517
            return (-2);
          }
        } else {
#line 5516
          __builtin_alloca(0UL);
#line 5517
          return (-2);
        }
      } else {
#line 5516
        __builtin_alloca(0UL);
#line 5517
        return (-2);
      }
    } else {
#line 5516
      __builtin_alloca(0UL);
#line 5517
      return (-2);
    }
  } else {
#line 5516
    __builtin_alloca(0UL);
#line 5517
    return (-2);
  }
} else {
#line 5516
  __builtin_alloca(0UL);
#line 5517
  return (-2);
}
---------
SID [3793] -> Line 5513
#line 5513
if (regstart) {
#line 5513
  if (regend) {
#line 5513
    if (old_regstart) {
#line 5513
      if (old_regend) {
#line 5513
        if (reg_info) {
#line 5513
          if (best_regstart) {
#line 5513
            if (best_regend) {
#line 5513
              if (reg_dummy) {
#line 5513
                if (reg_info_dummy) {

                } else {
#line 5516
                  __builtin_alloca(0UL);
#line 5517
                  return (-2);
                }
              } else {
#line 5516
                __builtin_alloca(0UL);
#line 5517
                return (-2);
              }
            } else {
#line 5516
              __builtin_alloca(0UL);
#line 5517
              return (-2);
            }
          } else {
#line 5516
            __builtin_alloca(0UL);
#line 5517
            return (-2);
          }
        } else {
#line 5516
          __builtin_alloca(0UL);
#line 5517
          return (-2);
        }
      } else {
#line 5516
        __builtin_alloca(0UL);
#line 5517
        return (-2);
      }
    } else {
#line 5516
      __builtin_alloca(0UL);
#line 5517
      return (-2);
    }
  } else {
#line 5516
    __builtin_alloca(0UL);
#line 5517
    return (-2);
  }
} else {
#line 5516
  __builtin_alloca(0UL);
#line 5517
  return (-2);
}
---------
SID [3792] -> Line 5511
#line 5511
reg_info_dummy = (register_info_type *)tmp___9;
---------
SID [3791] -> Line 5511
#line 5511
tmp___9 = __builtin_alloca((unsigned long )num_regs * sizeof(register_info_type ));
---------
SID [3790] -> Line 5510
#line 5510
reg_dummy = (char const   **)tmp___8;
---------
SID [3789] -> Line 5510
#line 5510
tmp___8 = __builtin_alloca((unsigned long )num_regs * sizeof(char const   *));
---------
SID [3788] -> Line 5509
#line 5509
reg_info = (register_info_type *)tmp___7;
---------
SID [3787] -> Line 5509
#line 5509
tmp___7 = __builtin_alloca((unsigned long )num_regs * sizeof(register_info_type ));
---------
SID [3786] -> Line 5508
#line 5508
best_regend = (char const   **)tmp___6;
---------
SID [3785] -> Line 5508
#line 5508
tmp___6 = __builtin_alloca((unsigned long )num_regs * sizeof(char const   *));
---------
SID [3784] -> Line 5507
#line 5507
best_regstart = (char const   **)tmp___5;
---------
SID [3783] -> Line 5507
#line 5507
tmp___5 = __builtin_alloca((unsigned long )num_regs * sizeof(char const   *));
---------
SID [3782] -> Line 5506
#line 5506
old_regend = (char const   **)tmp___4;
---------
SID [3781] -> Line 5506
#line 5506
tmp___4 = __builtin_alloca((unsigned long )num_regs * sizeof(char const   *));
---------
SID [3780] -> Line 5505
#line 5505
old_regstart = (char const   **)tmp___3;
---------
SID [3779] -> Line 5505
#line 5505
tmp___3 = __builtin_alloca((unsigned long )num_regs * sizeof(char const   *));
---------
SID [3778] -> Line 5504
#line 5504
regend = (char const   **)tmp___2;
---------
SID [3777] -> Line 5504
#line 5504
tmp___2 = __builtin_alloca((unsigned long )num_regs * sizeof(char const   *));
---------
SID [3776] -> Line 5503
#line 5503
regstart = (char const   **)tmp___1;
---------
SID [3775] -> Line 5503
#line 5503
tmp___1 = __builtin_alloca((unsigned long )num_regs * sizeof(char const   *));
---------
SID [3774] -> Line 5501
#line 5501
if (bufp->re_nsub) {
#line 5503
  tmp___1 = __builtin_alloca((unsigned long )num_regs * sizeof(char const   *));
#line 5503
  regstart = (char const   **)tmp___1;
#line 5504
  tmp___2 = __builtin_alloca((unsigned long )num_regs * sizeof(char const   *));
#line 5504
  regend = (char const   **)tmp___2;
#line 5505
  tmp___3 = __builtin_alloca((unsigned long )num_regs * sizeof(char const   *));
#line 5505
  old_regstart = (char const   **)tmp___3;
#line 5506
  tmp___4 = __builtin_alloca((unsigned long )num_regs * sizeof(char const   *));
#line 5506
  old_regend = (char const   **)tmp___4;
#line 5507
  tmp___5 = __builtin_alloca((unsigned long )num_regs * sizeof(char const   *));
#line 5507
  best_regstart = (char const   **)tmp___5;
#line 5508
  tmp___6 = __builtin_alloca((unsigned long )num_regs * sizeof(char const   *));
#line 5508
  best_regend = (char const   **)tmp___6;
#line 5509
  tmp___7 = __builtin_alloca((unsigned long )num_regs * sizeof(register_info_type ));
#line 5509
  reg_info = (register_info_type *)tmp___7;
#line 5510
  tmp___8 = __builtin_alloca((unsigned long )num_regs * sizeof(char const   *));
#line 5510
  reg_dummy = (char const   **)tmp___8;
#line 5511
  tmp___9 = __builtin_alloca((unsigned long )num_regs * sizeof(register_info_type ));
#line 5511
  reg_info_dummy = (register_info_type *)tmp___9;
#line 5513
  if (regstart) {
#line 5513
    if (regend) {
#line 5513
      if (old_regstart) {
#line 5513
        if (old_regend) {
#line 5513
          if (reg_info) {
#line 5513
            if (best_regstart) {
#line 5513
              if (best_regend) {
#line 5513
                if (reg_dummy) {
#line 5513
                  if (reg_info_dummy) {

                  } else {
#line 5516
                    __builtin_alloca(0UL);
#line 5517
                    return (-2);
                  }
                } else {
#line 5516
                  __builtin_alloca(0UL);
#line 5517
                  return (-2);
                }
              } else {
#line 5516
                __builtin_alloca(0UL);
#line 5517
                return (-2);
              }
            } else {
#line 5516
              __builtin_alloca(0UL);
#line 5517
              return (-2);
            }
          } else {
#line 5516
            __builtin_alloca(0UL);
#line 5517
            return (-2);
          }
        } else {
#line 5516
          __builtin_alloca(0UL);
#line 5517
          return (-2);
        }
      } else {
#line 5516
        __builtin_alloca(0UL);
#line 5517
        return (-2);
      }
    } else {
#line 5516
      __builtin_alloca(0UL);
#line 5517
      return (-2);
    }
  } else {
#line 5516
    __builtin_alloca(0UL);
#line 5517
    return (-2);
  }
} else {

}
---------
SID [3773] -> Line 5494
#line 5494
break;
---------
SID [3772] -> Line 5494
#line 5494
fail_stack.avail = 0U;
---------
SID [3771] -> Line 5494
#line 5494
fail_stack.size = 5U;
---------
SID [3770] -> Line -1

---------
SID [3769] -> Line 5494
#line 5494
return (-2);
---------
SID [3768] -> Line 5494
#line 5494
if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
#line 5494
  return (-2);
} else {

}
---------
SID [3767] -> Line 5494
#line 5494
fail_stack.stack = (fail_stack_elt_t *)tmp___0;
---------
SID [3766] -> Line 5494
#line 5494
tmp___0 = __builtin_alloca(5UL * sizeof(fail_stack_elt_t ));
---------
SID [3765] -> Line 5494
#line 5494
while (1) {
#line 5494
  tmp___0 = __builtin_alloca(5UL * sizeof(fail_stack_elt_t ));
#line 5494
  fail_stack.stack = (fail_stack_elt_t *)tmp___0;
#line 5494
  if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
#line 5494
    return (-2);
  } else {

  }
#line 5494
  fail_stack.size = 5U;
#line 5494
  fail_stack.avail = 0U;
#line 5494
  break;
}
---------
SID [3764] -> Line 5481
#line 5481
match_end = (char const   *)((void *)0);
---------
SID [3763] -> Line 5470
#line 5470
best_regs_set = 0U;
---------
SID [3762] -> Line 5440
#line 5440
highest_active_reg = (unsigned int )(1 << 8);
---------
SID [3761] -> Line 5439
#line 5439
lowest_active_reg = (unsigned int )((1 << 8) + 1);
---------
SID [3760] -> Line 5436
#line 5436
num_regs = (unsigned int )(bufp->re_nsub + 1UL);
---------
SID [3759] -> Line 5416
#line 5416
translate = bufp->translate;
---------
SID [3758] -> Line 5413
#line 5413
pend = p + bufp->used;
---------
SID [3757] -> Line 5412
#line 5412
p = bufp->buffer;
---------
SID [3756] -> Line 5370
#line 5370
return (tmp___0);
---------
SID [3755] -> Line 5370
#line 5370
tmp___0 = re_match_2(bufp, (char const   *)((void *)0), 0, string, size, pos,
                     regs___0, size);
---------
SID [3754] -> Line 5217
#line 5217
return (-1);
---------
SID [3753] -> Line 5214
#line 5214
startpos --;
---------
SID [3752] -> Line 5213
#line 5213
range ++;
---------
SID [3751] -> Line 5209
#line 5209
startpos ++;
---------
SID [3750] -> Line 5208
#line 5208
range --;
---------
SID [3749] -> Line 5206
#line 5206
if (range > 0) {
#line 5208
  range --;
#line 5209
  startpos ++;
} else {
#line 5213
  range ++;
#line 5214
  startpos --;
}
---------
SID [3748] -> Line 5205
#line 5205
break;
---------
SID [3747] -> Line 5204
advance: 
#line 5204
if (! range) {
#line 5205
  break;
} else
#line 5206
if (range > 0) {
#line 5208
  range --;
#line 5209
  startpos ++;
} else {
#line 5213
  range ++;
#line 5214
  startpos --;
}
---------
SID [3746] -> Line -1

---------
SID [3745] -> Line 5201
#line 5201
return (-2);
---------
SID [3744] -> Line 5200
#line 5200
if (val == -2) {
#line 5201
  return (-2);
} else {

}
---------
SID [3743] -> Line -1

---------
SID [3742] -> Line 5198
#line 5198
return (startpos);
---------
SID [3741] -> Line 5197
#line 5197
if (val >= 0) {
#line 5198
  return (startpos);
} else {

}
---------
SID [3740] -> Line 5195
#line 5195
val = re_match_2(bufp, string1, size1, string2, size2, startpos, regs___0,
                 stop);
---------
SID [3739] -> Line -1

---------
SID [3738] -> Line -1

---------
SID [3737] -> Line -1

---------
SID [3736] -> Line -1

---------
SID [3735] -> Line 5193
#line 5193
return (-1);
---------
SID [3734] -> Line 5191
#line 5191
if (! bufp->can_be_null) {
#line 5193
  return (-1);
} else {

}
---------
SID [3733] -> Line 5191
#line 5191
if (fastmap) {
#line 5191
  if (! bufp->can_be_null) {
#line 5193
    return (-1);
  } else {

  }
} else {

}
---------
SID [3732] -> Line 5191
#line 5191
if (startpos == total_size) {
#line 5191
  if (fastmap) {
#line 5191
    if (! bufp->can_be_null) {
#line 5193
      return (-1);
    } else {

    }
  } else {

  }
} else {

}
---------
SID [3731] -> Line 5191
#line 5191
if (range >= 0) {
#line 5191
  if (startpos == total_size) {
#line 5191
    if (fastmap) {
#line 5191
      if (! bufp->can_be_null) {
#line 5193
        return (-1);
      } else {

      }
    } else {

    }
  } else {

  }
} else {

}
---------
SID [3730] -> Line -1

---------
SID [3729] -> Line -1

---------
SID [3728] -> Line -1

---------
SID [3727] -> Line 5186
#line 5186
goto advance;
---------
SID [3726] -> Line -1

---------
SID [3725] -> Line 5185
#line 5185
if (*(fastmap + (unsigned char )tmp___5)) {

} else {
#line 5186
  goto advance;
}
---------
SID [3724] -> Line 5185
#line 5185
tmp___5 = (int )c;
---------
SID [3723] -> Line 5185
#line 5185
tmp___5 = (int )*(translate + (unsigned char )c);
---------
SID [3722] -> Line 5185
#line 5185
if (translate) {
#line 5185
  tmp___5 = (int )*(translate + (unsigned char )c);
} else {
#line 5185
  tmp___5 = (int )c;
}
---------
SID [3721] -> Line 5181
#line 5181
c = (char )tmp___4;
---------
SID [3720] -> Line 5181
#line 5181
tmp___4 = (int const   )*(string1 + startpos);
---------
SID [3719] -> Line 5181
#line 5181
tmp___4 = (int const   )*(string2 + (startpos - size1));
---------
SID [3718] -> Line 5181
#line 5181
if (startpos >= size1) {
#line 5181
  tmp___4 = (int const   )*(string2 + (startpos - size1));
} else {
#line 5181
  tmp___4 = (int const   )*(string1 + startpos);
}
---------
SID [3717] -> Line 5181
#line 5181
tmp___4 = (int const   )*(string2 + (startpos - size1));
---------
SID [3716] -> Line 5181
#line 5181
if (size1 == 0) {
#line 5181
  tmp___4 = (int const   )*(string2 + (startpos - size1));
} else
#line 5181
if (startpos >= size1) {
#line 5181
  tmp___4 = (int const   )*(string2 + (startpos - size1));
} else {
#line 5181
  tmp___4 = (int const   )*(string1 + startpos);
}
---------
SID [3715] -> Line 5177
#line 5177
startpos += irange - range;
---------
SID [3714] -> Line 5175
#line 5175
range --;
---------
SID [3713] -> Line 5174
#line 5174
break;
---------
SID [3712] -> Line -1

---------
SID [3711] -> Line 5174
#line 5174
break;
---------
SID [3710] -> Line 5174
#line 5174
if (*(fastmap + (unsigned char )*tmp___3)) {
#line 5174
  break;
} else {

}
---------
SID [3709] -> Line 5174
#line 5174
d ++;
---------
SID [3708] -> Line 5174
#line 5174
tmp___3 = d;
---------
SID [3707] -> Line 5174
#line 5174
if (range > lim) {
#line 5174
  tmp___3 = d;
#line 5174
  d ++;
#line 5174
  if (*(fastmap + (unsigned char )*tmp___3)) {
#line 5174
    break;
  } else {

  }
} else {
#line 5174
  break;
}
---------
SID [3706] -> Line 5174
#line 5174
while (1) {
#line 5174
  if (range > lim) {
#line 5174
    tmp___3 = d;
#line 5174
    d ++;
#line 5174
    if (*(fastmap + (unsigned char )*tmp___3)) {
#line 5174
      break;
    } else {

    }
  } else {
#line 5174
    break;
  }
#line 5175
  range --;
}
---------
SID [3705] -> Line 5172
#line 5172
range --;
---------
SID [3704] -> Line 5169
#line 5169
break;
---------
SID [3703] -> Line -1

---------
SID [3702] -> Line 5169
#line 5169
break;
---------
SID [3701] -> Line 5169
#line 5169
if (*(fastmap + (unsigned char )*(translate + (unsigned char )*tmp___2))) {
#line 5169
  break;
} else {

}
---------
SID [3700] -> Line 5169
#line 5169
d ++;
---------
SID [3699] -> Line 5169
#line 5169
tmp___2 = d;
---------
SID [3698] -> Line 5169
#line 5169
if (range > lim) {
#line 5169
  tmp___2 = d;
#line 5169
  d ++;
#line 5169
  if (*(fastmap + (unsigned char )*(translate + (unsigned char )*tmp___2))) {
#line 5169
    break;
  } else {

  }
} else {
#line 5169
  break;
}
---------
SID [3697] -> Line 5169
#line 5169
while (1) {
#line 5169
  if (range > lim) {
#line 5169
    tmp___2 = d;
#line 5169
    d ++;
#line 5169
    if (*(fastmap + (unsigned char )*(translate + (unsigned char )*tmp___2))) {
#line 5169
      break;
    } else {

    }
  } else {
#line 5169
    break;
  }
#line 5172
  range --;
}
---------
SID [3696] -> Line 5168
#line 5168
if (translate) {
#line 5169
  while (1) {
#line 5169
    if (range > lim) {
#line 5169
      tmp___2 = d;
#line 5169
      d ++;
#line 5169
      if (*(fastmap + (unsigned char )*(translate + (unsigned char )*tmp___2))) {
#line 5169
        break;
      } else {

      }
    } else {
#line 5169
      break;
    }
#line 5172
    range --;
  }
} else {
#line 5174
  while (1) {
#line 5174
    if (range > lim) {
#line 5174
      tmp___3 = d;
#line 5174
      d ++;
#line 5174
      if (*(fastmap + (unsigned char )*tmp___3)) {
#line 5174
        break;
      } else {

      }
    } else {
#line 5174
      break;
    }
#line 5175
    range --;
  }
}
---------
SID [3695] -> Line 5164
#line 5164
d = tmp___1 + startpos;
---------
SID [3694] -> Line 5164
#line 5164
tmp___1 = string1;
---------
SID [3693] -> Line 5164
#line 5164
tmp___1 = string2 - size1;
---------
SID [3692] -> Line 5164
#line 5164
if (startpos >= size1) {
#line 5164
  tmp___1 = string2 - size1;
} else {
#line 5164
  tmp___1 = string1;
}
---------
SID [3691] -> Line -1

---------
SID [3690] -> Line -1

---------
SID [3689] -> Line 5162
#line 5162
lim = range - (size1 - startpos);
---------
SID [3688] -> Line 5161
#line 5161
if (startpos + range >= size1) {
#line 5162
  lim = range - (size1 - startpos);
} else {

}
---------
SID [3687] -> Line 5161
#line 5161
if (startpos < size1) {
#line 5161
  if (startpos + range >= size1) {
#line 5162
    lim = range - (size1 - startpos);
  } else {

  }
} else {

}
---------
SID [3686] -> Line 5159
#line 5159
irange = range;
---------
SID [3685] -> Line 5158
#line 5158
lim = 0;
---------
SID [3684] -> Line 5155
#line 5155
if (range > 0) {
#line 5158
  lim = 0;
#line 5159
  irange = range;
#line 5161
  if (startpos < size1) {
#line 5161
    if (startpos + range >= size1) {
#line 5162
      lim = range - (size1 - startpos);
    } else {

    }
  } else {

  }
#line 5164
  if (startpos >= size1) {
#line 5164
    tmp___1 = string2 - size1;
  } else {
#line 5164
    tmp___1 = string1;
  }
#line 5164
  d = tmp___1 + startpos;
#line 5168
  if (translate) {
#line 5169
    while (1) {
#line 5169
      if (range > lim) {
#line 5169
        tmp___2 = d;
#line 5169
        d ++;
#line 5169
        if (*(fastmap + (unsigned char )*(translate + (unsigned char )*tmp___2))) {
#line 5169
          break;
        } else {

        }
      } else {
#line 5169
        break;
      }
#line 5172
      range --;
    }
  } else {
#line 5174
    while (1) {
#line 5174
      if (range > lim) {
#line 5174
        tmp___3 = d;
#line 5174
        d ++;
#line 5174
        if (*(fastmap + (unsigned char )*tmp___3)) {
#line 5174
          break;
        } else {

        }
      } else {
#line 5174
        break;
      }
#line 5175
      range --;
    }
  }
#line 5177
  startpos += irange - range;
} else {
#line 5181
  if (size1 == 0) {
#line 5181
    tmp___4 = (int const   )*(string2 + (startpos - size1));
  } else
#line 5181
  if (startpos >= size1) {
#line 5181
    tmp___4 = (int const   )*(string2 + (startpos - size1));
  } else {
#line 5181
    tmp___4 = (int const   )*(string1 + startpos);
  }
#line 5181
  c = (char )tmp___4;
#line 5185
  if (translate) {
#line 5185
    tmp___5 = (int )*(translate + (unsigned char )c);
  } else {
#line 5185
    tmp___5 = (int )c;
  }
#line 5185
  if (*(fastmap + (unsigned char )tmp___5)) {

  } else {
#line 5186
    goto advance;
  }
}
---------
SID [3683] -> Line 5153
#line 5153
if (! bufp->can_be_null) {
#line 5155
  if (range > 0) {
#line 5158
    lim = 0;
#line 5159
    irange = range;
#line 5161
    if (startpos < size1) {
#line 5161
      if (startpos + range >= size1) {
#line 5162
        lim = range - (size1 - startpos);
      } else {

      }
    } else {

    }
#line 5164
    if (startpos >= size1) {
#line 5164
      tmp___1 = string2 - size1;
    } else {
#line 5164
      tmp___1 = string1;
    }
#line 5164
    d = tmp___1 + startpos;
#line 5168
    if (translate) {
#line 5169
      while (1) {
#line 5169
        if (range > lim) {
#line 5169
          tmp___2 = d;
#line 5169
          d ++;
#line 5169
          if (*(fastmap + (unsigned char )*(translate + (unsigned char )*tmp___2))) {
#line 5169
            break;
          } else {

          }
        } else {
#line 5169
          break;
        }
#line 5172
        range --;
      }
    } else {
#line 5174
      while (1) {
#line 5174
        if (range > lim) {
#line 5174
          tmp___3 = d;
#line 5174
          d ++;
#line 5174
          if (*(fastmap + (unsigned char )*tmp___3)) {
#line 5174
            break;
          } else {

          }
        } else {
#line 5174
          break;
        }
#line 5175
        range --;
      }
    }
#line 5177
    startpos += irange - range;
  } else {
#line 5181
    if (size1 == 0) {
#line 5181
      tmp___4 = (int const   )*(string2 + (startpos - size1));
    } else
#line 5181
    if (startpos >= size1) {
#line 5181
      tmp___4 = (int const   )*(string2 + (startpos - size1));
    } else {
#line 5181
      tmp___4 = (int const   )*(string1 + startpos);
    }
#line 5181
    c = (char )tmp___4;
#line 5185
    if (translate) {
#line 5185
      tmp___5 = (int )*(translate + (unsigned char )c);
    } else {
#line 5185
      tmp___5 = (int )c;
    }
#line 5185
    if (*(fastmap + (unsigned char )tmp___5)) {

    } else {
#line 5186
      goto advance;
    }
  }
} else {

}
---------
SID [3682] -> Line 5153
#line 5153
if (startpos < total_size) {
#line 5153
  if (! bufp->can_be_null) {
#line 5155
    if (range > 0) {
#line 5158
      lim = 0;
#line 5159
      irange = range;
#line 5161
      if (startpos < size1) {
#line 5161
        if (startpos + range >= size1) {
#line 5162
          lim = range - (size1 - startpos);
        } else {

        }
      } else {

      }
#line 5164
      if (startpos >= size1) {
#line 5164
        tmp___1 = string2 - size1;
      } else {
#line 5164
        tmp___1 = string1;
      }
#line 5164
      d = tmp___1 + startpos;
#line 5168
      if (translate) {
#line 5169
        while (1) {
#line 5169
          if (range > lim) {
#line 5169
            tmp___2 = d;
#line 5169
            d ++;
#line 5169
            if (*(fastmap + (unsigned char )*(translate + (unsigned char )*tmp___2))) {
#line 5169
              break;
            } else {

            }
          } else {
#line 5169
            break;
          }
#line 5172
          range --;
        }
      } else {
#line 5174
        while (1) {
#line 5174
          if (range > lim) {
#line 5174
            tmp___3 = d;
#line 5174
            d ++;
#line 5174
            if (*(fastmap + (unsigned char )*tmp___3)) {
#line 5174
              break;
            } else {

            }
          } else {
#line 5174
            break;
          }
#line 5175
          range --;
        }
      }
#line 5177
      startpos += irange - range;
    } else {
#line 5181
      if (size1 == 0) {
#line 5181
        tmp___4 = (int const   )*(string2 + (startpos - size1));
      } else
#line 5181
      if (startpos >= size1) {
#line 5181
        tmp___4 = (int const   )*(string2 + (startpos - size1));
      } else {
#line 5181
        tmp___4 = (int const   )*(string1 + startpos);
      }
#line 5181
      c = (char )tmp___4;
#line 5185
      if (translate) {
#line 5185
        tmp___5 = (int )*(translate + (unsigned char )c);
      } else {
#line 5185
        tmp___5 = (int )c;
      }
#line 5185
      if (*(fastmap + (unsigned char )tmp___5)) {

      } else {
#line 5186
        goto advance;
      }
    }
  } else {

  }
} else {

}
---------
SID [3681] -> Line 5153
#line 5153
if (fastmap) {
#line 5153
  if (startpos < total_size) {
#line 5153
    if (! bufp->can_be_null) {
#line 5155
      if (range > 0) {
#line 5158
        lim = 0;
#line 5159
        irange = range;
#line 5161
        if (startpos < size1) {
#line 5161
          if (startpos + range >= size1) {
#line 5162
            lim = range - (size1 - startpos);
          } else {

          }
        } else {

        }
#line 5164
        if (startpos >= size1) {
#line 5164
          tmp___1 = string2 - size1;
        } else {
#line 5164
          tmp___1 = string1;
        }
#line 5164
        d = tmp___1 + startpos;
#line 5168
        if (translate) {
#line 5169
          while (1) {
#line 5169
            if (range > lim) {
#line 5169
              tmp___2 = d;
#line 5169
              d ++;
#line 5169
              if (*(fastmap + (unsigned char )*(translate + (unsigned char )*tmp___2))) {
#line 5169
                break;
              } else {

              }
            } else {
#line 5169
              break;
            }
#line 5172
            range --;
          }
        } else {
#line 5174
          while (1) {
#line 5174
            if (range > lim) {
#line 5174
              tmp___3 = d;
#line 5174
              d ++;
#line 5174
              if (*(fastmap + (unsigned char )*tmp___3)) {
#line 5174
                break;
              } else {

              }
            } else {
#line 5174
              break;
            }
#line 5175
            range --;
          }
        }
#line 5177
        startpos += irange - range;
      } else {
#line 5181
        if (size1 == 0) {
#line 5181
          tmp___4 = (int const   )*(string2 + (startpos - size1));
        } else
#line 5181
        if (startpos >= size1) {
#line 5181
          tmp___4 = (int const   )*(string2 + (startpos - size1));
        } else {
#line 5181
          tmp___4 = (int const   )*(string1 + startpos);
        }
#line 5181
        c = (char )tmp___4;
#line 5185
        if (translate) {
#line 5185
          tmp___5 = (int )*(translate + (unsigned char )c);
        } else {
#line 5185
          tmp___5 = (int )c;
        }
#line 5185
        if (*(fastmap + (unsigned char )tmp___5)) {

        } else {
#line 5186
          goto advance;
        }
      }
    } else {

    }
  } else {

  }
} else {

}
---------
SID [3680] -> Line 5147
#line 5147
while (1) {
#line 5153
  if (fastmap) {
#line 5153
    if (startpos < total_size) {
#line 5153
      if (! bufp->can_be_null) {
#line 5155
        if (range > 0) {
#line 5158
          lim = 0;
#line 5159
          irange = range;
#line 5161
          if (startpos < size1) {
#line 5161
            if (startpos + range >= size1) {
#line 5162
              lim = range - (size1 - startpos);
            } else {

            }
          } else {

          }
#line 5164
          if (startpos >= size1) {
#line 5164
            tmp___1 = string2 - size1;
          } else {
#line 5164
            tmp___1 = string1;
          }
#line 5164
          d = tmp___1 + startpos;
#line 5168
          if (translate) {
#line 5169
            while (1) {
#line 5169
              if (range > lim) {
#line 5169
                tmp___2 = d;
#line 5169
                d ++;
#line 5169
                if (*(fastmap + (unsigned char )*(translate + (unsigned char )*tmp___2))) {
#line 5169
                  break;
                } else {

                }
              } else {
#line 5169
                break;
              }
#line 5172
              range --;
            }
          } else {
#line 5174
            while (1) {
#line 5174
              if (range > lim) {
#line 5174
                tmp___3 = d;
#line 5174
                d ++;
#line 5174
                if (*(fastmap + (unsigned char )*tmp___3)) {
#line 5174
                  break;
                } else {

                }
              } else {
#line 5174
                break;
              }
#line 5175
              range --;
            }
          }
#line 5177
          startpos += irange - range;
        } else {
#line 5181
          if (size1 == 0) {
#line 5181
            tmp___4 = (int const   )*(string2 + (startpos - size1));
          } else
#line 5181
          if (startpos >= size1) {
#line 5181
            tmp___4 = (int const   )*(string2 + (startpos - size1));
          } else {
#line 5181
            tmp___4 = (int const   )*(string1 + startpos);
          }
#line 5181
          c = (char )tmp___4;
#line 5185
          if (translate) {
#line 5185
            tmp___5 = (int )*(translate + (unsigned char )c);
          } else {
#line 5185
            tmp___5 = (int )c;
          }
#line 5185
          if (*(fastmap + (unsigned char )tmp___5)) {

          } else {
#line 5186
            goto advance;
          }
        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 5191
  if (range >= 0) {
#line 5191
    if (startpos == total_size) {
#line 5191
      if (fastmap) {
#line 5191
        if (! bufp->can_be_null) {
#line 5193
          return (-1);
        } else {

        }
      } else {

      }
    } else {

    }
  } else {

  }
#line 5195
  val = re_match_2(bufp, string1, size1, string2, size2, startpos, regs___0,
                   stop);
#line 5197
  if (val >= 0) {
#line 5198
    return (startpos);
  } else {

  }
#line 5200
  if (val == -2) {
#line 5201
    return (-2);
  } else {

  }
  advance: 
#line 5204
  if (! range) {
#line 5205
    break;
  } else
#line 5206
  if (range > 0) {
#line 5208
    range --;
#line 5209
    startpos ++;
  } else {
#line 5213
    range ++;
#line 5214
    startpos --;
  }
}
---------
SID [3679] -> Line -1

---------
SID [3678] -> Line -1

---------
SID [3677] -> Line -1

---------
SID [3676] -> Line 5144
#line 5144
return (-2);
---------
SID [3675] -> Line 5143
#line 5143
if (tmp___0 == -2) {
#line 5144
  return (-2);
} else {

}
---------
SID [3674] -> Line 5143
#line 5143
tmp___0 = re_compile_fastmap(bufp);
---------
SID [3673] -> Line 5142
#line 5142
if (! bufp->fastmap_accurate) {
#line 5143
  tmp___0 = re_compile_fastmap(bufp);
#line 5143
  if (tmp___0 == -2) {
#line 5144
    return (-2);
  } else {

  }
} else {

}
---------
SID [3672] -> Line 5142
#line 5142
if (fastmap) {
#line 5142
  if (! bufp->fastmap_accurate) {
#line 5143
    tmp___0 = re_compile_fastmap(bufp);
#line 5143
    if (tmp___0 == -2) {
#line 5144
      return (-2);
    } else {

    }
  } else {

  }
} else {

}
---------
SID [3671] -> Line -1

---------
SID [3670] -> Line -1

---------
SID [3669] -> Line -1

---------
SID [3668] -> Line 5138
#line 5138
range = 1;
---------
SID [3667] -> Line 5136
#line 5136
return (-1);
---------
SID [3666] -> Line 5135
#line 5135
if (startpos > 0) {
#line 5136
  return (-1);
} else {
#line 5138
  range = 1;
}
---------
SID [3665] -> Line 5133
#line 5133
if (range > 0) {
#line 5135
  if (startpos > 0) {
#line 5136
    return (-1);
  } else {
#line 5138
    range = 1;
  }
} else {

}
---------
SID [3664] -> Line 5133
#line 5133
if ((unsigned int )((re_opcode_t )*(bufp->buffer + 0)) == 10U) {
#line 5133
  if (range > 0) {
#line 5135
    if (startpos > 0) {
#line 5136
      return (-1);
    } else {
#line 5138
      range = 1;
    }
  } else {

  }
} else {

}
---------
SID [3663] -> Line 5133
#line 5133
if (bufp->used > 0UL) {
#line 5133
  if ((unsigned int )((re_opcode_t )*(bufp->buffer + 0)) == 10U) {
#line 5133
    if (range > 0) {
#line 5135
      if (startpos > 0) {
#line 5136
        return (-1);
      } else {
#line 5138
        range = 1;
      }
    } else {

    }
  } else {

  }
} else {

}
---------
SID [3662] -> Line -1

---------
SID [3661] -> Line 5129
#line 5129
range = total_size - startpos;
---------
SID [3660] -> Line 5128
#line 5128
if (endpos > total_size) {
#line 5129
  range = total_size - startpos;
} else {

}
---------
SID [3659] -> Line 5127
#line 5127
range = -1 - startpos;
---------
SID [3658] -> Line 5126
#line 5126
if (endpos < -1) {
#line 5127
  range = -1 - startpos;
} else
#line 5128
if (endpos > total_size) {
#line 5129
  range = total_size - startpos;
} else {

}
---------
SID [3657] -> Line -1

---------
SID [3656] -> Line 5122
#line 5122
return (-1);
---------
SID [3655] -> Line 5121
#line 5121
if (startpos > total_size) {
#line 5122
  return (-1);
} else {

}
---------
SID [3654] -> Line 5122
#line 5122
return (-1);
---------
SID [3653] -> Line 5121
#line 5121
if (startpos < 0) {
#line 5122
  return (-1);
} else
#line 5121
if (startpos > total_size) {
#line 5122
  return (-1);
} else {

}
---------
SID [3652] -> Line 5118
#line 5118
endpos = startpos + range;
---------
SID [3651] -> Line 5117
#line 5117
total_size = size1 + size2;
---------
SID [3650] -> Line 5116
#line 5116
translate = bufp->translate;
---------
SID [3649] -> Line 5115
#line 5115
fastmap = bufp->fastmap;
---------
SID [3648] -> Line 5078
#line 5078
return (tmp___0);
---------
SID [3647] -> Line 5078
#line 5078
tmp___0 = re_search_2(bufp, (char const   *)((void *)0), 0, string, size,
                      startpos, range, regs___0, size);
---------
SID [3646] -> Line 5064
#line 5064
return;
---------
SID [3645] -> Line 5062
#line 5062
regs___0->start = tmp___0;
---------
SID [3644] -> Line 5062
#line 5062
regs___0->end = tmp___0;
---------
SID [3643] -> Line 5062
#line 5062
tmp___0 = (regoff_t *)0;
---------
SID [3642] -> Line 5061
#line 5061
regs___0->num_regs = 0U;
---------
SID [3641] -> Line 5060
#line 5060
bufp->regs_allocated = 0U;
---------
SID [3640] -> Line 5056
#line 5056
regs___0->end = ends;
---------
SID [3639] -> Line 5055
#line 5055
regs___0->start = starts;
---------
SID [3638] -> Line 5054
#line 5054
regs___0->num_regs = num_regs;
---------
SID [3637] -> Line 5053
#line 5053
bufp->regs_allocated = 1U;
---------
SID [3636] -> Line 5051
#line 5051
if (num_regs) {
#line 5053
  bufp->regs_allocated = 1U;
#line 5054
  regs___0->num_regs = num_regs;
#line 5055
  regs___0->start = starts;
#line 5056
  regs___0->end = ends;
} else {
#line 5060
  bufp->regs_allocated = 0U;
#line 5061
  regs___0->num_regs = 0U;
#line 5062
  tmp___0 = (regoff_t *)0;
#line 5062
  regs___0->end = tmp___0;
#line 5062
  regs___0->start = tmp___0;
}
---------
SID [3635] -> Line 5028
#line 5028
return (0);
---------
SID [3634] -> Line 5027
#line 5027
bufp->can_be_null |= (unsigned int )path_can_be_null;
---------
SID [3633] -> Line 5022
#line 5022
p = (unsigned char const   *)pend;
---------
SID [3632] -> Line 5021
#line 5021
path_can_be_null = (boolean )0;
---------
SID [3631] -> Line 5012
default: 
#line 5012
abort();
---------
SID [3630] -> Line 5008
#line 5008
continue;
---------
SID [3629] -> Line 5007
case 6U: 
case 5U: 
#line 5007
p += 2;
---------
SID [3628] -> Line 5002
#line 5002
continue;
---------
SID [3627] -> Line 5001
case 22U: 
#line 5001
p += 4;
---------
SID [3626] -> Line 4997
#line 4997
continue;
---------
SID [3625] -> Line -1

---------
SID [3624] -> Line 4995
#line 4995
goto handle_on_failure_jump;
---------
SID [3623] -> Line 4994
#line 4994
succeed_n_p = (boolean )1;
---------
SID [3622] -> Line 4993
#line 4993
p -= 4;
---------
SID [3621] -> Line 4991
#line 4991
if (k == 0) {
#line 4993
  p -= 4;
#line 4994
  succeed_n_p = (boolean )1;
#line 4995
  goto handle_on_failure_jump;
} else {

}
---------
SID [3620] -> Line 4990
#line 4990
break;
---------
SID [3619] -> Line 4990
#line 4990
p += 2;
---------
SID [3618] -> Line 4990
#line 4990
break;
---------
SID [3617] -> Line 4990
#line 4990
k += (int )((signed char )*(p + 1)) << 8;
---------
SID [3616] -> Line 4990
#line 4990
k = (int )((int const   )*p & 255);
---------
SID [3615] -> Line 4990
#line 4990
while (1) {
#line 4990
  k = (int )((int const   )*p & 255);
#line 4990
  k += (int )((signed char )*(p + 1)) << 8;
#line 4990
  break;
}
---------
SID [3614] -> Line 4990
#line 4990
while (1) {
#line 4990
  while (1) {
#line 4990
    k = (int )((int const   )*p & 255);
#line 4990
    k += (int )((signed char )*(p + 1)) << 8;
#line 4990
    break;
  }
#line 4990
  p += 2;
#line 4990
  break;
}
---------
SID [3613] -> Line 4987
case 20U: 
#line 4987
p += 2;
---------
SID [3612] -> Line 4982
#line 4982
continue;
---------
SID [3611] -> Line -1

---------
SID [3610] -> Line 4979
#line 4979
succeed_n_p = (boolean )0;
---------
SID [3609] -> Line 4978
#line 4978
break;
---------
SID [3608] -> Line 4978
#line 4978
p += 2;
---------
SID [3607] -> Line 4978
#line 4978
break;
---------
SID [3606] -> Line 4978
#line 4978
k += (int )((signed char )*(p + 1)) << 8;
---------
SID [3605] -> Line 4978
#line 4978
k = (int )((int const   )*p & 255);
---------
SID [3604] -> Line 4978
#line 4978
while (1) {
#line 4978
  k = (int )((int const   )*p & 255);
#line 4978
  k += (int )((signed char )*(p + 1)) << 8;
#line 4978
  break;
}
---------
SID [3603] -> Line 4978
#line 4978
while (1) {
#line 4978
  while (1) {
#line 4978
    k = (int )((int const   )*p & 255);
#line 4978
    k += (int )((signed char )*(p + 1)) << 8;
#line 4978
    break;
  }
#line 4978
  p += 2;
#line 4978
  break;
}
---------
SID [3602] -> Line 4976
#line 4976
if (succeed_n_p) {
#line 4978
  while (1) {
#line 4978
    while (1) {
#line 4978
      k = (int )((int const   )*p & 255);
#line 4978
      k += (int )((signed char )*(p + 1)) << 8;
#line 4978
      break;
    }
#line 4978
    p += 2;
#line 4978
    break;
  }
#line 4979
  succeed_n_p = (boolean )0;
} else {

}
---------
SID [3601] -> Line 4974
#line 4974
bufp->can_be_null = 1U;
---------
SID [3600] -> Line 4971
#line 4971
return (-2);
---------
SID [3599] -> Line -1

---------
SID [3598] -> Line 4970
#line 4970
if (tmp___8) {

} else {
#line 4971
  return (-2);
}
---------
SID [3597] -> Line 4970
#line 4970
tmp___8 = 1;
---------
SID [3596] -> Line 4970
#line 4970
*(fail_stack.stack + tmp___7) = p + j;
---------
SID [3595] -> Line 4970
#line 4970
(fail_stack.avail) ++;
---------
SID [3594] -> Line 4970
#line 4970
tmp___7 = fail_stack.avail;
---------
SID [3593] -> Line 4970
#line 4970
tmp___8 = 0;
---------
SID [3592] -> Line 4970
#line 4970
tmp___8 = 1;
---------
SID [3591] -> Line 4970
#line 4970
*(fail_stack.stack + tmp___7) = p + j;
---------
SID [3590] -> Line 4970
#line 4970
(fail_stack.avail) ++;
---------
SID [3589] -> Line 4970
#line 4970
tmp___7 = fail_stack.avail;
---------
SID [3588] -> Line 4970
#line 4970
if (tmp___11) {
#line 4970
  tmp___7 = fail_stack.avail;
#line 4970
  (fail_stack.avail) ++;
#line 4970
  *(fail_stack.stack + tmp___7) = p + j;
#line 4970
  tmp___8 = 1;
} else {
#line 4970
  tmp___8 = 0;
}
---------
SID [3587] -> Line 4970
#line 4970
tmp___11 = tmp___10;
---------
SID [3586] -> Line 4970
#line 4970
tmp___10 = 1;
---------
SID [3585] -> Line 4970
#line 4970
fail_stack.size <<= 1;
---------
SID [3584] -> Line 4970
#line 4970
tmp___10 = 0;
---------
SID [3583] -> Line 4970
#line 4970
if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
#line 4970
  tmp___10 = 0;
} else {
#line 4970
  fail_stack.size <<= 1;
#line 4970
  tmp___10 = 1;
}
---------
SID [3582] -> Line 4970
#line 4970
fail_stack.stack = (fail_stack_elt_t *)destination;
---------
SID [3581] -> Line 4970
#line 4970
memcpy((void */* __restrict  */)destination,
       (void const   */* __restrict  */)fail_stack.stack,
       (unsigned long )fail_stack.size * sizeof(fail_stack_elt_t ));
---------
SID [3580] -> Line 4970
#line 4970
destination = (char *)tmp___9;
---------
SID [3579] -> Line 4970
#line 4970
tmp___9 = __builtin_alloca((unsigned long )(fail_stack.size << 1) * sizeof(fail_stack_elt_t ));
---------
SID [3578] -> Line 4970
#line 4970
tmp___11 = 0;
---------
SID [3577] -> Line 4970
#line 4970
if (fail_stack.size > (unsigned int )re_max_failures * ((num_regs - 1U) * 3U + 4U)) {
#line 4970
  tmp___11 = 0;
} else {
#line 4970
  tmp___9 = __builtin_alloca((unsigned long )(fail_stack.size << 1) * sizeof(fail_stack_elt_t ));
#line 4970
  destination = (char *)tmp___9;
#line 4970
  memcpy((void */* __restrict  */)destination,
         (void const   */* __restrict  */)fail_stack.stack,
         (unsigned long )fail_stack.size * sizeof(fail_stack_elt_t ));
#line 4970
  fail_stack.stack = (fail_stack_elt_t *)destination;
#line 4970
  if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
#line 4970
    tmp___10 = 0;
  } else {
#line 4970
    fail_stack.size <<= 1;
#line 4970
    tmp___10 = 1;
  }
#line 4970
  tmp___11 = tmp___10;
}
---------
SID [3576] -> Line 4970
#line 4970
if (fail_stack.avail == fail_stack.size) {
#line 4970
  if (fail_stack.size > (unsigned int )re_max_failures * ((num_regs - 1U) * 3U + 4U)) {
#line 4970
    tmp___11 = 0;
  } else {
#line 4970
    tmp___9 = __builtin_alloca((unsigned long )(fail_stack.size << 1) * sizeof(fail_stack_elt_t ));
#line 4970
    destination = (char *)tmp___9;
#line 4970
    memcpy((void */* __restrict  */)destination,
           (void const   */* __restrict  */)fail_stack.stack,
           (unsigned long )fail_stack.size * sizeof(fail_stack_elt_t ));
#line 4970
    fail_stack.stack = (fail_stack_elt_t *)destination;
#line 4970
    if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
#line 4970
      tmp___10 = 0;
    } else {
#line 4970
      fail_stack.size <<= 1;
#line 4970
      tmp___10 = 1;
    }
#line 4970
    tmp___11 = tmp___10;
  }
#line 4970
  if (tmp___11) {
#line 4970
    tmp___7 = fail_stack.avail;
#line 4970
    (fail_stack.avail) ++;
#line 4970
    *(fail_stack.stack + tmp___7) = p + j;
#line 4970
    tmp___8 = 1;
  } else {
#line 4970
    tmp___8 = 0;
  }
} else {
#line 4970
  tmp___7 = fail_stack.avail;
#line 4970
  (fail_stack.avail) ++;
#line 4970
  *(fail_stack.stack + tmp___7) = p + j;
#line 4970
  tmp___8 = 1;
}
---------
SID [3575] -> Line 4968
#line 4968
if ((unsigned long )(p + j) < (unsigned long )pend) {
#line 4970
  if (fail_stack.avail == fail_stack.size) {
#line 4970
    if (fail_stack.size > (unsigned int )re_max_failures * ((num_regs - 1U) * 3U + 4U)) {
#line 4970
      tmp___11 = 0;
    } else {
#line 4970
      tmp___9 = __builtin_alloca((unsigned long )(fail_stack.size << 1) * sizeof(fail_stack_elt_t ));
#line 4970
      destination = (char *)tmp___9;
#line 4970
      memcpy((void */* __restrict  */)destination,
             (void const   */* __restrict  */)fail_stack.stack,
             (unsigned long )fail_stack.size * sizeof(fail_stack_elt_t ));
#line 4970
      fail_stack.stack = (fail_stack_elt_t *)destination;
#line 4970
      if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
#line 4970
        tmp___10 = 0;
      } else {
#line 4970
        fail_stack.size <<= 1;
#line 4970
        tmp___10 = 1;
      }
#line 4970
      tmp___11 = tmp___10;
    }
#line 4970
    if (tmp___11) {
#line 4970
      tmp___7 = fail_stack.avail;
#line 4970
      (fail_stack.avail) ++;
#line 4970
      *(fail_stack.stack + tmp___7) = p + j;
#line 4970
      tmp___8 = 1;
    } else {
#line 4970
      tmp___8 = 0;
    }
  } else {
#line 4970
    tmp___7 = fail_stack.avail;
#line 4970
    (fail_stack.avail) ++;
#line 4970
    *(fail_stack.stack + tmp___7) = p + j;
#line 4970
    tmp___8 = 1;
  }
#line 4970
  if (tmp___8) {

  } else {
#line 4971
    return (-2);
  }
} else {
#line 4974
  bufp->can_be_null = 1U;
}
---------
SID [3574] -> Line 4959
#line 4959
break;
---------
SID [3573] -> Line 4959
#line 4959
p += 2;
---------
SID [3572] -> Line 4959
#line 4959
break;
---------
SID [3571] -> Line 4959
#line 4959
j += (int )((signed char )*(p + 1)) << 8;
---------
SID [3570] -> Line 4959
#line 4959
j = (int )((int const   )*p & 255);
---------
SID [3569] -> Line 4959
#line 4959
while (1) {
#line 4959
  j = (int )((int const   )*p & 255);
#line 4959
  j += (int )((signed char )*(p + 1)) << 8;
#line 4959
  break;
}
---------
SID [3568] -> Line 4959
handle_on_failure_jump: 
case 15U: 
case 14U: 
#line 4959
while (1) {
#line 4959
  while (1) {
#line 4959
    j = (int )((int const   )*p & 255);
#line 4959
    j += (int )((signed char )*(p + 1)) << 8;
#line 4959
    break;
  }
#line 4959
  p += 2;
#line 4959
  break;
}
---------
SID [3567] -> Line 4953
#line 4953
continue;
---------
SID [3566] -> Line -1

---------
SID [3565] -> Line -1

---------
SID [3564] -> Line 4951
#line 4951
(fail_stack.avail) --;
---------
SID [3563] -> Line 4949
#line 4949
if ((unsigned long )*(fail_stack.stack + (fail_stack.avail - 1U)) == (unsigned long )p) {
#line 4951
  (fail_stack.avail) --;
} else {

}
---------
SID [3562] -> Line 4949
#line 4949
if (! (fail_stack.avail == 0U)) {
#line 4949
  if ((unsigned long )*(fail_stack.stack + (fail_stack.avail - 1U)) == (unsigned long )p) {
#line 4951
    (fail_stack.avail) --;
  } else {

  }
} else {

}
---------
SID [3561] -> Line 4946
#line 4946
p += j;
---------
SID [3560] -> Line 4945
#line 4945
break;
---------
SID [3559] -> Line 4945
#line 4945
p += 2;
---------
SID [3558] -> Line 4945
#line 4945
break;
---------
SID [3557] -> Line 4945
#line 4945
j += (int )((signed char )*(p + 1)) << 8;
---------
SID [3556] -> Line 4945
#line 4945
j = (int )((int const   )*p & 255);
---------
SID [3555] -> Line 4945
#line 4945
while (1) {
#line 4945
  j = (int )((int const   )*p & 255);
#line 4945
  j += (int )((signed char )*(p + 1)) << 8;
#line 4945
  break;
}
---------
SID [3554] -> Line 4945
#line 4945
while (1) {
#line 4945
  while (1) {
#line 4945
    j = (int )((int const   )*p & 255);
#line 4945
    j += (int )((signed char )*(p + 1)) << 8;
#line 4945
    break;
  }
#line 4945
  p += 2;
#line 4945
  break;
}
---------
SID [3553] -> Line 4944
#line 4944
p ++;
---------
SID [3552] -> Line -1

---------
SID [3551] -> Line -1

---------
SID [3550] -> Line 4942
#line 4942
continue;
---------
SID [3549] -> Line 4940
#line 4940
if ((unsigned int )((re_opcode_t )*p) != 20U) {
#line 4942
  continue;
} else {

}
---------
SID [3548] -> Line 4940
#line 4940
if ((unsigned int )((re_opcode_t )*p) != 14U) {
#line 4940
  if ((unsigned int )((re_opcode_t )*p) != 20U) {
#line 4942
    continue;
  } else {

  }
} else {

}
---------
SID [3547] -> Line -1

---------
SID [3546] -> Line 4933
#line 4933
continue;
---------
SID [3545] -> Line 4932
#line 4932
if (j > 0) {
#line 4933
  continue;
} else {

}
---------
SID [3544] -> Line 4931
#line 4931
p += j;
---------
SID [3543] -> Line 4930
#line 4930
break;
---------
SID [3542] -> Line 4930
#line 4930
p += 2;
---------
SID [3541] -> Line 4930
#line 4930
break;
---------
SID [3540] -> Line 4930
#line 4930
j += (int )((signed char )*(p + 1)) << 8;
---------
SID [3539] -> Line 4930
#line 4930
j = (int )((int const   )*p & 255);
---------
SID [3538] -> Line 4930
#line 4930
while (1) {
#line 4930
  j = (int )((int const   )*p & 255);
#line 4930
  j += (int )((signed char )*(p + 1)) << 8;
#line 4930
  break;
}
---------
SID [3537] -> Line 4930
case 18U: 
case 13U: 
case 12U: 
case 17U: 
case 16U: 
case 21U: 
#line 4930
while (1) {
#line 4930
  while (1) {
#line 4930
    j = (int )((int const   )*p & 255);
#line 4930
    j += (int )((signed char )*(p + 1)) << 8;
#line 4930
    break;
  }
#line 4930
  p += 2;
#line 4930
  break;
}
---------
SID [3536] -> Line 4921
case 19U: 
case 26U: 
case 25U: 
case 28U: 
case 27U: 
case 11U: 
case 10U: 
case 9U: 
case 8U: 
case 0U: 
#line 4921
continue;
---------
SID [3535] -> Line 4880
#line 4880
break;
---------
SID [3534] -> Line -1

---------
SID [3533] -> Line 4877
#line 4877
return (0);
---------
SID [3532] -> Line 4876
#line 4876
if (bufp->can_be_null) {
#line 4877
  return (0);
} else {

}
---------
SID [3531] -> Line 4872
#line 4872
*(fastmap + '\n') = (char)0;
---------
SID [3530] -> Line 4871
#line 4871
if (! (bufp->syntax & (unsigned int )((((((1 << 1) << 1) << 1) << 1) << 1) << 1))) {
#line 4872
  *(fastmap + '\n') = (char)0;
} else
#line 4876
if (bufp->can_be_null) {
#line 4877
  return (0);
} else {

}
---------
SID [3529] -> Line 4867
#line 4867
j ++;
---------
SID [3528] -> Line 4868
#line 4868
*(fastmap + j) = (char)1;
---------
SID [3527] -> Line 4867
#line 4867
break;
---------
SID [3526] -> Line -1

---------
SID [3525] -> Line 4867
#line 4867
if (j < 1 << 8) {

} else {
#line 4867
  break;
}
---------
SID [3524] -> Line 4867
#line 4867
while (j < 1 << 8) {
#line 4868
  *(fastmap + j) = (char)1;
#line 4867
  j ++;
}
---------
SID [3523] -> Line 4867
case 2U: 
#line 4867
j = 0;
---------
SID [3522] -> Line 4862
#line 4862
break;
---------
SID [3521] -> Line 4859
#line 4859
j ++;
---------
SID [3520] -> Line -1

---------
SID [3519] -> Line 4861
#line 4861
*(fastmap + j) = (char)1;
---------
SID [3518] -> Line 4860
#line 4860
if ((int )re_syntax_table[j] != 1) {
#line 4861
  *(fastmap + j) = (char)1;
} else {

}
---------
SID [3517] -> Line 4859
#line 4859
break;
---------
SID [3516] -> Line -1

---------
SID [3515] -> Line 4859
#line 4859
if (j < 1 << 8) {

} else {
#line 4859
  break;
}
---------
SID [3514] -> Line 4859
#line 4859
while (j < 1 << 8) {
#line 4860
  if ((int )re_syntax_table[j] != 1) {
#line 4861
    *(fastmap + j) = (char)1;
  } else {

  }
#line 4859
  j ++;
}
---------
SID [3513] -> Line 4859
case 24U: 
#line 4859
j = 0;
---------
SID [3512] -> Line 4855
#line 4855
break;
---------
SID [3511] -> Line 4852
#line 4852
j ++;
---------
SID [3510] -> Line -1

---------
SID [3509] -> Line 4854
#line 4854
*(fastmap + j) = (char)1;
---------
SID [3508] -> Line 4853
#line 4853
if ((int )re_syntax_table[j] == 1) {
#line 4854
  *(fastmap + j) = (char)1;
} else {

}
---------
SID [3507] -> Line 4852
#line 4852
break;
---------
SID [3506] -> Line -1

---------
SID [3505] -> Line 4852
#line 4852
if (j < 1 << 8) {

} else {
#line 4852
  break;
}
---------
SID [3504] -> Line 4852
#line 4852
while (j < 1 << 8) {
#line 4853
  if ((int )re_syntax_table[j] == 1) {
#line 4854
    *(fastmap + j) = (char)1;
  } else {

  }
#line 4852
  j ++;
}
---------
SID [3503] -> Line 4852
case 23U: 
#line 4852
j = 0;
---------
SID [3502] -> Line 4848
#line 4848
break;
---------
SID [3501] -> Line 4845
#line 4845
j --;
---------
SID [3500] -> Line -1

---------
SID [3499] -> Line 4847
#line 4847
*(fastmap + j) = (char)1;
---------
SID [3498] -> Line 4846
#line 4846
if (! ((int const   )*(p + j / 8) & (int const   )(1 << j % 8))) {
#line 4847
  *(fastmap + j) = (char)1;
} else {

}
---------
SID [3497] -> Line 4845
#line 4845
break;
---------
SID [3496] -> Line -1

---------
SID [3495] -> Line 4845
#line 4845
if (j >= 0) {

} else {
#line 4845
  break;
}
---------
SID [3494] -> Line 4845
#line 4845
while (j >= 0) {
#line 4846
  if (! ((int const   )*(p + j / 8) & (int const   )(1 << j % 8))) {
#line 4847
    *(fastmap + j) = (char)1;
  } else {

  }
#line 4845
  j --;
}
---------
SID [3493] -> Line 4845
#line 4845
j = (int )((int const   )*tmp___3 * 8 - 1);
---------
SID [3492] -> Line 4845
#line 4845
p ++;
---------
SID [3491] -> Line 4845
#line 4845
tmp___3 = p;
---------
SID [3490] -> Line 4842
#line 4842
j ++;
---------
SID [3489] -> Line 4843
#line 4843
*(fastmap + j) = (char)1;
---------
SID [3488] -> Line 4842
#line 4842
break;
---------
SID [3487] -> Line -1

---------
SID [3486] -> Line 4842
#line 4842
if (j < 1 << 8) {

} else {
#line 4842
  break;
}
---------
SID [3485] -> Line 4842
#line 4842
while (j < 1 << 8) {
#line 4843
  *(fastmap + j) = (char)1;
#line 4842
  j ++;
}
---------
SID [3484] -> Line 4842
case 4U: 
#line 4842
j = (int )((int const   )*p * 8);
---------
SID [3483] -> Line 4837
#line 4837
break;
---------
SID [3482] -> Line 4834
#line 4834
j --;
---------
SID [3481] -> Line -1

---------
SID [3480] -> Line 4836
#line 4836
*(fastmap + j) = (char)1;
---------
SID [3479] -> Line 4835
#line 4835
if ((int const   )*(p + j / 8) & (int const   )(1 << j % 8)) {
#line 4836
  *(fastmap + j) = (char)1;
} else {

}
---------
SID [3478] -> Line 4834
#line 4834
break;
---------
SID [3477] -> Line -1

---------
SID [3476] -> Line 4834
#line 4834
if (j >= 0) {

} else {
#line 4834
  break;
}
---------
SID [3475] -> Line 4834
#line 4834
while (j >= 0) {
#line 4835
  if ((int const   )*(p + j / 8) & (int const   )(1 << j % 8)) {
#line 4836
    *(fastmap + j) = (char)1;
  } else {

  }
#line 4834
  j --;
}
---------
SID [3474] -> Line 4834
#line 4834
j = (int )((int const   )*tmp___2 * 8 - 1);
---------
SID [3473] -> Line 4834
#line 4834
p ++;
---------
SID [3472] -> Line 4834
case 3U: 
#line 4834
tmp___2 = p;
---------
SID [3471] -> Line 4830
#line 4830
break;
---------
SID [3470] -> Line 4829
case 1U: 
#line 4829
*(fastmap + *(p + 1)) = (char)1;
---------
SID [3469] -> Line 4822
#line 4822
return (0);
---------
SID [3468] -> Line 4821
case 7U: 
#line 4821
bufp->can_be_null = 1U;
---------
SID [3467] -> Line 4811
#line 4811
switch ((unsigned int )((re_opcode_t )*tmp___1)) {
case 7U: 
#line 4821
bufp->can_be_null = 1U;
#line 4822
return (0);
case 1U: 
#line 4829
*(fastmap + *(p + 1)) = (char)1;
#line 4830
break;
case 3U: 
#line 4834
tmp___2 = p;
#line 4834
p ++;
#line 4834
j = (int )((int const   )*tmp___2 * 8 - 1);
#line 4834
while (j >= 0) {
#line 4835
  if ((int const   )*(p + j / 8) & (int const   )(1 << j % 8)) {
#line 4836
    *(fastmap + j) = (char)1;
  } else {

  }
#line 4834
  j --;
}
#line 4837
break;
case 4U: 
#line 4842
j = (int )((int const   )*p * 8);
#line 4842
while (j < 1 << 8) {
#line 4843
  *(fastmap + j) = (char)1;
#line 4842
  j ++;
}
#line 4845
tmp___3 = p;
#line 4845
p ++;
#line 4845
j = (int )((int const   )*tmp___3 * 8 - 1);
#line 4845
while (j >= 0) {
#line 4846
  if (! ((int const   )*(p + j / 8) & (int const   )(1 << j % 8))) {
#line 4847
    *(fastmap + j) = (char)1;
  } else {

  }
#line 4845
  j --;
}
#line 4848
break;
case 23U: 
#line 4852
j = 0;
#line 4852
while (j < 1 << 8) {
#line 4853
  if ((int )re_syntax_table[j] == 1) {
#line 4854
    *(fastmap + j) = (char)1;
  } else {

  }
#line 4852
  j ++;
}
#line 4855
break;
case 24U: 
#line 4859
j = 0;
#line 4859
while (j < 1 << 8) {
#line 4860
  if ((int )re_syntax_table[j] != 1) {
#line 4861
    *(fastmap + j) = (char)1;
  } else {

  }
#line 4859
  j ++;
}
#line 4862
break;
case 2U: 
#line 4867
j = 0;
#line 4867
while (j < 1 << 8) {
#line 4868
  *(fastmap + j) = (char)1;
#line 4867
  j ++;
}
#line 4871
if (! (bufp->syntax & (unsigned int )((((((1 << 1) << 1) << 1) << 1) << 1) << 1))) {
#line 4872
  *(fastmap + '\n') = (char)0;
} else
#line 4876
if (bufp->can_be_null) {
#line 4877
  return (0);
} else {

}
#line 4880
break;
case 19U: 
case 26U: 
case 25U: 
case 28U: 
case 27U: 
case 11U: 
case 10U: 
case 9U: 
case 8U: 
case 0U: 
#line 4921
continue;
case 18U: 
case 13U: 
case 12U: 
case 17U: 
case 16U: 
case 21U: 
#line 4930
while (1) {
#line 4930
  while (1) {
#line 4930
    j = (int )((int const   )*p & 255);
#line 4930
    j += (int )((signed char )*(p + 1)) << 8;
#line 4930
    break;
  }
#line 4930
  p += 2;
#line 4930
  break;
}
#line 4931
p += j;
#line 4932
if (j > 0) {
#line 4933
  continue;
} else {

}
#line 4940
if ((unsigned int )((re_opcode_t )*p) != 14U) {
#line 4940
  if ((unsigned int )((re_opcode_t )*p) != 20U) {
#line 4942
    continue;
  } else {

  }
} else {

}
#line 4944
p ++;
#line 4945
while (1) {
#line 4945
  while (1) {
#line 4945
    j = (int )((int const   )*p & 255);
#line 4945
    j += (int )((signed char )*(p + 1)) << 8;
#line 4945
    break;
  }
#line 4945
  p += 2;
#line 4945
  break;
}
#line 4946
p += j;
#line 4949
if (! (fail_stack.avail == 0U)) {
#line 4949
  if ((unsigned long )*(fail_stack.stack + (fail_stack.avail - 1U)) == (unsigned long )p) {
#line 4951
    (fail_stack.avail) --;
  } else {

  }
} else {

}
#line 4953
continue;
handle_on_failure_jump: 
case 15U: 
case 14U: 
#line 4959
while (1) {
#line 4959
  while (1) {
#line 4959
    j = (int )((int const   )*p & 255);
#line 4959
    j += (int )((signed char )*(p + 1)) << 8;
#line 4959
    break;
  }
#line 4959
  p += 2;
#line 4959
  break;
}
#line 4968
if ((unsigned long )(p + j) < (unsigned long )pend) {
#line 4970
  if (fail_stack.avail == fail_stack.size) {
#line 4970
    if (fail_stack.size > (unsigned int )re_max_failures * ((num_regs - 1U) * 3U + 4U)) {
#line 4970
      tmp___11 = 0;
    } else {
#line 4970
      tmp___9 = __builtin_alloca((unsigned long )(fail_stack.size << 1) * sizeof(fail_stack_elt_t ));
#line 4970
      destination = (char *)tmp___9;
#line 4970
      memcpy((void */* __restrict  */)destination,
             (void const   */* __restrict  */)fail_stack.stack,
             (unsigned long )fail_stack.size * sizeof(fail_stack_elt_t ));
#line 4970
      fail_stack.stack = (fail_stack_elt_t *)destination;
#line 4970
      if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
#line 4970
        tmp___10 = 0;
      } else {
#line 4970
        fail_stack.size <<= 1;
#line 4970
        tmp___10 = 1;
      }
#line 4970
      tmp___11 = tmp___10;
    }
#line 4970
    if (tmp___11) {
#line 4970
      tmp___7 = fail_stack.avail;
#line 4970
      (fail_stack.avail) ++;
#line 4970
      *(fail_stack.stack + tmp___7) = p + j;
#line 4970
      tmp___8 = 1;
    } else {
#line 4970
      tmp___8 = 0;
    }
  } else {
#line 4970
    tmp___7 = fail_stack.avail;
#line 4970
    (fail_stack.avail) ++;
#line 4970
    *(fail_stack.stack + tmp___7) = p + j;
#line 4970
    tmp___8 = 1;
  }
#line 4970
  if (tmp___8) {

  } else {
#line 4971
    return (-2);
  }
} else {
#line 4974
  bufp->can_be_null = 1U;
}
#line 4976
if (succeed_n_p) {
#line 4978
  while (1) {
#line 4978
    while (1) {
#line 4978
      k = (int )((int const   )*p & 255);
#line 4978
      k += (int )((signed char )*(p + 1)) << 8;
#line 4978
      break;
    }
#line 4978
    p += 2;
#line 4978
    break;
  }
#line 4979
  succeed_n_p = (boolean )0;
} else {

}
#line 4982
continue;
case 20U: 
#line 4987
p += 2;
#line 4990
while (1) {
#line 4990
  while (1) {
#line 4990
    k = (int )((int const   )*p & 255);
#line 4990
    k += (int )((signed char )*(p + 1)) << 8;
#line 4990
    break;
  }
#line 4990
  p += 2;
#line 4990
  break;
}
#line 4991
if (k == 0) {
#line 4993
  p -= 4;
#line 4994
  succeed_n_p = (boolean )1;
#line 4995
  goto handle_on_failure_jump;
} else {

}
#line 4997
continue;
case 22U: 
#line 5001
p += 4;
#line 5002
continue;
case 6U: 
case 5U: 
#line 5007
p += 2;
#line 5008
continue;
default: 
#line 5012
abort();
}
---------
SID [3466] -> Line 4811
#line 4811
p ++;
---------
SID [3465] -> Line 4811
#line 4811
tmp___1 = p;
---------
SID [3464] -> Line -1

---------
SID [3463] -> Line 4802
#line 4802
p = *(fail_stack.stack + fail_stack.avail);
---------
SID [3462] -> Line 4802
#line 4802
(fail_stack.avail) --;
---------
SID [3461] -> Line 4800
#line 4800
path_can_be_null = (boolean )1;
---------
SID [3460] -> Line 4797
#line 4797
bufp->can_be_null |= (unsigned int )path_can_be_null;
---------
SID [3459] -> Line 4795
#line 4795
if ((unsigned long )p == (unsigned long )pend) {
#line 4797
  bufp->can_be_null |= (unsigned int )path_can_be_null;
#line 4800
  path_can_be_null = (boolean )1;
#line 4802
  (fail_stack.avail) --;
#line 4802
  p = *(fail_stack.stack + fail_stack.avail);
} else {

}
---------
SID [3458] -> Line 4793
#line 4793
break;
---------
SID [3457] -> Line -1

---------
SID [3456] -> Line 4793
#line 4793
if (! (fail_stack.avail == 0U)) {

} else {
#line 4793
  break;
}
---------
SID [3455] -> Line -1

---------
SID [3454] -> Line 4793
#line 4793
if ((unsigned long )p != (unsigned long )pend) {

} else
#line 4793
if (! (fail_stack.avail == 0U)) {

} else {
#line 4793
  break;
}
---------
SID [3453] -> Line 4793
#line 4793
while (1) {
#line 4793
  if ((unsigned long )p != (unsigned long )pend) {

  } else
#line 4793
  if (! (fail_stack.avail == 0U)) {

  } else {
#line 4793
    break;
  }
#line 4795
  if ((unsigned long )p == (unsigned long )pend) {
#line 4797
    bufp->can_be_null |= (unsigned int )path_can_be_null;
#line 4800
    path_can_be_null = (boolean )1;
#line 4802
    (fail_stack.avail) --;
#line 4802
    p = *(fail_stack.stack + fail_stack.avail);
  } else {

  }
#line 4811
  tmp___1 = p;
#line 4811
  p ++;
#line 4811
  switch ((unsigned int )((re_opcode_t )*tmp___1)) {
  case 7U: 
#line 4821
  bufp->can_be_null = 1U;
#line 4822
  return (0);
  case 1U: 
#line 4829
  *(fastmap + *(p + 1)) = (char)1;
#line 4830
  break;
  case 3U: 
#line 4834
  tmp___2 = p;
#line 4834
  p ++;
#line 4834
  j = (int )((int const   )*tmp___2 * 8 - 1);
#line 4834
  while (j >= 0) {
#line 4835
    if ((int const   )*(p + j / 8) & (int const   )(1 << j % 8)) {
#line 4836
      *(fastmap + j) = (char)1;
    } else {

    }
#line 4834
    j --;
  }
#line 4837
  break;
  case 4U: 
#line 4842
  j = (int )((int const   )*p * 8);
#line 4842
  while (j < 1 << 8) {
#line 4843
    *(fastmap + j) = (char)1;
#line 4842
    j ++;
  }
#line 4845
  tmp___3 = p;
#line 4845
  p ++;
#line 4845
  j = (int )((int const   )*tmp___3 * 8 - 1);
#line 4845
  while (j >= 0) {
#line 4846
    if (! ((int const   )*(p + j / 8) & (int const   )(1 << j % 8))) {
#line 4847
      *(fastmap + j) = (char)1;
    } else {

    }
#line 4845
    j --;
  }
#line 4848
  break;
  case 23U: 
#line 4852
  j = 0;
#line 4852
  while (j < 1 << 8) {
#line 4853
    if ((int )re_syntax_table[j] == 1) {
#line 4854
      *(fastmap + j) = (char)1;
    } else {

    }
#line 4852
    j ++;
  }
#line 4855
  break;
  case 24U: 
#line 4859
  j = 0;
#line 4859
  while (j < 1 << 8) {
#line 4860
    if ((int )re_syntax_table[j] != 1) {
#line 4861
      *(fastmap + j) = (char)1;
    } else {

    }
#line 4859
    j ++;
  }
#line 4862
  break;
  case 2U: 
#line 4867
  j = 0;
#line 4867
  while (j < 1 << 8) {
#line 4868
    *(fastmap + j) = (char)1;
#line 4867
    j ++;
  }
#line 4871
  if (! (bufp->syntax & (unsigned int )((((((1 << 1) << 1) << 1) << 1) << 1) << 1))) {
#line 4872
    *(fastmap + '\n') = (char)0;
  } else
#line 4876
  if (bufp->can_be_null) {
#line 4877
    return (0);
  } else {

  }
#line 4880
  break;
  case 19U: 
  case 26U: 
  case 25U: 
  case 28U: 
  case 27U: 
  case 11U: 
  case 10U: 
  case 9U: 
  case 8U: 
  case 0U: 
#line 4921
  continue;
  case 18U: 
  case 13U: 
  case 12U: 
  case 17U: 
  case 16U: 
  case 21U: 
#line 4930
  while (1) {
#line 4930
    while (1) {
#line 4930
      j = (int )((int const   )*p & 255);
#line 4930
      j += (int )((signed char )*(p + 1)) << 8;
#line 4930
      break;
    }
#line 4930
    p += 2;
#line 4930
    break;
  }
#line 4931
  p += j;
#line 4932
  if (j > 0) {
#line 4933
    continue;
  } else {

  }
#line 4940
  if ((unsigned int )((re_opcode_t )*p) != 14U) {
#line 4940
    if ((unsigned int )((re_opcode_t )*p) != 20U) {
#line 4942
      continue;
    } else {

    }
  } else {

  }
#line 4944
  p ++;
#line 4945
  while (1) {
#line 4945
    while (1) {
#line 4945
      j = (int )((int const   )*p & 255);
#line 4945
      j += (int )((signed char )*(p + 1)) << 8;
#line 4945
      break;
    }
#line 4945
    p += 2;
#line 4945
    break;
  }
#line 4946
  p += j;
#line 4949
  if (! (fail_stack.avail == 0U)) {
#line 4949
    if ((unsigned long )*(fail_stack.stack + (fail_stack.avail - 1U)) == (unsigned long )p) {
#line 4951
      (fail_stack.avail) --;
    } else {

    }
  } else {

  }
#line 4953
  continue;
  handle_on_failure_jump: 
  case 15U: 
  case 14U: 
#line 4959
  while (1) {
#line 4959
    while (1) {
#line 4959
      j = (int )((int const   )*p & 255);
#line 4959
      j += (int )((signed char )*(p + 1)) << 8;
#line 4959
      break;
    }
#line 4959
    p += 2;
#line 4959
    break;
  }
#line 4968
  if ((unsigned long )(p + j) < (unsigned long )pend) {
#line 4970
    if (fail_stack.avail == fail_stack.size) {
#line 4970
      if (fail_stack.size > (unsigned int )re_max_failures * ((num_regs - 1U) * 3U + 4U)) {
#line 4970
        tmp___11 = 0;
      } else {
#line 4970
        tmp___9 = __builtin_alloca((unsigned long )(fail_stack.size << 1) * sizeof(fail_stack_elt_t ));
#line 4970
        destination = (char *)tmp___9;
#line 4970
        memcpy((void */* __restrict  */)destination,
               (void const   */* __restrict  */)fail_stack.stack,
               (unsigned long )fail_stack.size * sizeof(fail_stack_elt_t ));
#line 4970
        fail_stack.stack = (fail_stack_elt_t *)destination;
#line 4970
        if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
#line 4970
          tmp___10 = 0;
        } else {
#line 4970
          fail_stack.size <<= 1;
#line 4970
          tmp___10 = 1;
        }
#line 4970
        tmp___11 = tmp___10;
      }
#line 4970
      if (tmp___11) {
#line 4970
        tmp___7 = fail_stack.avail;
#line 4970
        (fail_stack.avail) ++;
#line 4970
        *(fail_stack.stack + tmp___7) = p + j;
#line 4970
        tmp___8 = 1;
      } else {
#line 4970
        tmp___8 = 0;
      }
    } else {
#line 4970
      tmp___7 = fail_stack.avail;
#line 4970
      (fail_stack.avail) ++;
#line 4970
      *(fail_stack.stack + tmp___7) = p + j;
#line 4970
      tmp___8 = 1;
    }
#line 4970
    if (tmp___8) {

    } else {
#line 4971
      return (-2);
    }
  } else {
#line 4974
    bufp->can_be_null = 1U;
  }
#line 4976
  if (succeed_n_p) {
#line 4978
    while (1) {
#line 4978
      while (1) {
#line 4978
        k = (int )((int const   )*p & 255);
#line 4978
        k += (int )((signed char )*(p + 1)) << 8;
#line 4978
        break;
      }
#line 4978
      p += 2;
#line 4978
      break;
    }
#line 4979
    succeed_n_p = (boolean )0;
  } else {

  }
#line 4982
  continue;
  case 20U: 
#line 4987
  p += 2;
#line 4990
  while (1) {
#line 4990
    while (1) {
#line 4990
      k = (int )((int const   )*p & 255);
#line 4990
      k += (int )((signed char )*(p + 1)) << 8;
#line 4990
      break;
    }
#line 4990
    p += 2;
#line 4990
    break;
  }
#line 4991
  if (k == 0) {
#line 4993
    p -= 4;
#line 4994
    succeed_n_p = (boolean )1;
#line 4995
    goto handle_on_failure_jump;
  } else {

  }
#line 4997
  continue;
  case 22U: 
#line 5001
  p += 4;
#line 5002
  continue;
  case 6U: 
  case 5U: 
#line 5007
  p += 2;
#line 5008
  continue;
  default: 
#line 5012
  abort();
  }
#line 5021
  path_can_be_null = (boolean )0;
#line 5022
  p = (unsigned char const   *)pend;
}
---------
SID [3452] -> Line 4791
#line 4791
bufp->can_be_null = 0U;
---------
SID [3451] -> Line 4790
#line 4790
bufp->fastmap_accurate = 1U;
---------
SID [3450] -> Line 4789
#line 4789
memset((void *)fastmap, 0, (size_t )(1 << 8));
---------
SID [3449] -> Line 4788
#line 4788
break;
---------
SID [3448] -> Line 4788
#line 4788
fail_stack.avail = 0U;
---------
SID [3447] -> Line 4788
#line 4788
fail_stack.size = 5U;
---------
SID [3446] -> Line -1

---------
SID [3445] -> Line 4788
#line 4788
return (-2);
---------
SID [3444] -> Line 4788
#line 4788
if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
#line 4788
  return (-2);
} else {

}
---------
SID [3443] -> Line 4788
#line 4788
fail_stack.stack = (fail_stack_elt_t *)tmp___0;
---------
SID [3442] -> Line 4788
#line 4788
tmp___0 = __builtin_alloca(5UL * sizeof(fail_stack_elt_t ));
---------
SID [3441] -> Line 4788
#line 4788
while (1) {
#line 4788
  tmp___0 = __builtin_alloca(5UL * sizeof(fail_stack_elt_t ));
#line 4788
  fail_stack.stack = (fail_stack_elt_t *)tmp___0;
#line 4788
  if ((unsigned long )fail_stack.stack == (unsigned long )((void *)0)) {
#line 4788
    return (-2);
  } else {

  }
#line 4788
  fail_stack.size = 5U;
#line 4788
  fail_stack.avail = 0U;
#line 4788
  break;
}
---------
SID [3440] -> Line 4784
#line 4784
succeed_n_p = (boolean )0;
---------
SID [3439] -> Line 4781
#line 4781
path_can_be_null = (boolean )1;
---------
SID [3438] -> Line 4775
#line 4775
pend = pattern + size;
---------
SID [3437] -> Line 4774
#line 4774
p = (unsigned char const   *)pattern;
---------
SID [3436] -> Line 4773
#line 4773
size = bufp->used;
---------
SID [3435] -> Line 4772
#line 4772
pattern = bufp->buffer;
---------
SID [3434] -> Line 4771
#line 4771
fastmap = bufp->fastmap;
---------
SID [3433] -> Line 4769
#line 4769
num_regs = 0U;
---------
SID [3432] -> Line 4469
#line 4469
return ((reg_errcode_t )0);
---------
SID [3431] -> Line 4464
#line 4464
this_char ++;
---------
SID [3430] -> Line 4466
#line 4466
*(b + (int )((unsigned char )tmp___1) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )tmp___1) / 8) | (1 << (int )((unsigned char )tmp___2) % 8));
---------
SID [3429] -> Line 4466
#line 4466
tmp___2 = this_char;
---------
SID [3428] -> Line 4466
#line 4466
tmp___2 = (unsigned int )*(translate + (unsigned char )this_char);
---------
SID [3427] -> Line 4466
#line 4466
if (translate) {
#line 4466
  tmp___2 = (unsigned int )*(translate + (unsigned char )this_char);
} else {
#line 4466
  tmp___2 = this_char;
}
---------
SID [3426] -> Line 4466
#line 4466
tmp___1 = this_char;
---------
SID [3425] -> Line 4466
#line 4466
tmp___1 = (unsigned int )*(translate + (unsigned char )this_char);
---------
SID [3424] -> Line 4466
#line 4466
if (translate) {
#line 4466
  tmp___1 = (unsigned int )*(translate + (unsigned char )this_char);
} else {
#line 4466
  tmp___1 = this_char;
}
---------
SID [3423] -> Line 4464
#line 4464
break;
---------
SID [3422] -> Line -1

---------
SID [3421] -> Line 4464
#line 4464
if (this_char <= (unsigned int )range_end) {

} else {
#line 4464
  break;
}
---------
SID [3420] -> Line 4464
#line 4464
while (this_char <= (unsigned int )range_end) {
#line 4466
  if (translate) {
#line 4466
    tmp___1 = (unsigned int )*(translate + (unsigned char )this_char);
  } else {
#line 4466
    tmp___1 = this_char;
  }
#line 4466
  if (translate) {
#line 4466
    tmp___2 = (unsigned int )*(translate + (unsigned char )this_char);
  } else {
#line 4466
    tmp___2 = this_char;
  }
#line 4466
  *(b + (int )((unsigned char )tmp___1) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )tmp___1) / 8) | (1 << (int )((unsigned char )tmp___2) % 8));
#line 4464
  this_char ++;
}
---------
SID [3419] -> Line 4464
#line 4464
this_char = (unsigned int )range_start;
---------
SID [3418] -> Line -1

---------
SID [3417] -> Line 4458
#line 4458
return ((reg_errcode_t )tmp___0);
---------
SID [3416] -> Line 4458
#line 4458
tmp___0 = 0;
---------
SID [3415] -> Line 4458
#line 4458
tmp___0 = 11;
---------
SID [3414] -> Line 4458
#line 4458
if (syntax & (unsigned int )((((((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 4458
  tmp___0 = 11;
} else {
#line 4458
  tmp___0 = 0;
}
---------
SID [3413] -> Line 4457
#line 4457
if (range_start > range_end) {
#line 4458
  if (syntax & (unsigned int )((((((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 4458
    tmp___0 = 11;
  } else {
#line 4458
    tmp___0 = 0;
  }
#line 4458
  return ((reg_errcode_t )tmp___0);
} else {

}
---------
SID [3412] -> Line 4454
#line 4454
(*p_ptr) ++;
---------
SID [3411] -> Line 4450
#line 4450
range_end = (int )*((unsigned char *)p + 0);
---------
SID [3410] -> Line 4449
#line 4449
range_start = (int )*((unsigned char *)p + -2);
---------
SID [3409] -> Line -1

---------
SID [3408] -> Line 4440
#line 4440
return ((reg_errcode_t )11);
---------
SID [3407] -> Line 4439
#line 4439
if ((unsigned long )p == (unsigned long )pend) {
#line 4440
  return ((reg_errcode_t )11);
} else {

}
---------
SID [3406] -> Line 4436
#line 4436
p = *p_ptr;
---------
SID [3405] -> Line 4412
#line 4412
return ((boolean )0);
---------
SID [3404] -> Line 4406
#line 4406
this_element --;
---------
SID [3403] -> Line -1

---------
SID [3402] -> Line 4410
#line 4410
return ((boolean )1);
---------
SID [3401] -> Line 4409
#line 4409
if ((compile_stack.stack + this_element)->regnum == regnum) {
#line 4410
  return ((boolean )1);
} else {

}
---------
SID [3400] -> Line 4406
#line 4406
break;
---------
SID [3399] -> Line -1

---------
SID [3398] -> Line 4406
#line 4406
if (this_element >= 0) {

} else {
#line 4406
  break;
}
---------
SID [3397] -> Line 4406
#line 4406
while (this_element >= 0) {
#line 4409
  if ((compile_stack.stack + this_element)->regnum == regnum) {
#line 4410
    return ((boolean )1);
  } else {

  }
#line 4406
  this_element --;
}
---------
SID [3396] -> Line 4406
#line 4406
this_element = (int )(compile_stack.avail - 1U);
---------
SID [3395] -> Line 4386
#line 4386
return ((boolean )tmp___5);
---------
SID [3394] -> Line 4386
#line 4386
tmp___5 = 0;
---------
SID [3393] -> Line 4386
#line 4386
tmp___5 = 1;
---------
SID [3392] -> Line 4386
#line 4386
if (tmp___4) {
#line 4386
  tmp___5 = 1;
} else {
#line 4386
  tmp___5 = 0;
}
---------
SID [3391] -> Line 4386
#line 4386
tmp___4 = tmp___3;
---------
SID [3390] -> Line 4386
#line 4386
tmp___3 = 0;
---------
SID [3389] -> Line 4386
#line 4386
tmp___3 = 0;
---------
SID [3388] -> Line 4386
#line 4386
tmp___3 = 0;
---------
SID [3387] -> Line 4386
#line 4386
tmp___3 = 1;
---------
SID [3386] -> Line 4386
#line 4386
if ((int const   )*next_next == 124) {
#line 4386
  tmp___3 = 1;
} else {
#line 4386
  tmp___3 = 0;
}
---------
SID [3385] -> Line 4386
#line 4386
if (next_next) {
#line 4386
  if ((int const   )*next_next == 124) {
#line 4386
    tmp___3 = 1;
  } else {
#line 4386
    tmp___3 = 0;
  }
} else {
#line 4386
  tmp___3 = 0;
}
---------
SID [3384] -> Line 4386
#line 4386
if (next_backslash) {
#line 4386
  if (next_next) {
#line 4386
    if ((int const   )*next_next == 124) {
#line 4386
      tmp___3 = 1;
    } else {
#line 4386
      tmp___3 = 0;
    }
  } else {
#line 4386
    tmp___3 = 0;
  }
} else {
#line 4386
  tmp___3 = 0;
}
---------
SID [3383] -> Line 4386
#line 4386
tmp___4 = (int const   )*next == 124;
---------
SID [3382] -> Line 4386
#line 4386
if (syntax & (((((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 4386
  tmp___4 = (int const   )*next == 124;
} else {
#line 4386
  if (next_backslash) {
#line 4386
    if (next_next) {
#line 4386
      if ((int const   )*next_next == 124) {
#line 4386
        tmp___3 = 1;
      } else {
#line 4386
        tmp___3 = 0;
      }
    } else {
#line 4386
      tmp___3 = 0;
    }
  } else {
#line 4386
    tmp___3 = 0;
  }
#line 4386
  tmp___4 = tmp___3;
}
---------
SID [3381] -> Line 4386
#line 4386
tmp___5 = 1;
---------
SID [3380] -> Line 4386
#line 4386
if (tmp___2) {
#line 4386
  tmp___5 = 1;
} else {
#line 4386
  if (syntax & (((((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 4386
    tmp___4 = (int const   )*next == 124;
  } else {
#line 4386
    if (next_backslash) {
#line 4386
      if (next_next) {
#line 4386
        if ((int const   )*next_next == 124) {
#line 4386
          tmp___3 = 1;
        } else {
#line 4386
          tmp___3 = 0;
        }
      } else {
#line 4386
        tmp___3 = 0;
      }
    } else {
#line 4386
      tmp___3 = 0;
    }
#line 4386
    tmp___4 = tmp___3;
  }
#line 4386
  if (tmp___4) {
#line 4386
    tmp___5 = 1;
  } else {
#line 4386
    tmp___5 = 0;
  }
}
---------
SID [3379] -> Line 4386
#line 4386
tmp___2 = tmp___1;
---------
SID [3378] -> Line 4386
#line 4386
tmp___1 = 0;
---------
SID [3377] -> Line 4386
#line 4386
tmp___1 = 0;
---------
SID [3376] -> Line 4386
#line 4386
tmp___1 = 0;
---------
SID [3375] -> Line 4386
#line 4386
tmp___1 = 1;
---------
SID [3374] -> Line 4386
#line 4386
if ((int const   )*next_next == 41) {
#line 4386
  tmp___1 = 1;
} else {
#line 4386
  tmp___1 = 0;
}
---------
SID [3373] -> Line 4386
#line 4386
if (next_next) {
#line 4386
  if ((int const   )*next_next == 41) {
#line 4386
    tmp___1 = 1;
  } else {
#line 4386
    tmp___1 = 0;
  }
} else {
#line 4386
  tmp___1 = 0;
}
---------
SID [3372] -> Line 4386
#line 4386
if (next_backslash) {
#line 4386
  if (next_next) {
#line 4386
    if ((int const   )*next_next == 41) {
#line 4386
      tmp___1 = 1;
    } else {
#line 4386
      tmp___1 = 0;
    }
  } else {
#line 4386
    tmp___1 = 0;
  }
} else {
#line 4386
  tmp___1 = 0;
}
---------
SID [3371] -> Line 4386
#line 4386
tmp___2 = (int const   )*next == 41;
---------
SID [3370] -> Line 4386
#line 4386
if (syntax & (((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 4386
  tmp___2 = (int const   )*next == 41;
} else {
#line 4386
  if (next_backslash) {
#line 4386
    if (next_next) {
#line 4386
      if ((int const   )*next_next == 41) {
#line 4386
        tmp___1 = 1;
      } else {
#line 4386
        tmp___1 = 0;
      }
    } else {
#line 4386
      tmp___1 = 0;
    }
  } else {
#line 4386
    tmp___1 = 0;
  }
#line 4386
  tmp___2 = tmp___1;
}
---------
SID [3369] -> Line 4384
#line 4384
next_next = tmp___0;
---------
SID [3368] -> Line 4384
#line 4384
tmp___0 = (char const   *)((void *)0);
---------
SID [3367] -> Line 4384
#line 4384
tmp___0 = p + 1;
---------
SID [3366] -> Line 4384
#line 4384
if ((unsigned long )(p + 1) < (unsigned long )pend) {
#line 4384
  tmp___0 = p + 1;
} else {
#line 4384
  tmp___0 = (char const   *)((void *)0);
}
---------
SID [3365] -> Line 4383
#line 4383
next_backslash = (boolean )((int const   )*next == 92);
---------
SID [3364] -> Line 4382
#line 4382
next = p;
---------
SID [3363] -> Line 4366
#line 4366
return ((boolean )tmp___1);
---------
SID [3362] -> Line 4366
#line 4366
tmp___1 = 0;
---------
SID [3361] -> Line 4366
#line 4366
tmp___1 = 0;
---------
SID [3360] -> Line 4366
#line 4366
tmp___1 = 1;
---------
SID [3359] -> Line 4366
#line 4366
if (prev_prev_backslash) {
#line 4366
  tmp___1 = 1;
} else {
#line 4366
  tmp___1 = 0;
}
---------
SID [3358] -> Line 4366
#line 4366
tmp___1 = 1;
---------
SID [3357] -> Line 4366
#line 4366
if (syntax & (unsigned int )(((((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 4366
  tmp___1 = 1;
} else
#line 4366
if (prev_prev_backslash) {
#line 4366
  tmp___1 = 1;
} else {
#line 4366
  tmp___1 = 0;
}
---------
SID [3356] -> Line 4366
_L: /* CIL Label */ 
#line 4366
if ((int const   )*prev == 124) {
#line 4366
  if (syntax & (unsigned int )(((((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 4366
    tmp___1 = 1;
  } else
#line 4366
  if (prev_prev_backslash) {
#line 4366
    tmp___1 = 1;
  } else {
#line 4366
    tmp___1 = 0;
  }
} else {
#line 4366
  tmp___1 = 0;
}
---------
SID [3355] -> Line 4366
#line 4366
goto _L;
---------
SID [3354] -> Line 4366
#line 4366
tmp___1 = 1;
---------
SID [3353] -> Line 4366
#line 4366
if (prev_prev_backslash) {
#line 4366
  tmp___1 = 1;
} else {
#line 4366
  goto _L;
}
---------
SID [3352] -> Line 4366
#line 4366
tmp___1 = 1;
---------
SID [3351] -> Line 4366
#line 4366
if (syntax & (unsigned int )(((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 4366
  tmp___1 = 1;
} else
#line 4366
if (prev_prev_backslash) {
#line 4366
  tmp___1 = 1;
} else {
#line 4366
  goto _L;
}
---------
SID [3350] -> Line 4366
#line 4366
if ((int const   )*prev == 40) {
#line 4366
  if (syntax & (unsigned int )(((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 4366
    tmp___1 = 1;
  } else
#line 4366
  if (prev_prev_backslash) {
#line 4366
    tmp___1 = 1;
  } else {
#line 4366
    goto _L;
  }
} else
_L: /* CIL Label */ 
#line 4366
if ((int const   )*prev == 124) {
#line 4366
  if (syntax & (unsigned int )(((((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 4366
    tmp___1 = 1;
  } else
#line 4366
  if (prev_prev_backslash) {
#line 4366
    tmp___1 = 1;
  } else {
#line 4366
    tmp___1 = 0;
  }
} else {
#line 4366
  tmp___1 = 0;
}
---------
SID [3349] -> Line 4364
#line 4364
prev_prev_backslash = (boolean )tmp___0;
---------
SID [3348] -> Line 4364
#line 4364
tmp___0 = 0;
---------
SID [3347] -> Line 4364
#line 4364
tmp___0 = 0;
---------
SID [3346] -> Line 4364
#line 4364
tmp___0 = 1;
---------
SID [3345] -> Line 4364
#line 4364
if ((int const   )*(prev + -1) == 92) {
#line 4364
  tmp___0 = 1;
} else {
#line 4364
  tmp___0 = 0;
}
---------
SID [3344] -> Line 4364
#line 4364
if ((unsigned long )prev > (unsigned long )pattern) {
#line 4364
  if ((int const   )*(prev + -1) == 92) {
#line 4364
    tmp___0 = 1;
  } else {
#line 4364
    tmp___0 = 0;
  }
} else {
#line 4364
  tmp___0 = 0;
}
---------
SID [3343] -> Line 4363
#line 4363
prev = p - 2;
---------
SID [3342] -> Line 4351
#line 4351
return;
---------
SID [3341] -> Line 4350
#line 4350
store_op2(op, loc, arg1, arg2);
---------
SID [3340] -> Line 4348
#line 4348
*pto = *pfrom;
---------
SID [3339] -> Line 4348
#line 4348
pfrom --;
---------
SID [3338] -> Line 4348
#line 4348
pto --;
---------
SID [3337] -> Line 4347
#line 4347
break;
---------
SID [3336] -> Line -1

---------
SID [3335] -> Line 4347
#line 4347
if ((unsigned long )pfrom != (unsigned long )loc) {

} else {
#line 4347
  break;
}
---------
SID [3334] -> Line 4347
#line 4347
while ((unsigned long )pfrom != (unsigned long )loc) {
#line 4348
  pto --;
#line 4348
  pfrom --;
#line 4348
  *pto = *pfrom;
}
---------
SID [3333] -> Line 4345
#line 4345
pto = end + 5;
---------
SID [3332] -> Line 4344
#line 4344
pfrom = end;
---------
SID [3331] -> Line 4332
#line 4332
return;
---------
SID [3330] -> Line 4331
#line 4331
store_op1(op, loc, arg);
---------
SID [3329] -> Line 4329
#line 4329
*pto = *pfrom;
---------
SID [3328] -> Line 4329
#line 4329
pfrom --;
---------
SID [3327] -> Line 4329
#line 4329
pto --;
---------
SID [3326] -> Line 4328
#line 4328
break;
---------
SID [3325] -> Line -1

---------
SID [3324] -> Line 4328
#line 4328
if ((unsigned long )pfrom != (unsigned long )loc) {

} else {
#line 4328
  break;
}
---------
SID [3323] -> Line 4328
#line 4328
while ((unsigned long )pfrom != (unsigned long )loc) {
#line 4329
  pto --;
#line 4329
  pfrom --;
#line 4329
  *pto = *pfrom;
}
---------
SID [3322] -> Line 4326
#line 4326
pto = end + 3;
---------
SID [3321] -> Line 4325
#line 4325
pfrom = end;
---------
SID [3320] -> Line 4312
#line 4312
return;
---------
SID [3319] -> Line 4311
#line 4311
break;
---------
SID [3318] -> Line 4311
#line 4311
*((loc + 3) + 1) = (unsigned char )(arg2 >> 8);
---------
SID [3317] -> Line 4311
#line 4311
*((loc + 3) + 0) = (unsigned char )(arg2 & 255);
---------
SID [3316] -> Line 4311
#line 4311
while (1) {
#line 4311
  *((loc + 3) + 0) = (unsigned char )(arg2 & 255);
#line 4311
  *((loc + 3) + 1) = (unsigned char )(arg2 >> 8);
#line 4311
  break;
}
---------
SID [3315] -> Line 4310
#line 4310
break;
---------
SID [3314] -> Line 4310
#line 4310
*((loc + 1) + 1) = (unsigned char )(arg1 >> 8);
---------
SID [3313] -> Line 4310
#line 4310
*((loc + 1) + 0) = (unsigned char )(arg1 & 255);
---------
SID [3312] -> Line 4310
#line 4310
while (1) {
#line 4310
  *((loc + 1) + 0) = (unsigned char )(arg1 & 255);
#line 4310
  *((loc + 1) + 1) = (unsigned char )(arg1 >> 8);
#line 4310
  break;
}
---------
SID [3311] -> Line 4309
#line 4309
*loc = (unsigned char )op;
---------
SID [3310] -> Line 4298
#line 4298
return;
---------
SID [3309] -> Line 4297
#line 4297
break;
---------
SID [3308] -> Line 4297
#line 4297
*((loc + 1) + 1) = (unsigned char )(arg >> 8);
---------
SID [3307] -> Line 4297
#line 4297
*((loc + 1) + 0) = (unsigned char )(arg & 255);
---------
SID [3306] -> Line 4297
#line 4297
while (1) {
#line 4297
  *((loc + 1) + 0) = (unsigned char )(arg & 255);
#line 4297
  *((loc + 1) + 1) = (unsigned char )(arg >> 8);
#line 4297
  break;
}
---------
SID [3305] -> Line 4296
#line 4296
*loc = (unsigned char )op;
---------
SID [3304] -> Line 4283
#line 4283
return ((reg_errcode_t )0);
---------
SID [3303] -> Line 4273
#line 4273
bufp->used = (unsigned long )(b - bufp->buffer);
---------
SID [3302] -> Line 4270
#line 4270
free((void *)compile_stack.stack);
---------
SID [3301] -> Line -1

---------
SID [3300] -> Line 4268
#line 4268
return ((reg_errcode_t )8);
---------
SID [3299] -> Line 4267
#line 4267
if (! (compile_stack.avail == 0U)) {
#line 4268
  return ((reg_errcode_t )8);
} else {

}
---------
SID [3298] -> Line -1

---------
SID [3297] -> Line 4265
#line 4265
store_op1(13, fixup_alt_jump, (b - fixup_alt_jump) - 3L);
---------
SID [3296] -> Line 4264
#line 4264
if (fixup_alt_jump) {
#line 4265
  store_op1(13, fixup_alt_jump, (b - fixup_alt_jump) - 3L);
} else {

}
---------
SID [3295] -> Line 4257
#line 4257
break;
---------
SID [3294] -> Line 4256
#line 4256
*pending_exact = (unsigned char )((int )*pending_exact + 1);
---------
SID [3293] -> Line 4255
#line 4255
break;
---------
SID [3292] -> Line 4255
#line 4255
*tmp___127 = c;
---------
SID [3291] -> Line 4255
#line 4255
b ++;
---------
SID [3290] -> Line 4255
#line 4255
tmp___127 = b;
---------
SID [3289] -> Line 4255
#line 4255
break;
---------
SID [3288] -> Line -1

---------
SID [3287] -> Line -1

---------
SID [3286] -> Line 4255
#line 4255
pending_exact = bufp->buffer + (pending_exact - old_buffer___25);
---------
SID [3285] -> Line 4255
#line 4255
if (pending_exact) {
#line 4255
  pending_exact = bufp->buffer + (pending_exact - old_buffer___25);
} else {

}
---------
SID [3284] -> Line -1

---------
SID [3283] -> Line 4255
#line 4255
laststart = bufp->buffer + (laststart - old_buffer___25);
---------
SID [3282] -> Line 4255
#line 4255
if (laststart) {
#line 4255
  laststart = bufp->buffer + (laststart - old_buffer___25);
} else {

}
---------
SID [3281] -> Line -1

---------
SID [3280] -> Line 4255
#line 4255
fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___25);
---------
SID [3279] -> Line 4255
#line 4255
if (fixup_alt_jump) {
#line 4255
  fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___25);
} else {

}
---------
SID [3278] -> Line 4255
#line 4255
begalt = bufp->buffer + (begalt - old_buffer___25);
---------
SID [3277] -> Line 4255
#line 4255
b = bufp->buffer + (b - old_buffer___25);
---------
SID [3276] -> Line 4255
#line 4255
if ((unsigned long )old_buffer___25 != (unsigned long )bufp->buffer) {
#line 4255
  b = bufp->buffer + (b - old_buffer___25);
#line 4255
  begalt = bufp->buffer + (begalt - old_buffer___25);
#line 4255
  if (fixup_alt_jump) {
#line 4255
    fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___25);
  } else {

  }
#line 4255
  if (laststart) {
#line 4255
    laststart = bufp->buffer + (laststart - old_buffer___25);
  } else {

  }
#line 4255
  if (pending_exact) {
#line 4255
    pending_exact = bufp->buffer + (pending_exact - old_buffer___25);
  } else {

  }
} else {

}
---------
SID [3275] -> Line -1

---------
SID [3274] -> Line 4255
#line 4255
return ((reg_errcode_t )12);
---------
SID [3273] -> Line 4255
#line 4255
if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4255
  return ((reg_errcode_t )12);
} else {

}
---------
SID [3272] -> Line 4255
#line 4255
bufp->buffer = (unsigned char *)tmp___126;
---------
SID [3271] -> Line 4255
#line 4255
tmp___126 = realloc((void *)bufp->buffer, bufp->allocated);
---------
SID [3270] -> Line -1

---------
SID [3269] -> Line 4255
#line 4255
bufp->allocated = (unsigned long )(1L << 16);
---------
SID [3268] -> Line 4255
#line 4255
if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4255
  bufp->allocated = (unsigned long )(1L << 16);
} else {

}
---------
SID [3267] -> Line 4255
#line 4255
bufp->allocated <<= 1;
---------
SID [3266] -> Line -1

---------
SID [3265] -> Line 4255
#line 4255
return ((reg_errcode_t )15);
---------
SID [3264] -> Line 4255
#line 4255
if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4255
  return ((reg_errcode_t )15);
} else {

}
---------
SID [3263] -> Line 4255
#line 4255
old_buffer___25 = bufp->buffer;
---------
SID [3262] -> Line 4255
#line 4255
while (1) {
#line 4255
  old_buffer___25 = bufp->buffer;
#line 4255
  if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4255
    return ((reg_errcode_t )15);
  } else {

  }
#line 4255
  bufp->allocated <<= 1;
#line 4255
  if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4255
    bufp->allocated = (unsigned long )(1L << 16);
  } else {

  }
#line 4255
  tmp___126 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4255
  bufp->buffer = (unsigned char *)tmp___126;
#line 4255
  if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4255
    return ((reg_errcode_t )12);
  } else {

  }
#line 4255
  if ((unsigned long )old_buffer___25 != (unsigned long )bufp->buffer) {
#line 4255
    b = bufp->buffer + (b - old_buffer___25);
#line 4255
    begalt = bufp->buffer + (begalt - old_buffer___25);
#line 4255
    if (fixup_alt_jump) {
#line 4255
      fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___25);
    } else {

    }
#line 4255
    if (laststart) {
#line 4255
      laststart = bufp->buffer + (laststart - old_buffer___25);
    } else {

    }
#line 4255
    if (pending_exact) {
#line 4255
      pending_exact = bufp->buffer + (pending_exact - old_buffer___25);
    } else {

    }
  } else {

  }
#line 4255
  break;
}
---------
SID [3261] -> Line 4255
#line 4255
break;
---------
SID [3260] -> Line -1

---------
SID [3259] -> Line 4255
#line 4255
if ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {

} else {
#line 4255
  break;
}
---------
SID [3258] -> Line 4255
#line 4255
while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 4255
  while (1) {
#line 4255
    old_buffer___25 = bufp->buffer;
#line 4255
    if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4255
      return ((reg_errcode_t )15);
    } else {

    }
#line 4255
    bufp->allocated <<= 1;
#line 4255
    if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4255
      bufp->allocated = (unsigned long )(1L << 16);
    } else {

    }
#line 4255
    tmp___126 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4255
    bufp->buffer = (unsigned char *)tmp___126;
#line 4255
    if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4255
      return ((reg_errcode_t )12);
    } else {

    }
#line 4255
    if ((unsigned long )old_buffer___25 != (unsigned long )bufp->buffer) {
#line 4255
      b = bufp->buffer + (b - old_buffer___25);
#line 4255
      begalt = bufp->buffer + (begalt - old_buffer___25);
#line 4255
      if (fixup_alt_jump) {
#line 4255
        fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___25);
      } else {

      }
#line 4255
      if (laststart) {
#line 4255
        laststart = bufp->buffer + (laststart - old_buffer___25);
      } else {

      }
#line 4255
      if (pending_exact) {
#line 4255
        pending_exact = bufp->buffer + (pending_exact - old_buffer___25);
      } else {

      }
    } else {

    }
#line 4255
    break;
  }
}
---------
SID [3257] -> Line 4255
#line 4255
while (1) {
#line 4255
  while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 4255
    while (1) {
#line 4255
      old_buffer___25 = bufp->buffer;
#line 4255
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4255
        return ((reg_errcode_t )15);
      } else {

      }
#line 4255
      bufp->allocated <<= 1;
#line 4255
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4255
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 4255
      tmp___126 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4255
      bufp->buffer = (unsigned char *)tmp___126;
#line 4255
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4255
        return ((reg_errcode_t )12);
      } else {

      }
#line 4255
      if ((unsigned long )old_buffer___25 != (unsigned long )bufp->buffer) {
#line 4255
        b = bufp->buffer + (b - old_buffer___25);
#line 4255
        begalt = bufp->buffer + (begalt - old_buffer___25);
#line 4255
        if (fixup_alt_jump) {
#line 4255
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___25);
        } else {

        }
#line 4255
        if (laststart) {
#line 4255
          laststart = bufp->buffer + (laststart - old_buffer___25);
        } else {

        }
#line 4255
        if (pending_exact) {
#line 4255
          pending_exact = bufp->buffer + (pending_exact - old_buffer___25);
        } else {

        }
      } else {

      }
#line 4255
      break;
    }
  }
#line 4255
  tmp___127 = b;
#line 4255
  b ++;
#line 4255
  *tmp___127 = c;
#line 4255
  break;
}
---------
SID [3256] -> Line -1

---------
SID [3255] -> Line -1

---------
SID [3254] -> Line 4252
#line 4252
pending_exact = b - 1;
---------
SID [3253] -> Line 4251
#line 4251
break;
---------
SID [3252] -> Line 4251
#line 4251
*tmp___120 = (unsigned char)0;
---------
SID [3251] -> Line 4251
#line 4251
b ++;
---------
SID [3250] -> Line 4251
#line 4251
tmp___120 = b;
---------
SID [3249] -> Line 4251
#line 4251
*tmp___119 = (unsigned char)1;
---------
SID [3248] -> Line 4251
#line 4251
b ++;
---------
SID [3247] -> Line 4251
#line 4251
tmp___119 = b;
---------
SID [3246] -> Line 4251
#line 4251
break;
---------
SID [3245] -> Line -1

---------
SID [3244] -> Line -1

---------
SID [3243] -> Line 4251
#line 4251
pending_exact = bufp->buffer + (pending_exact - old_buffer___24);
---------
SID [3242] -> Line 4251
#line 4251
if (pending_exact) {
#line 4251
  pending_exact = bufp->buffer + (pending_exact - old_buffer___24);
} else {

}
---------
SID [3241] -> Line -1

---------
SID [3240] -> Line 4251
#line 4251
laststart = bufp->buffer + (laststart - old_buffer___24);
---------
SID [3239] -> Line 4251
#line 4251
if (laststart) {
#line 4251
  laststart = bufp->buffer + (laststart - old_buffer___24);
} else {

}
---------
SID [3238] -> Line -1

---------
SID [3237] -> Line 4251
#line 4251
fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___24);
---------
SID [3236] -> Line 4251
#line 4251
if (fixup_alt_jump) {
#line 4251
  fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___24);
} else {

}
---------
SID [3235] -> Line 4251
#line 4251
begalt = bufp->buffer + (begalt - old_buffer___24);
---------
SID [3234] -> Line 4251
#line 4251
b = bufp->buffer + (b - old_buffer___24);
---------
SID [3233] -> Line 4251
#line 4251
if ((unsigned long )old_buffer___24 != (unsigned long )bufp->buffer) {
#line 4251
  b = bufp->buffer + (b - old_buffer___24);
#line 4251
  begalt = bufp->buffer + (begalt - old_buffer___24);
#line 4251
  if (fixup_alt_jump) {
#line 4251
    fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___24);
  } else {

  }
#line 4251
  if (laststart) {
#line 4251
    laststart = bufp->buffer + (laststart - old_buffer___24);
  } else {

  }
#line 4251
  if (pending_exact) {
#line 4251
    pending_exact = bufp->buffer + (pending_exact - old_buffer___24);
  } else {

  }
} else {

}
---------
SID [3232] -> Line -1

---------
SID [3231] -> Line 4251
#line 4251
return ((reg_errcode_t )12);
---------
SID [3230] -> Line 4251
#line 4251
if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4251
  return ((reg_errcode_t )12);
} else {

}
---------
SID [3229] -> Line 4251
#line 4251
bufp->buffer = (unsigned char *)tmp___118;
---------
SID [3228] -> Line 4251
#line 4251
tmp___118 = realloc((void *)bufp->buffer, bufp->allocated);
---------
SID [3227] -> Line -1

---------
SID [3226] -> Line 4251
#line 4251
bufp->allocated = (unsigned long )(1L << 16);
---------
SID [3225] -> Line 4251
#line 4251
if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4251
  bufp->allocated = (unsigned long )(1L << 16);
} else {

}
---------
SID [3224] -> Line 4251
#line 4251
bufp->allocated <<= 1;
---------
SID [3223] -> Line -1

---------
SID [3222] -> Line 4251
#line 4251
return ((reg_errcode_t )15);
---------
SID [3221] -> Line 4251
#line 4251
if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4251
  return ((reg_errcode_t )15);
} else {

}
---------
SID [3220] -> Line 4251
#line 4251
old_buffer___24 = bufp->buffer;
---------
SID [3219] -> Line 4251
#line 4251
while (1) {
#line 4251
  old_buffer___24 = bufp->buffer;
#line 4251
  if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4251
    return ((reg_errcode_t )15);
  } else {

  }
#line 4251
  bufp->allocated <<= 1;
#line 4251
  if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4251
    bufp->allocated = (unsigned long )(1L << 16);
  } else {

  }
#line 4251
  tmp___118 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4251
  bufp->buffer = (unsigned char *)tmp___118;
#line 4251
  if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4251
    return ((reg_errcode_t )12);
  } else {

  }
#line 4251
  if ((unsigned long )old_buffer___24 != (unsigned long )bufp->buffer) {
#line 4251
    b = bufp->buffer + (b - old_buffer___24);
#line 4251
    begalt = bufp->buffer + (begalt - old_buffer___24);
#line 4251
    if (fixup_alt_jump) {
#line 4251
      fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___24);
    } else {

    }
#line 4251
    if (laststart) {
#line 4251
      laststart = bufp->buffer + (laststart - old_buffer___24);
    } else {

    }
#line 4251
    if (pending_exact) {
#line 4251
      pending_exact = bufp->buffer + (pending_exact - old_buffer___24);
    } else {

    }
  } else {

  }
#line 4251
  break;
}
---------
SID [3218] -> Line 4251
#line 4251
break;
---------
SID [3217] -> Line -1

---------
SID [3216] -> Line 4251
#line 4251
if ((unsigned long )((b - bufp->buffer) + 2L) > bufp->allocated) {

} else {
#line 4251
  break;
}
---------
SID [3215] -> Line 4251
#line 4251
while ((unsigned long )((b - bufp->buffer) + 2L) > bufp->allocated) {
#line 4251
  while (1) {
#line 4251
    old_buffer___24 = bufp->buffer;
#line 4251
    if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4251
      return ((reg_errcode_t )15);
    } else {

    }
#line 4251
    bufp->allocated <<= 1;
#line 4251
    if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4251
      bufp->allocated = (unsigned long )(1L << 16);
    } else {

    }
#line 4251
    tmp___118 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4251
    bufp->buffer = (unsigned char *)tmp___118;
#line 4251
    if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4251
      return ((reg_errcode_t )12);
    } else {

    }
#line 4251
    if ((unsigned long )old_buffer___24 != (unsigned long )bufp->buffer) {
#line 4251
      b = bufp->buffer + (b - old_buffer___24);
#line 4251
      begalt = bufp->buffer + (begalt - old_buffer___24);
#line 4251
      if (fixup_alt_jump) {
#line 4251
        fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___24);
      } else {

      }
#line 4251
      if (laststart) {
#line 4251
        laststart = bufp->buffer + (laststart - old_buffer___24);
      } else {

      }
#line 4251
      if (pending_exact) {
#line 4251
        pending_exact = bufp->buffer + (pending_exact - old_buffer___24);
      } else {

      }
    } else {

    }
#line 4251
    break;
  }
}
---------
SID [3214] -> Line 4251
#line 4251
while (1) {
#line 4251
  while ((unsigned long )((b - bufp->buffer) + 2L) > bufp->allocated) {
#line 4251
    while (1) {
#line 4251
      old_buffer___24 = bufp->buffer;
#line 4251
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4251
        return ((reg_errcode_t )15);
      } else {

      }
#line 4251
      bufp->allocated <<= 1;
#line 4251
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4251
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 4251
      tmp___118 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4251
      bufp->buffer = (unsigned char *)tmp___118;
#line 4251
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4251
        return ((reg_errcode_t )12);
      } else {

      }
#line 4251
      if ((unsigned long )old_buffer___24 != (unsigned long )bufp->buffer) {
#line 4251
        b = bufp->buffer + (b - old_buffer___24);
#line 4251
        begalt = bufp->buffer + (begalt - old_buffer___24);
#line 4251
        if (fixup_alt_jump) {
#line 4251
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___24);
        } else {

        }
#line 4251
        if (laststart) {
#line 4251
          laststart = bufp->buffer + (laststart - old_buffer___24);
        } else {

        }
#line 4251
        if (pending_exact) {
#line 4251
          pending_exact = bufp->buffer + (pending_exact - old_buffer___24);
        } else {

        }
      } else {

      }
#line 4251
      break;
    }
  }
#line 4251
  tmp___119 = b;
#line 4251
  b ++;
#line 4251
  *tmp___119 = (unsigned char)1;
#line 4251
  tmp___120 = b;
#line 4251
  b ++;
#line 4251
  *tmp___120 = (unsigned char)0;
#line 4251
  break;
}
---------
SID [3213] -> Line 4249
_L___23: /* CIL Label */ 
#line 4249
laststart = b;
---------
SID [3212] -> Line 4229
#line 4229
if (tmp___125) {
  _L___23: /* CIL Label */ 
#line 4249
  laststart = b;
#line 4251
  while (1) {
#line 4251
    while ((unsigned long )((b - bufp->buffer) + 2L) > bufp->allocated) {
#line 4251
      while (1) {
#line 4251
        old_buffer___24 = bufp->buffer;
#line 4251
        if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4251
          return ((reg_errcode_t )15);
        } else {

        }
#line 4251
        bufp->allocated <<= 1;
#line 4251
        if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4251
          bufp->allocated = (unsigned long )(1L << 16);
        } else {

        }
#line 4251
        tmp___118 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4251
        bufp->buffer = (unsigned char *)tmp___118;
#line 4251
        if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4251
          return ((reg_errcode_t )12);
        } else {

        }
#line 4251
        if ((unsigned long )old_buffer___24 != (unsigned long )bufp->buffer) {
#line 4251
          b = bufp->buffer + (b - old_buffer___24);
#line 4251
          begalt = bufp->buffer + (begalt - old_buffer___24);
#line 4251
          if (fixup_alt_jump) {
#line 4251
            fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___24);
          } else {

          }
#line 4251
          if (laststart) {
#line 4251
            laststart = bufp->buffer + (laststart - old_buffer___24);
          } else {

          }
#line 4251
          if (pending_exact) {
#line 4251
            pending_exact = bufp->buffer + (pending_exact - old_buffer___24);
          } else {

          }
        } else {

        }
#line 4251
        break;
      }
    }
#line 4251
    tmp___119 = b;
#line 4251
    b ++;
#line 4251
    *tmp___119 = (unsigned char)1;
#line 4251
    tmp___120 = b;
#line 4251
    b ++;
#line 4251
    *tmp___120 = (unsigned char)0;
#line 4251
    break;
  }
#line 4252
  pending_exact = b - 1;
} else {

}
---------
SID [3211] -> Line 4229
#line 4229
tmp___125 = tmp___124;
---------
SID [3210] -> Line 4229
#line 4229
tmp___124 = 0;
---------
SID [3209] -> Line 4229
#line 4229
tmp___124 = 0;
---------
SID [3208] -> Line 4229
#line 4229
tmp___124 = 1;
---------
SID [3207] -> Line 4229
#line 4229
if ((int const   )*(p + 1) == 123) {
#line 4229
  tmp___124 = 1;
} else {
#line 4229
  tmp___124 = 0;
}
---------
SID [3206] -> Line 4229
#line 4229
if ((int const   )*(p + 0) == 92) {
#line 4229
  if ((int const   )*(p + 1) == 123) {
#line 4229
    tmp___124 = 1;
  } else {
#line 4229
    tmp___124 = 0;
  }
} else {
#line 4229
  tmp___124 = 0;
}
---------
SID [3205] -> Line 4229
#line 4229
tmp___125 = (int const   )*p == 123;
---------
SID [3204] -> Line 4229
#line 4229
if (syntax & (unsigned int )((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 4229
  tmp___125 = (int const   )*p == 123;
} else {
#line 4229
  if ((int const   )*(p + 0) == 92) {
#line 4229
    if ((int const   )*(p + 1) == 123) {
#line 4229
      tmp___124 = 1;
    } else {
#line 4229
      tmp___124 = 0;
    }
  } else {
#line 4229
    tmp___124 = 0;
  }
#line 4229
  tmp___125 = tmp___124;
}
---------
SID [3203] -> Line 4229
#line 4229
if (syntax & (unsigned int )(((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 4229
  if (syntax & (unsigned int )((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 4229
    tmp___125 = (int const   )*p == 123;
  } else {
#line 4229
    if ((int const   )*(p + 0) == 92) {
#line 4229
      if ((int const   )*(p + 1) == 123) {
#line 4229
        tmp___124 = 1;
      } else {
#line 4229
        tmp___124 = 0;
      }
    } else {
#line 4229
      tmp___124 = 0;
    }
#line 4229
    tmp___125 = tmp___124;
  }
#line 4229
  if (tmp___125) {
    _L___23: /* CIL Label */ 
#line 4249
    laststart = b;
#line 4251
    while (1) {
#line 4251
      while ((unsigned long )((b - bufp->buffer) + 2L) > bufp->allocated) {
#line 4251
        while (1) {
#line 4251
          old_buffer___24 = bufp->buffer;
#line 4251
          if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4251
            return ((reg_errcode_t )15);
          } else {

          }
#line 4251
          bufp->allocated <<= 1;
#line 4251
          if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4251
            bufp->allocated = (unsigned long )(1L << 16);
          } else {

          }
#line 4251
          tmp___118 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4251
          bufp->buffer = (unsigned char *)tmp___118;
#line 4251
          if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4251
            return ((reg_errcode_t )12);
          } else {

          }
#line 4251
          if ((unsigned long )old_buffer___24 != (unsigned long )bufp->buffer) {
#line 4251
            b = bufp->buffer + (b - old_buffer___24);
#line 4251
            begalt = bufp->buffer + (begalt - old_buffer___24);
#line 4251
            if (fixup_alt_jump) {
#line 4251
              fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___24);
            } else {

            }
#line 4251
            if (laststart) {
#line 4251
              laststart = bufp->buffer + (laststart - old_buffer___24);
            } else {

            }
#line 4251
            if (pending_exact) {
#line 4251
              pending_exact = bufp->buffer + (pending_exact - old_buffer___24);
            } else {

            }
          } else {

          }
#line 4251
          break;
        }
      }
#line 4251
      tmp___119 = b;
#line 4251
      b ++;
#line 4251
      *tmp___119 = (unsigned char)1;
#line 4251
      tmp___120 = b;
#line 4251
      b ++;
#line 4251
      *tmp___120 = (unsigned char)0;
#line 4251
      break;
    }
#line 4252
    pending_exact = b - 1;
  } else {

  }
} else {

}
---------
SID [3202] -> Line 4229
#line 4229
goto _L___23;
---------
SID [3201] -> Line 4229
#line 4229
if (tmp___123) {
#line 4229
  goto _L___23;
} else
#line 4229
if (syntax & (unsigned int )(((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 4229
  if (syntax & (unsigned int )((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 4229
    tmp___125 = (int const   )*p == 123;
  } else {
#line 4229
    if ((int const   )*(p + 0) == 92) {
#line 4229
      if ((int const   )*(p + 1) == 123) {
#line 4229
        tmp___124 = 1;
      } else {
#line 4229
        tmp___124 = 0;
      }
    } else {
#line 4229
      tmp___124 = 0;
    }
#line 4229
    tmp___125 = tmp___124;
  }
#line 4229
  if (tmp___125) {
    _L___23: /* CIL Label */ 
#line 4249
    laststart = b;
#line 4251
    while (1) {
#line 4251
      while ((unsigned long )((b - bufp->buffer) + 2L) > bufp->allocated) {
#line 4251
        while (1) {
#line 4251
          old_buffer___24 = bufp->buffer;
#line 4251
          if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4251
            return ((reg_errcode_t )15);
          } else {

          }
#line 4251
          bufp->allocated <<= 1;
#line 4251
          if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4251
            bufp->allocated = (unsigned long )(1L << 16);
          } else {

          }
#line 4251
          tmp___118 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4251
          bufp->buffer = (unsigned char *)tmp___118;
#line 4251
          if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4251
            return ((reg_errcode_t )12);
          } else {

          }
#line 4251
          if ((unsigned long )old_buffer___24 != (unsigned long )bufp->buffer) {
#line 4251
            b = bufp->buffer + (b - old_buffer___24);
#line 4251
            begalt = bufp->buffer + (begalt - old_buffer___24);
#line 4251
            if (fixup_alt_jump) {
#line 4251
              fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___24);
            } else {

            }
#line 4251
            if (laststart) {
#line 4251
              laststart = bufp->buffer + (laststart - old_buffer___24);
            } else {

            }
#line 4251
            if (pending_exact) {
#line 4251
              pending_exact = bufp->buffer + (pending_exact - old_buffer___24);
            } else {

            }
          } else {

          }
#line 4251
          break;
        }
      }
#line 4251
      tmp___119 = b;
#line 4251
      b ++;
#line 4251
      *tmp___119 = (unsigned char)1;
#line 4251
      tmp___120 = b;
#line 4251
      b ++;
#line 4251
      *tmp___120 = (unsigned char)0;
#line 4251
      break;
    }
#line 4252
    pending_exact = b - 1;
  } else {

  }
} else {

}
---------
SID [3200] -> Line 4229
#line 4229
tmp___123 = tmp___122;
---------
SID [3199] -> Line 4229
#line 4229
tmp___122 = 0;
---------
SID [3198] -> Line 4229
#line 4229
tmp___122 = 1;
---------
SID [3197] -> Line 4229
#line 4229
if ((int const   )*p == 63) {
#line 4229
  tmp___122 = 1;
} else {
#line 4229
  tmp___122 = 0;
}
---------
SID [3196] -> Line 4229
#line 4229
tmp___122 = 1;
---------
SID [3195] -> Line 4229
#line 4229
if ((int const   )*p == 43) {
#line 4229
  tmp___122 = 1;
} else
#line 4229
if ((int const   )*p == 63) {
#line 4229
  tmp___122 = 1;
} else {
#line 4229
  tmp___122 = 0;
}
---------
SID [3194] -> Line 4229
#line 4229
tmp___123 = tmp___121;
---------
SID [3193] -> Line 4229
#line 4229
tmp___121 = 0;
---------
SID [3192] -> Line 4229
#line 4229
tmp___121 = 0;
---------
SID [3191] -> Line 4229
#line 4229
tmp___121 = 1;
---------
SID [3190] -> Line 4229
#line 4229
if ((int const   )*(p + 1) == 63) {
#line 4229
  tmp___121 = 1;
} else {
#line 4229
  tmp___121 = 0;
}
---------
SID [3189] -> Line 4229
#line 4229
tmp___121 = 1;
---------
SID [3188] -> Line 4229
#line 4229
if ((int const   )*(p + 1) == 43) {
#line 4229
  tmp___121 = 1;
} else
#line 4229
if ((int const   )*(p + 1) == 63) {
#line 4229
  tmp___121 = 1;
} else {
#line 4229
  tmp___121 = 0;
}
---------
SID [3187] -> Line 4229
#line 4229
if ((int const   )*p == 92) {
#line 4229
  if ((int const   )*(p + 1) == 43) {
#line 4229
    tmp___121 = 1;
  } else
#line 4229
  if ((int const   )*(p + 1) == 63) {
#line 4229
    tmp___121 = 1;
  } else {
#line 4229
    tmp___121 = 0;
  }
} else {
#line 4229
  tmp___121 = 0;
}
---------
SID [3186] -> Line 4229
#line 4229
if (syntax & (unsigned int )(1 << 1)) {
#line 4229
  if ((int const   )*p == 92) {
#line 4229
    if ((int const   )*(p + 1) == 43) {
#line 4229
      tmp___121 = 1;
    } else
#line 4229
    if ((int const   )*(p + 1) == 63) {
#line 4229
      tmp___121 = 1;
    } else {
#line 4229
      tmp___121 = 0;
    }
  } else {
#line 4229
    tmp___121 = 0;
  }
#line 4229
  tmp___123 = tmp___121;
} else {
#line 4229
  if ((int const   )*p == 43) {
#line 4229
    tmp___122 = 1;
  } else
#line 4229
  if ((int const   )*p == 63) {
#line 4229
    tmp___122 = 1;
  } else {
#line 4229
    tmp___122 = 0;
  }
#line 4229
  tmp___123 = tmp___122;
}
---------
SID [3185] -> Line 4229
#line 4229
goto _L___23;
---------
SID [3184] -> Line 4229
#line 4229
if ((int const   )*p == 94) {
#line 4229
  goto _L___23;
} else {
#line 4229
  if (syntax & (unsigned int )(1 << 1)) {
#line 4229
    if ((int const   )*p == 92) {
#line 4229
      if ((int const   )*(p + 1) == 43) {
#line 4229
        tmp___121 = 1;
      } else
#line 4229
      if ((int const   )*(p + 1) == 63) {
#line 4229
        tmp___121 = 1;
      } else {
#line 4229
        tmp___121 = 0;
      }
    } else {
#line 4229
      tmp___121 = 0;
    }
#line 4229
    tmp___123 = tmp___121;
  } else {
#line 4229
    if ((int const   )*p == 43) {
#line 4229
      tmp___122 = 1;
    } else
#line 4229
    if ((int const   )*p == 63) {
#line 4229
      tmp___122 = 1;
    } else {
#line 4229
      tmp___122 = 0;
    }
#line 4229
    tmp___123 = tmp___122;
  }
#line 4229
  if (tmp___123) {
#line 4229
    goto _L___23;
  } else
#line 4229
  if (syntax & (unsigned int )(((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 4229
    if (syntax & (unsigned int )((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 4229
      tmp___125 = (int const   )*p == 123;
    } else {
#line 4229
      if ((int const   )*(p + 0) == 92) {
#line 4229
        if ((int const   )*(p + 1) == 123) {
#line 4229
          tmp___124 = 1;
        } else {
#line 4229
          tmp___124 = 0;
        }
      } else {
#line 4229
        tmp___124 = 0;
      }
#line 4229
      tmp___125 = tmp___124;
    }
#line 4229
    if (tmp___125) {
      _L___23: /* CIL Label */ 
#line 4249
      laststart = b;
#line 4251
      while (1) {
#line 4251
        while ((unsigned long )((b - bufp->buffer) + 2L) > bufp->allocated) {
#line 4251
          while (1) {
#line 4251
            old_buffer___24 = bufp->buffer;
#line 4251
            if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4251
              return ((reg_errcode_t )15);
            } else {

            }
#line 4251
            bufp->allocated <<= 1;
#line 4251
            if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4251
              bufp->allocated = (unsigned long )(1L << 16);
            } else {

            }
#line 4251
            tmp___118 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4251
            bufp->buffer = (unsigned char *)tmp___118;
#line 4251
            if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4251
              return ((reg_errcode_t )12);
            } else {

            }
#line 4251
            if ((unsigned long )old_buffer___24 != (unsigned long )bufp->buffer) {
#line 4251
              b = bufp->buffer + (b - old_buffer___24);
#line 4251
              begalt = bufp->buffer + (begalt - old_buffer___24);
#line 4251
              if (fixup_alt_jump) {
#line 4251
                fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___24);
              } else {

              }
#line 4251
              if (laststart) {
#line 4251
                laststart = bufp->buffer + (laststart - old_buffer___24);
              } else {

              }
#line 4251
              if (pending_exact) {
#line 4251
                pending_exact = bufp->buffer + (pending_exact - old_buffer___24);
              } else {

              }
            } else {

            }
#line 4251
            break;
          }
        }
#line 4251
        tmp___119 = b;
#line 4251
        b ++;
#line 4251
        *tmp___119 = (unsigned char)1;
#line 4251
        tmp___120 = b;
#line 4251
        b ++;
#line 4251
        *tmp___120 = (unsigned char)0;
#line 4251
        break;
      }
#line 4252
      pending_exact = b - 1;
    } else {

    }
  } else {

  }
}
---------
SID [3183] -> Line 4229
#line 4229
goto _L___23;
---------
SID [3182] -> Line 4229
#line 4229
if ((int const   )*p == 42) {
#line 4229
  goto _L___23;
} else
#line 4229
if ((int const   )*p == 94) {
#line 4229
  goto _L___23;
} else {
#line 4229
  if (syntax & (unsigned int )(1 << 1)) {
#line 4229
    if ((int const   )*p == 92) {
#line 4229
      if ((int const   )*(p + 1) == 43) {
#line 4229
        tmp___121 = 1;
      } else
#line 4229
      if ((int const   )*(p + 1) == 63) {
#line 4229
        tmp___121 = 1;
      } else {
#line 4229
        tmp___121 = 0;
      }
    } else {
#line 4229
      tmp___121 = 0;
    }
#line 4229
    tmp___123 = tmp___121;
  } else {
#line 4229
    if ((int const   )*p == 43) {
#line 4229
      tmp___122 = 1;
    } else
#line 4229
    if ((int const   )*p == 63) {
#line 4229
      tmp___122 = 1;
    } else {
#line 4229
      tmp___122 = 0;
    }
#line 4229
    tmp___123 = tmp___122;
  }
#line 4229
  if (tmp___123) {
#line 4229
    goto _L___23;
  } else
#line 4229
  if (syntax & (unsigned int )(((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 4229
    if (syntax & (unsigned int )((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 4229
      tmp___125 = (int const   )*p == 123;
    } else {
#line 4229
      if ((int const   )*(p + 0) == 92) {
#line 4229
        if ((int const   )*(p + 1) == 123) {
#line 4229
          tmp___124 = 1;
        } else {
#line 4229
          tmp___124 = 0;
        }
      } else {
#line 4229
        tmp___124 = 0;
      }
#line 4229
      tmp___125 = tmp___124;
    }
#line 4229
    if (tmp___125) {
      _L___23: /* CIL Label */ 
#line 4249
      laststart = b;
#line 4251
      while (1) {
#line 4251
        while ((unsigned long )((b - bufp->buffer) + 2L) > bufp->allocated) {
#line 4251
          while (1) {
#line 4251
            old_buffer___24 = bufp->buffer;
#line 4251
            if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4251
              return ((reg_errcode_t )15);
            } else {

            }
#line 4251
            bufp->allocated <<= 1;
#line 4251
            if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4251
              bufp->allocated = (unsigned long )(1L << 16);
            } else {

            }
#line 4251
            tmp___118 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4251
            bufp->buffer = (unsigned char *)tmp___118;
#line 4251
            if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4251
              return ((reg_errcode_t )12);
            } else {

            }
#line 4251
            if ((unsigned long )old_buffer___24 != (unsigned long )bufp->buffer) {
#line 4251
              b = bufp->buffer + (b - old_buffer___24);
#line 4251
              begalt = bufp->buffer + (begalt - old_buffer___24);
#line 4251
              if (fixup_alt_jump) {
#line 4251
                fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___24);
              } else {

              }
#line 4251
              if (laststart) {
#line 4251
                laststart = bufp->buffer + (laststart - old_buffer___24);
              } else {

              }
#line 4251
              if (pending_exact) {
#line 4251
                pending_exact = bufp->buffer + (pending_exact - old_buffer___24);
              } else {

              }
            } else {

            }
#line 4251
            break;
          }
        }
#line 4251
        tmp___119 = b;
#line 4251
        b ++;
#line 4251
        *tmp___119 = (unsigned char)1;
#line 4251
        tmp___120 = b;
#line 4251
        b ++;
#line 4251
        *tmp___120 = (unsigned char)0;
#line 4251
        break;
      }
#line 4252
      pending_exact = b - 1;
    } else {

    }
  } else {

  }
}
---------
SID [3181] -> Line 4229
#line 4229
goto _L___23;
---------
SID [3180] -> Line 4229
#line 4229
if ((int )*pending_exact == (1 << 8) - 1) {
#line 4229
  goto _L___23;
} else
#line 4229
if ((int const   )*p == 42) {
#line 4229
  goto _L___23;
} else
#line 4229
if ((int const   )*p == 94) {
#line 4229
  goto _L___23;
} else {
#line 4229
  if (syntax & (unsigned int )(1 << 1)) {
#line 4229
    if ((int const   )*p == 92) {
#line 4229
      if ((int const   )*(p + 1) == 43) {
#line 4229
        tmp___121 = 1;
      } else
#line 4229
      if ((int const   )*(p + 1) == 63) {
#line 4229
        tmp___121 = 1;
      } else {
#line 4229
        tmp___121 = 0;
      }
    } else {
#line 4229
      tmp___121 = 0;
    }
#line 4229
    tmp___123 = tmp___121;
  } else {
#line 4229
    if ((int const   )*p == 43) {
#line 4229
      tmp___122 = 1;
    } else
#line 4229
    if ((int const   )*p == 63) {
#line 4229
      tmp___122 = 1;
    } else {
#line 4229
      tmp___122 = 0;
    }
#line 4229
    tmp___123 = tmp___122;
  }
#line 4229
  if (tmp___123) {
#line 4229
    goto _L___23;
  } else
#line 4229
  if (syntax & (unsigned int )(((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 4229
    if (syntax & (unsigned int )((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 4229
      tmp___125 = (int const   )*p == 123;
    } else {
#line 4229
      if ((int const   )*(p + 0) == 92) {
#line 4229
        if ((int const   )*(p + 1) == 123) {
#line 4229
          tmp___124 = 1;
        } else {
#line 4229
          tmp___124 = 0;
        }
      } else {
#line 4229
        tmp___124 = 0;
      }
#line 4229
      tmp___125 = tmp___124;
    }
#line 4229
    if (tmp___125) {
      _L___23: /* CIL Label */ 
#line 4249
      laststart = b;
#line 4251
      while (1) {
#line 4251
        while ((unsigned long )((b - bufp->buffer) + 2L) > bufp->allocated) {
#line 4251
          while (1) {
#line 4251
            old_buffer___24 = bufp->buffer;
#line 4251
            if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4251
              return ((reg_errcode_t )15);
            } else {

            }
#line 4251
            bufp->allocated <<= 1;
#line 4251
            if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4251
              bufp->allocated = (unsigned long )(1L << 16);
            } else {

            }
#line 4251
            tmp___118 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4251
            bufp->buffer = (unsigned char *)tmp___118;
#line 4251
            if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4251
              return ((reg_errcode_t )12);
            } else {

            }
#line 4251
            if ((unsigned long )old_buffer___24 != (unsigned long )bufp->buffer) {
#line 4251
              b = bufp->buffer + (b - old_buffer___24);
#line 4251
              begalt = bufp->buffer + (begalt - old_buffer___24);
#line 4251
              if (fixup_alt_jump) {
#line 4251
                fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___24);
              } else {

              }
#line 4251
              if (laststart) {
#line 4251
                laststart = bufp->buffer + (laststart - old_buffer___24);
              } else {

              }
#line 4251
              if (pending_exact) {
#line 4251
                pending_exact = bufp->buffer + (pending_exact - old_buffer___24);
              } else {

              }
            } else {

            }
#line 4251
            break;
          }
        }
#line 4251
        tmp___119 = b;
#line 4251
        b ++;
#line 4251
        *tmp___119 = (unsigned char)1;
#line 4251
        tmp___120 = b;
#line 4251
        b ++;
#line 4251
        *tmp___120 = (unsigned char)0;
#line 4251
        break;
      }
#line 4252
      pending_exact = b - 1;
    } else {

    }
  } else {

  }
}
---------
SID [3179] -> Line 4229
#line 4229
goto _L___23;
---------
SID [3178] -> Line 4229
#line 4229
if ((unsigned long )((pending_exact + (int )*pending_exact) + 1) != (unsigned long )b) {
#line 4229
  goto _L___23;
} else
#line 4229
if ((int )*pending_exact == (1 << 8) - 1) {
#line 4229
  goto _L___23;
} else
#line 4229
if ((int const   )*p == 42) {
#line 4229
  goto _L___23;
} else
#line 4229
if ((int const   )*p == 94) {
#line 4229
  goto _L___23;
} else {
#line 4229
  if (syntax & (unsigned int )(1 << 1)) {
#line 4229
    if ((int const   )*p == 92) {
#line 4229
      if ((int const   )*(p + 1) == 43) {
#line 4229
        tmp___121 = 1;
      } else
#line 4229
      if ((int const   )*(p + 1) == 63) {
#line 4229
        tmp___121 = 1;
      } else {
#line 4229
        tmp___121 = 0;
      }
    } else {
#line 4229
      tmp___121 = 0;
    }
#line 4229
    tmp___123 = tmp___121;
  } else {
#line 4229
    if ((int const   )*p == 43) {
#line 4229
      tmp___122 = 1;
    } else
#line 4229
    if ((int const   )*p == 63) {
#line 4229
      tmp___122 = 1;
    } else {
#line 4229
      tmp___122 = 0;
    }
#line 4229
    tmp___123 = tmp___122;
  }
#line 4229
  if (tmp___123) {
#line 4229
    goto _L___23;
  } else
#line 4229
  if (syntax & (unsigned int )(((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 4229
    if (syntax & (unsigned int )((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 4229
      tmp___125 = (int const   )*p == 123;
    } else {
#line 4229
      if ((int const   )*(p + 0) == 92) {
#line 4229
        if ((int const   )*(p + 1) == 123) {
#line 4229
          tmp___124 = 1;
        } else {
#line 4229
          tmp___124 = 0;
        }
      } else {
#line 4229
        tmp___124 = 0;
      }
#line 4229
      tmp___125 = tmp___124;
    }
#line 4229
    if (tmp___125) {
      _L___23: /* CIL Label */ 
#line 4249
      laststart = b;
#line 4251
      while (1) {
#line 4251
        while ((unsigned long )((b - bufp->buffer) + 2L) > bufp->allocated) {
#line 4251
          while (1) {
#line 4251
            old_buffer___24 = bufp->buffer;
#line 4251
            if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4251
              return ((reg_errcode_t )15);
            } else {

            }
#line 4251
            bufp->allocated <<= 1;
#line 4251
            if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4251
              bufp->allocated = (unsigned long )(1L << 16);
            } else {

            }
#line 4251
            tmp___118 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4251
            bufp->buffer = (unsigned char *)tmp___118;
#line 4251
            if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4251
              return ((reg_errcode_t )12);
            } else {

            }
#line 4251
            if ((unsigned long )old_buffer___24 != (unsigned long )bufp->buffer) {
#line 4251
              b = bufp->buffer + (b - old_buffer___24);
#line 4251
              begalt = bufp->buffer + (begalt - old_buffer___24);
#line 4251
              if (fixup_alt_jump) {
#line 4251
                fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___24);
              } else {

              }
#line 4251
              if (laststart) {
#line 4251
                laststart = bufp->buffer + (laststart - old_buffer___24);
              } else {

              }
#line 4251
              if (pending_exact) {
#line 4251
                pending_exact = bufp->buffer + (pending_exact - old_buffer___24);
              } else {

              }
            } else {

            }
#line 4251
            break;
          }
        }
#line 4251
        tmp___119 = b;
#line 4251
        b ++;
#line 4251
        *tmp___119 = (unsigned char)1;
#line 4251
        tmp___120 = b;
#line 4251
        b ++;
#line 4251
        *tmp___120 = (unsigned char)0;
#line 4251
        break;
      }
#line 4252
      pending_exact = b - 1;
    } else {

    }
  } else {

  }
}
---------
SID [3177] -> Line 4229
#line 4229
goto _L___23;
---------
SID [3176] -> Line 4229
normal_char: 
default: 
#line 4229
if (! pending_exact) {
#line 4229
  goto _L___23;
} else
#line 4229
if ((unsigned long )((pending_exact + (int )*pending_exact) + 1) != (unsigned long )b) {
#line 4229
  goto _L___23;
} else
#line 4229
if ((int )*pending_exact == (1 << 8) - 1) {
#line 4229
  goto _L___23;
} else
#line 4229
if ((int const   )*p == 42) {
#line 4229
  goto _L___23;
} else
#line 4229
if ((int const   )*p == 94) {
#line 4229
  goto _L___23;
} else {
#line 4229
  if (syntax & (unsigned int )(1 << 1)) {
#line 4229
    if ((int const   )*p == 92) {
#line 4229
      if ((int const   )*(p + 1) == 43) {
#line 4229
        tmp___121 = 1;
      } else
#line 4229
      if ((int const   )*(p + 1) == 63) {
#line 4229
        tmp___121 = 1;
      } else {
#line 4229
        tmp___121 = 0;
      }
    } else {
#line 4229
      tmp___121 = 0;
    }
#line 4229
    tmp___123 = tmp___121;
  } else {
#line 4229
    if ((int const   )*p == 43) {
#line 4229
      tmp___122 = 1;
    } else
#line 4229
    if ((int const   )*p == 63) {
#line 4229
      tmp___122 = 1;
    } else {
#line 4229
      tmp___122 = 0;
    }
#line 4229
    tmp___123 = tmp___122;
  }
#line 4229
  if (tmp___123) {
#line 4229
    goto _L___23;
  } else
#line 4229
  if (syntax & (unsigned int )(((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 4229
    if (syntax & (unsigned int )((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 4229
      tmp___125 = (int const   )*p == 123;
    } else {
#line 4229
      if ((int const   )*(p + 0) == 92) {
#line 4229
        if ((int const   )*(p + 1) == 123) {
#line 4229
          tmp___124 = 1;
        } else {
#line 4229
          tmp___124 = 0;
        }
      } else {
#line 4229
        tmp___124 = 0;
      }
#line 4229
      tmp___125 = tmp___124;
    }
#line 4229
    if (tmp___125) {
      _L___23: /* CIL Label */ 
#line 4249
      laststart = b;
#line 4251
      while (1) {
#line 4251
        while ((unsigned long )((b - bufp->buffer) + 2L) > bufp->allocated) {
#line 4251
          while (1) {
#line 4251
            old_buffer___24 = bufp->buffer;
#line 4251
            if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4251
              return ((reg_errcode_t )15);
            } else {

            }
#line 4251
            bufp->allocated <<= 1;
#line 4251
            if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4251
              bufp->allocated = (unsigned long )(1L << 16);
            } else {

            }
#line 4251
            tmp___118 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4251
            bufp->buffer = (unsigned char *)tmp___118;
#line 4251
            if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4251
              return ((reg_errcode_t )12);
            } else {

            }
#line 4251
            if ((unsigned long )old_buffer___24 != (unsigned long )bufp->buffer) {
#line 4251
              b = bufp->buffer + (b - old_buffer___24);
#line 4251
              begalt = bufp->buffer + (begalt - old_buffer___24);
#line 4251
              if (fixup_alt_jump) {
#line 4251
                fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___24);
              } else {

              }
#line 4251
              if (laststart) {
#line 4251
                laststart = bufp->buffer + (laststart - old_buffer___24);
              } else {

              }
#line 4251
              if (pending_exact) {
#line 4251
                pending_exact = bufp->buffer + (pending_exact - old_buffer___24);
              } else {

              }
            } else {

            }
#line 4251
            break;
          }
        }
#line 4251
        tmp___119 = b;
#line 4251
        b ++;
#line 4251
        *tmp___119 = (unsigned char)1;
#line 4251
        tmp___120 = b;
#line 4251
        b ++;
#line 4251
        *tmp___120 = (unsigned char)0;
#line 4251
        break;
      }
#line 4252
      pending_exact = b - 1;
    } else {

    }
  } else {

  }
}
---------
SID [3175] -> Line 4222
#line 4222
break;
---------
SID [3174] -> Line 4220
#line 4220
goto normal_char;
---------
SID [3173] -> Line 4219
#line 4219
c = c;
---------
SID [3172] -> Line 4219
#line 4219
c = (unsigned char )*(translate + c);
---------
SID [3171] -> Line 4219
normal_backslash: 
default: 
#line 4219
if (translate) {
#line 4219
  c = (unsigned char )*(translate + c);
} else {
#line 4219
  c = c;
}
---------
SID [3170] -> Line 4212
#line 4212
goto normal_backslash;
---------
SID [3169] -> Line 4210
#line 4210
goto handle_plus;
---------
SID [3168] -> Line 4209
case 63: 
case 43: 
#line 4209
if (syntax & (unsigned int )(1 << 1)) {
#line 4210
  goto handle_plus;
} else {
#line 4212
  goto normal_backslash;
}
---------
SID [3167] -> Line 4204
#line 4204
break;
---------
SID [3166] -> Line 4203
#line 4203
break;
---------
SID [3165] -> Line 4203
#line 4203
*tmp___117 = c1;
---------
SID [3164] -> Line 4203
#line 4203
b ++;
---------
SID [3163] -> Line 4203
#line 4203
tmp___117 = b;
---------
SID [3162] -> Line 4203
#line 4203
*tmp___116 = (unsigned char)7;
---------
SID [3161] -> Line 4203
#line 4203
b ++;
---------
SID [3160] -> Line 4203
#line 4203
tmp___116 = b;
---------
SID [3159] -> Line 4203
#line 4203
break;
---------
SID [3158] -> Line -1

---------
SID [3157] -> Line -1

---------
SID [3156] -> Line 4203
#line 4203
pending_exact = bufp->buffer + (pending_exact - old_buffer___23);
---------
SID [3155] -> Line 4203
#line 4203
if (pending_exact) {
#line 4203
  pending_exact = bufp->buffer + (pending_exact - old_buffer___23);
} else {

}
---------
SID [3154] -> Line -1

---------
SID [3153] -> Line 4203
#line 4203
laststart = bufp->buffer + (laststart - old_buffer___23);
---------
SID [3152] -> Line 4203
#line 4203
if (laststart) {
#line 4203
  laststart = bufp->buffer + (laststart - old_buffer___23);
} else {

}
---------
SID [3151] -> Line -1

---------
SID [3150] -> Line 4203
#line 4203
fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___23);
---------
SID [3149] -> Line 4203
#line 4203
if (fixup_alt_jump) {
#line 4203
  fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___23);
} else {

}
---------
SID [3148] -> Line 4203
#line 4203
begalt = bufp->buffer + (begalt - old_buffer___23);
---------
SID [3147] -> Line 4203
#line 4203
b = bufp->buffer + (b - old_buffer___23);
---------
SID [3146] -> Line 4203
#line 4203
if ((unsigned long )old_buffer___23 != (unsigned long )bufp->buffer) {
#line 4203
  b = bufp->buffer + (b - old_buffer___23);
#line 4203
  begalt = bufp->buffer + (begalt - old_buffer___23);
#line 4203
  if (fixup_alt_jump) {
#line 4203
    fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___23);
  } else {

  }
#line 4203
  if (laststart) {
#line 4203
    laststart = bufp->buffer + (laststart - old_buffer___23);
  } else {

  }
#line 4203
  if (pending_exact) {
#line 4203
    pending_exact = bufp->buffer + (pending_exact - old_buffer___23);
  } else {

  }
} else {

}
---------
SID [3145] -> Line -1

---------
SID [3144] -> Line 4203
#line 4203
return ((reg_errcode_t )12);
---------
SID [3143] -> Line 4203
#line 4203
if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4203
  return ((reg_errcode_t )12);
} else {

}
---------
SID [3142] -> Line 4203
#line 4203
bufp->buffer = (unsigned char *)tmp___115;
---------
SID [3141] -> Line 4203
#line 4203
tmp___115 = realloc((void *)bufp->buffer, bufp->allocated);
---------
SID [3140] -> Line -1

---------
SID [3139] -> Line 4203
#line 4203
bufp->allocated = (unsigned long )(1L << 16);
---------
SID [3138] -> Line 4203
#line 4203
if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4203
  bufp->allocated = (unsigned long )(1L << 16);
} else {

}
---------
SID [3137] -> Line 4203
#line 4203
bufp->allocated <<= 1;
---------
SID [3136] -> Line -1

---------
SID [3135] -> Line 4203
#line 4203
return ((reg_errcode_t )15);
---------
SID [3134] -> Line 4203
#line 4203
if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4203
  return ((reg_errcode_t )15);
} else {

}
---------
SID [3133] -> Line 4203
#line 4203
old_buffer___23 = bufp->buffer;
---------
SID [3132] -> Line 4203
#line 4203
while (1) {
#line 4203
  old_buffer___23 = bufp->buffer;
#line 4203
  if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4203
    return ((reg_errcode_t )15);
  } else {

  }
#line 4203
  bufp->allocated <<= 1;
#line 4203
  if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4203
    bufp->allocated = (unsigned long )(1L << 16);
  } else {

  }
#line 4203
  tmp___115 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4203
  bufp->buffer = (unsigned char *)tmp___115;
#line 4203
  if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4203
    return ((reg_errcode_t )12);
  } else {

  }
#line 4203
  if ((unsigned long )old_buffer___23 != (unsigned long )bufp->buffer) {
#line 4203
    b = bufp->buffer + (b - old_buffer___23);
#line 4203
    begalt = bufp->buffer + (begalt - old_buffer___23);
#line 4203
    if (fixup_alt_jump) {
#line 4203
      fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___23);
    } else {

    }
#line 4203
    if (laststart) {
#line 4203
      laststart = bufp->buffer + (laststart - old_buffer___23);
    } else {

    }
#line 4203
    if (pending_exact) {
#line 4203
      pending_exact = bufp->buffer + (pending_exact - old_buffer___23);
    } else {

    }
  } else {

  }
#line 4203
  break;
}
---------
SID [3131] -> Line 4203
#line 4203
break;
---------
SID [3130] -> Line -1

---------
SID [3129] -> Line 4203
#line 4203
if ((unsigned long )((b - bufp->buffer) + 2L) > bufp->allocated) {

} else {
#line 4203
  break;
}
---------
SID [3128] -> Line 4203
#line 4203
while ((unsigned long )((b - bufp->buffer) + 2L) > bufp->allocated) {
#line 4203
  while (1) {
#line 4203
    old_buffer___23 = bufp->buffer;
#line 4203
    if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4203
      return ((reg_errcode_t )15);
    } else {

    }
#line 4203
    bufp->allocated <<= 1;
#line 4203
    if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4203
      bufp->allocated = (unsigned long )(1L << 16);
    } else {

    }
#line 4203
    tmp___115 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4203
    bufp->buffer = (unsigned char *)tmp___115;
#line 4203
    if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4203
      return ((reg_errcode_t )12);
    } else {

    }
#line 4203
    if ((unsigned long )old_buffer___23 != (unsigned long )bufp->buffer) {
#line 4203
      b = bufp->buffer + (b - old_buffer___23);
#line 4203
      begalt = bufp->buffer + (begalt - old_buffer___23);
#line 4203
      if (fixup_alt_jump) {
#line 4203
        fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___23);
      } else {

      }
#line 4203
      if (laststart) {
#line 4203
        laststart = bufp->buffer + (laststart - old_buffer___23);
      } else {

      }
#line 4203
      if (pending_exact) {
#line 4203
        pending_exact = bufp->buffer + (pending_exact - old_buffer___23);
      } else {

      }
    } else {

    }
#line 4203
    break;
  }
}
---------
SID [3127] -> Line 4203
#line 4203
while (1) {
#line 4203
  while ((unsigned long )((b - bufp->buffer) + 2L) > bufp->allocated) {
#line 4203
    while (1) {
#line 4203
      old_buffer___23 = bufp->buffer;
#line 4203
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4203
        return ((reg_errcode_t )15);
      } else {

      }
#line 4203
      bufp->allocated <<= 1;
#line 4203
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4203
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 4203
      tmp___115 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4203
      bufp->buffer = (unsigned char *)tmp___115;
#line 4203
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4203
        return ((reg_errcode_t )12);
      } else {

      }
#line 4203
      if ((unsigned long )old_buffer___23 != (unsigned long )bufp->buffer) {
#line 4203
        b = bufp->buffer + (b - old_buffer___23);
#line 4203
        begalt = bufp->buffer + (begalt - old_buffer___23);
#line 4203
        if (fixup_alt_jump) {
#line 4203
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___23);
        } else {

        }
#line 4203
        if (laststart) {
#line 4203
          laststart = bufp->buffer + (laststart - old_buffer___23);
        } else {

        }
#line 4203
        if (pending_exact) {
#line 4203
          pending_exact = bufp->buffer + (pending_exact - old_buffer___23);
        } else {

        }
      } else {

      }
#line 4203
      break;
    }
  }
#line 4203
  tmp___116 = b;
#line 4203
  b ++;
#line 4203
  *tmp___116 = (unsigned char)7;
#line 4203
  tmp___117 = b;
#line 4203
  b ++;
#line 4203
  *tmp___117 = c1;
#line 4203
  break;
}
---------
SID [3126] -> Line 4202
#line 4202
laststart = b;
---------
SID [3125] -> Line -1

---------
SID [3124] -> Line 4200
#line 4200
goto normal_char;
---------
SID [3123] -> Line 4199
#line 4199
if (tmp___114) {
#line 4200
  goto normal_char;
} else {

}
---------
SID [3122] -> Line 4199
#line 4199
tmp___114 = group_in_compile_stack(compile_stack, (int )c1);
---------
SID [3121] -> Line -1

---------
SID [3120] -> Line 4196
#line 4196
return ((reg_errcode_t )6);
---------
SID [3119] -> Line 4195
#line 4195
if ((regnum_t )c1 > regnum) {
#line 4196
  return ((reg_errcode_t )6);
} else {

}
---------
SID [3118] -> Line 4193
#line 4193
c1 = (unsigned char )((int )c - 48);
---------
SID [3117] -> Line -1

---------
SID [3116] -> Line 4191
#line 4191
goto normal_char;
---------
SID [3115] -> Line 4190
case 57: 
case 56: 
case 55: 
case 54: 
case 53: 
case 52: 
case 51: 
case 50: 
case 49: 
#line 4190
if (syntax & (unsigned int )((((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 4191
  goto normal_char;
} else {

}
---------
SID [3114] -> Line 4186
#line 4186
break;
---------
SID [3113] -> Line 4185
#line 4185
break;
---------
SID [3112] -> Line 4185
#line 4185
*tmp___113 = (unsigned char)11;
---------
SID [3111] -> Line 4185
#line 4185
b ++;
---------
SID [3110] -> Line 4185
#line 4185
tmp___113 = b;
---------
SID [3109] -> Line 4185
#line 4185
break;
---------
SID [3108] -> Line -1

---------
SID [3107] -> Line -1

---------
SID [3106] -> Line 4185
#line 4185
pending_exact = bufp->buffer + (pending_exact - old_buffer___22);
---------
SID [3105] -> Line 4185
#line 4185
if (pending_exact) {
#line 4185
  pending_exact = bufp->buffer + (pending_exact - old_buffer___22);
} else {

}
---------
SID [3104] -> Line -1

---------
SID [3103] -> Line 4185
#line 4185
laststart = bufp->buffer + (laststart - old_buffer___22);
---------
SID [3102] -> Line 4185
#line 4185
if (laststart) {
#line 4185
  laststart = bufp->buffer + (laststart - old_buffer___22);
} else {

}
---------
SID [3101] -> Line -1

---------
SID [3100] -> Line 4185
#line 4185
fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___22);
---------
SID [3099] -> Line 4185
#line 4185
if (fixup_alt_jump) {
#line 4185
  fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___22);
} else {

}
---------
SID [3098] -> Line 4185
#line 4185
begalt = bufp->buffer + (begalt - old_buffer___22);
---------
SID [3097] -> Line 4185
#line 4185
b = bufp->buffer + (b - old_buffer___22);
---------
SID [3096] -> Line 4185
#line 4185
if ((unsigned long )old_buffer___22 != (unsigned long )bufp->buffer) {
#line 4185
  b = bufp->buffer + (b - old_buffer___22);
#line 4185
  begalt = bufp->buffer + (begalt - old_buffer___22);
#line 4185
  if (fixup_alt_jump) {
#line 4185
    fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___22);
  } else {

  }
#line 4185
  if (laststart) {
#line 4185
    laststart = bufp->buffer + (laststart - old_buffer___22);
  } else {

  }
#line 4185
  if (pending_exact) {
#line 4185
    pending_exact = bufp->buffer + (pending_exact - old_buffer___22);
  } else {

  }
} else {

}
---------
SID [3095] -> Line -1

---------
SID [3094] -> Line 4185
#line 4185
return ((reg_errcode_t )12);
---------
SID [3093] -> Line 4185
#line 4185
if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4185
  return ((reg_errcode_t )12);
} else {

}
---------
SID [3092] -> Line 4185
#line 4185
bufp->buffer = (unsigned char *)tmp___112;
---------
SID [3091] -> Line 4185
#line 4185
tmp___112 = realloc((void *)bufp->buffer, bufp->allocated);
---------
SID [3090] -> Line -1

---------
SID [3089] -> Line 4185
#line 4185
bufp->allocated = (unsigned long )(1L << 16);
---------
SID [3088] -> Line 4185
#line 4185
if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4185
  bufp->allocated = (unsigned long )(1L << 16);
} else {

}
---------
SID [3087] -> Line 4185
#line 4185
bufp->allocated <<= 1;
---------
SID [3086] -> Line -1

---------
SID [3085] -> Line 4185
#line 4185
return ((reg_errcode_t )15);
---------
SID [3084] -> Line 4185
#line 4185
if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4185
  return ((reg_errcode_t )15);
} else {

}
---------
SID [3083] -> Line 4185
#line 4185
old_buffer___22 = bufp->buffer;
---------
SID [3082] -> Line 4185
#line 4185
while (1) {
#line 4185
  old_buffer___22 = bufp->buffer;
#line 4185
  if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4185
    return ((reg_errcode_t )15);
  } else {

  }
#line 4185
  bufp->allocated <<= 1;
#line 4185
  if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4185
    bufp->allocated = (unsigned long )(1L << 16);
  } else {

  }
#line 4185
  tmp___112 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4185
  bufp->buffer = (unsigned char *)tmp___112;
#line 4185
  if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4185
    return ((reg_errcode_t )12);
  } else {

  }
#line 4185
  if ((unsigned long )old_buffer___22 != (unsigned long )bufp->buffer) {
#line 4185
    b = bufp->buffer + (b - old_buffer___22);
#line 4185
    begalt = bufp->buffer + (begalt - old_buffer___22);
#line 4185
    if (fixup_alt_jump) {
#line 4185
      fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___22);
    } else {

    }
#line 4185
    if (laststart) {
#line 4185
      laststart = bufp->buffer + (laststart - old_buffer___22);
    } else {

    }
#line 4185
    if (pending_exact) {
#line 4185
      pending_exact = bufp->buffer + (pending_exact - old_buffer___22);
    } else {

    }
  } else {

  }
#line 4185
  break;
}
---------
SID [3081] -> Line 4185
#line 4185
break;
---------
SID [3080] -> Line -1

---------
SID [3079] -> Line 4185
#line 4185
if ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {

} else {
#line 4185
  break;
}
---------
SID [3078] -> Line 4185
#line 4185
while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 4185
  while (1) {
#line 4185
    old_buffer___22 = bufp->buffer;
#line 4185
    if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4185
      return ((reg_errcode_t )15);
    } else {

    }
#line 4185
    bufp->allocated <<= 1;
#line 4185
    if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4185
      bufp->allocated = (unsigned long )(1L << 16);
    } else {

    }
#line 4185
    tmp___112 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4185
    bufp->buffer = (unsigned char *)tmp___112;
#line 4185
    if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4185
      return ((reg_errcode_t )12);
    } else {

    }
#line 4185
    if ((unsigned long )old_buffer___22 != (unsigned long )bufp->buffer) {
#line 4185
      b = bufp->buffer + (b - old_buffer___22);
#line 4185
      begalt = bufp->buffer + (begalt - old_buffer___22);
#line 4185
      if (fixup_alt_jump) {
#line 4185
        fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___22);
      } else {

      }
#line 4185
      if (laststart) {
#line 4185
        laststart = bufp->buffer + (laststart - old_buffer___22);
      } else {

      }
#line 4185
      if (pending_exact) {
#line 4185
        pending_exact = bufp->buffer + (pending_exact - old_buffer___22);
      } else {

      }
    } else {

    }
#line 4185
    break;
  }
}
---------
SID [3077] -> Line 4185
case 39: 
#line 4185
while (1) {
#line 4185
  while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 4185
    while (1) {
#line 4185
      old_buffer___22 = bufp->buffer;
#line 4185
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4185
        return ((reg_errcode_t )15);
      } else {

      }
#line 4185
      bufp->allocated <<= 1;
#line 4185
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4185
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 4185
      tmp___112 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4185
      bufp->buffer = (unsigned char *)tmp___112;
#line 4185
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4185
        return ((reg_errcode_t )12);
      } else {

      }
#line 4185
      if ((unsigned long )old_buffer___22 != (unsigned long )bufp->buffer) {
#line 4185
        b = bufp->buffer + (b - old_buffer___22);
#line 4185
        begalt = bufp->buffer + (begalt - old_buffer___22);
#line 4185
        if (fixup_alt_jump) {
#line 4185
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___22);
        } else {

        }
#line 4185
        if (laststart) {
#line 4185
          laststart = bufp->buffer + (laststart - old_buffer___22);
        } else {

        }
#line 4185
        if (pending_exact) {
#line 4185
          pending_exact = bufp->buffer + (pending_exact - old_buffer___22);
        } else {

        }
      } else {

      }
#line 4185
      break;
    }
  }
#line 4185
  tmp___113 = b;
#line 4185
  b ++;
#line 4185
  *tmp___113 = (unsigned char)11;
#line 4185
  break;
}
---------
SID [3076] -> Line 4182
#line 4182
break;
---------
SID [3075] -> Line 4181
#line 4181
break;
---------
SID [3074] -> Line 4181
#line 4181
*tmp___111 = (unsigned char)10;
---------
SID [3073] -> Line 4181
#line 4181
b ++;
---------
SID [3072] -> Line 4181
#line 4181
tmp___111 = b;
---------
SID [3071] -> Line 4181
#line 4181
break;
---------
SID [3070] -> Line -1

---------
SID [3069] -> Line -1

---------
SID [3068] -> Line 4181
#line 4181
pending_exact = bufp->buffer + (pending_exact - old_buffer___21);
---------
SID [3067] -> Line 4181
#line 4181
if (pending_exact) {
#line 4181
  pending_exact = bufp->buffer + (pending_exact - old_buffer___21);
} else {

}
---------
SID [3066] -> Line -1

---------
SID [3065] -> Line 4181
#line 4181
laststart = bufp->buffer + (laststart - old_buffer___21);
---------
SID [3064] -> Line 4181
#line 4181
if (laststart) {
#line 4181
  laststart = bufp->buffer + (laststart - old_buffer___21);
} else {

}
---------
SID [3063] -> Line -1

---------
SID [3062] -> Line 4181
#line 4181
fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___21);
---------
SID [3061] -> Line 4181
#line 4181
if (fixup_alt_jump) {
#line 4181
  fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___21);
} else {

}
---------
SID [3060] -> Line 4181
#line 4181
begalt = bufp->buffer + (begalt - old_buffer___21);
---------
SID [3059] -> Line 4181
#line 4181
b = bufp->buffer + (b - old_buffer___21);
---------
SID [3058] -> Line 4181
#line 4181
if ((unsigned long )old_buffer___21 != (unsigned long )bufp->buffer) {
#line 4181
  b = bufp->buffer + (b - old_buffer___21);
#line 4181
  begalt = bufp->buffer + (begalt - old_buffer___21);
#line 4181
  if (fixup_alt_jump) {
#line 4181
    fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___21);
  } else {

  }
#line 4181
  if (laststart) {
#line 4181
    laststart = bufp->buffer + (laststart - old_buffer___21);
  } else {

  }
#line 4181
  if (pending_exact) {
#line 4181
    pending_exact = bufp->buffer + (pending_exact - old_buffer___21);
  } else {

  }
} else {

}
---------
SID [3057] -> Line -1

---------
SID [3056] -> Line 4181
#line 4181
return ((reg_errcode_t )12);
---------
SID [3055] -> Line 4181
#line 4181
if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4181
  return ((reg_errcode_t )12);
} else {

}
---------
SID [3054] -> Line 4181
#line 4181
bufp->buffer = (unsigned char *)tmp___110;
---------
SID [3053] -> Line 4181
#line 4181
tmp___110 = realloc((void *)bufp->buffer, bufp->allocated);
---------
SID [3052] -> Line -1

---------
SID [3051] -> Line 4181
#line 4181
bufp->allocated = (unsigned long )(1L << 16);
---------
SID [3050] -> Line 4181
#line 4181
if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4181
  bufp->allocated = (unsigned long )(1L << 16);
} else {

}
---------
SID [3049] -> Line 4181
#line 4181
bufp->allocated <<= 1;
---------
SID [3048] -> Line -1

---------
SID [3047] -> Line 4181
#line 4181
return ((reg_errcode_t )15);
---------
SID [3046] -> Line 4181
#line 4181
if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4181
  return ((reg_errcode_t )15);
} else {

}
---------
SID [3045] -> Line 4181
#line 4181
old_buffer___21 = bufp->buffer;
---------
SID [3044] -> Line 4181
#line 4181
while (1) {
#line 4181
  old_buffer___21 = bufp->buffer;
#line 4181
  if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4181
    return ((reg_errcode_t )15);
  } else {

  }
#line 4181
  bufp->allocated <<= 1;
#line 4181
  if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4181
    bufp->allocated = (unsigned long )(1L << 16);
  } else {

  }
#line 4181
  tmp___110 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4181
  bufp->buffer = (unsigned char *)tmp___110;
#line 4181
  if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4181
    return ((reg_errcode_t )12);
  } else {

  }
#line 4181
  if ((unsigned long )old_buffer___21 != (unsigned long )bufp->buffer) {
#line 4181
    b = bufp->buffer + (b - old_buffer___21);
#line 4181
    begalt = bufp->buffer + (begalt - old_buffer___21);
#line 4181
    if (fixup_alt_jump) {
#line 4181
      fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___21);
    } else {

    }
#line 4181
    if (laststart) {
#line 4181
      laststart = bufp->buffer + (laststart - old_buffer___21);
    } else {

    }
#line 4181
    if (pending_exact) {
#line 4181
      pending_exact = bufp->buffer + (pending_exact - old_buffer___21);
    } else {

    }
  } else {

  }
#line 4181
  break;
}
---------
SID [3043] -> Line 4181
#line 4181
break;
---------
SID [3042] -> Line -1

---------
SID [3041] -> Line 4181
#line 4181
if ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {

} else {
#line 4181
  break;
}
---------
SID [3040] -> Line 4181
#line 4181
while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 4181
  while (1) {
#line 4181
    old_buffer___21 = bufp->buffer;
#line 4181
    if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4181
      return ((reg_errcode_t )15);
    } else {

    }
#line 4181
    bufp->allocated <<= 1;
#line 4181
    if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4181
      bufp->allocated = (unsigned long )(1L << 16);
    } else {

    }
#line 4181
    tmp___110 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4181
    bufp->buffer = (unsigned char *)tmp___110;
#line 4181
    if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4181
      return ((reg_errcode_t )12);
    } else {

    }
#line 4181
    if ((unsigned long )old_buffer___21 != (unsigned long )bufp->buffer) {
#line 4181
      b = bufp->buffer + (b - old_buffer___21);
#line 4181
      begalt = bufp->buffer + (begalt - old_buffer___21);
#line 4181
      if (fixup_alt_jump) {
#line 4181
        fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___21);
      } else {

      }
#line 4181
      if (laststart) {
#line 4181
        laststart = bufp->buffer + (laststart - old_buffer___21);
      } else {

      }
#line 4181
      if (pending_exact) {
#line 4181
        pending_exact = bufp->buffer + (pending_exact - old_buffer___21);
      } else {

      }
    } else {

    }
#line 4181
    break;
  }
}
---------
SID [3039] -> Line 4181
case 96: 
#line 4181
while (1) {
#line 4181
  while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 4181
    while (1) {
#line 4181
      old_buffer___21 = bufp->buffer;
#line 4181
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4181
        return ((reg_errcode_t )15);
      } else {

      }
#line 4181
      bufp->allocated <<= 1;
#line 4181
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4181
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 4181
      tmp___110 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4181
      bufp->buffer = (unsigned char *)tmp___110;
#line 4181
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4181
        return ((reg_errcode_t )12);
      } else {

      }
#line 4181
      if ((unsigned long )old_buffer___21 != (unsigned long )bufp->buffer) {
#line 4181
        b = bufp->buffer + (b - old_buffer___21);
#line 4181
        begalt = bufp->buffer + (begalt - old_buffer___21);
#line 4181
        if (fixup_alt_jump) {
#line 4181
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___21);
        } else {

        }
#line 4181
        if (laststart) {
#line 4181
          laststart = bufp->buffer + (laststart - old_buffer___21);
        } else {

        }
#line 4181
        if (pending_exact) {
#line 4181
          pending_exact = bufp->buffer + (pending_exact - old_buffer___21);
        } else {

        }
      } else {

      }
#line 4181
      break;
    }
  }
#line 4181
  tmp___111 = b;
#line 4181
  b ++;
#line 4181
  *tmp___111 = (unsigned char)10;
#line 4181
  break;
}
---------
SID [3038] -> Line 4178
#line 4178
break;
---------
SID [3037] -> Line 4177
#line 4177
break;
---------
SID [3036] -> Line 4177
#line 4177
*tmp___109 = (unsigned char)28;
---------
SID [3035] -> Line 4177
#line 4177
b ++;
---------
SID [3034] -> Line 4177
#line 4177
tmp___109 = b;
---------
SID [3033] -> Line 4177
#line 4177
break;
---------
SID [3032] -> Line -1

---------
SID [3031] -> Line -1

---------
SID [3030] -> Line 4177
#line 4177
pending_exact = bufp->buffer + (pending_exact - old_buffer___20);
---------
SID [3029] -> Line 4177
#line 4177
if (pending_exact) {
#line 4177
  pending_exact = bufp->buffer + (pending_exact - old_buffer___20);
} else {

}
---------
SID [3028] -> Line -1

---------
SID [3027] -> Line 4177
#line 4177
laststart = bufp->buffer + (laststart - old_buffer___20);
---------
SID [3026] -> Line 4177
#line 4177
if (laststart) {
#line 4177
  laststart = bufp->buffer + (laststart - old_buffer___20);
} else {

}
---------
SID [3025] -> Line -1

---------
SID [3024] -> Line 4177
#line 4177
fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___20);
---------
SID [3023] -> Line 4177
#line 4177
if (fixup_alt_jump) {
#line 4177
  fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___20);
} else {

}
---------
SID [3022] -> Line 4177
#line 4177
begalt = bufp->buffer + (begalt - old_buffer___20);
---------
SID [3021] -> Line 4177
#line 4177
b = bufp->buffer + (b - old_buffer___20);
---------
SID [3020] -> Line 4177
#line 4177
if ((unsigned long )old_buffer___20 != (unsigned long )bufp->buffer) {
#line 4177
  b = bufp->buffer + (b - old_buffer___20);
#line 4177
  begalt = bufp->buffer + (begalt - old_buffer___20);
#line 4177
  if (fixup_alt_jump) {
#line 4177
    fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___20);
  } else {

  }
#line 4177
  if (laststart) {
#line 4177
    laststart = bufp->buffer + (laststart - old_buffer___20);
  } else {

  }
#line 4177
  if (pending_exact) {
#line 4177
    pending_exact = bufp->buffer + (pending_exact - old_buffer___20);
  } else {

  }
} else {

}
---------
SID [3019] -> Line -1

---------
SID [3018] -> Line 4177
#line 4177
return ((reg_errcode_t )12);
---------
SID [3017] -> Line 4177
#line 4177
if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4177
  return ((reg_errcode_t )12);
} else {

}
---------
SID [3016] -> Line 4177
#line 4177
bufp->buffer = (unsigned char *)tmp___108;
---------
SID [3015] -> Line 4177
#line 4177
tmp___108 = realloc((void *)bufp->buffer, bufp->allocated);
---------
SID [3014] -> Line -1

---------
SID [3013] -> Line 4177
#line 4177
bufp->allocated = (unsigned long )(1L << 16);
---------
SID [3012] -> Line 4177
#line 4177
if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4177
  bufp->allocated = (unsigned long )(1L << 16);
} else {

}
---------
SID [3011] -> Line 4177
#line 4177
bufp->allocated <<= 1;
---------
SID [3010] -> Line -1

---------
SID [3009] -> Line 4177
#line 4177
return ((reg_errcode_t )15);
---------
SID [3008] -> Line 4177
#line 4177
if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4177
  return ((reg_errcode_t )15);
} else {

}
---------
SID [3007] -> Line 4177
#line 4177
old_buffer___20 = bufp->buffer;
---------
SID [3006] -> Line 4177
#line 4177
while (1) {
#line 4177
  old_buffer___20 = bufp->buffer;
#line 4177
  if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4177
    return ((reg_errcode_t )15);
  } else {

  }
#line 4177
  bufp->allocated <<= 1;
#line 4177
  if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4177
    bufp->allocated = (unsigned long )(1L << 16);
  } else {

  }
#line 4177
  tmp___108 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4177
  bufp->buffer = (unsigned char *)tmp___108;
#line 4177
  if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4177
    return ((reg_errcode_t )12);
  } else {

  }
#line 4177
  if ((unsigned long )old_buffer___20 != (unsigned long )bufp->buffer) {
#line 4177
    b = bufp->buffer + (b - old_buffer___20);
#line 4177
    begalt = bufp->buffer + (begalt - old_buffer___20);
#line 4177
    if (fixup_alt_jump) {
#line 4177
      fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___20);
    } else {

    }
#line 4177
    if (laststart) {
#line 4177
      laststart = bufp->buffer + (laststart - old_buffer___20);
    } else {

    }
#line 4177
    if (pending_exact) {
#line 4177
      pending_exact = bufp->buffer + (pending_exact - old_buffer___20);
    } else {

    }
  } else {

  }
#line 4177
  break;
}
---------
SID [3005] -> Line 4177
#line 4177
break;
---------
SID [3004] -> Line -1

---------
SID [3003] -> Line 4177
#line 4177
if ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {

} else {
#line 4177
  break;
}
---------
SID [3002] -> Line 4177
#line 4177
while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 4177
  while (1) {
#line 4177
    old_buffer___20 = bufp->buffer;
#line 4177
    if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4177
      return ((reg_errcode_t )15);
    } else {

    }
#line 4177
    bufp->allocated <<= 1;
#line 4177
    if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4177
      bufp->allocated = (unsigned long )(1L << 16);
    } else {

    }
#line 4177
    tmp___108 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4177
    bufp->buffer = (unsigned char *)tmp___108;
#line 4177
    if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4177
      return ((reg_errcode_t )12);
    } else {

    }
#line 4177
    if ((unsigned long )old_buffer___20 != (unsigned long )bufp->buffer) {
#line 4177
      b = bufp->buffer + (b - old_buffer___20);
#line 4177
      begalt = bufp->buffer + (begalt - old_buffer___20);
#line 4177
      if (fixup_alt_jump) {
#line 4177
        fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___20);
      } else {

      }
#line 4177
      if (laststart) {
#line 4177
        laststart = bufp->buffer + (laststart - old_buffer___20);
      } else {

      }
#line 4177
      if (pending_exact) {
#line 4177
        pending_exact = bufp->buffer + (pending_exact - old_buffer___20);
      } else {

      }
    } else {

    }
#line 4177
    break;
  }
}
---------
SID [3001] -> Line 4177
case 66: 
#line 4177
while (1) {
#line 4177
  while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 4177
    while (1) {
#line 4177
      old_buffer___20 = bufp->buffer;
#line 4177
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4177
        return ((reg_errcode_t )15);
      } else {

      }
#line 4177
      bufp->allocated <<= 1;
#line 4177
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4177
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 4177
      tmp___108 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4177
      bufp->buffer = (unsigned char *)tmp___108;
#line 4177
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4177
        return ((reg_errcode_t )12);
      } else {

      }
#line 4177
      if ((unsigned long )old_buffer___20 != (unsigned long )bufp->buffer) {
#line 4177
        b = bufp->buffer + (b - old_buffer___20);
#line 4177
        begalt = bufp->buffer + (begalt - old_buffer___20);
#line 4177
        if (fixup_alt_jump) {
#line 4177
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___20);
        } else {

        }
#line 4177
        if (laststart) {
#line 4177
          laststart = bufp->buffer + (laststart - old_buffer___20);
        } else {

        }
#line 4177
        if (pending_exact) {
#line 4177
          pending_exact = bufp->buffer + (pending_exact - old_buffer___20);
        } else {

        }
      } else {

      }
#line 4177
      break;
    }
  }
#line 4177
  tmp___109 = b;
#line 4177
  b ++;
#line 4177
  *tmp___109 = (unsigned char)28;
#line 4177
  break;
}
---------
SID [3000] -> Line 4174
#line 4174
break;
---------
SID [2999] -> Line 4173
#line 4173
break;
---------
SID [2998] -> Line 4173
#line 4173
*tmp___107 = (unsigned char)27;
---------
SID [2997] -> Line 4173
#line 4173
b ++;
---------
SID [2996] -> Line 4173
#line 4173
tmp___107 = b;
---------
SID [2995] -> Line 4173
#line 4173
break;
---------
SID [2994] -> Line -1

---------
SID [2993] -> Line -1

---------
SID [2992] -> Line 4173
#line 4173
pending_exact = bufp->buffer + (pending_exact - old_buffer___19);
---------
SID [2991] -> Line 4173
#line 4173
if (pending_exact) {
#line 4173
  pending_exact = bufp->buffer + (pending_exact - old_buffer___19);
} else {

}
---------
SID [2990] -> Line -1

---------
SID [2989] -> Line 4173
#line 4173
laststart = bufp->buffer + (laststart - old_buffer___19);
---------
SID [2988] -> Line 4173
#line 4173
if (laststart) {
#line 4173
  laststart = bufp->buffer + (laststart - old_buffer___19);
} else {

}
---------
SID [2987] -> Line -1

---------
SID [2986] -> Line 4173
#line 4173
fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___19);
---------
SID [2985] -> Line 4173
#line 4173
if (fixup_alt_jump) {
#line 4173
  fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___19);
} else {

}
---------
SID [2984] -> Line 4173
#line 4173
begalt = bufp->buffer + (begalt - old_buffer___19);
---------
SID [2983] -> Line 4173
#line 4173
b = bufp->buffer + (b - old_buffer___19);
---------
SID [2982] -> Line 4173
#line 4173
if ((unsigned long )old_buffer___19 != (unsigned long )bufp->buffer) {
#line 4173
  b = bufp->buffer + (b - old_buffer___19);
#line 4173
  begalt = bufp->buffer + (begalt - old_buffer___19);
#line 4173
  if (fixup_alt_jump) {
#line 4173
    fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___19);
  } else {

  }
#line 4173
  if (laststart) {
#line 4173
    laststart = bufp->buffer + (laststart - old_buffer___19);
  } else {

  }
#line 4173
  if (pending_exact) {
#line 4173
    pending_exact = bufp->buffer + (pending_exact - old_buffer___19);
  } else {

  }
} else {

}
---------
SID [2981] -> Line -1

---------
SID [2980] -> Line 4173
#line 4173
return ((reg_errcode_t )12);
---------
SID [2979] -> Line 4173
#line 4173
if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4173
  return ((reg_errcode_t )12);
} else {

}
---------
SID [2978] -> Line 4173
#line 4173
bufp->buffer = (unsigned char *)tmp___106;
---------
SID [2977] -> Line 4173
#line 4173
tmp___106 = realloc((void *)bufp->buffer, bufp->allocated);
---------
SID [2976] -> Line -1

---------
SID [2975] -> Line 4173
#line 4173
bufp->allocated = (unsigned long )(1L << 16);
---------
SID [2974] -> Line 4173
#line 4173
if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4173
  bufp->allocated = (unsigned long )(1L << 16);
} else {

}
---------
SID [2973] -> Line 4173
#line 4173
bufp->allocated <<= 1;
---------
SID [2972] -> Line -1

---------
SID [2971] -> Line 4173
#line 4173
return ((reg_errcode_t )15);
---------
SID [2970] -> Line 4173
#line 4173
if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4173
  return ((reg_errcode_t )15);
} else {

}
---------
SID [2969] -> Line 4173
#line 4173
old_buffer___19 = bufp->buffer;
---------
SID [2968] -> Line 4173
#line 4173
while (1) {
#line 4173
  old_buffer___19 = bufp->buffer;
#line 4173
  if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4173
    return ((reg_errcode_t )15);
  } else {

  }
#line 4173
  bufp->allocated <<= 1;
#line 4173
  if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4173
    bufp->allocated = (unsigned long )(1L << 16);
  } else {

  }
#line 4173
  tmp___106 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4173
  bufp->buffer = (unsigned char *)tmp___106;
#line 4173
  if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4173
    return ((reg_errcode_t )12);
  } else {

  }
#line 4173
  if ((unsigned long )old_buffer___19 != (unsigned long )bufp->buffer) {
#line 4173
    b = bufp->buffer + (b - old_buffer___19);
#line 4173
    begalt = bufp->buffer + (begalt - old_buffer___19);
#line 4173
    if (fixup_alt_jump) {
#line 4173
      fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___19);
    } else {

    }
#line 4173
    if (laststart) {
#line 4173
      laststart = bufp->buffer + (laststart - old_buffer___19);
    } else {

    }
#line 4173
    if (pending_exact) {
#line 4173
      pending_exact = bufp->buffer + (pending_exact - old_buffer___19);
    } else {

    }
  } else {

  }
#line 4173
  break;
}
---------
SID [2967] -> Line 4173
#line 4173
break;
---------
SID [2966] -> Line -1

---------
SID [2965] -> Line 4173
#line 4173
if ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {

} else {
#line 4173
  break;
}
---------
SID [2964] -> Line 4173
#line 4173
while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 4173
  while (1) {
#line 4173
    old_buffer___19 = bufp->buffer;
#line 4173
    if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4173
      return ((reg_errcode_t )15);
    } else {

    }
#line 4173
    bufp->allocated <<= 1;
#line 4173
    if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4173
      bufp->allocated = (unsigned long )(1L << 16);
    } else {

    }
#line 4173
    tmp___106 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4173
    bufp->buffer = (unsigned char *)tmp___106;
#line 4173
    if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4173
      return ((reg_errcode_t )12);
    } else {

    }
#line 4173
    if ((unsigned long )old_buffer___19 != (unsigned long )bufp->buffer) {
#line 4173
      b = bufp->buffer + (b - old_buffer___19);
#line 4173
      begalt = bufp->buffer + (begalt - old_buffer___19);
#line 4173
      if (fixup_alt_jump) {
#line 4173
        fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___19);
      } else {

      }
#line 4173
      if (laststart) {
#line 4173
        laststart = bufp->buffer + (laststart - old_buffer___19);
      } else {

      }
#line 4173
      if (pending_exact) {
#line 4173
        pending_exact = bufp->buffer + (pending_exact - old_buffer___19);
      } else {

      }
    } else {

    }
#line 4173
    break;
  }
}
---------
SID [2963] -> Line 4173
case 98: 
#line 4173
while (1) {
#line 4173
  while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 4173
    while (1) {
#line 4173
      old_buffer___19 = bufp->buffer;
#line 4173
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4173
        return ((reg_errcode_t )15);
      } else {

      }
#line 4173
      bufp->allocated <<= 1;
#line 4173
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4173
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 4173
      tmp___106 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4173
      bufp->buffer = (unsigned char *)tmp___106;
#line 4173
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4173
        return ((reg_errcode_t )12);
      } else {

      }
#line 4173
      if ((unsigned long )old_buffer___19 != (unsigned long )bufp->buffer) {
#line 4173
        b = bufp->buffer + (b - old_buffer___19);
#line 4173
        begalt = bufp->buffer + (begalt - old_buffer___19);
#line 4173
        if (fixup_alt_jump) {
#line 4173
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___19);
        } else {

        }
#line 4173
        if (laststart) {
#line 4173
          laststart = bufp->buffer + (laststart - old_buffer___19);
        } else {

        }
#line 4173
        if (pending_exact) {
#line 4173
          pending_exact = bufp->buffer + (pending_exact - old_buffer___19);
        } else {

        }
      } else {

      }
#line 4173
      break;
    }
  }
#line 4173
  tmp___107 = b;
#line 4173
  b ++;
#line 4173
  *tmp___107 = (unsigned char)27;
#line 4173
  break;
}
---------
SID [2962] -> Line 4170
#line 4170
break;
---------
SID [2961] -> Line 4169
#line 4169
break;
---------
SID [2960] -> Line 4169
#line 4169
*tmp___105 = (unsigned char)26;
---------
SID [2959] -> Line 4169
#line 4169
b ++;
---------
SID [2958] -> Line 4169
#line 4169
tmp___105 = b;
---------
SID [2957] -> Line 4169
#line 4169
break;
---------
SID [2956] -> Line -1

---------
SID [2955] -> Line -1

---------
SID [2954] -> Line 4169
#line 4169
pending_exact = bufp->buffer + (pending_exact - old_buffer___18);
---------
SID [2953] -> Line 4169
#line 4169
if (pending_exact) {
#line 4169
  pending_exact = bufp->buffer + (pending_exact - old_buffer___18);
} else {

}
---------
SID [2952] -> Line -1

---------
SID [2951] -> Line 4169
#line 4169
laststart = bufp->buffer + (laststart - old_buffer___18);
---------
SID [2950] -> Line 4169
#line 4169
if (laststart) {
#line 4169
  laststart = bufp->buffer + (laststart - old_buffer___18);
} else {

}
---------
SID [2949] -> Line -1

---------
SID [2948] -> Line 4169
#line 4169
fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___18);
---------
SID [2947] -> Line 4169
#line 4169
if (fixup_alt_jump) {
#line 4169
  fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___18);
} else {

}
---------
SID [2946] -> Line 4169
#line 4169
begalt = bufp->buffer + (begalt - old_buffer___18);
---------
SID [2945] -> Line 4169
#line 4169
b = bufp->buffer + (b - old_buffer___18);
---------
SID [2944] -> Line 4169
#line 4169
if ((unsigned long )old_buffer___18 != (unsigned long )bufp->buffer) {
#line 4169
  b = bufp->buffer + (b - old_buffer___18);
#line 4169
  begalt = bufp->buffer + (begalt - old_buffer___18);
#line 4169
  if (fixup_alt_jump) {
#line 4169
    fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___18);
  } else {

  }
#line 4169
  if (laststart) {
#line 4169
    laststart = bufp->buffer + (laststart - old_buffer___18);
  } else {

  }
#line 4169
  if (pending_exact) {
#line 4169
    pending_exact = bufp->buffer + (pending_exact - old_buffer___18);
  } else {

  }
} else {

}
---------
SID [2943] -> Line -1

---------
SID [2942] -> Line 4169
#line 4169
return ((reg_errcode_t )12);
---------
SID [2941] -> Line 4169
#line 4169
if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4169
  return ((reg_errcode_t )12);
} else {

}
---------
SID [2940] -> Line 4169
#line 4169
bufp->buffer = (unsigned char *)tmp___104;
---------
SID [2939] -> Line 4169
#line 4169
tmp___104 = realloc((void *)bufp->buffer, bufp->allocated);
---------
SID [2938] -> Line -1

---------
SID [2937] -> Line 4169
#line 4169
bufp->allocated = (unsigned long )(1L << 16);
---------
SID [2936] -> Line 4169
#line 4169
if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4169
  bufp->allocated = (unsigned long )(1L << 16);
} else {

}
---------
SID [2935] -> Line 4169
#line 4169
bufp->allocated <<= 1;
---------
SID [2934] -> Line -1

---------
SID [2933] -> Line 4169
#line 4169
return ((reg_errcode_t )15);
---------
SID [2932] -> Line 4169
#line 4169
if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4169
  return ((reg_errcode_t )15);
} else {

}
---------
SID [2931] -> Line 4169
#line 4169
old_buffer___18 = bufp->buffer;
---------
SID [2930] -> Line 4169
#line 4169
while (1) {
#line 4169
  old_buffer___18 = bufp->buffer;
#line 4169
  if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4169
    return ((reg_errcode_t )15);
  } else {

  }
#line 4169
  bufp->allocated <<= 1;
#line 4169
  if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4169
    bufp->allocated = (unsigned long )(1L << 16);
  } else {

  }
#line 4169
  tmp___104 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4169
  bufp->buffer = (unsigned char *)tmp___104;
#line 4169
  if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4169
    return ((reg_errcode_t )12);
  } else {

  }
#line 4169
  if ((unsigned long )old_buffer___18 != (unsigned long )bufp->buffer) {
#line 4169
    b = bufp->buffer + (b - old_buffer___18);
#line 4169
    begalt = bufp->buffer + (begalt - old_buffer___18);
#line 4169
    if (fixup_alt_jump) {
#line 4169
      fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___18);
    } else {

    }
#line 4169
    if (laststart) {
#line 4169
      laststart = bufp->buffer + (laststart - old_buffer___18);
    } else {

    }
#line 4169
    if (pending_exact) {
#line 4169
      pending_exact = bufp->buffer + (pending_exact - old_buffer___18);
    } else {

    }
  } else {

  }
#line 4169
  break;
}
---------
SID [2929] -> Line 4169
#line 4169
break;
---------
SID [2928] -> Line -1

---------
SID [2927] -> Line 4169
#line 4169
if ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {

} else {
#line 4169
  break;
}
---------
SID [2926] -> Line 4169
#line 4169
while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 4169
  while (1) {
#line 4169
    old_buffer___18 = bufp->buffer;
#line 4169
    if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4169
      return ((reg_errcode_t )15);
    } else {

    }
#line 4169
    bufp->allocated <<= 1;
#line 4169
    if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4169
      bufp->allocated = (unsigned long )(1L << 16);
    } else {

    }
#line 4169
    tmp___104 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4169
    bufp->buffer = (unsigned char *)tmp___104;
#line 4169
    if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4169
      return ((reg_errcode_t )12);
    } else {

    }
#line 4169
    if ((unsigned long )old_buffer___18 != (unsigned long )bufp->buffer) {
#line 4169
      b = bufp->buffer + (b - old_buffer___18);
#line 4169
      begalt = bufp->buffer + (begalt - old_buffer___18);
#line 4169
      if (fixup_alt_jump) {
#line 4169
        fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___18);
      } else {

      }
#line 4169
      if (laststart) {
#line 4169
        laststart = bufp->buffer + (laststart - old_buffer___18);
      } else {

      }
#line 4169
      if (pending_exact) {
#line 4169
        pending_exact = bufp->buffer + (pending_exact - old_buffer___18);
      } else {

      }
    } else {

    }
#line 4169
    break;
  }
}
---------
SID [2925] -> Line 4169
case 62: 
#line 4169
while (1) {
#line 4169
  while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 4169
    while (1) {
#line 4169
      old_buffer___18 = bufp->buffer;
#line 4169
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4169
        return ((reg_errcode_t )15);
      } else {

      }
#line 4169
      bufp->allocated <<= 1;
#line 4169
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4169
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 4169
      tmp___104 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4169
      bufp->buffer = (unsigned char *)tmp___104;
#line 4169
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4169
        return ((reg_errcode_t )12);
      } else {

      }
#line 4169
      if ((unsigned long )old_buffer___18 != (unsigned long )bufp->buffer) {
#line 4169
        b = bufp->buffer + (b - old_buffer___18);
#line 4169
        begalt = bufp->buffer + (begalt - old_buffer___18);
#line 4169
        if (fixup_alt_jump) {
#line 4169
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___18);
        } else {

        }
#line 4169
        if (laststart) {
#line 4169
          laststart = bufp->buffer + (laststart - old_buffer___18);
        } else {

        }
#line 4169
        if (pending_exact) {
#line 4169
          pending_exact = bufp->buffer + (pending_exact - old_buffer___18);
        } else {

        }
      } else {

      }
#line 4169
      break;
    }
  }
#line 4169
  tmp___105 = b;
#line 4169
  b ++;
#line 4169
  *tmp___105 = (unsigned char)26;
#line 4169
  break;
}
---------
SID [2924] -> Line 4166
#line 4166
break;
---------
SID [2923] -> Line 4165
#line 4165
break;
---------
SID [2922] -> Line 4165
#line 4165
*tmp___103 = (unsigned char)25;
---------
SID [2921] -> Line 4165
#line 4165
b ++;
---------
SID [2920] -> Line 4165
#line 4165
tmp___103 = b;
---------
SID [2919] -> Line 4165
#line 4165
break;
---------
SID [2918] -> Line -1

---------
SID [2917] -> Line -1

---------
SID [2916] -> Line 4165
#line 4165
pending_exact = bufp->buffer + (pending_exact - old_buffer___17);
---------
SID [2915] -> Line 4165
#line 4165
if (pending_exact) {
#line 4165
  pending_exact = bufp->buffer + (pending_exact - old_buffer___17);
} else {

}
---------
SID [2914] -> Line -1

---------
SID [2913] -> Line 4165
#line 4165
laststart = bufp->buffer + (laststart - old_buffer___17);
---------
SID [2912] -> Line 4165
#line 4165
if (laststart) {
#line 4165
  laststart = bufp->buffer + (laststart - old_buffer___17);
} else {

}
---------
SID [2911] -> Line -1

---------
SID [2910] -> Line 4165
#line 4165
fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___17);
---------
SID [2909] -> Line 4165
#line 4165
if (fixup_alt_jump) {
#line 4165
  fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___17);
} else {

}
---------
SID [2908] -> Line 4165
#line 4165
begalt = bufp->buffer + (begalt - old_buffer___17);
---------
SID [2907] -> Line 4165
#line 4165
b = bufp->buffer + (b - old_buffer___17);
---------
SID [2906] -> Line 4165
#line 4165
if ((unsigned long )old_buffer___17 != (unsigned long )bufp->buffer) {
#line 4165
  b = bufp->buffer + (b - old_buffer___17);
#line 4165
  begalt = bufp->buffer + (begalt - old_buffer___17);
#line 4165
  if (fixup_alt_jump) {
#line 4165
    fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___17);
  } else {

  }
#line 4165
  if (laststart) {
#line 4165
    laststart = bufp->buffer + (laststart - old_buffer___17);
  } else {

  }
#line 4165
  if (pending_exact) {
#line 4165
    pending_exact = bufp->buffer + (pending_exact - old_buffer___17);
  } else {

  }
} else {

}
---------
SID [2905] -> Line -1

---------
SID [2904] -> Line 4165
#line 4165
return ((reg_errcode_t )12);
---------
SID [2903] -> Line 4165
#line 4165
if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4165
  return ((reg_errcode_t )12);
} else {

}
---------
SID [2902] -> Line 4165
#line 4165
bufp->buffer = (unsigned char *)tmp___102;
---------
SID [2901] -> Line 4165
#line 4165
tmp___102 = realloc((void *)bufp->buffer, bufp->allocated);
---------
SID [2900] -> Line -1

---------
SID [2899] -> Line 4165
#line 4165
bufp->allocated = (unsigned long )(1L << 16);
---------
SID [2898] -> Line 4165
#line 4165
if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4165
  bufp->allocated = (unsigned long )(1L << 16);
} else {

}
---------
SID [2897] -> Line 4165
#line 4165
bufp->allocated <<= 1;
---------
SID [2896] -> Line -1

---------
SID [2895] -> Line 4165
#line 4165
return ((reg_errcode_t )15);
---------
SID [2894] -> Line 4165
#line 4165
if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4165
  return ((reg_errcode_t )15);
} else {

}
---------
SID [2893] -> Line 4165
#line 4165
old_buffer___17 = bufp->buffer;
---------
SID [2892] -> Line 4165
#line 4165
while (1) {
#line 4165
  old_buffer___17 = bufp->buffer;
#line 4165
  if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4165
    return ((reg_errcode_t )15);
  } else {

  }
#line 4165
  bufp->allocated <<= 1;
#line 4165
  if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4165
    bufp->allocated = (unsigned long )(1L << 16);
  } else {

  }
#line 4165
  tmp___102 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4165
  bufp->buffer = (unsigned char *)tmp___102;
#line 4165
  if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4165
    return ((reg_errcode_t )12);
  } else {

  }
#line 4165
  if ((unsigned long )old_buffer___17 != (unsigned long )bufp->buffer) {
#line 4165
    b = bufp->buffer + (b - old_buffer___17);
#line 4165
    begalt = bufp->buffer + (begalt - old_buffer___17);
#line 4165
    if (fixup_alt_jump) {
#line 4165
      fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___17);
    } else {

    }
#line 4165
    if (laststart) {
#line 4165
      laststart = bufp->buffer + (laststart - old_buffer___17);
    } else {

    }
#line 4165
    if (pending_exact) {
#line 4165
      pending_exact = bufp->buffer + (pending_exact - old_buffer___17);
    } else {

    }
  } else {

  }
#line 4165
  break;
}
---------
SID [2891] -> Line 4165
#line 4165
break;
---------
SID [2890] -> Line -1

---------
SID [2889] -> Line 4165
#line 4165
if ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {

} else {
#line 4165
  break;
}
---------
SID [2888] -> Line 4165
#line 4165
while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 4165
  while (1) {
#line 4165
    old_buffer___17 = bufp->buffer;
#line 4165
    if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4165
      return ((reg_errcode_t )15);
    } else {

    }
#line 4165
    bufp->allocated <<= 1;
#line 4165
    if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4165
      bufp->allocated = (unsigned long )(1L << 16);
    } else {

    }
#line 4165
    tmp___102 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4165
    bufp->buffer = (unsigned char *)tmp___102;
#line 4165
    if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4165
      return ((reg_errcode_t )12);
    } else {

    }
#line 4165
    if ((unsigned long )old_buffer___17 != (unsigned long )bufp->buffer) {
#line 4165
      b = bufp->buffer + (b - old_buffer___17);
#line 4165
      begalt = bufp->buffer + (begalt - old_buffer___17);
#line 4165
      if (fixup_alt_jump) {
#line 4165
        fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___17);
      } else {

      }
#line 4165
      if (laststart) {
#line 4165
        laststart = bufp->buffer + (laststart - old_buffer___17);
      } else {

      }
#line 4165
      if (pending_exact) {
#line 4165
        pending_exact = bufp->buffer + (pending_exact - old_buffer___17);
      } else {

      }
    } else {

    }
#line 4165
    break;
  }
}
---------
SID [2887] -> Line 4165
case 60: 
#line 4165
while (1) {
#line 4165
  while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 4165
    while (1) {
#line 4165
      old_buffer___17 = bufp->buffer;
#line 4165
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4165
        return ((reg_errcode_t )15);
      } else {

      }
#line 4165
      bufp->allocated <<= 1;
#line 4165
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4165
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 4165
      tmp___102 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4165
      bufp->buffer = (unsigned char *)tmp___102;
#line 4165
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4165
        return ((reg_errcode_t )12);
      } else {

      }
#line 4165
      if ((unsigned long )old_buffer___17 != (unsigned long )bufp->buffer) {
#line 4165
        b = bufp->buffer + (b - old_buffer___17);
#line 4165
        begalt = bufp->buffer + (begalt - old_buffer___17);
#line 4165
        if (fixup_alt_jump) {
#line 4165
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___17);
        } else {

        }
#line 4165
        if (laststart) {
#line 4165
          laststart = bufp->buffer + (laststart - old_buffer___17);
        } else {

        }
#line 4165
        if (pending_exact) {
#line 4165
          pending_exact = bufp->buffer + (pending_exact - old_buffer___17);
        } else {

        }
      } else {

      }
#line 4165
      break;
    }
  }
#line 4165
  tmp___103 = b;
#line 4165
  b ++;
#line 4165
  *tmp___103 = (unsigned char)25;
#line 4165
  break;
}
---------
SID [2886] -> Line 4161
#line 4161
break;
---------
SID [2885] -> Line 4160
#line 4160
break;
---------
SID [2884] -> Line 4160
#line 4160
*tmp___101 = (unsigned char)24;
---------
SID [2883] -> Line 4160
#line 4160
b ++;
---------
SID [2882] -> Line 4160
#line 4160
tmp___101 = b;
---------
SID [2881] -> Line 4160
#line 4160
break;
---------
SID [2880] -> Line -1

---------
SID [2879] -> Line -1

---------
SID [2878] -> Line 4160
#line 4160
pending_exact = bufp->buffer + (pending_exact - old_buffer___16);
---------
SID [2877] -> Line 4160
#line 4160
if (pending_exact) {
#line 4160
  pending_exact = bufp->buffer + (pending_exact - old_buffer___16);
} else {

}
---------
SID [2876] -> Line -1

---------
SID [2875] -> Line 4160
#line 4160
laststart = bufp->buffer + (laststart - old_buffer___16);
---------
SID [2874] -> Line 4160
#line 4160
if (laststart) {
#line 4160
  laststart = bufp->buffer + (laststart - old_buffer___16);
} else {

}
---------
SID [2873] -> Line -1

---------
SID [2872] -> Line 4160
#line 4160
fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___16);
---------
SID [2871] -> Line 4160
#line 4160
if (fixup_alt_jump) {
#line 4160
  fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___16);
} else {

}
---------
SID [2870] -> Line 4160
#line 4160
begalt = bufp->buffer + (begalt - old_buffer___16);
---------
SID [2869] -> Line 4160
#line 4160
b = bufp->buffer + (b - old_buffer___16);
---------
SID [2868] -> Line 4160
#line 4160
if ((unsigned long )old_buffer___16 != (unsigned long )bufp->buffer) {
#line 4160
  b = bufp->buffer + (b - old_buffer___16);
#line 4160
  begalt = bufp->buffer + (begalt - old_buffer___16);
#line 4160
  if (fixup_alt_jump) {
#line 4160
    fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___16);
  } else {

  }
#line 4160
  if (laststart) {
#line 4160
    laststart = bufp->buffer + (laststart - old_buffer___16);
  } else {

  }
#line 4160
  if (pending_exact) {
#line 4160
    pending_exact = bufp->buffer + (pending_exact - old_buffer___16);
  } else {

  }
} else {

}
---------
SID [2867] -> Line -1

---------
SID [2866] -> Line 4160
#line 4160
return ((reg_errcode_t )12);
---------
SID [2865] -> Line 4160
#line 4160
if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4160
  return ((reg_errcode_t )12);
} else {

}
---------
SID [2864] -> Line 4160
#line 4160
bufp->buffer = (unsigned char *)tmp___100;
---------
SID [2863] -> Line 4160
#line 4160
tmp___100 = realloc((void *)bufp->buffer, bufp->allocated);
---------
SID [2862] -> Line -1

---------
SID [2861] -> Line 4160
#line 4160
bufp->allocated = (unsigned long )(1L << 16);
---------
SID [2860] -> Line 4160
#line 4160
if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4160
  bufp->allocated = (unsigned long )(1L << 16);
} else {

}
---------
SID [2859] -> Line 4160
#line 4160
bufp->allocated <<= 1;
---------
SID [2858] -> Line -1

---------
SID [2857] -> Line 4160
#line 4160
return ((reg_errcode_t )15);
---------
SID [2856] -> Line 4160
#line 4160
if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4160
  return ((reg_errcode_t )15);
} else {

}
---------
SID [2855] -> Line 4160
#line 4160
old_buffer___16 = bufp->buffer;
---------
SID [2854] -> Line 4160
#line 4160
while (1) {
#line 4160
  old_buffer___16 = bufp->buffer;
#line 4160
  if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4160
    return ((reg_errcode_t )15);
  } else {

  }
#line 4160
  bufp->allocated <<= 1;
#line 4160
  if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4160
    bufp->allocated = (unsigned long )(1L << 16);
  } else {

  }
#line 4160
  tmp___100 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4160
  bufp->buffer = (unsigned char *)tmp___100;
#line 4160
  if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4160
    return ((reg_errcode_t )12);
  } else {

  }
#line 4160
  if ((unsigned long )old_buffer___16 != (unsigned long )bufp->buffer) {
#line 4160
    b = bufp->buffer + (b - old_buffer___16);
#line 4160
    begalt = bufp->buffer + (begalt - old_buffer___16);
#line 4160
    if (fixup_alt_jump) {
#line 4160
      fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___16);
    } else {

    }
#line 4160
    if (laststart) {
#line 4160
      laststart = bufp->buffer + (laststart - old_buffer___16);
    } else {

    }
#line 4160
    if (pending_exact) {
#line 4160
      pending_exact = bufp->buffer + (pending_exact - old_buffer___16);
    } else {

    }
  } else {

  }
#line 4160
  break;
}
---------
SID [2853] -> Line 4160
#line 4160
break;
---------
SID [2852] -> Line -1

---------
SID [2851] -> Line 4160
#line 4160
if ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {

} else {
#line 4160
  break;
}
---------
SID [2850] -> Line 4160
#line 4160
while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 4160
  while (1) {
#line 4160
    old_buffer___16 = bufp->buffer;
#line 4160
    if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4160
      return ((reg_errcode_t )15);
    } else {

    }
#line 4160
    bufp->allocated <<= 1;
#line 4160
    if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4160
      bufp->allocated = (unsigned long )(1L << 16);
    } else {

    }
#line 4160
    tmp___100 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4160
    bufp->buffer = (unsigned char *)tmp___100;
#line 4160
    if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4160
      return ((reg_errcode_t )12);
    } else {

    }
#line 4160
    if ((unsigned long )old_buffer___16 != (unsigned long )bufp->buffer) {
#line 4160
      b = bufp->buffer + (b - old_buffer___16);
#line 4160
      begalt = bufp->buffer + (begalt - old_buffer___16);
#line 4160
      if (fixup_alt_jump) {
#line 4160
        fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___16);
      } else {

      }
#line 4160
      if (laststart) {
#line 4160
        laststart = bufp->buffer + (laststart - old_buffer___16);
      } else {

      }
#line 4160
      if (pending_exact) {
#line 4160
        pending_exact = bufp->buffer + (pending_exact - old_buffer___16);
      } else {

      }
    } else {

    }
#line 4160
    break;
  }
}
---------
SID [2849] -> Line 4160
#line 4160
while (1) {
#line 4160
  while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 4160
    while (1) {
#line 4160
      old_buffer___16 = bufp->buffer;
#line 4160
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4160
        return ((reg_errcode_t )15);
      } else {

      }
#line 4160
      bufp->allocated <<= 1;
#line 4160
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4160
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 4160
      tmp___100 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4160
      bufp->buffer = (unsigned char *)tmp___100;
#line 4160
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4160
        return ((reg_errcode_t )12);
      } else {

      }
#line 4160
      if ((unsigned long )old_buffer___16 != (unsigned long )bufp->buffer) {
#line 4160
        b = bufp->buffer + (b - old_buffer___16);
#line 4160
        begalt = bufp->buffer + (begalt - old_buffer___16);
#line 4160
        if (fixup_alt_jump) {
#line 4160
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___16);
        } else {

        }
#line 4160
        if (laststart) {
#line 4160
          laststart = bufp->buffer + (laststart - old_buffer___16);
        } else {

        }
#line 4160
        if (pending_exact) {
#line 4160
          pending_exact = bufp->buffer + (pending_exact - old_buffer___16);
        } else {

        }
      } else {

      }
#line 4160
      break;
    }
  }
#line 4160
  tmp___101 = b;
#line 4160
  b ++;
#line 4160
  *tmp___101 = (unsigned char)24;
#line 4160
  break;
}
---------
SID [2848] -> Line 4159
case 87: 
#line 4159
laststart = b;
---------
SID [2847] -> Line 4155
#line 4155
break;
---------
SID [2846] -> Line 4154
#line 4154
break;
---------
SID [2845] -> Line 4154
#line 4154
*tmp___99 = (unsigned char)23;
---------
SID [2844] -> Line 4154
#line 4154
b ++;
---------
SID [2843] -> Line 4154
#line 4154
tmp___99 = b;
---------
SID [2842] -> Line 4154
#line 4154
break;
---------
SID [2841] -> Line -1

---------
SID [2840] -> Line -1

---------
SID [2839] -> Line 4154
#line 4154
pending_exact = bufp->buffer + (pending_exact - old_buffer___15);
---------
SID [2838] -> Line 4154
#line 4154
if (pending_exact) {
#line 4154
  pending_exact = bufp->buffer + (pending_exact - old_buffer___15);
} else {

}
---------
SID [2837] -> Line -1

---------
SID [2836] -> Line 4154
#line 4154
laststart = bufp->buffer + (laststart - old_buffer___15);
---------
SID [2835] -> Line 4154
#line 4154
if (laststart) {
#line 4154
  laststart = bufp->buffer + (laststart - old_buffer___15);
} else {

}
---------
SID [2834] -> Line -1

---------
SID [2833] -> Line 4154
#line 4154
fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___15);
---------
SID [2832] -> Line 4154
#line 4154
if (fixup_alt_jump) {
#line 4154
  fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___15);
} else {

}
---------
SID [2831] -> Line 4154
#line 4154
begalt = bufp->buffer + (begalt - old_buffer___15);
---------
SID [2830] -> Line 4154
#line 4154
b = bufp->buffer + (b - old_buffer___15);
---------
SID [2829] -> Line 4154
#line 4154
if ((unsigned long )old_buffer___15 != (unsigned long )bufp->buffer) {
#line 4154
  b = bufp->buffer + (b - old_buffer___15);
#line 4154
  begalt = bufp->buffer + (begalt - old_buffer___15);
#line 4154
  if (fixup_alt_jump) {
#line 4154
    fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___15);
  } else {

  }
#line 4154
  if (laststart) {
#line 4154
    laststart = bufp->buffer + (laststart - old_buffer___15);
  } else {

  }
#line 4154
  if (pending_exact) {
#line 4154
    pending_exact = bufp->buffer + (pending_exact - old_buffer___15);
  } else {

  }
} else {

}
---------
SID [2828] -> Line -1

---------
SID [2827] -> Line 4154
#line 4154
return ((reg_errcode_t )12);
---------
SID [2826] -> Line 4154
#line 4154
if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4154
  return ((reg_errcode_t )12);
} else {

}
---------
SID [2825] -> Line 4154
#line 4154
bufp->buffer = (unsigned char *)tmp___98;
---------
SID [2824] -> Line 4154
#line 4154
tmp___98 = realloc((void *)bufp->buffer, bufp->allocated);
---------
SID [2823] -> Line -1

---------
SID [2822] -> Line 4154
#line 4154
bufp->allocated = (unsigned long )(1L << 16);
---------
SID [2821] -> Line 4154
#line 4154
if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4154
  bufp->allocated = (unsigned long )(1L << 16);
} else {

}
---------
SID [2820] -> Line 4154
#line 4154
bufp->allocated <<= 1;
---------
SID [2819] -> Line -1

---------
SID [2818] -> Line 4154
#line 4154
return ((reg_errcode_t )15);
---------
SID [2817] -> Line 4154
#line 4154
if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4154
  return ((reg_errcode_t )15);
} else {

}
---------
SID [2816] -> Line 4154
#line 4154
old_buffer___15 = bufp->buffer;
---------
SID [2815] -> Line 4154
#line 4154
while (1) {
#line 4154
  old_buffer___15 = bufp->buffer;
#line 4154
  if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4154
    return ((reg_errcode_t )15);
  } else {

  }
#line 4154
  bufp->allocated <<= 1;
#line 4154
  if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4154
    bufp->allocated = (unsigned long )(1L << 16);
  } else {

  }
#line 4154
  tmp___98 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4154
  bufp->buffer = (unsigned char *)tmp___98;
#line 4154
  if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4154
    return ((reg_errcode_t )12);
  } else {

  }
#line 4154
  if ((unsigned long )old_buffer___15 != (unsigned long )bufp->buffer) {
#line 4154
    b = bufp->buffer + (b - old_buffer___15);
#line 4154
    begalt = bufp->buffer + (begalt - old_buffer___15);
#line 4154
    if (fixup_alt_jump) {
#line 4154
      fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___15);
    } else {

    }
#line 4154
    if (laststart) {
#line 4154
      laststart = bufp->buffer + (laststart - old_buffer___15);
    } else {

    }
#line 4154
    if (pending_exact) {
#line 4154
      pending_exact = bufp->buffer + (pending_exact - old_buffer___15);
    } else {

    }
  } else {

  }
#line 4154
  break;
}
---------
SID [2814] -> Line 4154
#line 4154
break;
---------
SID [2813] -> Line -1

---------
SID [2812] -> Line 4154
#line 4154
if ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {

} else {
#line 4154
  break;
}
---------
SID [2811] -> Line 4154
#line 4154
while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 4154
  while (1) {
#line 4154
    old_buffer___15 = bufp->buffer;
#line 4154
    if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4154
      return ((reg_errcode_t )15);
    } else {

    }
#line 4154
    bufp->allocated <<= 1;
#line 4154
    if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4154
      bufp->allocated = (unsigned long )(1L << 16);
    } else {

    }
#line 4154
    tmp___98 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4154
    bufp->buffer = (unsigned char *)tmp___98;
#line 4154
    if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4154
      return ((reg_errcode_t )12);
    } else {

    }
#line 4154
    if ((unsigned long )old_buffer___15 != (unsigned long )bufp->buffer) {
#line 4154
      b = bufp->buffer + (b - old_buffer___15);
#line 4154
      begalt = bufp->buffer + (begalt - old_buffer___15);
#line 4154
      if (fixup_alt_jump) {
#line 4154
        fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___15);
      } else {

      }
#line 4154
      if (laststart) {
#line 4154
        laststart = bufp->buffer + (laststart - old_buffer___15);
      } else {

      }
#line 4154
      if (pending_exact) {
#line 4154
        pending_exact = bufp->buffer + (pending_exact - old_buffer___15);
      } else {

      }
    } else {

    }
#line 4154
    break;
  }
}
---------
SID [2810] -> Line 4154
#line 4154
while (1) {
#line 4154
  while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 4154
    while (1) {
#line 4154
      old_buffer___15 = bufp->buffer;
#line 4154
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4154
        return ((reg_errcode_t )15);
      } else {

      }
#line 4154
      bufp->allocated <<= 1;
#line 4154
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4154
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 4154
      tmp___98 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4154
      bufp->buffer = (unsigned char *)tmp___98;
#line 4154
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4154
        return ((reg_errcode_t )12);
      } else {

      }
#line 4154
      if ((unsigned long )old_buffer___15 != (unsigned long )bufp->buffer) {
#line 4154
        b = bufp->buffer + (b - old_buffer___15);
#line 4154
        begalt = bufp->buffer + (begalt - old_buffer___15);
#line 4154
        if (fixup_alt_jump) {
#line 4154
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___15);
        } else {

        }
#line 4154
        if (laststart) {
#line 4154
          laststart = bufp->buffer + (laststart - old_buffer___15);
        } else {

        }
#line 4154
        if (pending_exact) {
#line 4154
          pending_exact = bufp->buffer + (pending_exact - old_buffer___15);
        } else {

        }
      } else {

      }
#line 4154
      break;
    }
  }
#line 4154
  tmp___99 = b;
#line 4154
  b ++;
#line 4154
  *tmp___99 = (unsigned char)23;
#line 4154
  break;
}
---------
SID [2809] -> Line 4153
case 119: 
#line 4153
laststart = b;
---------
SID [2808] -> Line 4129
#line 4129
goto normal_char;
---------
SID [2807] -> Line -1

---------
SID [2806] -> Line -1

---------
SID [2805] -> Line -1

---------
SID [2804] -> Line 4127
#line 4127
goto normal_backslash;
---------
SID [2803] -> Line 4126
#line 4126
if ((int const   )*(p + -1) == 92) {
#line 4127
  goto normal_backslash;
} else {

}
---------
SID [2802] -> Line 4126
#line 4126
if ((unsigned long )p > (unsigned long )pattern) {
#line 4126
  if ((int const   )*(p + -1) == 92) {
#line 4127
    goto normal_backslash;
  } else {

  }
} else {

}
---------
SID [2801] -> Line 4124
#line 4124
if (! (syntax & (unsigned int )((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
#line 4126
  if ((unsigned long )p > (unsigned long )pattern) {
#line 4126
    if ((int const   )*(p + -1) == 92) {
#line 4127
      goto normal_backslash;
    } else {

    }
  } else {

  }
} else {

}
---------
SID [2800] -> Line 4122
#line 4122
break;
---------
SID [2799] -> Line -1

---------
SID [2798] -> Line 4122
#line 4122
c = (unsigned char )*(translate + c);
---------
SID [2797] -> Line 4122
#line 4122
if (translate) {
#line 4122
  c = (unsigned char )*(translate + c);
} else {

}
---------
SID [2796] -> Line 4122
#line 4122
c = (unsigned char )*tmp___97;
---------
SID [2795] -> Line 4122
#line 4122
p ++;
---------
SID [2794] -> Line 4122
#line 4122
tmp___97 = p;
---------
SID [2793] -> Line -1

---------
SID [2792] -> Line 4122
#line 4122
return ((reg_errcode_t )14);
---------
SID [2791] -> Line 4122
#line 4122
if ((unsigned long )p == (unsigned long )pend) {
#line 4122
  return ((reg_errcode_t )14);
} else {

}
---------
SID [2790] -> Line 4122
#line 4122
while (1) {
#line 4122
  if ((unsigned long )p == (unsigned long )pend) {
#line 4122
    return ((reg_errcode_t )14);
  } else {

  }
#line 4122
  tmp___97 = p;
#line 4122
  p ++;
#line 4122
  c = (unsigned char )*tmp___97;
#line 4122
  if (translate) {
#line 4122
    c = (unsigned char )*(translate + c);
  } else {

  }
#line 4122
  break;
}
---------
SID [2789] -> Line 4119
#line 4119
beg_interval = (char const   *)((void *)0);
---------
SID [2788] -> Line 4118
unfetch_interval: 
#line 4118
p = beg_interval;
---------
SID [2787] -> Line 4113
#line 4113
break;
---------
SID [2786] -> Line 4111
#line 4111
beg_interval = (char const   *)((void *)0);
---------
SID [2785] -> Line 4110
#line 4110
pending_exact = (unsigned char *)0;
---------
SID [2784] -> Line -1

---------
SID [2783] -> Line 4107
#line 4107
b += 5;
---------
SID [2782] -> Line 4105
#line 4105
insert_op2(22, laststart, b - laststart, upper_bound - 1, b);
---------
SID [2781] -> Line 4089
#line 4089
b += 5;
---------
SID [2780] -> Line 4087
#line 4087
store_op2(21, b, ((laststart + 5) - b) - 3L, upper_bound - 1);
---------
SID [2779] -> Line 4079
#line 4079
if (upper_bound > 1) {
#line 4087
  store_op2(21, b, ((laststart + 5) - b) - 3L, upper_bound - 1);
#line 4089
  b += 5;
#line 4105
  insert_op2(22, laststart, b - laststart, upper_bound - 1, b);
#line 4107
  b += 5;
} else {

}
---------
SID [2778] -> Line 4077
#line 4077
b += 5;
---------
SID [2777] -> Line 4076
#line 4076
insert_op2(22, laststart, 5, lower_bound, b);
---------
SID [2776] -> Line 4070
#line 4070
b += 5;
---------
SID [2775] -> Line 4067
#line 4067
insert_op2(20, laststart,
           (((b + 5) + (upper_bound > 1) * 5) - laststart) - 3L, lower_bound,
           b);
---------
SID [2774] -> Line 4060
#line 4060
break;
---------
SID [2773] -> Line -1

---------
SID [2772] -> Line -1

---------
SID [2771] -> Line 4060
#line 4060
pending_exact = bufp->buffer + (pending_exact - old_buffer___14);
---------
SID [2770] -> Line 4060
#line 4060
if (pending_exact) {
#line 4060
  pending_exact = bufp->buffer + (pending_exact - old_buffer___14);
} else {

}
---------
SID [2769] -> Line -1

---------
SID [2768] -> Line 4060
#line 4060
laststart = bufp->buffer + (laststart - old_buffer___14);
---------
SID [2767] -> Line 4060
#line 4060
if (laststart) {
#line 4060
  laststart = bufp->buffer + (laststart - old_buffer___14);
} else {

}
---------
SID [2766] -> Line -1

---------
SID [2765] -> Line 4060
#line 4060
fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___14);
---------
SID [2764] -> Line 4060
#line 4060
if (fixup_alt_jump) {
#line 4060
  fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___14);
} else {

}
---------
SID [2763] -> Line 4060
#line 4060
begalt = bufp->buffer + (begalt - old_buffer___14);
---------
SID [2762] -> Line 4060
#line 4060
b = bufp->buffer + (b - old_buffer___14);
---------
SID [2761] -> Line 4060
#line 4060
if ((unsigned long )old_buffer___14 != (unsigned long )bufp->buffer) {
#line 4060
  b = bufp->buffer + (b - old_buffer___14);
#line 4060
  begalt = bufp->buffer + (begalt - old_buffer___14);
#line 4060
  if (fixup_alt_jump) {
#line 4060
    fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___14);
  } else {

  }
#line 4060
  if (laststart) {
#line 4060
    laststart = bufp->buffer + (laststart - old_buffer___14);
  } else {

  }
#line 4060
  if (pending_exact) {
#line 4060
    pending_exact = bufp->buffer + (pending_exact - old_buffer___14);
  } else {

  }
} else {

}
---------
SID [2760] -> Line -1

---------
SID [2759] -> Line 4060
#line 4060
return ((reg_errcode_t )12);
---------
SID [2758] -> Line 4060
#line 4060
if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4060
  return ((reg_errcode_t )12);
} else {

}
---------
SID [2757] -> Line 4060
#line 4060
bufp->buffer = (unsigned char *)tmp___96;
---------
SID [2756] -> Line 4060
#line 4060
tmp___96 = realloc((void *)bufp->buffer, bufp->allocated);
---------
SID [2755] -> Line -1

---------
SID [2754] -> Line 4060
#line 4060
bufp->allocated = (unsigned long )(1L << 16);
---------
SID [2753] -> Line 4060
#line 4060
if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4060
  bufp->allocated = (unsigned long )(1L << 16);
} else {

}
---------
SID [2752] -> Line 4060
#line 4060
bufp->allocated <<= 1;
---------
SID [2751] -> Line -1

---------
SID [2750] -> Line 4060
#line 4060
return ((reg_errcode_t )15);
---------
SID [2749] -> Line 4060
#line 4060
if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4060
  return ((reg_errcode_t )15);
} else {

}
---------
SID [2748] -> Line 4060
#line 4060
old_buffer___14 = bufp->buffer;
---------
SID [2747] -> Line 4060
#line 4060
while (1) {
#line 4060
  old_buffer___14 = bufp->buffer;
#line 4060
  if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4060
    return ((reg_errcode_t )15);
  } else {

  }
#line 4060
  bufp->allocated <<= 1;
#line 4060
  if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4060
    bufp->allocated = (unsigned long )(1L << 16);
  } else {

  }
#line 4060
  tmp___96 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4060
  bufp->buffer = (unsigned char *)tmp___96;
#line 4060
  if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4060
    return ((reg_errcode_t )12);
  } else {

  }
#line 4060
  if ((unsigned long )old_buffer___14 != (unsigned long )bufp->buffer) {
#line 4060
    b = bufp->buffer + (b - old_buffer___14);
#line 4060
    begalt = bufp->buffer + (begalt - old_buffer___14);
#line 4060
    if (fixup_alt_jump) {
#line 4060
      fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___14);
    } else {

    }
#line 4060
    if (laststart) {
#line 4060
      laststart = bufp->buffer + (laststart - old_buffer___14);
    } else {

    }
#line 4060
    if (pending_exact) {
#line 4060
      pending_exact = bufp->buffer + (pending_exact - old_buffer___14);
    } else {

    }
  } else {

  }
#line 4060
  break;
}
---------
SID [2746] -> Line 4060
#line 4060
break;
---------
SID [2745] -> Line -1

---------
SID [2744] -> Line 4060
#line 4060
if ((unsigned long )((b - bufp->buffer) + (long )nbytes) > bufp->allocated) {

} else {
#line 4060
  break;
}
---------
SID [2743] -> Line 4060
#line 4060
while ((unsigned long )((b - bufp->buffer) + (long )nbytes) > bufp->allocated) {
#line 4060
  while (1) {
#line 4060
    old_buffer___14 = bufp->buffer;
#line 4060
    if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4060
      return ((reg_errcode_t )15);
    } else {

    }
#line 4060
    bufp->allocated <<= 1;
#line 4060
    if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4060
      bufp->allocated = (unsigned long )(1L << 16);
    } else {

    }
#line 4060
    tmp___96 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4060
    bufp->buffer = (unsigned char *)tmp___96;
#line 4060
    if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4060
      return ((reg_errcode_t )12);
    } else {

    }
#line 4060
    if ((unsigned long )old_buffer___14 != (unsigned long )bufp->buffer) {
#line 4060
      b = bufp->buffer + (b - old_buffer___14);
#line 4060
      begalt = bufp->buffer + (begalt - old_buffer___14);
#line 4060
      if (fixup_alt_jump) {
#line 4060
        fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___14);
      } else {

      }
#line 4060
      if (laststart) {
#line 4060
        laststart = bufp->buffer + (laststart - old_buffer___14);
      } else {

      }
#line 4060
      if (pending_exact) {
#line 4060
        pending_exact = bufp->buffer + (pending_exact - old_buffer___14);
      } else {

      }
    } else {

    }
#line 4060
    break;
  }
}
---------
SID [2742] -> Line 4058
#line 4058
nbytes = (unsigned int )(10 + (upper_bound > 1) * 10);
---------
SID [2741] -> Line 4043
#line 4043
b += 3;
---------
SID [2740] -> Line 4042
#line 4042
insert_op1(12, laststart, ((b + 3) - laststart) - 3L, b);
---------
SID [2739] -> Line 4041
#line 4041
break;
---------
SID [2738] -> Line -1

---------
SID [2737] -> Line -1

---------
SID [2736] -> Line 4041
#line 4041
pending_exact = bufp->buffer + (pending_exact - old_buffer___13);
---------
SID [2735] -> Line 4041
#line 4041
if (pending_exact) {
#line 4041
  pending_exact = bufp->buffer + (pending_exact - old_buffer___13);
} else {

}
---------
SID [2734] -> Line -1

---------
SID [2733] -> Line 4041
#line 4041
laststart = bufp->buffer + (laststart - old_buffer___13);
---------
SID [2732] -> Line 4041
#line 4041
if (laststart) {
#line 4041
  laststart = bufp->buffer + (laststart - old_buffer___13);
} else {

}
---------
SID [2731] -> Line -1

---------
SID [2730] -> Line 4041
#line 4041
fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___13);
---------
SID [2729] -> Line 4041
#line 4041
if (fixup_alt_jump) {
#line 4041
  fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___13);
} else {

}
---------
SID [2728] -> Line 4041
#line 4041
begalt = bufp->buffer + (begalt - old_buffer___13);
---------
SID [2727] -> Line 4041
#line 4041
b = bufp->buffer + (b - old_buffer___13);
---------
SID [2726] -> Line 4041
#line 4041
if ((unsigned long )old_buffer___13 != (unsigned long )bufp->buffer) {
#line 4041
  b = bufp->buffer + (b - old_buffer___13);
#line 4041
  begalt = bufp->buffer + (begalt - old_buffer___13);
#line 4041
  if (fixup_alt_jump) {
#line 4041
    fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___13);
  } else {

  }
#line 4041
  if (laststart) {
#line 4041
    laststart = bufp->buffer + (laststart - old_buffer___13);
  } else {

  }
#line 4041
  if (pending_exact) {
#line 4041
    pending_exact = bufp->buffer + (pending_exact - old_buffer___13);
  } else {

  }
} else {

}
---------
SID [2725] -> Line -1

---------
SID [2724] -> Line 4041
#line 4041
return ((reg_errcode_t )12);
---------
SID [2723] -> Line 4041
#line 4041
if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4041
  return ((reg_errcode_t )12);
} else {

}
---------
SID [2722] -> Line 4041
#line 4041
bufp->buffer = (unsigned char *)tmp___95;
---------
SID [2721] -> Line 4041
#line 4041
tmp___95 = realloc((void *)bufp->buffer, bufp->allocated);
---------
SID [2720] -> Line -1

---------
SID [2719] -> Line 4041
#line 4041
bufp->allocated = (unsigned long )(1L << 16);
---------
SID [2718] -> Line 4041
#line 4041
if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4041
  bufp->allocated = (unsigned long )(1L << 16);
} else {

}
---------
SID [2717] -> Line 4041
#line 4041
bufp->allocated <<= 1;
---------
SID [2716] -> Line -1

---------
SID [2715] -> Line 4041
#line 4041
return ((reg_errcode_t )15);
---------
SID [2714] -> Line 4041
#line 4041
if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4041
  return ((reg_errcode_t )15);
} else {

}
---------
SID [2713] -> Line 4041
#line 4041
old_buffer___13 = bufp->buffer;
---------
SID [2712] -> Line 4041
#line 4041
while (1) {
#line 4041
  old_buffer___13 = bufp->buffer;
#line 4041
  if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4041
    return ((reg_errcode_t )15);
  } else {

  }
#line 4041
  bufp->allocated <<= 1;
#line 4041
  if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4041
    bufp->allocated = (unsigned long )(1L << 16);
  } else {

  }
#line 4041
  tmp___95 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4041
  bufp->buffer = (unsigned char *)tmp___95;
#line 4041
  if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4041
    return ((reg_errcode_t )12);
  } else {

  }
#line 4041
  if ((unsigned long )old_buffer___13 != (unsigned long )bufp->buffer) {
#line 4041
    b = bufp->buffer + (b - old_buffer___13);
#line 4041
    begalt = bufp->buffer + (begalt - old_buffer___13);
#line 4041
    if (fixup_alt_jump) {
#line 4041
      fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___13);
    } else {

    }
#line 4041
    if (laststart) {
#line 4041
      laststart = bufp->buffer + (laststart - old_buffer___13);
    } else {

    }
#line 4041
    if (pending_exact) {
#line 4041
      pending_exact = bufp->buffer + (pending_exact - old_buffer___13);
    } else {

    }
  } else {

  }
#line 4041
  break;
}
---------
SID [2711] -> Line 4041
#line 4041
break;
---------
SID [2710] -> Line -1

---------
SID [2709] -> Line 4041
#line 4041
if ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated) {

} else {
#line 4041
  break;
}
---------
SID [2708] -> Line 4041
#line 4041
while ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated) {
#line 4041
  while (1) {
#line 4041
    old_buffer___13 = bufp->buffer;
#line 4041
    if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4041
      return ((reg_errcode_t )15);
    } else {

    }
#line 4041
    bufp->allocated <<= 1;
#line 4041
    if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4041
      bufp->allocated = (unsigned long )(1L << 16);
    } else {

    }
#line 4041
    tmp___95 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4041
    bufp->buffer = (unsigned char *)tmp___95;
#line 4041
    if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4041
      return ((reg_errcode_t )12);
    } else {

    }
#line 4041
    if ((unsigned long )old_buffer___13 != (unsigned long )bufp->buffer) {
#line 4041
      b = bufp->buffer + (b - old_buffer___13);
#line 4041
      begalt = bufp->buffer + (begalt - old_buffer___13);
#line 4041
      if (fixup_alt_jump) {
#line 4041
        fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___13);
      } else {

      }
#line 4041
      if (laststart) {
#line 4041
        laststart = bufp->buffer + (laststart - old_buffer___13);
      } else {

      }
#line 4041
      if (pending_exact) {
#line 4041
        pending_exact = bufp->buffer + (pending_exact - old_buffer___13);
      } else {

      }
    } else {

    }
#line 4041
    break;
  }
}
---------
SID [2707] -> Line 4039
#line 4039
if (upper_bound == 0) {
#line 4041
  while ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated) {
#line 4041
    while (1) {
#line 4041
      old_buffer___13 = bufp->buffer;
#line 4041
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4041
        return ((reg_errcode_t )15);
      } else {

      }
#line 4041
      bufp->allocated <<= 1;
#line 4041
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4041
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 4041
      tmp___95 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4041
      bufp->buffer = (unsigned char *)tmp___95;
#line 4041
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4041
        return ((reg_errcode_t )12);
      } else {

      }
#line 4041
      if ((unsigned long )old_buffer___13 != (unsigned long )bufp->buffer) {
#line 4041
        b = bufp->buffer + (b - old_buffer___13);
#line 4041
        begalt = bufp->buffer + (begalt - old_buffer___13);
#line 4041
        if (fixup_alt_jump) {
#line 4041
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___13);
        } else {

        }
#line 4041
        if (laststart) {
#line 4041
          laststart = bufp->buffer + (laststart - old_buffer___13);
        } else {

        }
#line 4041
        if (pending_exact) {
#line 4041
          pending_exact = bufp->buffer + (pending_exact - old_buffer___13);
        } else {

        }
      } else {

      }
#line 4041
      break;
    }
  }
#line 4042
  insert_op1(12, laststart, ((b + 3) - laststart) - 3L, b);
#line 4043
  b += 3;
} else {
#line 4058
  nbytes = (unsigned int )(10 + (upper_bound > 1) * 10);
#line 4060
  while ((unsigned long )((b - bufp->buffer) + (long )nbytes) > bufp->allocated) {
#line 4060
    while (1) {
#line 4060
      old_buffer___14 = bufp->buffer;
#line 4060
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4060
        return ((reg_errcode_t )15);
      } else {

      }
#line 4060
      bufp->allocated <<= 1;
#line 4060
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4060
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 4060
      tmp___96 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4060
      bufp->buffer = (unsigned char *)tmp___96;
#line 4060
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4060
        return ((reg_errcode_t )12);
      } else {

      }
#line 4060
      if ((unsigned long )old_buffer___14 != (unsigned long )bufp->buffer) {
#line 4060
        b = bufp->buffer + (b - old_buffer___14);
#line 4060
        begalt = bufp->buffer + (begalt - old_buffer___14);
#line 4060
        if (fixup_alt_jump) {
#line 4060
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___14);
        } else {

        }
#line 4060
        if (laststart) {
#line 4060
          laststart = bufp->buffer + (laststart - old_buffer___14);
        } else {

        }
#line 4060
        if (pending_exact) {
#line 4060
          pending_exact = bufp->buffer + (pending_exact - old_buffer___14);
        } else {

        }
      } else {

      }
#line 4060
      break;
    }
  }
#line 4067
  insert_op2(20, laststart,
             (((b + 5) + (upper_bound > 1) * 5) - laststart) - 3L,
             lower_bound, b);
#line 4070
  b += 5;
#line 4076
  insert_op2(22, laststart, 5, lower_bound, b);
#line 4077
  b += 5;
#line 4079
  if (upper_bound > 1) {
#line 4087
    store_op2(21, b, ((laststart + 5) - b) - 3L, upper_bound - 1);
#line 4089
    b += 5;
#line 4105
    insert_op2(22, laststart, b - laststart, upper_bound - 1, b);
#line 4107
    b += 5;
  } else {

  }
}
---------
SID [2706] -> Line -1

---------
SID [2705] -> Line 4033
#line 4033
goto unfetch_interval;
---------
SID [2704] -> Line 4031
#line 4031
laststart = b;
---------
SID [2703] -> Line 4030
#line 4030
if (syntax & (unsigned int )((((1 << 1) << 1) << 1) << 1)) {
#line 4031
  laststart = b;
} else {
#line 4033
  goto unfetch_interval;
}
---------
SID [2702] -> Line 4029
#line 4029
return ((reg_errcode_t )13);
---------
SID [2701] -> Line 4028
#line 4028
if (syntax & (unsigned int )(((((1 << 1) << 1) << 1) << 1) << 1)) {
#line 4029
  return ((reg_errcode_t )13);
} else
#line 4030
if (syntax & (unsigned int )((((1 << 1) << 1) << 1) << 1)) {
#line 4031
  laststart = b;
} else {
#line 4033
  goto unfetch_interval;
}
---------
SID [2700] -> Line 4026
#line 4026
if (! laststart) {
#line 4028
  if (syntax & (unsigned int )(((((1 << 1) << 1) << 1) << 1) << 1)) {
#line 4029
    return ((reg_errcode_t )13);
  } else
#line 4030
  if (syntax & (unsigned int )((((1 << 1) << 1) << 1) << 1)) {
#line 4031
    laststart = b;
  } else {
#line 4033
    goto unfetch_interval;
  }
} else {

}
---------
SID [2699] -> Line -1

---------
SID [2698] -> Line 4020
#line 4020
return ((reg_errcode_t )10);
---------
SID [2697] -> Line 4018
#line 4018
goto unfetch_interval;
---------
SID [2696] -> Line 4017
#line 4017
if (syntax & (unsigned int )((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 4018
  goto unfetch_interval;
} else {
#line 4020
  return ((reg_errcode_t )10);
}
---------
SID [2695] -> Line 4015
#line 4015
if ((int )c != 125) {
#line 4017
  if (syntax & (unsigned int )((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 4018
    goto unfetch_interval;
  } else {
#line 4020
    return ((reg_errcode_t )10);
  }
} else {

}
---------
SID [2694] -> Line -1

---------
SID [2693] -> Line 4012
#line 4012
break;
---------
SID [2692] -> Line -1

---------
SID [2691] -> Line 4012
#line 4012
c = (unsigned char )*(translate + c);
---------
SID [2690] -> Line 4012
#line 4012
if (translate) {
#line 4012
  c = (unsigned char )*(translate + c);
} else {

}
---------
SID [2689] -> Line 4012
#line 4012
c = (unsigned char )*tmp___94;
---------
SID [2688] -> Line 4012
#line 4012
p ++;
---------
SID [2687] -> Line 4012
#line 4012
tmp___94 = p;
---------
SID [2686] -> Line -1

---------
SID [2685] -> Line 4012
#line 4012
return ((reg_errcode_t )14);
---------
SID [2684] -> Line 4012
#line 4012
if ((unsigned long )p == (unsigned long )pend) {
#line 4012
  return ((reg_errcode_t )14);
} else {

}
---------
SID [2683] -> Line 4012
#line 4012
while (1) {
#line 4012
  if ((unsigned long )p == (unsigned long )pend) {
#line 4012
    return ((reg_errcode_t )14);
  } else {

  }
#line 4012
  tmp___94 = p;
#line 4012
  p ++;
#line 4012
  c = (unsigned char )*tmp___94;
#line 4012
  if (translate) {
#line 4012
    c = (unsigned char )*(translate + c);
  } else {

  }
#line 4012
  break;
}
---------
SID [2682] -> Line -1

---------
SID [2681] -> Line 4010
#line 4010
return ((reg_errcode_t )9);
---------
SID [2680] -> Line 4010
#line 4010
if ((int )c != 92) {
#line 4010
  return ((reg_errcode_t )9);
} else {

}
---------
SID [2679] -> Line 4008
#line 4008
if (! (syntax & (unsigned int )((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
#line 4010
  if ((int )c != 92) {
#line 4010
    return ((reg_errcode_t )9);
  } else {

  }
#line 4012
  while (1) {
#line 4012
    if ((unsigned long )p == (unsigned long )pend) {
#line 4012
      return ((reg_errcode_t )14);
    } else {

    }
#line 4012
    tmp___94 = p;
#line 4012
    p ++;
#line 4012
    c = (unsigned char )*tmp___94;
#line 4012
    if (translate) {
#line 4012
      c = (unsigned char )*(translate + c);
    } else {

    }
#line 4012
    break;
  }
} else {

}
---------
SID [2678] -> Line -1

---------
SID [2677] -> Line 4005
#line 4005
return ((reg_errcode_t )10);
---------
SID [2676] -> Line 4003
#line 4003
goto unfetch_interval;
---------
SID [2675] -> Line 4002
_L___22: /* CIL Label */ 
#line 4002
if (syntax & (unsigned int )((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 4003
  goto unfetch_interval;
} else {
#line 4005
  return ((reg_errcode_t )10);
}
---------
SID [2674] -> Line 3999
#line 3999
if (lower_bound > upper_bound) {
  _L___22: /* CIL Label */ 
#line 4002
  if (syntax & (unsigned int )((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 4003
    goto unfetch_interval;
  } else {
#line 4005
    return ((reg_errcode_t )10);
  }
} else {

}
---------
SID [2673] -> Line 3999
#line 3999
goto _L___22;
---------
SID [2672] -> Line 3999
#line 3999
if (upper_bound > (1 << 15) - 1) {
#line 3999
  goto _L___22;
} else
#line 3999
if (lower_bound > upper_bound) {
  _L___22: /* CIL Label */ 
#line 4002
  if (syntax & (unsigned int )((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 4003
    goto unfetch_interval;
  } else {
#line 4005
    return ((reg_errcode_t )10);
  }
} else {

}
---------
SID [2671] -> Line 3999
#line 3999
goto _L___22;
---------
SID [2670] -> Line 3999
#line 3999
if (lower_bound < 0) {
#line 3999
  goto _L___22;
} else
#line 3999
if (upper_bound > (1 << 15) - 1) {
#line 3999
  goto _L___22;
} else
#line 3999
if (lower_bound > upper_bound) {
  _L___22: /* CIL Label */ 
#line 4002
  if (syntax & (unsigned int )((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 4003
    goto unfetch_interval;
  } else {
#line 4005
    return ((reg_errcode_t )10);
  }
} else {

}
---------
SID [2669] -> Line 3997
#line 3997
upper_bound = lower_bound;
---------
SID [2668] -> Line -1

---------
SID [2667] -> Line 3993
#line 3993
upper_bound = (1 << 15) - 1;
---------
SID [2666] -> Line 3993
#line 3993
if (upper_bound < 0) {
#line 3993
  upper_bound = (1 << 15) - 1;
} else {

}
---------
SID [2665] -> Line -1

---------
SID [2664] -> Line 3992
#line 3992
break;
---------
SID [2663] -> Line -1

---------
SID [2662] -> Line 3992
#line 3992
c = (unsigned char )*(translate + c);
---------
SID [2661] -> Line 3992
#line 3992
if (translate) {
#line 3992
  c = (unsigned char )*(translate + c);
} else {

}
---------
SID [2660] -> Line 3992
#line 3992
c = (unsigned char )*tmp___92;
---------
SID [2659] -> Line 3992
#line 3992
p ++;
---------
SID [2658] -> Line 3992
#line 3992
tmp___92 = p;
---------
SID [2657] -> Line -1

---------
SID [2656] -> Line 3992
#line 3992
return ((reg_errcode_t )14);
---------
SID [2655] -> Line 3992
#line 3992
if ((unsigned long )p == (unsigned long )pend) {
#line 3992
  return ((reg_errcode_t )14);
} else {

}
---------
SID [2654] -> Line 3992
#line 3992
while (1) {
#line 3992
  if ((unsigned long )p == (unsigned long )pend) {
#line 3992
    return ((reg_errcode_t )14);
  } else {

  }
#line 3992
  tmp___92 = p;
#line 3992
  p ++;
#line 3992
  c = (unsigned char )*tmp___92;
#line 3992
  if (translate) {
#line 3992
    c = (unsigned char )*(translate + c);
  } else {

  }
#line 3992
  break;
}
---------
SID [2653] -> Line -1

---------
SID [2652] -> Line 3992
#line 3992
break;
---------
SID [2651] -> Line 3992
#line 3992
if ((unsigned long )p == (unsigned long )pend) {
#line 3992
  break;
} else {

}
---------
SID [2650] -> Line 3992
#line 3992
upper_bound = (upper_bound * 10 + (int )c) - 48;
---------
SID [2649] -> Line -1

---------
SID [2648] -> Line 3992
#line 3992
upper_bound = 0;
---------
SID [2647] -> Line 3992
#line 3992
if (upper_bound < 0) {
#line 3992
  upper_bound = 0;
} else {

}
---------
SID [2646] -> Line 3992
#line 3992
break;
---------
SID [2645] -> Line 3992
#line 3992
break;
---------
SID [2644] -> Line -1

---------
SID [2643] -> Line 3992
#line 3992
if ((int const   )*(*tmp___93 + (int )c) & 2048) {

} else {
#line 3992
  break;
}
---------
SID [2642] -> Line 3992
#line 3992
tmp___93 = __ctype_b_loc();
---------
SID [2641] -> Line 3992
#line 3992
if (((int )c & -128) == 0) {
#line 3992
  tmp___93 = __ctype_b_loc();
#line 3992
  if ((int const   )*(*tmp___93 + (int )c) & 2048) {

  } else {
#line 3992
    break;
  }
} else {
#line 3992
  break;
}
---------
SID [2640] -> Line 3992
#line 3992
while (1) {
#line 3992
  if (((int )c & -128) == 0) {
#line 3992
    tmp___93 = __ctype_b_loc();
#line 3992
    if ((int const   )*(*tmp___93 + (int )c) & 2048) {

    } else {
#line 3992
      break;
    }
  } else {
#line 3992
    break;
  }
#line 3992
  if (upper_bound < 0) {
#line 3992
    upper_bound = 0;
  } else {

  }
#line 3992
  upper_bound = (upper_bound * 10 + (int )c) - 48;
#line 3992
  if ((unsigned long )p == (unsigned long )pend) {
#line 3992
    break;
  } else {

  }
#line 3992
  while (1) {
#line 3992
    if ((unsigned long )p == (unsigned long )pend) {
#line 3992
      return ((reg_errcode_t )14);
    } else {

    }
#line 3992
    tmp___92 = p;
#line 3992
    p ++;
#line 3992
    c = (unsigned char )*tmp___92;
#line 3992
    if (translate) {
#line 3992
      c = (unsigned char )*(translate + c);
    } else {

    }
#line 3992
    break;
  }
}
---------
SID [2639] -> Line 3992
#line 3992
break;
---------
SID [2638] -> Line -1

---------
SID [2637] -> Line 3992
#line 3992
c = (unsigned char )*(translate + c);
---------
SID [2636] -> Line 3992
#line 3992
if (translate) {
#line 3992
  c = (unsigned char )*(translate + c);
} else {

}
---------
SID [2635] -> Line 3992
#line 3992
c = (unsigned char )*tmp___91;
---------
SID [2634] -> Line 3992
#line 3992
p ++;
---------
SID [2633] -> Line 3992
#line 3992
tmp___91 = p;
---------
SID [2632] -> Line -1

---------
SID [2631] -> Line 3992
#line 3992
return ((reg_errcode_t )14);
---------
SID [2630] -> Line 3992
#line 3992
if ((unsigned long )p == (unsigned long )pend) {
#line 3992
  return ((reg_errcode_t )14);
} else {

}
---------
SID [2629] -> Line 3992
#line 3992
while (1) {
#line 3992
  if ((unsigned long )p == (unsigned long )pend) {
#line 3992
    return ((reg_errcode_t )14);
  } else {

  }
#line 3992
  tmp___91 = p;
#line 3992
  p ++;
#line 3992
  c = (unsigned char )*tmp___91;
#line 3992
  if (translate) {
#line 3992
    c = (unsigned char )*(translate + c);
  } else {

  }
#line 3992
  break;
}
---------
SID [2628] -> Line 3992
#line 3992
if ((unsigned long )p != (unsigned long )pend) {
#line 3992
  while (1) {
#line 3992
    if ((unsigned long )p == (unsigned long )pend) {
#line 3992
      return ((reg_errcode_t )14);
    } else {

    }
#line 3992
    tmp___91 = p;
#line 3992
    p ++;
#line 3992
    c = (unsigned char )*tmp___91;
#line 3992
    if (translate) {
#line 3992
      c = (unsigned char )*(translate + c);
    } else {

    }
#line 3992
    break;
  }
#line 3992
  while (1) {
#line 3992
    if (((int )c & -128) == 0) {
#line 3992
      tmp___93 = __ctype_b_loc();
#line 3992
      if ((int const   )*(*tmp___93 + (int )c) & 2048) {

      } else {
#line 3992
        break;
      }
    } else {
#line 3992
      break;
    }
#line 3992
    if (upper_bound < 0) {
#line 3992
      upper_bound = 0;
    } else {

    }
#line 3992
    upper_bound = (upper_bound * 10 + (int )c) - 48;
#line 3992
    if ((unsigned long )p == (unsigned long )pend) {
#line 3992
      break;
    } else {

    }
#line 3992
    while (1) {
#line 3992
      if ((unsigned long )p == (unsigned long )pend) {
#line 3992
        return ((reg_errcode_t )14);
      } else {

      }
#line 3992
      tmp___92 = p;
#line 3992
      p ++;
#line 3992
      c = (unsigned char )*tmp___92;
#line 3992
      if (translate) {
#line 3992
        c = (unsigned char )*(translate + c);
      } else {

      }
#line 3992
      break;
    }
  }
} else {

}
---------
SID [2627] -> Line 3990
#line 3990
if ((int )c == 44) {
#line 3992
  if ((unsigned long )p != (unsigned long )pend) {
#line 3992
    while (1) {
#line 3992
      if ((unsigned long )p == (unsigned long )pend) {
#line 3992
        return ((reg_errcode_t )14);
      } else {

      }
#line 3992
      tmp___91 = p;
#line 3992
      p ++;
#line 3992
      c = (unsigned char )*tmp___91;
#line 3992
      if (translate) {
#line 3992
        c = (unsigned char )*(translate + c);
      } else {

      }
#line 3992
      break;
    }
#line 3992
    while (1) {
#line 3992
      if (((int )c & -128) == 0) {
#line 3992
        tmp___93 = __ctype_b_loc();
#line 3992
        if ((int const   )*(*tmp___93 + (int )c) & 2048) {

        } else {
#line 3992
          break;
        }
      } else {
#line 3992
        break;
      }
#line 3992
      if (upper_bound < 0) {
#line 3992
        upper_bound = 0;
      } else {

      }
#line 3992
      upper_bound = (upper_bound * 10 + (int )c) - 48;
#line 3992
      if ((unsigned long )p == (unsigned long )pend) {
#line 3992
        break;
      } else {

      }
#line 3992
      while (1) {
#line 3992
        if ((unsigned long )p == (unsigned long )pend) {
#line 3992
          return ((reg_errcode_t )14);
        } else {

        }
#line 3992
        tmp___92 = p;
#line 3992
        p ++;
#line 3992
        c = (unsigned char )*tmp___92;
#line 3992
        if (translate) {
#line 3992
          c = (unsigned char )*(translate + c);
        } else {

        }
#line 3992
        break;
      }
    }
  } else {

  }
#line 3993
  if (upper_bound < 0) {
#line 3993
    upper_bound = (1 << 15) - 1;
  } else {

  }
} else {
#line 3997
  upper_bound = lower_bound;
}
---------
SID [2626] -> Line -1

---------
SID [2625] -> Line 3988
#line 3988
break;
---------
SID [2624] -> Line -1

---------
SID [2623] -> Line 3988
#line 3988
c = (unsigned char )*(translate + c);
---------
SID [2622] -> Line 3988
#line 3988
if (translate) {
#line 3988
  c = (unsigned char )*(translate + c);
} else {

}
---------
SID [2621] -> Line 3988
#line 3988
c = (unsigned char )*tmp___89;
---------
SID [2620] -> Line 3988
#line 3988
p ++;
---------
SID [2619] -> Line 3988
#line 3988
tmp___89 = p;
---------
SID [2618] -> Line -1

---------
SID [2617] -> Line 3988
#line 3988
return ((reg_errcode_t )14);
---------
SID [2616] -> Line 3988
#line 3988
if ((unsigned long )p == (unsigned long )pend) {
#line 3988
  return ((reg_errcode_t )14);
} else {

}
---------
SID [2615] -> Line 3988
#line 3988
while (1) {
#line 3988
  if ((unsigned long )p == (unsigned long )pend) {
#line 3988
    return ((reg_errcode_t )14);
  } else {

  }
#line 3988
  tmp___89 = p;
#line 3988
  p ++;
#line 3988
  c = (unsigned char )*tmp___89;
#line 3988
  if (translate) {
#line 3988
    c = (unsigned char )*(translate + c);
  } else {

  }
#line 3988
  break;
}
---------
SID [2614] -> Line -1

---------
SID [2613] -> Line 3988
#line 3988
break;
---------
SID [2612] -> Line 3988
#line 3988
if ((unsigned long )p == (unsigned long )pend) {
#line 3988
  break;
} else {

}
---------
SID [2611] -> Line 3988
#line 3988
lower_bound = (lower_bound * 10 + (int )c) - 48;
---------
SID [2610] -> Line -1

---------
SID [2609] -> Line 3988
#line 3988
lower_bound = 0;
---------
SID [2608] -> Line 3988
#line 3988
if (lower_bound < 0) {
#line 3988
  lower_bound = 0;
} else {

}
---------
SID [2607] -> Line 3988
#line 3988
break;
---------
SID [2606] -> Line 3988
#line 3988
break;
---------
SID [2605] -> Line -1

---------
SID [2604] -> Line 3988
#line 3988
if ((int const   )*(*tmp___90 + (int )c) & 2048) {

} else {
#line 3988
  break;
}
---------
SID [2603] -> Line 3988
#line 3988
tmp___90 = __ctype_b_loc();
---------
SID [2602] -> Line 3988
#line 3988
if (((int )c & -128) == 0) {
#line 3988
  tmp___90 = __ctype_b_loc();
#line 3988
  if ((int const   )*(*tmp___90 + (int )c) & 2048) {

  } else {
#line 3988
    break;
  }
} else {
#line 3988
  break;
}
---------
SID [2601] -> Line 3988
#line 3988
while (1) {
#line 3988
  if (((int )c & -128) == 0) {
#line 3988
    tmp___90 = __ctype_b_loc();
#line 3988
    if ((int const   )*(*tmp___90 + (int )c) & 2048) {

    } else {
#line 3988
      break;
    }
  } else {
#line 3988
    break;
  }
#line 3988
  if (lower_bound < 0) {
#line 3988
    lower_bound = 0;
  } else {

  }
#line 3988
  lower_bound = (lower_bound * 10 + (int )c) - 48;
#line 3988
  if ((unsigned long )p == (unsigned long )pend) {
#line 3988
    break;
  } else {

  }
#line 3988
  while (1) {
#line 3988
    if ((unsigned long )p == (unsigned long )pend) {
#line 3988
      return ((reg_errcode_t )14);
    } else {

    }
#line 3988
    tmp___89 = p;
#line 3988
    p ++;
#line 3988
    c = (unsigned char )*tmp___89;
#line 3988
    if (translate) {
#line 3988
      c = (unsigned char )*(translate + c);
    } else {

    }
#line 3988
    break;
  }
}
---------
SID [2600] -> Line 3988
#line 3988
break;
---------
SID [2599] -> Line -1

---------
SID [2598] -> Line 3988
#line 3988
c = (unsigned char )*(translate + c);
---------
SID [2597] -> Line 3988
#line 3988
if (translate) {
#line 3988
  c = (unsigned char )*(translate + c);
} else {

}
---------
SID [2596] -> Line 3988
#line 3988
c = (unsigned char )*tmp___88;
---------
SID [2595] -> Line 3988
#line 3988
p ++;
---------
SID [2594] -> Line 3988
#line 3988
tmp___88 = p;
---------
SID [2593] -> Line -1

---------
SID [2592] -> Line 3988
#line 3988
return ((reg_errcode_t )14);
---------
SID [2591] -> Line 3988
#line 3988
if ((unsigned long )p == (unsigned long )pend) {
#line 3988
  return ((reg_errcode_t )14);
} else {

}
---------
SID [2590] -> Line 3988
#line 3988
while (1) {
#line 3988
  if ((unsigned long )p == (unsigned long )pend) {
#line 3988
    return ((reg_errcode_t )14);
  } else {

  }
#line 3988
  tmp___88 = p;
#line 3988
  p ++;
#line 3988
  c = (unsigned char )*tmp___88;
#line 3988
  if (translate) {
#line 3988
    c = (unsigned char )*(translate + c);
  } else {

  }
#line 3988
  break;
}
---------
SID [2589] -> Line 3988
#line 3988
if ((unsigned long )p != (unsigned long )pend) {
#line 3988
  while (1) {
#line 3988
    if ((unsigned long )p == (unsigned long )pend) {
#line 3988
      return ((reg_errcode_t )14);
    } else {

    }
#line 3988
    tmp___88 = p;
#line 3988
    p ++;
#line 3988
    c = (unsigned char )*tmp___88;
#line 3988
    if (translate) {
#line 3988
      c = (unsigned char )*(translate + c);
    } else {

    }
#line 3988
    break;
  }
#line 3988
  while (1) {
#line 3988
    if (((int )c & -128) == 0) {
#line 3988
      tmp___90 = __ctype_b_loc();
#line 3988
      if ((int const   )*(*tmp___90 + (int )c) & 2048) {

      } else {
#line 3988
        break;
      }
    } else {
#line 3988
      break;
    }
#line 3988
    if (lower_bound < 0) {
#line 3988
      lower_bound = 0;
    } else {

    }
#line 3988
    lower_bound = (lower_bound * 10 + (int )c) - 48;
#line 3988
    if ((unsigned long )p == (unsigned long )pend) {
#line 3988
      break;
    } else {

    }
#line 3988
    while (1) {
#line 3988
      if ((unsigned long )p == (unsigned long )pend) {
#line 3988
        return ((reg_errcode_t )14);
      } else {

      }
#line 3988
      tmp___89 = p;
#line 3988
      p ++;
#line 3988
      c = (unsigned char )*tmp___89;
#line 3988
      if (translate) {
#line 3988
        c = (unsigned char )*(translate + c);
      } else {

      }
#line 3988
      break;
    }
  }
} else {

}
---------
SID [2588] -> Line -1

---------
SID [2587] -> Line 3985
#line 3985
return ((reg_errcode_t )9);
---------
SID [2586] -> Line 3983
#line 3983
goto unfetch_interval;
---------
SID [2585] -> Line 3982
#line 3982
if (syntax & (unsigned int )((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3983
  goto unfetch_interval;
} else {
#line 3985
  return ((reg_errcode_t )9);
}
---------
SID [2584] -> Line 3980
#line 3980
if ((unsigned long )p == (unsigned long )pend) {
#line 3982
  if (syntax & (unsigned int )((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3983
    goto unfetch_interval;
  } else {
#line 3985
    return ((reg_errcode_t )9);
  }
} else {

}
---------
SID [2583] -> Line 3978
#line 3978
beg_interval = p - 1;
---------
SID [2582] -> Line 3976
#line 3976
upper_bound = -1;
---------
SID [2581] -> Line 3976
handle_interval: 
#line 3976
lower_bound = -1;
---------
SID [2580] -> Line -1

---------
SID [2579] -> Line -1

---------
SID [2578] -> Line 3969
#line 3969
goto normal_backslash;
---------
SID [2577] -> Line 3964
#line 3964
if ((unsigned long )p == (unsigned long )pend) {
#line 3969
  goto normal_backslash;
} else {

}
---------
SID [2576] -> Line 3964
_L___21: /* CIL Label */ 
#line 3964
if ((unsigned long )(p - 2) == (unsigned long )pattern) {
#line 3964
  if ((unsigned long )p == (unsigned long )pend) {
#line 3969
    goto normal_backslash;
  } else {

  }
} else {

}
---------
SID [2575] -> Line 3964
#line 3964
goto _L___21;
---------
SID [2574] -> Line 3969
#line 3969
goto normal_backslash;
---------
SID [2573] -> Line 3964
#line 3964
if (syntax & (unsigned int )((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3969
  goto normal_backslash;
} else {
#line 3964
  goto _L___21;
}
---------
SID [2572] -> Line 3964
#line 3964
if (syntax & (unsigned int )(((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3964
  if (syntax & (unsigned int )((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3969
    goto normal_backslash;
  } else {
#line 3964
    goto _L___21;
  }
} else
_L___21: /* CIL Label */ 
#line 3964
if ((unsigned long )(p - 2) == (unsigned long )pattern) {
#line 3964
  if ((unsigned long )p == (unsigned long )pend) {
#line 3969
    goto normal_backslash;
  } else {

  }
} else {

}
---------
SID [2571] -> Line 3969
#line 3969
goto normal_backslash;
---------
SID [2570] -> Line 3964
case 123: 
#line 3964
if (! (syntax & (unsigned int )(((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
#line 3969
  goto normal_backslash;
} else
#line 3964
if (syntax & (unsigned int )(((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3964
  if (syntax & (unsigned int )((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3969
    goto normal_backslash;
  } else {
#line 3964
    goto _L___21;
  }
} else
_L___21: /* CIL Label */ 
#line 3964
if ((unsigned long )(p - 2) == (unsigned long )pattern) {
#line 3964
  if ((unsigned long )p == (unsigned long )pend) {
#line 3969
    goto normal_backslash;
  } else {

  }
} else {

}
---------
SID [2569] -> Line 3959
#line 3959
break;
---------
SID [2568] -> Line 3958
#line 3958
begalt = b;
---------
SID [2567] -> Line 3957
#line 3957
laststart = (unsigned char *)0;
---------
SID [2566] -> Line 3955
#line 3955
b += 3;
---------
SID [2565] -> Line 3954
#line 3954
break;
---------
SID [2564] -> Line -1

---------
SID [2563] -> Line -1

---------
SID [2562] -> Line 3954
#line 3954
pending_exact = bufp->buffer + (pending_exact - old_buffer___12);
---------
SID [2561] -> Line 3954
#line 3954
if (pending_exact) {
#line 3954
  pending_exact = bufp->buffer + (pending_exact - old_buffer___12);
} else {

}
---------
SID [2560] -> Line -1

---------
SID [2559] -> Line 3954
#line 3954
laststart = bufp->buffer + (laststart - old_buffer___12);
---------
SID [2558] -> Line 3954
#line 3954
if (laststart) {
#line 3954
  laststart = bufp->buffer + (laststart - old_buffer___12);
} else {

}
---------
SID [2557] -> Line -1

---------
SID [2556] -> Line 3954
#line 3954
fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___12);
---------
SID [2555] -> Line 3954
#line 3954
if (fixup_alt_jump) {
#line 3954
  fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___12);
} else {

}
---------
SID [2554] -> Line 3954
#line 3954
begalt = bufp->buffer + (begalt - old_buffer___12);
---------
SID [2553] -> Line 3954
#line 3954
b = bufp->buffer + (b - old_buffer___12);
---------
SID [2552] -> Line 3954
#line 3954
if ((unsigned long )old_buffer___12 != (unsigned long )bufp->buffer) {
#line 3954
  b = bufp->buffer + (b - old_buffer___12);
#line 3954
  begalt = bufp->buffer + (begalt - old_buffer___12);
#line 3954
  if (fixup_alt_jump) {
#line 3954
    fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___12);
  } else {

  }
#line 3954
  if (laststart) {
#line 3954
    laststart = bufp->buffer + (laststart - old_buffer___12);
  } else {

  }
#line 3954
  if (pending_exact) {
#line 3954
    pending_exact = bufp->buffer + (pending_exact - old_buffer___12);
  } else {

  }
} else {

}
---------
SID [2551] -> Line -1

---------
SID [2550] -> Line 3954
#line 3954
return ((reg_errcode_t )12);
---------
SID [2549] -> Line 3954
#line 3954
if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3954
  return ((reg_errcode_t )12);
} else {

}
---------
SID [2548] -> Line 3954
#line 3954
bufp->buffer = (unsigned char *)tmp___87;
---------
SID [2547] -> Line 3954
#line 3954
tmp___87 = realloc((void *)bufp->buffer, bufp->allocated);
---------
SID [2546] -> Line -1

---------
SID [2545] -> Line 3954
#line 3954
bufp->allocated = (unsigned long )(1L << 16);
---------
SID [2544] -> Line 3954
#line 3954
if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3954
  bufp->allocated = (unsigned long )(1L << 16);
} else {

}
---------
SID [2543] -> Line 3954
#line 3954
bufp->allocated <<= 1;
---------
SID [2542] -> Line -1

---------
SID [2541] -> Line 3954
#line 3954
return ((reg_errcode_t )15);
---------
SID [2540] -> Line 3954
#line 3954
if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3954
  return ((reg_errcode_t )15);
} else {

}
---------
SID [2539] -> Line 3954
#line 3954
old_buffer___12 = bufp->buffer;
---------
SID [2538] -> Line 3954
#line 3954
while (1) {
#line 3954
  old_buffer___12 = bufp->buffer;
#line 3954
  if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3954
    return ((reg_errcode_t )15);
  } else {

  }
#line 3954
  bufp->allocated <<= 1;
#line 3954
  if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3954
    bufp->allocated = (unsigned long )(1L << 16);
  } else {

  }
#line 3954
  tmp___87 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3954
  bufp->buffer = (unsigned char *)tmp___87;
#line 3954
  if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3954
    return ((reg_errcode_t )12);
  } else {

  }
#line 3954
  if ((unsigned long )old_buffer___12 != (unsigned long )bufp->buffer) {
#line 3954
    b = bufp->buffer + (b - old_buffer___12);
#line 3954
    begalt = bufp->buffer + (begalt - old_buffer___12);
#line 3954
    if (fixup_alt_jump) {
#line 3954
      fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___12);
    } else {

    }
#line 3954
    if (laststart) {
#line 3954
      laststart = bufp->buffer + (laststart - old_buffer___12);
    } else {

    }
#line 3954
    if (pending_exact) {
#line 3954
      pending_exact = bufp->buffer + (pending_exact - old_buffer___12);
    } else {

    }
  } else {

  }
#line 3954
  break;
}
---------
SID [2537] -> Line 3954
#line 3954
break;
---------
SID [2536] -> Line -1

---------
SID [2535] -> Line 3954
#line 3954
if ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated) {

} else {
#line 3954
  break;
}
---------
SID [2534] -> Line 3954
#line 3954
while ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated) {
#line 3954
  while (1) {
#line 3954
    old_buffer___12 = bufp->buffer;
#line 3954
    if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3954
      return ((reg_errcode_t )15);
    } else {

    }
#line 3954
    bufp->allocated <<= 1;
#line 3954
    if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3954
      bufp->allocated = (unsigned long )(1L << 16);
    } else {

    }
#line 3954
    tmp___87 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3954
    bufp->buffer = (unsigned char *)tmp___87;
#line 3954
    if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3954
      return ((reg_errcode_t )12);
    } else {

    }
#line 3954
    if ((unsigned long )old_buffer___12 != (unsigned long )bufp->buffer) {
#line 3954
      b = bufp->buffer + (b - old_buffer___12);
#line 3954
      begalt = bufp->buffer + (begalt - old_buffer___12);
#line 3954
      if (fixup_alt_jump) {
#line 3954
        fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___12);
      } else {

      }
#line 3954
      if (laststart) {
#line 3954
        laststart = bufp->buffer + (laststart - old_buffer___12);
      } else {

      }
#line 3954
      if (pending_exact) {
#line 3954
        pending_exact = bufp->buffer + (pending_exact - old_buffer___12);
      } else {

      }
    } else {

    }
#line 3954
    break;
  }
}
---------
SID [2533] -> Line 3953
#line 3953
fixup_alt_jump = b;
---------
SID [2532] -> Line -1

---------
SID [2531] -> Line 3948
#line 3948
store_op1(13, fixup_alt_jump, (b - fixup_alt_jump) - 3L);
---------
SID [2530] -> Line 3947
#line 3947
if (fixup_alt_jump) {
#line 3948
  store_op1(13, fixup_alt_jump, (b - fixup_alt_jump) - 3L);
} else {

}
---------
SID [2529] -> Line 3929
#line 3929
b += 3;
---------
SID [2528] -> Line 3928
#line 3928
pending_exact = (unsigned char *)0;
---------
SID [2527] -> Line 3927
#line 3927
insert_op1(14, begalt, ((b + 6) - begalt) - 3L, b);
---------
SID [2526] -> Line 3926
#line 3926
break;
---------
SID [2525] -> Line -1

---------
SID [2524] -> Line -1

---------
SID [2523] -> Line 3926
#line 3926
pending_exact = bufp->buffer + (pending_exact - old_buffer___11);
---------
SID [2522] -> Line 3926
#line 3926
if (pending_exact) {
#line 3926
  pending_exact = bufp->buffer + (pending_exact - old_buffer___11);
} else {

}
---------
SID [2521] -> Line -1

---------
SID [2520] -> Line 3926
#line 3926
laststart = bufp->buffer + (laststart - old_buffer___11);
---------
SID [2519] -> Line 3926
#line 3926
if (laststart) {
#line 3926
  laststart = bufp->buffer + (laststart - old_buffer___11);
} else {

}
---------
SID [2518] -> Line -1

---------
SID [2517] -> Line 3926
#line 3926
fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___11);
---------
SID [2516] -> Line 3926
#line 3926
if (fixup_alt_jump) {
#line 3926
  fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___11);
} else {

}
---------
SID [2515] -> Line 3926
#line 3926
begalt = bufp->buffer + (begalt - old_buffer___11);
---------
SID [2514] -> Line 3926
#line 3926
b = bufp->buffer + (b - old_buffer___11);
---------
SID [2513] -> Line 3926
#line 3926
if ((unsigned long )old_buffer___11 != (unsigned long )bufp->buffer) {
#line 3926
  b = bufp->buffer + (b - old_buffer___11);
#line 3926
  begalt = bufp->buffer + (begalt - old_buffer___11);
#line 3926
  if (fixup_alt_jump) {
#line 3926
    fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___11);
  } else {

  }
#line 3926
  if (laststart) {
#line 3926
    laststart = bufp->buffer + (laststart - old_buffer___11);
  } else {

  }
#line 3926
  if (pending_exact) {
#line 3926
    pending_exact = bufp->buffer + (pending_exact - old_buffer___11);
  } else {

  }
} else {

}
---------
SID [2512] -> Line -1

---------
SID [2511] -> Line 3926
#line 3926
return ((reg_errcode_t )12);
---------
SID [2510] -> Line 3926
#line 3926
if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3926
  return ((reg_errcode_t )12);
} else {

}
---------
SID [2509] -> Line 3926
#line 3926
bufp->buffer = (unsigned char *)tmp___86;
---------
SID [2508] -> Line 3926
#line 3926
tmp___86 = realloc((void *)bufp->buffer, bufp->allocated);
---------
SID [2507] -> Line -1

---------
SID [2506] -> Line 3926
#line 3926
bufp->allocated = (unsigned long )(1L << 16);
---------
SID [2505] -> Line 3926
#line 3926
if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3926
  bufp->allocated = (unsigned long )(1L << 16);
} else {

}
---------
SID [2504] -> Line 3926
#line 3926
bufp->allocated <<= 1;
---------
SID [2503] -> Line -1

---------
SID [2502] -> Line 3926
#line 3926
return ((reg_errcode_t )15);
---------
SID [2501] -> Line 3926
#line 3926
if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3926
  return ((reg_errcode_t )15);
} else {

}
---------
SID [2500] -> Line 3926
#line 3926
old_buffer___11 = bufp->buffer;
---------
SID [2499] -> Line 3926
#line 3926
while (1) {
#line 3926
  old_buffer___11 = bufp->buffer;
#line 3926
  if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3926
    return ((reg_errcode_t )15);
  } else {

  }
#line 3926
  bufp->allocated <<= 1;
#line 3926
  if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3926
    bufp->allocated = (unsigned long )(1L << 16);
  } else {

  }
#line 3926
  tmp___86 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3926
  bufp->buffer = (unsigned char *)tmp___86;
#line 3926
  if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3926
    return ((reg_errcode_t )12);
  } else {

  }
#line 3926
  if ((unsigned long )old_buffer___11 != (unsigned long )bufp->buffer) {
#line 3926
    b = bufp->buffer + (b - old_buffer___11);
#line 3926
    begalt = bufp->buffer + (begalt - old_buffer___11);
#line 3926
    if (fixup_alt_jump) {
#line 3926
      fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___11);
    } else {

    }
#line 3926
    if (laststart) {
#line 3926
      laststart = bufp->buffer + (laststart - old_buffer___11);
    } else {

    }
#line 3926
    if (pending_exact) {
#line 3926
      pending_exact = bufp->buffer + (pending_exact - old_buffer___11);
    } else {

    }
  } else {

  }
#line 3926
  break;
}
---------
SID [2498] -> Line 3926
#line 3926
break;
---------
SID [2497] -> Line -1

---------
SID [2496] -> Line 3926
#line 3926
if ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated) {

} else {
#line 3926
  break;
}
---------
SID [2495] -> Line 3926
#line 3926
while ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated) {
#line 3926
  while (1) {
#line 3926
    old_buffer___11 = bufp->buffer;
#line 3926
    if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3926
      return ((reg_errcode_t )15);
    } else {

    }
#line 3926
    bufp->allocated <<= 1;
#line 3926
    if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3926
      bufp->allocated = (unsigned long )(1L << 16);
    } else {

    }
#line 3926
    tmp___86 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3926
    bufp->buffer = (unsigned char *)tmp___86;
#line 3926
    if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3926
      return ((reg_errcode_t )12);
    } else {

    }
#line 3926
    if ((unsigned long )old_buffer___11 != (unsigned long )bufp->buffer) {
#line 3926
      b = bufp->buffer + (b - old_buffer___11);
#line 3926
      begalt = bufp->buffer + (begalt - old_buffer___11);
#line 3926
      if (fixup_alt_jump) {
#line 3926
        fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___11);
      } else {

      }
#line 3926
      if (laststart) {
#line 3926
        laststart = bufp->buffer + (laststart - old_buffer___11);
      } else {

      }
#line 3926
      if (pending_exact) {
#line 3926
        pending_exact = bufp->buffer + (pending_exact - old_buffer___11);
      } else {

      }
    } else {

    }
#line 3926
    break;
  }
}
---------
SID [2494] -> Line -1

---------
SID [2493] -> Line 3922
#line 3922
goto normal_char;
---------
SID [2492] -> Line 3921
handle_alt: 
#line 3921
if (syntax & (unsigned int )((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3922
  goto normal_char;
} else {

}
---------
SID [2491] -> Line -1

---------
SID [2490] -> Line 3919
#line 3919
goto normal_backslash;
---------
SID [2489] -> Line 3918
#line 3918
if (syntax & (unsigned int )(((((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3919
  goto normal_backslash;
} else {

}
---------
SID [2488] -> Line 3919
#line 3919
goto normal_backslash;
---------
SID [2487] -> Line 3918
case 124: 
#line 3918
if (syntax & (unsigned int )((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3919
  goto normal_backslash;
} else
#line 3918
if (syntax & (unsigned int )(((((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3919
  goto normal_backslash;
} else {

}
---------
SID [2486] -> Line 3914
#line 3914
break;
---------
SID [2485] -> Line -1

---------
SID [2484] -> Line 3910
#line 3910
break;
---------
SID [2483] -> Line 3910
#line 3910
*tmp___85 = (unsigned char )(regnum - this_group_regnum);
---------
SID [2482] -> Line 3910
#line 3910
b ++;
---------
SID [2481] -> Line 3910
#line 3910
tmp___85 = b;
---------
SID [2480] -> Line 3910
#line 3910
*tmp___84 = (unsigned char )this_group_regnum;
---------
SID [2479] -> Line 3910
#line 3910
b ++;
---------
SID [2478] -> Line 3910
#line 3910
tmp___84 = b;
---------
SID [2477] -> Line 3910
#line 3910
*tmp___83 = (unsigned char)6;
---------
SID [2476] -> Line 3910
#line 3910
b ++;
---------
SID [2475] -> Line 3910
#line 3910
tmp___83 = b;
---------
SID [2474] -> Line 3910
#line 3910
break;
---------
SID [2473] -> Line -1

---------
SID [2472] -> Line -1

---------
SID [2471] -> Line 3910
#line 3910
pending_exact = bufp->buffer + (pending_exact - old_buffer___10);
---------
SID [2470] -> Line 3910
#line 3910
if (pending_exact) {
#line 3910
  pending_exact = bufp->buffer + (pending_exact - old_buffer___10);
} else {

}
---------
SID [2469] -> Line -1

---------
SID [2468] -> Line 3910
#line 3910
laststart = bufp->buffer + (laststart - old_buffer___10);
---------
SID [2467] -> Line 3910
#line 3910
if (laststart) {
#line 3910
  laststart = bufp->buffer + (laststart - old_buffer___10);
} else {

}
---------
SID [2466] -> Line -1

---------
SID [2465] -> Line 3910
#line 3910
fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___10);
---------
SID [2464] -> Line 3910
#line 3910
if (fixup_alt_jump) {
#line 3910
  fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___10);
} else {

}
---------
SID [2463] -> Line 3910
#line 3910
begalt = bufp->buffer + (begalt - old_buffer___10);
---------
SID [2462] -> Line 3910
#line 3910
b = bufp->buffer + (b - old_buffer___10);
---------
SID [2461] -> Line 3910
#line 3910
if ((unsigned long )old_buffer___10 != (unsigned long )bufp->buffer) {
#line 3910
  b = bufp->buffer + (b - old_buffer___10);
#line 3910
  begalt = bufp->buffer + (begalt - old_buffer___10);
#line 3910
  if (fixup_alt_jump) {
#line 3910
    fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___10);
  } else {

  }
#line 3910
  if (laststart) {
#line 3910
    laststart = bufp->buffer + (laststart - old_buffer___10);
  } else {

  }
#line 3910
  if (pending_exact) {
#line 3910
    pending_exact = bufp->buffer + (pending_exact - old_buffer___10);
  } else {

  }
} else {

}
---------
SID [2460] -> Line -1

---------
SID [2459] -> Line 3910
#line 3910
return ((reg_errcode_t )12);
---------
SID [2458] -> Line 3910
#line 3910
if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3910
  return ((reg_errcode_t )12);
} else {

}
---------
SID [2457] -> Line 3910
#line 3910
bufp->buffer = (unsigned char *)tmp___82;
---------
SID [2456] -> Line 3910
#line 3910
tmp___82 = realloc((void *)bufp->buffer, bufp->allocated);
---------
SID [2455] -> Line -1

---------
SID [2454] -> Line 3910
#line 3910
bufp->allocated = (unsigned long )(1L << 16);
---------
SID [2453] -> Line 3910
#line 3910
if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3910
  bufp->allocated = (unsigned long )(1L << 16);
} else {

}
---------
SID [2452] -> Line 3910
#line 3910
bufp->allocated <<= 1;
---------
SID [2451] -> Line -1

---------
SID [2450] -> Line 3910
#line 3910
return ((reg_errcode_t )15);
---------
SID [2449] -> Line 3910
#line 3910
if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3910
  return ((reg_errcode_t )15);
} else {

}
---------
SID [2448] -> Line 3910
#line 3910
old_buffer___10 = bufp->buffer;
---------
SID [2447] -> Line 3910
#line 3910
while (1) {
#line 3910
  old_buffer___10 = bufp->buffer;
#line 3910
  if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3910
    return ((reg_errcode_t )15);
  } else {

  }
#line 3910
  bufp->allocated <<= 1;
#line 3910
  if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3910
    bufp->allocated = (unsigned long )(1L << 16);
  } else {

  }
#line 3910
  tmp___82 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3910
  bufp->buffer = (unsigned char *)tmp___82;
#line 3910
  if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3910
    return ((reg_errcode_t )12);
  } else {

  }
#line 3910
  if ((unsigned long )old_buffer___10 != (unsigned long )bufp->buffer) {
#line 3910
    b = bufp->buffer + (b - old_buffer___10);
#line 3910
    begalt = bufp->buffer + (begalt - old_buffer___10);
#line 3910
    if (fixup_alt_jump) {
#line 3910
      fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___10);
    } else {

    }
#line 3910
    if (laststart) {
#line 3910
      laststart = bufp->buffer + (laststart - old_buffer___10);
    } else {

    }
#line 3910
    if (pending_exact) {
#line 3910
      pending_exact = bufp->buffer + (pending_exact - old_buffer___10);
    } else {

    }
  } else {

  }
#line 3910
  break;
}
---------
SID [2446] -> Line 3910
#line 3910
break;
---------
SID [2445] -> Line -1

---------
SID [2444] -> Line 3910
#line 3910
if ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated) {

} else {
#line 3910
  break;
}
---------
SID [2443] -> Line 3910
#line 3910
while ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated) {
#line 3910
  while (1) {
#line 3910
    old_buffer___10 = bufp->buffer;
#line 3910
    if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3910
      return ((reg_errcode_t )15);
    } else {

    }
#line 3910
    bufp->allocated <<= 1;
#line 3910
    if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3910
      bufp->allocated = (unsigned long )(1L << 16);
    } else {

    }
#line 3910
    tmp___82 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3910
    bufp->buffer = (unsigned char *)tmp___82;
#line 3910
    if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3910
      return ((reg_errcode_t )12);
    } else {

    }
#line 3910
    if ((unsigned long )old_buffer___10 != (unsigned long )bufp->buffer) {
#line 3910
      b = bufp->buffer + (b - old_buffer___10);
#line 3910
      begalt = bufp->buffer + (begalt - old_buffer___10);
#line 3910
      if (fixup_alt_jump) {
#line 3910
        fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___10);
      } else {

      }
#line 3910
      if (laststart) {
#line 3910
        laststart = bufp->buffer + (laststart - old_buffer___10);
      } else {

      }
#line 3910
      if (pending_exact) {
#line 3910
        pending_exact = bufp->buffer + (pending_exact - old_buffer___10);
      } else {

      }
    } else {

    }
#line 3910
    break;
  }
}
---------
SID [2442] -> Line 3910
#line 3910
while (1) {
#line 3910
  while ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated) {
#line 3910
    while (1) {
#line 3910
      old_buffer___10 = bufp->buffer;
#line 3910
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3910
        return ((reg_errcode_t )15);
      } else {

      }
#line 3910
      bufp->allocated <<= 1;
#line 3910
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3910
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 3910
      tmp___82 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3910
      bufp->buffer = (unsigned char *)tmp___82;
#line 3910
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3910
        return ((reg_errcode_t )12);
      } else {

      }
#line 3910
      if ((unsigned long )old_buffer___10 != (unsigned long )bufp->buffer) {
#line 3910
        b = bufp->buffer + (b - old_buffer___10);
#line 3910
        begalt = bufp->buffer + (begalt - old_buffer___10);
#line 3910
        if (fixup_alt_jump) {
#line 3910
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___10);
        } else {

        }
#line 3910
        if (laststart) {
#line 3910
          laststart = bufp->buffer + (laststart - old_buffer___10);
        } else {

        }
#line 3910
        if (pending_exact) {
#line 3910
          pending_exact = bufp->buffer + (pending_exact - old_buffer___10);
        } else {

        }
      } else {

      }
#line 3910
      break;
    }
  }
#line 3910
  tmp___83 = b;
#line 3910
  b ++;
#line 3910
  *tmp___83 = (unsigned char)6;
#line 3910
  tmp___84 = b;
#line 3910
  b ++;
#line 3910
  *tmp___84 = (unsigned char )this_group_regnum;
#line 3910
  tmp___85 = b;
#line 3910
  b ++;
#line 3910
  *tmp___85 = (unsigned char )(regnum - this_group_regnum);
#line 3910
  break;
}
---------
SID [2441] -> Line 3909
#line 3909
*inner_group_loc = (unsigned char )(regnum - this_group_regnum);
---------
SID [2440] -> Line 3906
#line 3906
inner_group_loc = bufp->buffer + (compile_stack.stack + compile_stack.avail)->inner_group_offset;
---------
SID [2439] -> Line 3904
#line 3904
if (this_group_regnum <= 255U) {
#line 3906
  inner_group_loc = bufp->buffer + (compile_stack.stack + compile_stack.avail)->inner_group_offset;
#line 3909
  *inner_group_loc = (unsigned char )(regnum - this_group_regnum);
#line 3910
  while (1) {
#line 3910
    while ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated) {
#line 3910
      while (1) {
#line 3910
        old_buffer___10 = bufp->buffer;
#line 3910
        if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3910
          return ((reg_errcode_t )15);
        } else {

        }
#line 3910
        bufp->allocated <<= 1;
#line 3910
        if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3910
          bufp->allocated = (unsigned long )(1L << 16);
        } else {

        }
#line 3910
        tmp___82 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3910
        bufp->buffer = (unsigned char *)tmp___82;
#line 3910
        if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3910
          return ((reg_errcode_t )12);
        } else {

        }
#line 3910
        if ((unsigned long )old_buffer___10 != (unsigned long )bufp->buffer) {
#line 3910
          b = bufp->buffer + (b - old_buffer___10);
#line 3910
          begalt = bufp->buffer + (begalt - old_buffer___10);
#line 3910
          if (fixup_alt_jump) {
#line 3910
            fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___10);
          } else {

          }
#line 3910
          if (laststart) {
#line 3910
            laststart = bufp->buffer + (laststart - old_buffer___10);
          } else {

          }
#line 3910
          if (pending_exact) {
#line 3910
            pending_exact = bufp->buffer + (pending_exact - old_buffer___10);
          } else {

          }
        } else {

        }
#line 3910
        break;
      }
    }
#line 3910
    tmp___83 = b;
#line 3910
    b ++;
#line 3910
    *tmp___83 = (unsigned char)6;
#line 3910
    tmp___84 = b;
#line 3910
    b ++;
#line 3910
    *tmp___84 = (unsigned char )this_group_regnum;
#line 3910
    tmp___85 = b;
#line 3910
    b ++;
#line 3910
    *tmp___85 = (unsigned char )(regnum - this_group_regnum);
#line 3910
    break;
  }
} else {

}
---------
SID [2438] -> Line 3900
#line 3900
pending_exact = (unsigned char *)0;
---------
SID [2437] -> Line 3896
#line 3896
this_group_regnum = (compile_stack.stack + compile_stack.avail)->regnum;
---------
SID [2436] -> Line 3895
#line 3895
laststart = bufp->buffer + (compile_stack.stack + compile_stack.avail)->laststart_offset;
---------
SID [2435] -> Line 3891
#line 3891
fixup_alt_jump = (unsigned char *)0;
---------
SID [2434] -> Line 3891
#line 3891
fixup_alt_jump = (bufp->buffer + (compile_stack.stack + compile_stack.avail)->fixup_alt_jump) - 1;
---------
SID [2433] -> Line 3891
#line 3891
if ((compile_stack.stack + compile_stack.avail)->fixup_alt_jump) {
#line 3891
  fixup_alt_jump = (bufp->buffer + (compile_stack.stack + compile_stack.avail)->fixup_alt_jump) - 1;
} else {
#line 3891
  fixup_alt_jump = (unsigned char *)0;
}
---------
SID [2432] -> Line 3890
#line 3890
begalt = bufp->buffer + (compile_stack.stack + compile_stack.avail)->begalt_offset;
---------
SID [2431] -> Line 3889
#line 3889
(compile_stack.avail) --;
---------
SID [2430] -> Line -1

---------
SID [2429] -> Line 3878
#line 3878
return ((reg_errcode_t )16);
---------
SID [2428] -> Line 3876
#line 3876
goto normal_char;
---------
SID [2427] -> Line 3875
#line 3875
if (syntax & (unsigned int )(((((((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3876
  goto normal_char;
} else {
#line 3878
  return ((reg_errcode_t )16);
}
---------
SID [2426] -> Line 3874
#line 3874
if (compile_stack.avail == 0U) {
#line 3875
  if (syntax & (unsigned int )(((((((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3876
    goto normal_char;
  } else {
#line 3878
    return ((reg_errcode_t )16);
  }
} else {

}
---------
SID [2425] -> Line -1

---------
SID [2424] -> Line 3870
#line 3870
store_op1(13, fixup_alt_jump, ((b - 1) - fixup_alt_jump) - 3L);
---------
SID [2423] -> Line 3866
#line 3866
break;
---------
SID [2422] -> Line 3866
#line 3866
*tmp___81 = (unsigned char)19;
---------
SID [2421] -> Line 3866
#line 3866
b ++;
---------
SID [2420] -> Line 3866
#line 3866
tmp___81 = b;
---------
SID [2419] -> Line 3866
#line 3866
break;
---------
SID [2418] -> Line -1

---------
SID [2417] -> Line -1

---------
SID [2416] -> Line 3866
#line 3866
pending_exact = bufp->buffer + (pending_exact - old_buffer___9);
---------
SID [2415] -> Line 3866
#line 3866
if (pending_exact) {
#line 3866
  pending_exact = bufp->buffer + (pending_exact - old_buffer___9);
} else {

}
---------
SID [2414] -> Line -1

---------
SID [2413] -> Line 3866
#line 3866
laststart = bufp->buffer + (laststart - old_buffer___9);
---------
SID [2412] -> Line 3866
#line 3866
if (laststart) {
#line 3866
  laststart = bufp->buffer + (laststart - old_buffer___9);
} else {

}
---------
SID [2411] -> Line -1

---------
SID [2410] -> Line 3866
#line 3866
fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___9);
---------
SID [2409] -> Line 3866
#line 3866
if (fixup_alt_jump) {
#line 3866
  fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___9);
} else {

}
---------
SID [2408] -> Line 3866
#line 3866
begalt = bufp->buffer + (begalt - old_buffer___9);
---------
SID [2407] -> Line 3866
#line 3866
b = bufp->buffer + (b - old_buffer___9);
---------
SID [2406] -> Line 3866
#line 3866
if ((unsigned long )old_buffer___9 != (unsigned long )bufp->buffer) {
#line 3866
  b = bufp->buffer + (b - old_buffer___9);
#line 3866
  begalt = bufp->buffer + (begalt - old_buffer___9);
#line 3866
  if (fixup_alt_jump) {
#line 3866
    fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___9);
  } else {

  }
#line 3866
  if (laststart) {
#line 3866
    laststart = bufp->buffer + (laststart - old_buffer___9);
  } else {

  }
#line 3866
  if (pending_exact) {
#line 3866
    pending_exact = bufp->buffer + (pending_exact - old_buffer___9);
  } else {

  }
} else {

}
---------
SID [2405] -> Line -1

---------
SID [2404] -> Line 3866
#line 3866
return ((reg_errcode_t )12);
---------
SID [2403] -> Line 3866
#line 3866
if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3866
  return ((reg_errcode_t )12);
} else {

}
---------
SID [2402] -> Line 3866
#line 3866
bufp->buffer = (unsigned char *)tmp___80;
---------
SID [2401] -> Line 3866
#line 3866
tmp___80 = realloc((void *)bufp->buffer, bufp->allocated);
---------
SID [2400] -> Line -1

---------
SID [2399] -> Line 3866
#line 3866
bufp->allocated = (unsigned long )(1L << 16);
---------
SID [2398] -> Line 3866
#line 3866
if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3866
  bufp->allocated = (unsigned long )(1L << 16);
} else {

}
---------
SID [2397] -> Line 3866
#line 3866
bufp->allocated <<= 1;
---------
SID [2396] -> Line -1

---------
SID [2395] -> Line 3866
#line 3866
return ((reg_errcode_t )15);
---------
SID [2394] -> Line 3866
#line 3866
if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3866
  return ((reg_errcode_t )15);
} else {

}
---------
SID [2393] -> Line 3866
#line 3866
old_buffer___9 = bufp->buffer;
---------
SID [2392] -> Line 3866
#line 3866
while (1) {
#line 3866
  old_buffer___9 = bufp->buffer;
#line 3866
  if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3866
    return ((reg_errcode_t )15);
  } else {

  }
#line 3866
  bufp->allocated <<= 1;
#line 3866
  if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3866
    bufp->allocated = (unsigned long )(1L << 16);
  } else {

  }
#line 3866
  tmp___80 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3866
  bufp->buffer = (unsigned char *)tmp___80;
#line 3866
  if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3866
    return ((reg_errcode_t )12);
  } else {

  }
#line 3866
  if ((unsigned long )old_buffer___9 != (unsigned long )bufp->buffer) {
#line 3866
    b = bufp->buffer + (b - old_buffer___9);
#line 3866
    begalt = bufp->buffer + (begalt - old_buffer___9);
#line 3866
    if (fixup_alt_jump) {
#line 3866
      fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___9);
    } else {

    }
#line 3866
    if (laststart) {
#line 3866
      laststart = bufp->buffer + (laststart - old_buffer___9);
    } else {

    }
#line 3866
    if (pending_exact) {
#line 3866
      pending_exact = bufp->buffer + (pending_exact - old_buffer___9);
    } else {

    }
  } else {

  }
#line 3866
  break;
}
---------
SID [2391] -> Line 3866
#line 3866
break;
---------
SID [2390] -> Line -1

---------
SID [2389] -> Line 3866
#line 3866
if ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {

} else {
#line 3866
  break;
}
---------
SID [2388] -> Line 3866
#line 3866
while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 3866
  while (1) {
#line 3866
    old_buffer___9 = bufp->buffer;
#line 3866
    if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3866
      return ((reg_errcode_t )15);
    } else {

    }
#line 3866
    bufp->allocated <<= 1;
#line 3866
    if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3866
      bufp->allocated = (unsigned long )(1L << 16);
    } else {

    }
#line 3866
    tmp___80 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3866
    bufp->buffer = (unsigned char *)tmp___80;
#line 3866
    if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3866
      return ((reg_errcode_t )12);
    } else {

    }
#line 3866
    if ((unsigned long )old_buffer___9 != (unsigned long )bufp->buffer) {
#line 3866
      b = bufp->buffer + (b - old_buffer___9);
#line 3866
      begalt = bufp->buffer + (begalt - old_buffer___9);
#line 3866
      if (fixup_alt_jump) {
#line 3866
        fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___9);
      } else {

      }
#line 3866
      if (laststart) {
#line 3866
        laststart = bufp->buffer + (laststart - old_buffer___9);
      } else {

      }
#line 3866
      if (pending_exact) {
#line 3866
        pending_exact = bufp->buffer + (pending_exact - old_buffer___9);
      } else {

      }
    } else {

    }
#line 3866
    break;
  }
}
---------
SID [2387] -> Line 3866
#line 3866
while (1) {
#line 3866
  while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 3866
    while (1) {
#line 3866
      old_buffer___9 = bufp->buffer;
#line 3866
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3866
        return ((reg_errcode_t )15);
      } else {

      }
#line 3866
      bufp->allocated <<= 1;
#line 3866
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3866
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 3866
      tmp___80 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3866
      bufp->buffer = (unsigned char *)tmp___80;
#line 3866
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3866
        return ((reg_errcode_t )12);
      } else {

      }
#line 3866
      if ((unsigned long )old_buffer___9 != (unsigned long )bufp->buffer) {
#line 3866
        b = bufp->buffer + (b - old_buffer___9);
#line 3866
        begalt = bufp->buffer + (begalt - old_buffer___9);
#line 3866
        if (fixup_alt_jump) {
#line 3866
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___9);
        } else {

        }
#line 3866
        if (laststart) {
#line 3866
          laststart = bufp->buffer + (laststart - old_buffer___9);
        } else {

        }
#line 3866
        if (pending_exact) {
#line 3866
          pending_exact = bufp->buffer + (pending_exact - old_buffer___9);
        } else {

        }
      } else {

      }
#line 3866
      break;
    }
  }
#line 3866
  tmp___81 = b;
#line 3866
  b ++;
#line 3866
  *tmp___81 = (unsigned char)19;
#line 3866
  break;
}
---------
SID [2386] -> Line 3861
handle_close: 
#line 3861
if (fixup_alt_jump) {
#line 3866
  while (1) {
#line 3866
    while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 3866
      while (1) {
#line 3866
        old_buffer___9 = bufp->buffer;
#line 3866
        if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3866
          return ((reg_errcode_t )15);
        } else {

        }
#line 3866
        bufp->allocated <<= 1;
#line 3866
        if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3866
          bufp->allocated = (unsigned long )(1L << 16);
        } else {

        }
#line 3866
        tmp___80 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3866
        bufp->buffer = (unsigned char *)tmp___80;
#line 3866
        if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3866
          return ((reg_errcode_t )12);
        } else {

        }
#line 3866
        if ((unsigned long )old_buffer___9 != (unsigned long )bufp->buffer) {
#line 3866
          b = bufp->buffer + (b - old_buffer___9);
#line 3866
          begalt = bufp->buffer + (begalt - old_buffer___9);
#line 3866
          if (fixup_alt_jump) {
#line 3866
            fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___9);
          } else {

          }
#line 3866
          if (laststart) {
#line 3866
            laststart = bufp->buffer + (laststart - old_buffer___9);
          } else {

          }
#line 3866
          if (pending_exact) {
#line 3866
            pending_exact = bufp->buffer + (pending_exact - old_buffer___9);
          } else {

          }
        } else {

        }
#line 3866
        break;
      }
    }
#line 3866
    tmp___81 = b;
#line 3866
    b ++;
#line 3866
    *tmp___81 = (unsigned char)19;
#line 3866
    break;
  }
#line 3870
  store_op1(13, fixup_alt_jump, ((b - 1) - fixup_alt_jump) - 3L);
} else {

}
---------
SID [2385] -> Line -1

---------
SID [2384] -> Line 3858
#line 3858
return ((reg_errcode_t )16);
---------
SID [2383] -> Line 3856
#line 3856
goto normal_backslash;
---------
SID [2382] -> Line 3855
#line 3855
if (syntax & (unsigned int )(((((((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3856
  goto normal_backslash;
} else {
#line 3858
  return ((reg_errcode_t )16);
}
---------
SID [2381] -> Line 3854
#line 3854
if (compile_stack.avail == 0U) {
#line 3855
  if (syntax & (unsigned int )(((((((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3856
    goto normal_backslash;
  } else {
#line 3858
    return ((reg_errcode_t )16);
  }
} else {

}
---------
SID [2380] -> Line -1

---------
SID [2379] -> Line 3852
#line 3852
goto normal_backslash;
---------
SID [2378] -> Line 3852
case 41: 
#line 3852
if (syntax & (unsigned int )(((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3852
  goto normal_backslash;
} else {

}
---------
SID [2377] -> Line 3848
#line 3848
break;
---------
SID [2376] -> Line 3847
#line 3847
pending_exact = (unsigned char *)0;
---------
SID [2375] -> Line 3843
#line 3843
begalt = b;
---------
SID [2374] -> Line 3842
#line 3842
laststart = (unsigned char *)0;
---------
SID [2373] -> Line 3841
#line 3841
fixup_alt_jump = (unsigned char *)0;
---------
SID [2372] -> Line 3839
#line 3839
(compile_stack.avail) ++;
---------
SID [2371] -> Line -1

---------
SID [2370] -> Line 3836
#line 3836
break;
---------
SID [2369] -> Line 3836
#line 3836
*tmp___79 = (unsigned char)0;
---------
SID [2368] -> Line 3836
#line 3836
b ++;
---------
SID [2367] -> Line 3836
#line 3836
tmp___79 = b;
---------
SID [2366] -> Line 3836
#line 3836
*tmp___78 = (unsigned char )regnum;
---------
SID [2365] -> Line 3836
#line 3836
b ++;
---------
SID [2364] -> Line 3836
#line 3836
tmp___78 = b;
---------
SID [2363] -> Line 3836
#line 3836
*tmp___77 = (unsigned char)5;
---------
SID [2362] -> Line 3836
#line 3836
b ++;
---------
SID [2361] -> Line 3836
#line 3836
tmp___77 = b;
---------
SID [2360] -> Line 3836
#line 3836
break;
---------
SID [2359] -> Line -1

---------
SID [2358] -> Line -1

---------
SID [2357] -> Line 3836
#line 3836
pending_exact = bufp->buffer + (pending_exact - old_buffer___8);
---------
SID [2356] -> Line 3836
#line 3836
if (pending_exact) {
#line 3836
  pending_exact = bufp->buffer + (pending_exact - old_buffer___8);
} else {

}
---------
SID [2355] -> Line -1

---------
SID [2354] -> Line 3836
#line 3836
laststart = bufp->buffer + (laststart - old_buffer___8);
---------
SID [2353] -> Line 3836
#line 3836
if (laststart) {
#line 3836
  laststart = bufp->buffer + (laststart - old_buffer___8);
} else {

}
---------
SID [2352] -> Line -1

---------
SID [2351] -> Line 3836
#line 3836
fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___8);
---------
SID [2350] -> Line 3836
#line 3836
if (fixup_alt_jump) {
#line 3836
  fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___8);
} else {

}
---------
SID [2349] -> Line 3836
#line 3836
begalt = bufp->buffer + (begalt - old_buffer___8);
---------
SID [2348] -> Line 3836
#line 3836
b = bufp->buffer + (b - old_buffer___8);
---------
SID [2347] -> Line 3836
#line 3836
if ((unsigned long )old_buffer___8 != (unsigned long )bufp->buffer) {
#line 3836
  b = bufp->buffer + (b - old_buffer___8);
#line 3836
  begalt = bufp->buffer + (begalt - old_buffer___8);
#line 3836
  if (fixup_alt_jump) {
#line 3836
    fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___8);
  } else {

  }
#line 3836
  if (laststart) {
#line 3836
    laststart = bufp->buffer + (laststart - old_buffer___8);
  } else {

  }
#line 3836
  if (pending_exact) {
#line 3836
    pending_exact = bufp->buffer + (pending_exact - old_buffer___8);
  } else {

  }
} else {

}
---------
SID [2346] -> Line -1

---------
SID [2345] -> Line 3836
#line 3836
return ((reg_errcode_t )12);
---------
SID [2344] -> Line 3836
#line 3836
if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3836
  return ((reg_errcode_t )12);
} else {

}
---------
SID [2343] -> Line 3836
#line 3836
bufp->buffer = (unsigned char *)tmp___76;
---------
SID [2342] -> Line 3836
#line 3836
tmp___76 = realloc((void *)bufp->buffer, bufp->allocated);
---------
SID [2341] -> Line -1

---------
SID [2340] -> Line 3836
#line 3836
bufp->allocated = (unsigned long )(1L << 16);
---------
SID [2339] -> Line 3836
#line 3836
if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3836
  bufp->allocated = (unsigned long )(1L << 16);
} else {

}
---------
SID [2338] -> Line 3836
#line 3836
bufp->allocated <<= 1;
---------
SID [2337] -> Line -1

---------
SID [2336] -> Line 3836
#line 3836
return ((reg_errcode_t )15);
---------
SID [2335] -> Line 3836
#line 3836
if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3836
  return ((reg_errcode_t )15);
} else {

}
---------
SID [2334] -> Line 3836
#line 3836
old_buffer___8 = bufp->buffer;
---------
SID [2333] -> Line 3836
#line 3836
while (1) {
#line 3836
  old_buffer___8 = bufp->buffer;
#line 3836
  if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3836
    return ((reg_errcode_t )15);
  } else {

  }
#line 3836
  bufp->allocated <<= 1;
#line 3836
  if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3836
    bufp->allocated = (unsigned long )(1L << 16);
  } else {

  }
#line 3836
  tmp___76 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3836
  bufp->buffer = (unsigned char *)tmp___76;
#line 3836
  if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3836
    return ((reg_errcode_t )12);
  } else {

  }
#line 3836
  if ((unsigned long )old_buffer___8 != (unsigned long )bufp->buffer) {
#line 3836
    b = bufp->buffer + (b - old_buffer___8);
#line 3836
    begalt = bufp->buffer + (begalt - old_buffer___8);
#line 3836
    if (fixup_alt_jump) {
#line 3836
      fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___8);
    } else {

    }
#line 3836
    if (laststart) {
#line 3836
      laststart = bufp->buffer + (laststart - old_buffer___8);
    } else {

    }
#line 3836
    if (pending_exact) {
#line 3836
      pending_exact = bufp->buffer + (pending_exact - old_buffer___8);
    } else {

    }
  } else {

  }
#line 3836
  break;
}
---------
SID [2332] -> Line 3836
#line 3836
break;
---------
SID [2331] -> Line -1

---------
SID [2330] -> Line 3836
#line 3836
if ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated) {

} else {
#line 3836
  break;
}
---------
SID [2329] -> Line 3836
#line 3836
while ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated) {
#line 3836
  while (1) {
#line 3836
    old_buffer___8 = bufp->buffer;
#line 3836
    if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3836
      return ((reg_errcode_t )15);
    } else {

    }
#line 3836
    bufp->allocated <<= 1;
#line 3836
    if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3836
      bufp->allocated = (unsigned long )(1L << 16);
    } else {

    }
#line 3836
    tmp___76 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3836
    bufp->buffer = (unsigned char *)tmp___76;
#line 3836
    if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3836
      return ((reg_errcode_t )12);
    } else {

    }
#line 3836
    if ((unsigned long )old_buffer___8 != (unsigned long )bufp->buffer) {
#line 3836
      b = bufp->buffer + (b - old_buffer___8);
#line 3836
      begalt = bufp->buffer + (begalt - old_buffer___8);
#line 3836
      if (fixup_alt_jump) {
#line 3836
        fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___8);
      } else {

      }
#line 3836
      if (laststart) {
#line 3836
        laststart = bufp->buffer + (laststart - old_buffer___8);
      } else {

      }
#line 3836
      if (pending_exact) {
#line 3836
        pending_exact = bufp->buffer + (pending_exact - old_buffer___8);
      } else {

      }
    } else {

    }
#line 3836
    break;
  }
}
---------
SID [2328] -> Line 3836
#line 3836
while (1) {
#line 3836
  while ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated) {
#line 3836
    while (1) {
#line 3836
      old_buffer___8 = bufp->buffer;
#line 3836
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3836
        return ((reg_errcode_t )15);
      } else {

      }
#line 3836
      bufp->allocated <<= 1;
#line 3836
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3836
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 3836
      tmp___76 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3836
      bufp->buffer = (unsigned char *)tmp___76;
#line 3836
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3836
        return ((reg_errcode_t )12);
      } else {

      }
#line 3836
      if ((unsigned long )old_buffer___8 != (unsigned long )bufp->buffer) {
#line 3836
        b = bufp->buffer + (b - old_buffer___8);
#line 3836
        begalt = bufp->buffer + (begalt - old_buffer___8);
#line 3836
        if (fixup_alt_jump) {
#line 3836
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___8);
        } else {

        }
#line 3836
        if (laststart) {
#line 3836
          laststart = bufp->buffer + (laststart - old_buffer___8);
        } else {

        }
#line 3836
        if (pending_exact) {
#line 3836
          pending_exact = bufp->buffer + (pending_exact - old_buffer___8);
        } else {

        }
      } else {

      }
#line 3836
      break;
    }
  }
#line 3836
  tmp___77 = b;
#line 3836
  b ++;
#line 3836
  *tmp___77 = (unsigned char)5;
#line 3836
  tmp___78 = b;
#line 3836
  b ++;
#line 3836
  *tmp___78 = (unsigned char )regnum;
#line 3836
  tmp___79 = b;
#line 3836
  b ++;
#line 3836
  *tmp___79 = (unsigned char)0;
#line 3836
  break;
}
---------
SID [2327] -> Line 3835
#line 3835
(compile_stack.stack + compile_stack.avail)->inner_group_offset = (pattern_offset_t )((b - bufp->buffer) + 2L);
---------
SID [2326] -> Line 3833
#line 3833
if (regnum <= 255U) {
#line 3835
  (compile_stack.stack + compile_stack.avail)->inner_group_offset = (pattern_offset_t )((b - bufp->buffer) + 2L);
#line 3836
  while (1) {
#line 3836
    while ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated) {
#line 3836
      while (1) {
#line 3836
        old_buffer___8 = bufp->buffer;
#line 3836
        if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3836
          return ((reg_errcode_t )15);
        } else {

        }
#line 3836
        bufp->allocated <<= 1;
#line 3836
        if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3836
          bufp->allocated = (unsigned long )(1L << 16);
        } else {

        }
#line 3836
        tmp___76 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3836
        bufp->buffer = (unsigned char *)tmp___76;
#line 3836
        if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3836
          return ((reg_errcode_t )12);
        } else {

        }
#line 3836
        if ((unsigned long )old_buffer___8 != (unsigned long )bufp->buffer) {
#line 3836
          b = bufp->buffer + (b - old_buffer___8);
#line 3836
          begalt = bufp->buffer + (begalt - old_buffer___8);
#line 3836
          if (fixup_alt_jump) {
#line 3836
            fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___8);
          } else {

          }
#line 3836
          if (laststart) {
#line 3836
            laststart = bufp->buffer + (laststart - old_buffer___8);
          } else {

          }
#line 3836
          if (pending_exact) {
#line 3836
            pending_exact = bufp->buffer + (pending_exact - old_buffer___8);
          } else {

          }
        } else {

        }
#line 3836
        break;
      }
    }
#line 3836
    tmp___77 = b;
#line 3836
    b ++;
#line 3836
    *tmp___77 = (unsigned char)5;
#line 3836
    tmp___78 = b;
#line 3836
    b ++;
#line 3836
    *tmp___78 = (unsigned char )regnum;
#line 3836
    tmp___79 = b;
#line 3836
    b ++;
#line 3836
    *tmp___79 = (unsigned char)0;
#line 3836
    break;
  }
} else {

}
---------
SID [2325] -> Line 3827
#line 3827
(compile_stack.stack + compile_stack.avail)->regnum = regnum;
---------
SID [2324] -> Line 3826
#line 3826
(compile_stack.stack + compile_stack.avail)->laststart_offset = (pattern_offset_t )(b - bufp->buffer);
---------
SID [2323] -> Line 3824
#line 3824
(compile_stack.stack + compile_stack.avail)->fixup_alt_jump = 0;
---------
SID [2322] -> Line 3824
#line 3824
(compile_stack.stack + compile_stack.avail)->fixup_alt_jump = (pattern_offset_t )((fixup_alt_jump - bufp->buffer) + 1L);
---------
SID [2321] -> Line 3824
#line 3824
if (fixup_alt_jump) {
#line 3824
  (compile_stack.stack + compile_stack.avail)->fixup_alt_jump = (pattern_offset_t )((fixup_alt_jump - bufp->buffer) + 1L);
} else {
#line 3824
  (compile_stack.stack + compile_stack.avail)->fixup_alt_jump = 0;
}
---------
SID [2320] -> Line 3823
#line 3823
(compile_stack.stack + compile_stack.avail)->begalt_offset = (pattern_offset_t )(begalt - bufp->buffer);
---------
SID [2319] -> Line -1

---------
SID [2318] -> Line 3816
#line 3816
compile_stack.size <<= 1;
---------
SID [2317] -> Line -1

---------
SID [2316] -> Line 3814
#line 3814
return ((reg_errcode_t )12);
---------
SID [2315] -> Line 3814
#line 3814
if ((unsigned long )compile_stack.stack == (unsigned long )((void *)0)) {
#line 3814
  return ((reg_errcode_t )12);
} else {

}
---------
SID [2314] -> Line 3812
#line 3812
compile_stack.stack = (compile_stack_elt_t *)tmp___75;
---------
SID [2313] -> Line 3812
#line 3812
tmp___75 = realloc((void *)compile_stack.stack,
                   (unsigned long )(compile_stack.size << 1) * sizeof(compile_stack_elt_t ));
---------
SID [2312] -> Line 3810
#line 3810
if (compile_stack.avail == compile_stack.size) {
#line 3812
  tmp___75 = realloc((void *)compile_stack.stack,
                     (unsigned long )(compile_stack.size << 1) * sizeof(compile_stack_elt_t ));
#line 3812
  compile_stack.stack = (compile_stack_elt_t *)tmp___75;
#line 3814
  if ((unsigned long )compile_stack.stack == (unsigned long )((void *)0)) {
#line 3814
    return ((reg_errcode_t )12);
  } else {

  }
#line 3816
  compile_stack.size <<= 1;
} else {

}
---------
SID [2311] -> Line 3808
#line 3808
regnum ++;
---------
SID [2310] -> Line 3807
handle_open: 
#line 3807
(bufp->re_nsub) ++;
---------
SID [2309] -> Line -1

---------
SID [2308] -> Line 3804
#line 3804
goto normal_backslash;
---------
SID [2307] -> Line 3803
case 40: 
#line 3803
if (syntax & (unsigned int )(((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3804
  goto normal_backslash;
} else {

}
---------
SID [2306] -> Line 3800
#line 3800
switch ((int )c) {
case 40: 
#line 3803
if (syntax & (unsigned int )(((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3804
  goto normal_backslash;
} else {

}
handle_open: 
#line 3807
(bufp->re_nsub) ++;
#line 3808
regnum ++;
#line 3810
if (compile_stack.avail == compile_stack.size) {
#line 3812
  tmp___75 = realloc((void *)compile_stack.stack,
                     (unsigned long )(compile_stack.size << 1) * sizeof(compile_stack_elt_t ));
#line 3812
  compile_stack.stack = (compile_stack_elt_t *)tmp___75;
#line 3814
  if ((unsigned long )compile_stack.stack == (unsigned long )((void *)0)) {
#line 3814
    return ((reg_errcode_t )12);
  } else {

  }
#line 3816
  compile_stack.size <<= 1;
} else {

}
#line 3823
(compile_stack.stack + compile_stack.avail)->begalt_offset = (pattern_offset_t )(begalt - bufp->buffer);
#line 3824
if (fixup_alt_jump) {
#line 3824
  (compile_stack.stack + compile_stack.avail)->fixup_alt_jump = (pattern_offset_t )((fixup_alt_jump - bufp->buffer) + 1L);
} else {
#line 3824
  (compile_stack.stack + compile_stack.avail)->fixup_alt_jump = 0;
}
#line 3826
(compile_stack.stack + compile_stack.avail)->laststart_offset = (pattern_offset_t )(b - bufp->buffer);
#line 3827
(compile_stack.stack + compile_stack.avail)->regnum = regnum;
#line 3833
if (regnum <= 255U) {
#line 3835
  (compile_stack.stack + compile_stack.avail)->inner_group_offset = (pattern_offset_t )((b - bufp->buffer) + 2L);
#line 3836
  while (1) {
#line 3836
    while ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated) {
#line 3836
      while (1) {
#line 3836
        old_buffer___8 = bufp->buffer;
#line 3836
        if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3836
          return ((reg_errcode_t )15);
        } else {

        }
#line 3836
        bufp->allocated <<= 1;
#line 3836
        if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3836
          bufp->allocated = (unsigned long )(1L << 16);
        } else {

        }
#line 3836
        tmp___76 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3836
        bufp->buffer = (unsigned char *)tmp___76;
#line 3836
        if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3836
          return ((reg_errcode_t )12);
        } else {

        }
#line 3836
        if ((unsigned long )old_buffer___8 != (unsigned long )bufp->buffer) {
#line 3836
          b = bufp->buffer + (b - old_buffer___8);
#line 3836
          begalt = bufp->buffer + (begalt - old_buffer___8);
#line 3836
          if (fixup_alt_jump) {
#line 3836
            fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___8);
          } else {

          }
#line 3836
          if (laststart) {
#line 3836
            laststart = bufp->buffer + (laststart - old_buffer___8);
          } else {

          }
#line 3836
          if (pending_exact) {
#line 3836
            pending_exact = bufp->buffer + (pending_exact - old_buffer___8);
          } else {

          }
        } else {

        }
#line 3836
        break;
      }
    }
#line 3836
    tmp___77 = b;
#line 3836
    b ++;
#line 3836
    *tmp___77 = (unsigned char)5;
#line 3836
    tmp___78 = b;
#line 3836
    b ++;
#line 3836
    *tmp___78 = (unsigned char )regnum;
#line 3836
    tmp___79 = b;
#line 3836
    b ++;
#line 3836
    *tmp___79 = (unsigned char)0;
#line 3836
    break;
  }
} else {

}
#line 3839
(compile_stack.avail) ++;
#line 3841
fixup_alt_jump = (unsigned char *)0;
#line 3842
laststart = (unsigned char *)0;
#line 3843
begalt = b;
#line 3847
pending_exact = (unsigned char *)0;
#line 3848
break;
case 41: 
#line 3852
if (syntax & (unsigned int )(((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3852
  goto normal_backslash;
} else {

}
#line 3854
if (compile_stack.avail == 0U) {
#line 3855
  if (syntax & (unsigned int )(((((((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3856
    goto normal_backslash;
  } else {
#line 3858
    return ((reg_errcode_t )16);
  }
} else {

}
handle_close: 
#line 3861
if (fixup_alt_jump) {
#line 3866
  while (1) {
#line 3866
    while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 3866
      while (1) {
#line 3866
        old_buffer___9 = bufp->buffer;
#line 3866
        if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3866
          return ((reg_errcode_t )15);
        } else {

        }
#line 3866
        bufp->allocated <<= 1;
#line 3866
        if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3866
          bufp->allocated = (unsigned long )(1L << 16);
        } else {

        }
#line 3866
        tmp___80 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3866
        bufp->buffer = (unsigned char *)tmp___80;
#line 3866
        if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3866
          return ((reg_errcode_t )12);
        } else {

        }
#line 3866
        if ((unsigned long )old_buffer___9 != (unsigned long )bufp->buffer) {
#line 3866
          b = bufp->buffer + (b - old_buffer___9);
#line 3866
          begalt = bufp->buffer + (begalt - old_buffer___9);
#line 3866
          if (fixup_alt_jump) {
#line 3866
            fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___9);
          } else {

          }
#line 3866
          if (laststart) {
#line 3866
            laststart = bufp->buffer + (laststart - old_buffer___9);
          } else {

          }
#line 3866
          if (pending_exact) {
#line 3866
            pending_exact = bufp->buffer + (pending_exact - old_buffer___9);
          } else {

          }
        } else {

        }
#line 3866
        break;
      }
    }
#line 3866
    tmp___81 = b;
#line 3866
    b ++;
#line 3866
    *tmp___81 = (unsigned char)19;
#line 3866
    break;
  }
#line 3870
  store_op1(13, fixup_alt_jump, ((b - 1) - fixup_alt_jump) - 3L);
} else {

}
#line 3874
if (compile_stack.avail == 0U) {
#line 3875
  if (syntax & (unsigned int )(((((((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3876
    goto normal_char;
  } else {
#line 3878
    return ((reg_errcode_t )16);
  }
} else {

}
#line 3889
(compile_stack.avail) --;
#line 3890
begalt = bufp->buffer + (compile_stack.stack + compile_stack.avail)->begalt_offset;
#line 3891
if ((compile_stack.stack + compile_stack.avail)->fixup_alt_jump) {
#line 3891
  fixup_alt_jump = (bufp->buffer + (compile_stack.stack + compile_stack.avail)->fixup_alt_jump) - 1;
} else {
#line 3891
  fixup_alt_jump = (unsigned char *)0;
}
#line 3895
laststart = bufp->buffer + (compile_stack.stack + compile_stack.avail)->laststart_offset;
#line 3896
this_group_regnum = (compile_stack.stack + compile_stack.avail)->regnum;
#line 3900
pending_exact = (unsigned char *)0;
#line 3904
if (this_group_regnum <= 255U) {
#line 3906
  inner_group_loc = bufp->buffer + (compile_stack.stack + compile_stack.avail)->inner_group_offset;
#line 3909
  *inner_group_loc = (unsigned char )(regnum - this_group_regnum);
#line 3910
  while (1) {
#line 3910
    while ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated) {
#line 3910
      while (1) {
#line 3910
        old_buffer___10 = bufp->buffer;
#line 3910
        if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3910
          return ((reg_errcode_t )15);
        } else {

        }
#line 3910
        bufp->allocated <<= 1;
#line 3910
        if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3910
          bufp->allocated = (unsigned long )(1L << 16);
        } else {

        }
#line 3910
        tmp___82 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3910
        bufp->buffer = (unsigned char *)tmp___82;
#line 3910
        if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3910
          return ((reg_errcode_t )12);
        } else {

        }
#line 3910
        if ((unsigned long )old_buffer___10 != (unsigned long )bufp->buffer) {
#line 3910
          b = bufp->buffer + (b - old_buffer___10);
#line 3910
          begalt = bufp->buffer + (begalt - old_buffer___10);
#line 3910
          if (fixup_alt_jump) {
#line 3910
            fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___10);
          } else {

          }
#line 3910
          if (laststart) {
#line 3910
            laststart = bufp->buffer + (laststart - old_buffer___10);
          } else {

          }
#line 3910
          if (pending_exact) {
#line 3910
            pending_exact = bufp->buffer + (pending_exact - old_buffer___10);
          } else {

          }
        } else {

        }
#line 3910
        break;
      }
    }
#line 3910
    tmp___83 = b;
#line 3910
    b ++;
#line 3910
    *tmp___83 = (unsigned char)6;
#line 3910
    tmp___84 = b;
#line 3910
    b ++;
#line 3910
    *tmp___84 = (unsigned char )this_group_regnum;
#line 3910
    tmp___85 = b;
#line 3910
    b ++;
#line 3910
    *tmp___85 = (unsigned char )(regnum - this_group_regnum);
#line 3910
    break;
  }
} else {

}
#line 3914
break;
case 124: 
#line 3918
if (syntax & (unsigned int )((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3919
  goto normal_backslash;
} else
#line 3918
if (syntax & (unsigned int )(((((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3919
  goto normal_backslash;
} else {

}
handle_alt: 
#line 3921
if (syntax & (unsigned int )((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3922
  goto normal_char;
} else {

}
#line 3926
while ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated) {
#line 3926
  while (1) {
#line 3926
    old_buffer___11 = bufp->buffer;
#line 3926
    if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3926
      return ((reg_errcode_t )15);
    } else {

    }
#line 3926
    bufp->allocated <<= 1;
#line 3926
    if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3926
      bufp->allocated = (unsigned long )(1L << 16);
    } else {

    }
#line 3926
    tmp___86 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3926
    bufp->buffer = (unsigned char *)tmp___86;
#line 3926
    if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3926
      return ((reg_errcode_t )12);
    } else {

    }
#line 3926
    if ((unsigned long )old_buffer___11 != (unsigned long )bufp->buffer) {
#line 3926
      b = bufp->buffer + (b - old_buffer___11);
#line 3926
      begalt = bufp->buffer + (begalt - old_buffer___11);
#line 3926
      if (fixup_alt_jump) {
#line 3926
        fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___11);
      } else {

      }
#line 3926
      if (laststart) {
#line 3926
        laststart = bufp->buffer + (laststart - old_buffer___11);
      } else {

      }
#line 3926
      if (pending_exact) {
#line 3926
        pending_exact = bufp->buffer + (pending_exact - old_buffer___11);
      } else {

      }
    } else {

    }
#line 3926
    break;
  }
}
#line 3927
insert_op1(14, begalt, ((b + 6) - begalt) - 3L, b);
#line 3928
pending_exact = (unsigned char *)0;
#line 3929
b += 3;
#line 3947
if (fixup_alt_jump) {
#line 3948
  store_op1(13, fixup_alt_jump, (b - fixup_alt_jump) - 3L);
} else {

}
#line 3953
fixup_alt_jump = b;
#line 3954
while ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated) {
#line 3954
  while (1) {
#line 3954
    old_buffer___12 = bufp->buffer;
#line 3954
    if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3954
      return ((reg_errcode_t )15);
    } else {

    }
#line 3954
    bufp->allocated <<= 1;
#line 3954
    if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3954
      bufp->allocated = (unsigned long )(1L << 16);
    } else {

    }
#line 3954
    tmp___87 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3954
    bufp->buffer = (unsigned char *)tmp___87;
#line 3954
    if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3954
      return ((reg_errcode_t )12);
    } else {

    }
#line 3954
    if ((unsigned long )old_buffer___12 != (unsigned long )bufp->buffer) {
#line 3954
      b = bufp->buffer + (b - old_buffer___12);
#line 3954
      begalt = bufp->buffer + (begalt - old_buffer___12);
#line 3954
      if (fixup_alt_jump) {
#line 3954
        fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___12);
      } else {

      }
#line 3954
      if (laststart) {
#line 3954
        laststart = bufp->buffer + (laststart - old_buffer___12);
      } else {

      }
#line 3954
      if (pending_exact) {
#line 3954
        pending_exact = bufp->buffer + (pending_exact - old_buffer___12);
      } else {

      }
    } else {

    }
#line 3954
    break;
  }
}
#line 3955
b += 3;
#line 3957
laststart = (unsigned char *)0;
#line 3958
begalt = b;
#line 3959
break;
case 123: 
#line 3964
if (! (syntax & (unsigned int )(((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
#line 3969
  goto normal_backslash;
} else
#line 3964
if (syntax & (unsigned int )(((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3964
  if (syntax & (unsigned int )((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3969
    goto normal_backslash;
  } else {
#line 3964
    goto _L___21;
  }
} else
_L___21: /* CIL Label */ 
#line 3964
if ((unsigned long )(p - 2) == (unsigned long )pattern) {
#line 3964
  if ((unsigned long )p == (unsigned long )pend) {
#line 3969
    goto normal_backslash;
  } else {

  }
} else {

}
handle_interval: 
#line 3976
lower_bound = -1;
#line 3976
upper_bound = -1;
#line 3978
beg_interval = p - 1;
#line 3980
if ((unsigned long )p == (unsigned long )pend) {
#line 3982
  if (syntax & (unsigned int )((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3983
    goto unfetch_interval;
  } else {
#line 3985
    return ((reg_errcode_t )9);
  }
} else {

}
#line 3988
if ((unsigned long )p != (unsigned long )pend) {
#line 3988
  while (1) {
#line 3988
    if ((unsigned long )p == (unsigned long )pend) {
#line 3988
      return ((reg_errcode_t )14);
    } else {

    }
#line 3988
    tmp___88 = p;
#line 3988
    p ++;
#line 3988
    c = (unsigned char )*tmp___88;
#line 3988
    if (translate) {
#line 3988
      c = (unsigned char )*(translate + c);
    } else {

    }
#line 3988
    break;
  }
#line 3988
  while (1) {
#line 3988
    if (((int )c & -128) == 0) {
#line 3988
      tmp___90 = __ctype_b_loc();
#line 3988
      if ((int const   )*(*tmp___90 + (int )c) & 2048) {

      } else {
#line 3988
        break;
      }
    } else {
#line 3988
      break;
    }
#line 3988
    if (lower_bound < 0) {
#line 3988
      lower_bound = 0;
    } else {

    }
#line 3988
    lower_bound = (lower_bound * 10 + (int )c) - 48;
#line 3988
    if ((unsigned long )p == (unsigned long )pend) {
#line 3988
      break;
    } else {

    }
#line 3988
    while (1) {
#line 3988
      if ((unsigned long )p == (unsigned long )pend) {
#line 3988
        return ((reg_errcode_t )14);
      } else {

      }
#line 3988
      tmp___89 = p;
#line 3988
      p ++;
#line 3988
      c = (unsigned char )*tmp___89;
#line 3988
      if (translate) {
#line 3988
        c = (unsigned char )*(translate + c);
      } else {

      }
#line 3988
      break;
    }
  }
} else {

}
#line 3990
if ((int )c == 44) {
#line 3992
  if ((unsigned long )p != (unsigned long )pend) {
#line 3992
    while (1) {
#line 3992
      if ((unsigned long )p == (unsigned long )pend) {
#line 3992
        return ((reg_errcode_t )14);
      } else {

      }
#line 3992
      tmp___91 = p;
#line 3992
      p ++;
#line 3992
      c = (unsigned char )*tmp___91;
#line 3992
      if (translate) {
#line 3992
        c = (unsigned char )*(translate + c);
      } else {

      }
#line 3992
      break;
    }
#line 3992
    while (1) {
#line 3992
      if (((int )c & -128) == 0) {
#line 3992
        tmp___93 = __ctype_b_loc();
#line 3992
        if ((int const   )*(*tmp___93 + (int )c) & 2048) {

        } else {
#line 3992
          break;
        }
      } else {
#line 3992
        break;
      }
#line 3992
      if (upper_bound < 0) {
#line 3992
        upper_bound = 0;
      } else {

      }
#line 3992
      upper_bound = (upper_bound * 10 + (int )c) - 48;
#line 3992
      if ((unsigned long )p == (unsigned long )pend) {
#line 3992
        break;
      } else {

      }
#line 3992
      while (1) {
#line 3992
        if ((unsigned long )p == (unsigned long )pend) {
#line 3992
          return ((reg_errcode_t )14);
        } else {

        }
#line 3992
        tmp___92 = p;
#line 3992
        p ++;
#line 3992
        c = (unsigned char )*tmp___92;
#line 3992
        if (translate) {
#line 3992
          c = (unsigned char )*(translate + c);
        } else {

        }
#line 3992
        break;
      }
    }
  } else {

  }
#line 3993
  if (upper_bound < 0) {
#line 3993
    upper_bound = (1 << 15) - 1;
  } else {

  }
} else {
#line 3997
  upper_bound = lower_bound;
}
#line 3999
if (lower_bound < 0) {
#line 3999
  goto _L___22;
} else
#line 3999
if (upper_bound > (1 << 15) - 1) {
#line 3999
  goto _L___22;
} else
#line 3999
if (lower_bound > upper_bound) {
  _L___22: /* CIL Label */ 
#line 4002
  if (syntax & (unsigned int )((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 4003
    goto unfetch_interval;
  } else {
#line 4005
    return ((reg_errcode_t )10);
  }
} else {

}
#line 4008
if (! (syntax & (unsigned int )((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
#line 4010
  if ((int )c != 92) {
#line 4010
    return ((reg_errcode_t )9);
  } else {

  }
#line 4012
  while (1) {
#line 4012
    if ((unsigned long )p == (unsigned long )pend) {
#line 4012
      return ((reg_errcode_t )14);
    } else {

    }
#line 4012
    tmp___94 = p;
#line 4012
    p ++;
#line 4012
    c = (unsigned char )*tmp___94;
#line 4012
    if (translate) {
#line 4012
      c = (unsigned char )*(translate + c);
    } else {

    }
#line 4012
    break;
  }
} else {

}
#line 4015
if ((int )c != 125) {
#line 4017
  if (syntax & (unsigned int )((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 4018
    goto unfetch_interval;
  } else {
#line 4020
    return ((reg_errcode_t )10);
  }
} else {

}
#line 4026
if (! laststart) {
#line 4028
  if (syntax & (unsigned int )(((((1 << 1) << 1) << 1) << 1) << 1)) {
#line 4029
    return ((reg_errcode_t )13);
  } else
#line 4030
  if (syntax & (unsigned int )((((1 << 1) << 1) << 1) << 1)) {
#line 4031
    laststart = b;
  } else {
#line 4033
    goto unfetch_interval;
  }
} else {

}
#line 4039
if (upper_bound == 0) {
#line 4041
  while ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated) {
#line 4041
    while (1) {
#line 4041
      old_buffer___13 = bufp->buffer;
#line 4041
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4041
        return ((reg_errcode_t )15);
      } else {

      }
#line 4041
      bufp->allocated <<= 1;
#line 4041
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4041
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 4041
      tmp___95 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4041
      bufp->buffer = (unsigned char *)tmp___95;
#line 4041
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4041
        return ((reg_errcode_t )12);
      } else {

      }
#line 4041
      if ((unsigned long )old_buffer___13 != (unsigned long )bufp->buffer) {
#line 4041
        b = bufp->buffer + (b - old_buffer___13);
#line 4041
        begalt = bufp->buffer + (begalt - old_buffer___13);
#line 4041
        if (fixup_alt_jump) {
#line 4041
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___13);
        } else {

        }
#line 4041
        if (laststart) {
#line 4041
          laststart = bufp->buffer + (laststart - old_buffer___13);
        } else {

        }
#line 4041
        if (pending_exact) {
#line 4041
          pending_exact = bufp->buffer + (pending_exact - old_buffer___13);
        } else {

        }
      } else {

      }
#line 4041
      break;
    }
  }
#line 4042
  insert_op1(12, laststart, ((b + 3) - laststart) - 3L, b);
#line 4043
  b += 3;
} else {
#line 4058
  nbytes = (unsigned int )(10 + (upper_bound > 1) * 10);
#line 4060
  while ((unsigned long )((b - bufp->buffer) + (long )nbytes) > bufp->allocated) {
#line 4060
    while (1) {
#line 4060
      old_buffer___14 = bufp->buffer;
#line 4060
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4060
        return ((reg_errcode_t )15);
      } else {

      }
#line 4060
      bufp->allocated <<= 1;
#line 4060
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4060
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 4060
      tmp___96 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4060
      bufp->buffer = (unsigned char *)tmp___96;
#line 4060
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4060
        return ((reg_errcode_t )12);
      } else {

      }
#line 4060
      if ((unsigned long )old_buffer___14 != (unsigned long )bufp->buffer) {
#line 4060
        b = bufp->buffer + (b - old_buffer___14);
#line 4060
        begalt = bufp->buffer + (begalt - old_buffer___14);
#line 4060
        if (fixup_alt_jump) {
#line 4060
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___14);
        } else {

        }
#line 4060
        if (laststart) {
#line 4060
          laststart = bufp->buffer + (laststart - old_buffer___14);
        } else {

        }
#line 4060
        if (pending_exact) {
#line 4060
          pending_exact = bufp->buffer + (pending_exact - old_buffer___14);
        } else {

        }
      } else {

      }
#line 4060
      break;
    }
  }
#line 4067
  insert_op2(20, laststart,
             (((b + 5) + (upper_bound > 1) * 5) - laststart) - 3L,
             lower_bound, b);
#line 4070
  b += 5;
#line 4076
  insert_op2(22, laststart, 5, lower_bound, b);
#line 4077
  b += 5;
#line 4079
  if (upper_bound > 1) {
#line 4087
    store_op2(21, b, ((laststart + 5) - b) - 3L, upper_bound - 1);
#line 4089
    b += 5;
#line 4105
    insert_op2(22, laststart, b - laststart, upper_bound - 1, b);
#line 4107
    b += 5;
  } else {

  }
}
#line 4110
pending_exact = (unsigned char *)0;
#line 4111
beg_interval = (char const   *)((void *)0);
#line 4113
break;
unfetch_interval: 
#line 4118
p = beg_interval;
#line 4119
beg_interval = (char const   *)((void *)0);
#line 4122
while (1) {
#line 4122
  if ((unsigned long )p == (unsigned long )pend) {
#line 4122
    return ((reg_errcode_t )14);
  } else {

  }
#line 4122
  tmp___97 = p;
#line 4122
  p ++;
#line 4122
  c = (unsigned char )*tmp___97;
#line 4122
  if (translate) {
#line 4122
    c = (unsigned char )*(translate + c);
  } else {

  }
#line 4122
  break;
}
#line 4124
if (! (syntax & (unsigned int )((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
#line 4126
  if ((unsigned long )p > (unsigned long )pattern) {
#line 4126
    if ((int const   )*(p + -1) == 92) {
#line 4127
      goto normal_backslash;
    } else {

    }
  } else {

  }
} else {

}
#line 4129
goto normal_char;
case 119: 
#line 4153
laststart = b;
#line 4154
while (1) {
#line 4154
  while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 4154
    while (1) {
#line 4154
      old_buffer___15 = bufp->buffer;
#line 4154
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4154
        return ((reg_errcode_t )15);
      } else {

      }
#line 4154
      bufp->allocated <<= 1;
#line 4154
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4154
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 4154
      tmp___98 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4154
      bufp->buffer = (unsigned char *)tmp___98;
#line 4154
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4154
        return ((reg_errcode_t )12);
      } else {

      }
#line 4154
      if ((unsigned long )old_buffer___15 != (unsigned long )bufp->buffer) {
#line 4154
        b = bufp->buffer + (b - old_buffer___15);
#line 4154
        begalt = bufp->buffer + (begalt - old_buffer___15);
#line 4154
        if (fixup_alt_jump) {
#line 4154
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___15);
        } else {

        }
#line 4154
        if (laststart) {
#line 4154
          laststart = bufp->buffer + (laststart - old_buffer___15);
        } else {

        }
#line 4154
        if (pending_exact) {
#line 4154
          pending_exact = bufp->buffer + (pending_exact - old_buffer___15);
        } else {

        }
      } else {

      }
#line 4154
      break;
    }
  }
#line 4154
  tmp___99 = b;
#line 4154
  b ++;
#line 4154
  *tmp___99 = (unsigned char)23;
#line 4154
  break;
}
#line 4155
break;
case 87: 
#line 4159
laststart = b;
#line 4160
while (1) {
#line 4160
  while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 4160
    while (1) {
#line 4160
      old_buffer___16 = bufp->buffer;
#line 4160
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4160
        return ((reg_errcode_t )15);
      } else {

      }
#line 4160
      bufp->allocated <<= 1;
#line 4160
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4160
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 4160
      tmp___100 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4160
      bufp->buffer = (unsigned char *)tmp___100;
#line 4160
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4160
        return ((reg_errcode_t )12);
      } else {

      }
#line 4160
      if ((unsigned long )old_buffer___16 != (unsigned long )bufp->buffer) {
#line 4160
        b = bufp->buffer + (b - old_buffer___16);
#line 4160
        begalt = bufp->buffer + (begalt - old_buffer___16);
#line 4160
        if (fixup_alt_jump) {
#line 4160
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___16);
        } else {

        }
#line 4160
        if (laststart) {
#line 4160
          laststart = bufp->buffer + (laststart - old_buffer___16);
        } else {

        }
#line 4160
        if (pending_exact) {
#line 4160
          pending_exact = bufp->buffer + (pending_exact - old_buffer___16);
        } else {

        }
      } else {

      }
#line 4160
      break;
    }
  }
#line 4160
  tmp___101 = b;
#line 4160
  b ++;
#line 4160
  *tmp___101 = (unsigned char)24;
#line 4160
  break;
}
#line 4161
break;
case 60: 
#line 4165
while (1) {
#line 4165
  while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 4165
    while (1) {
#line 4165
      old_buffer___17 = bufp->buffer;
#line 4165
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4165
        return ((reg_errcode_t )15);
      } else {

      }
#line 4165
      bufp->allocated <<= 1;
#line 4165
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4165
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 4165
      tmp___102 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4165
      bufp->buffer = (unsigned char *)tmp___102;
#line 4165
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4165
        return ((reg_errcode_t )12);
      } else {

      }
#line 4165
      if ((unsigned long )old_buffer___17 != (unsigned long )bufp->buffer) {
#line 4165
        b = bufp->buffer + (b - old_buffer___17);
#line 4165
        begalt = bufp->buffer + (begalt - old_buffer___17);
#line 4165
        if (fixup_alt_jump) {
#line 4165
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___17);
        } else {

        }
#line 4165
        if (laststart) {
#line 4165
          laststart = bufp->buffer + (laststart - old_buffer___17);
        } else {

        }
#line 4165
        if (pending_exact) {
#line 4165
          pending_exact = bufp->buffer + (pending_exact - old_buffer___17);
        } else {

        }
      } else {

      }
#line 4165
      break;
    }
  }
#line 4165
  tmp___103 = b;
#line 4165
  b ++;
#line 4165
  *tmp___103 = (unsigned char)25;
#line 4165
  break;
}
#line 4166
break;
case 62: 
#line 4169
while (1) {
#line 4169
  while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 4169
    while (1) {
#line 4169
      old_buffer___18 = bufp->buffer;
#line 4169
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4169
        return ((reg_errcode_t )15);
      } else {

      }
#line 4169
      bufp->allocated <<= 1;
#line 4169
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4169
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 4169
      tmp___104 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4169
      bufp->buffer = (unsigned char *)tmp___104;
#line 4169
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4169
        return ((reg_errcode_t )12);
      } else {

      }
#line 4169
      if ((unsigned long )old_buffer___18 != (unsigned long )bufp->buffer) {
#line 4169
        b = bufp->buffer + (b - old_buffer___18);
#line 4169
        begalt = bufp->buffer + (begalt - old_buffer___18);
#line 4169
        if (fixup_alt_jump) {
#line 4169
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___18);
        } else {

        }
#line 4169
        if (laststart) {
#line 4169
          laststart = bufp->buffer + (laststart - old_buffer___18);
        } else {

        }
#line 4169
        if (pending_exact) {
#line 4169
          pending_exact = bufp->buffer + (pending_exact - old_buffer___18);
        } else {

        }
      } else {

      }
#line 4169
      break;
    }
  }
#line 4169
  tmp___105 = b;
#line 4169
  b ++;
#line 4169
  *tmp___105 = (unsigned char)26;
#line 4169
  break;
}
#line 4170
break;
case 98: 
#line 4173
while (1) {
#line 4173
  while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 4173
    while (1) {
#line 4173
      old_buffer___19 = bufp->buffer;
#line 4173
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4173
        return ((reg_errcode_t )15);
      } else {

      }
#line 4173
      bufp->allocated <<= 1;
#line 4173
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4173
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 4173
      tmp___106 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4173
      bufp->buffer = (unsigned char *)tmp___106;
#line 4173
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4173
        return ((reg_errcode_t )12);
      } else {

      }
#line 4173
      if ((unsigned long )old_buffer___19 != (unsigned long )bufp->buffer) {
#line 4173
        b = bufp->buffer + (b - old_buffer___19);
#line 4173
        begalt = bufp->buffer + (begalt - old_buffer___19);
#line 4173
        if (fixup_alt_jump) {
#line 4173
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___19);
        } else {

        }
#line 4173
        if (laststart) {
#line 4173
          laststart = bufp->buffer + (laststart - old_buffer___19);
        } else {

        }
#line 4173
        if (pending_exact) {
#line 4173
          pending_exact = bufp->buffer + (pending_exact - old_buffer___19);
        } else {

        }
      } else {

      }
#line 4173
      break;
    }
  }
#line 4173
  tmp___107 = b;
#line 4173
  b ++;
#line 4173
  *tmp___107 = (unsigned char)27;
#line 4173
  break;
}
#line 4174
break;
case 66: 
#line 4177
while (1) {
#line 4177
  while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 4177
    while (1) {
#line 4177
      old_buffer___20 = bufp->buffer;
#line 4177
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4177
        return ((reg_errcode_t )15);
      } else {

      }
#line 4177
      bufp->allocated <<= 1;
#line 4177
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4177
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 4177
      tmp___108 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4177
      bufp->buffer = (unsigned char *)tmp___108;
#line 4177
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4177
        return ((reg_errcode_t )12);
      } else {

      }
#line 4177
      if ((unsigned long )old_buffer___20 != (unsigned long )bufp->buffer) {
#line 4177
        b = bufp->buffer + (b - old_buffer___20);
#line 4177
        begalt = bufp->buffer + (begalt - old_buffer___20);
#line 4177
        if (fixup_alt_jump) {
#line 4177
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___20);
        } else {

        }
#line 4177
        if (laststart) {
#line 4177
          laststart = bufp->buffer + (laststart - old_buffer___20);
        } else {

        }
#line 4177
        if (pending_exact) {
#line 4177
          pending_exact = bufp->buffer + (pending_exact - old_buffer___20);
        } else {

        }
      } else {

      }
#line 4177
      break;
    }
  }
#line 4177
  tmp___109 = b;
#line 4177
  b ++;
#line 4177
  *tmp___109 = (unsigned char)28;
#line 4177
  break;
}
#line 4178
break;
case 96: 
#line 4181
while (1) {
#line 4181
  while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 4181
    while (1) {
#line 4181
      old_buffer___21 = bufp->buffer;
#line 4181
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4181
        return ((reg_errcode_t )15);
      } else {

      }
#line 4181
      bufp->allocated <<= 1;
#line 4181
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4181
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 4181
      tmp___110 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4181
      bufp->buffer = (unsigned char *)tmp___110;
#line 4181
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4181
        return ((reg_errcode_t )12);
      } else {

      }
#line 4181
      if ((unsigned long )old_buffer___21 != (unsigned long )bufp->buffer) {
#line 4181
        b = bufp->buffer + (b - old_buffer___21);
#line 4181
        begalt = bufp->buffer + (begalt - old_buffer___21);
#line 4181
        if (fixup_alt_jump) {
#line 4181
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___21);
        } else {

        }
#line 4181
        if (laststart) {
#line 4181
          laststart = bufp->buffer + (laststart - old_buffer___21);
        } else {

        }
#line 4181
        if (pending_exact) {
#line 4181
          pending_exact = bufp->buffer + (pending_exact - old_buffer___21);
        } else {

        }
      } else {

      }
#line 4181
      break;
    }
  }
#line 4181
  tmp___111 = b;
#line 4181
  b ++;
#line 4181
  *tmp___111 = (unsigned char)10;
#line 4181
  break;
}
#line 4182
break;
case 39: 
#line 4185
while (1) {
#line 4185
  while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 4185
    while (1) {
#line 4185
      old_buffer___22 = bufp->buffer;
#line 4185
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4185
        return ((reg_errcode_t )15);
      } else {

      }
#line 4185
      bufp->allocated <<= 1;
#line 4185
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4185
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 4185
      tmp___112 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4185
      bufp->buffer = (unsigned char *)tmp___112;
#line 4185
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4185
        return ((reg_errcode_t )12);
      } else {

      }
#line 4185
      if ((unsigned long )old_buffer___22 != (unsigned long )bufp->buffer) {
#line 4185
        b = bufp->buffer + (b - old_buffer___22);
#line 4185
        begalt = bufp->buffer + (begalt - old_buffer___22);
#line 4185
        if (fixup_alt_jump) {
#line 4185
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___22);
        } else {

        }
#line 4185
        if (laststart) {
#line 4185
          laststart = bufp->buffer + (laststart - old_buffer___22);
        } else {

        }
#line 4185
        if (pending_exact) {
#line 4185
          pending_exact = bufp->buffer + (pending_exact - old_buffer___22);
        } else {

        }
      } else {

      }
#line 4185
      break;
    }
  }
#line 4185
  tmp___113 = b;
#line 4185
  b ++;
#line 4185
  *tmp___113 = (unsigned char)11;
#line 4185
  break;
}
#line 4186
break;
case 57: 
case 56: 
case 55: 
case 54: 
case 53: 
case 52: 
case 51: 
case 50: 
case 49: 
#line 4190
if (syntax & (unsigned int )((((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 4191
  goto normal_char;
} else {

}
#line 4193
c1 = (unsigned char )((int )c - 48);
#line 4195
if ((regnum_t )c1 > regnum) {
#line 4196
  return ((reg_errcode_t )6);
} else {

}
#line 4199
tmp___114 = group_in_compile_stack(compile_stack, (int )c1);
#line 4199
if (tmp___114) {
#line 4200
  goto normal_char;
} else {

}
#line 4202
laststart = b;
#line 4203
while (1) {
#line 4203
  while ((unsigned long )((b - bufp->buffer) + 2L) > bufp->allocated) {
#line 4203
    while (1) {
#line 4203
      old_buffer___23 = bufp->buffer;
#line 4203
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4203
        return ((reg_errcode_t )15);
      } else {

      }
#line 4203
      bufp->allocated <<= 1;
#line 4203
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4203
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 4203
      tmp___115 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4203
      bufp->buffer = (unsigned char *)tmp___115;
#line 4203
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4203
        return ((reg_errcode_t )12);
      } else {

      }
#line 4203
      if ((unsigned long )old_buffer___23 != (unsigned long )bufp->buffer) {
#line 4203
        b = bufp->buffer + (b - old_buffer___23);
#line 4203
        begalt = bufp->buffer + (begalt - old_buffer___23);
#line 4203
        if (fixup_alt_jump) {
#line 4203
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___23);
        } else {

        }
#line 4203
        if (laststart) {
#line 4203
          laststart = bufp->buffer + (laststart - old_buffer___23);
        } else {

        }
#line 4203
        if (pending_exact) {
#line 4203
          pending_exact = bufp->buffer + (pending_exact - old_buffer___23);
        } else {

        }
      } else {

      }
#line 4203
      break;
    }
  }
#line 4203
  tmp___116 = b;
#line 4203
  b ++;
#line 4203
  *tmp___116 = (unsigned char)7;
#line 4203
  tmp___117 = b;
#line 4203
  b ++;
#line 4203
  *tmp___117 = c1;
#line 4203
  break;
}
#line 4204
break;
case 63: 
case 43: 
#line 4209
if (syntax & (unsigned int )(1 << 1)) {
#line 4210
  goto handle_plus;
}
normal_backslash: 
default: 
#line 4219
if (translate) {
#line 4219
  c = (unsigned char )*(translate + c);
} else {
#line 4219
  c = c;
}
#line 4220
goto normal_char;
}
---------
SID [2305] -> Line 3798
#line 3798
break;
---------
SID [2304] -> Line 3798
#line 3798
c = (unsigned char )*tmp___74;
---------
SID [2303] -> Line 3798
#line 3798
p ++;
---------
SID [2302] -> Line 3798
#line 3798
tmp___74 = p;
---------
SID [2301] -> Line -1

---------
SID [2300] -> Line 3798
#line 3798
return ((reg_errcode_t )14);
---------
SID [2299] -> Line 3798
#line 3798
if ((unsigned long )p == (unsigned long )pend) {
#line 3798
  return ((reg_errcode_t )14);
} else {

}
---------
SID [2298] -> Line 3798
#line 3798
while (1) {
#line 3798
  if ((unsigned long )p == (unsigned long )pend) {
#line 3798
    return ((reg_errcode_t )14);
  } else {

  }
#line 3798
  tmp___74 = p;
#line 3798
  p ++;
#line 3798
  c = (unsigned char )*tmp___74;
#line 3798
  break;
}
---------
SID [2297] -> Line -1

---------
SID [2296] -> Line 3793
#line 3793
return ((reg_errcode_t )5);
---------
SID [2295] -> Line 3793
case 92: 
#line 3793
if ((unsigned long )p == (unsigned long )pend) {
#line 3793
  return ((reg_errcode_t )5);
} else {

}
---------
SID [2294] -> Line 3789
#line 3789
goto normal_char;
---------
SID [2293] -> Line 3789
#line 3789
goto normal_char;
---------
SID [2292] -> Line 3787
#line 3787
goto handle_interval;
---------
SID [2291] -> Line 3786
#line 3786
if (syntax & (unsigned int )((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3787
  goto handle_interval;
} else {
#line 3789
  goto normal_char;
}
---------
SID [2290] -> Line 3786
case 123: 
#line 3786
if (syntax & (unsigned int )(((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3786
  if (syntax & (unsigned int )((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3787
    goto handle_interval;
  } else {
#line 3789
    goto normal_char;
  }
} else {
#line 3789
  goto normal_char;
}
---------
SID [2289] -> Line 3782
#line 3782
goto normal_char;
---------
SID [2288] -> Line 3780
#line 3780
goto handle_alt;
---------
SID [2287] -> Line 3779
case 124: 
#line 3779
if (syntax & (unsigned int )(((((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3780
  goto handle_alt;
} else {
#line 3782
  goto normal_char;
}
---------
SID [2286] -> Line 3775
#line 3775
goto normal_char;
---------
SID [2285] -> Line 3773
#line 3773
goto handle_alt;
---------
SID [2284] -> Line 3772
case 10: 
#line 3772
if (syntax & (unsigned int )(((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3773
  goto handle_alt;
} else {
#line 3775
  goto normal_char;
}
---------
SID [2283] -> Line 3768
#line 3768
goto normal_char;
---------
SID [2282] -> Line 3766
#line 3766
goto handle_close;
---------
SID [2281] -> Line 3765
case 41: 
#line 3765
if (syntax & (unsigned int )(((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3766
  goto handle_close;
} else {
#line 3768
  goto normal_char;
}
---------
SID [2280] -> Line 3761
#line 3761
goto normal_char;
---------
SID [2279] -> Line 3759
#line 3759
goto handle_open;
---------
SID [2278] -> Line 3758
case 40: 
#line 3758
if (syntax & (unsigned int )(((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3759
  goto handle_open;
} else {
#line 3761
  goto normal_char;
}
---------
SID [2277] -> Line 3754
#line 3754
break;
---------
SID [2276] -> Line 3752
#line 3752
b += (int )*(b + -1);
---------
SID [2275] -> Line 3751
#line 3751
*(b + -1) = (unsigned char )((int )*(b + -1) - 1);
---------
SID [2274] -> Line 3750
#line 3750
break;
---------
SID [2273] -> Line 3750
#line 3750
break;
---------
SID [2272] -> Line -1

---------
SID [2271] -> Line 3750
#line 3750
if ((int )*(b + ((int )*(b + -1) - 1)) == 0) {

} else {
#line 3750
  break;
}
---------
SID [2270] -> Line 3750
#line 3750
if ((int )*(b + -1) > 0) {
#line 3750
  if ((int )*(b + ((int )*(b + -1) - 1)) == 0) {

  } else {
#line 3750
    break;
  }
} else {
#line 3750
  break;
}
---------
SID [2269] -> Line 3750
#line 3750
while (1) {
#line 3750
  if ((int )*(b + -1) > 0) {
#line 3750
    if ((int )*(b + ((int )*(b + -1) - 1)) == 0) {

    } else {
#line 3750
      break;
    }
  } else {
#line 3750
    break;
  }
#line 3751
  *(b + -1) = (unsigned char )((int )*(b + -1) - 1);
}
---------
SID [2268] -> Line -1
__Cont: /* CIL Label */ ;
---------
SID [2267] -> Line 3744
#line 3744
*(b + (int )c / 8) = (unsigned char )((int )*(b + (int )c / 8) | (1 << (int )c % 8));
---------
SID [2266] -> Line 3743
#line 3743
had_char_class = (boolean )0;
---------
SID [2265] -> Line 3744
#line 3744
*(b + (int )c / 8) = (unsigned char )((int )*(b + (int )c / 8) | (1 << (int )c % 8));
---------
SID [2264] -> Line 3743
#line 3743
had_char_class = (boolean )0;
---------
SID [2263] -> Line 3744
#line 3744
*(b + (int )c / 8) = (unsigned char )((int )*(b + (int )c / 8) | (1 << (int )c % 8));
---------
SID [2262] -> Line 3743
#line 3743
had_char_class = (boolean )0;
---------
SID [2261] -> Line 3738
#line 3738
had_char_class = (boolean )0;
---------
SID [2260] -> Line 3737
#line 3737
*(b + 7) = (unsigned char )((int )*(b + 7) | (1 << 2));
---------
SID [2259] -> Line 3736
#line 3736
*(b + 11) = (unsigned char )((int )*(b + 11) | (1 << 3));
---------
SID [2258] -> Line 3735
#line 3735
p --;
---------
SID [2257] -> Line 3734
#line 3734
break;
---------
SID [2256] -> Line -1

---------
SID [2255] -> Line 3734
#line 3734
if (tmp___73) {

} else {
#line 3734
  break;
}
---------
SID [2254] -> Line 3734
#line 3734
c1 = (unsigned char )((int )c1 - 1);
---------
SID [2253] -> Line 3734
#line 3734
tmp___73 = c1;
---------
SID [2252] -> Line 3734
#line 3734
while (1) {
#line 3734
  tmp___73 = c1;
#line 3734
  c1 = (unsigned char )((int )c1 - 1);
#line 3734
  if (tmp___73) {

  } else {
#line 3734
    break;
  }
#line 3735
  p --;
}
---------
SID [2251] -> Line 3733
_L___13: /* CIL Label */ 
#line 3733
c1 = (unsigned char )((int )c1 + 1);
---------
SID [2250] -> Line 3689
#line 3689
goto _L___13;
---------
SID [2249] -> Line 3729
#line 3729
had_char_class = (boolean )1;
---------
SID [2248] -> Line 3713
#line 3713
ch ++;
---------
SID [2247] -> Line -1

---------
SID [2246] -> Line -1

---------
SID [2245] -> Line -1

---------
SID [2244] -> Line 3727
#line 3727
*(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
---------
SID [2243] -> Line 3715
#line 3715
if ((int const   )*(*tmp___72 + ch) & 4096) {
#line 3727
  *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
} else {

}
---------
SID [2242] -> Line 3715
#line 3715
tmp___72 = __ctype_b_loc();
---------
SID [2241] -> Line 3715
#line 3715
if ((ch & -128) == 0) {
#line 3715
  tmp___72 = __ctype_b_loc();
#line 3715
  if ((int const   )*(*tmp___72 + ch) & 4096) {
#line 3727
    *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
  } else {

  }
} else {

}
---------
SID [2240] -> Line 3715
_L___2: /* CIL Label */ 
#line 3715
if (is_xdigit) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___72 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___72 + ch) & 4096) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {

    }
  } else {

  }
} else {

}
---------
SID [2239] -> Line 3715
#line 3715
goto _L___2;
---------
SID [2238] -> Line 3715
#line 3715
goto _L___2;
---------
SID [2237] -> Line 3727
#line 3727
*(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
---------
SID [2236] -> Line 3715
#line 3715
if ((int const   )*(*tmp___71 + ch) & 256) {
#line 3727
  *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
} else {
#line 3715
  goto _L___2;
}
---------
SID [2235] -> Line 3715
#line 3715
tmp___71 = __ctype_b_loc();
---------
SID [2234] -> Line 3715
#line 3715
if ((ch & -128) == 0) {
#line 3715
  tmp___71 = __ctype_b_loc();
#line 3715
  if ((int const   )*(*tmp___71 + ch) & 256) {
#line 3727
    *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
  } else {
#line 3715
    goto _L___2;
  }
} else {
#line 3715
  goto _L___2;
}
---------
SID [2233] -> Line 3715
_L___3: /* CIL Label */ 
#line 3715
if (is_upper) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___71 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___71 + ch) & 256) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___2;
    }
  } else {
#line 3715
    goto _L___2;
  }
} else
_L___2: /* CIL Label */ 
#line 3715
if (is_xdigit) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___72 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___72 + ch) & 4096) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {

    }
  } else {

  }
} else {

}
---------
SID [2232] -> Line 3715
#line 3715
goto _L___3;
---------
SID [2231] -> Line 3715
#line 3715
goto _L___3;
---------
SID [2230] -> Line 3727
#line 3727
*(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
---------
SID [2229] -> Line 3715
#line 3715
if ((int const   )*(*tmp___70 + ch) & 8192) {
#line 3727
  *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
} else {
#line 3715
  goto _L___3;
}
---------
SID [2228] -> Line 3715
#line 3715
tmp___70 = __ctype_b_loc();
---------
SID [2227] -> Line 3715
#line 3715
if ((ch & -128) == 0) {
#line 3715
  tmp___70 = __ctype_b_loc();
#line 3715
  if ((int const   )*(*tmp___70 + ch) & 8192) {
#line 3727
    *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
  } else {
#line 3715
    goto _L___3;
  }
} else {
#line 3715
  goto _L___3;
}
---------
SID [2226] -> Line 3715
_L___4: /* CIL Label */ 
#line 3715
if (is_space) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___70 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___70 + ch) & 8192) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___3;
    }
  } else {
#line 3715
    goto _L___3;
  }
} else
_L___3: /* CIL Label */ 
#line 3715
if (is_upper) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___71 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___71 + ch) & 256) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___2;
    }
  } else {
#line 3715
    goto _L___2;
  }
} else
_L___2: /* CIL Label */ 
#line 3715
if (is_xdigit) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___72 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___72 + ch) & 4096) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {

    }
  } else {

  }
} else {

}
---------
SID [2225] -> Line 3715
#line 3715
goto _L___4;
---------
SID [2224] -> Line 3715
#line 3715
goto _L___4;
---------
SID [2223] -> Line 3727
#line 3727
*(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
---------
SID [2222] -> Line 3715
#line 3715
if ((int const   )*(*tmp___69 + ch) & 4) {
#line 3727
  *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
} else {
#line 3715
  goto _L___4;
}
---------
SID [2221] -> Line 3715
#line 3715
tmp___69 = __ctype_b_loc();
---------
SID [2220] -> Line 3715
#line 3715
if ((ch & -128) == 0) {
#line 3715
  tmp___69 = __ctype_b_loc();
#line 3715
  if ((int const   )*(*tmp___69 + ch) & 4) {
#line 3727
    *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
  } else {
#line 3715
    goto _L___4;
  }
} else {
#line 3715
  goto _L___4;
}
---------
SID [2219] -> Line 3715
_L___5: /* CIL Label */ 
#line 3715
if (is_punct) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___69 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___69 + ch) & 4) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___4;
    }
  } else {
#line 3715
    goto _L___4;
  }
} else
_L___4: /* CIL Label */ 
#line 3715
if (is_space) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___70 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___70 + ch) & 8192) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___3;
    }
  } else {
#line 3715
    goto _L___3;
  }
} else
_L___3: /* CIL Label */ 
#line 3715
if (is_upper) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___71 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___71 + ch) & 256) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___2;
    }
  } else {
#line 3715
    goto _L___2;
  }
} else
_L___2: /* CIL Label */ 
#line 3715
if (is_xdigit) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___72 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___72 + ch) & 4096) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {

    }
  } else {

  }
} else {

}
---------
SID [2218] -> Line 3715
#line 3715
goto _L___5;
---------
SID [2217] -> Line 3715
#line 3715
goto _L___5;
---------
SID [2216] -> Line 3727
#line 3727
*(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
---------
SID [2215] -> Line 3715
#line 3715
if ((int const   )*(*tmp___68 + ch) & 16384) {
#line 3727
  *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
} else {
#line 3715
  goto _L___5;
}
---------
SID [2214] -> Line 3715
#line 3715
tmp___68 = __ctype_b_loc();
---------
SID [2213] -> Line 3715
#line 3715
if ((ch & -128) == 0) {
#line 3715
  tmp___68 = __ctype_b_loc();
#line 3715
  if ((int const   )*(*tmp___68 + ch) & 16384) {
#line 3727
    *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
  } else {
#line 3715
    goto _L___5;
  }
} else {
#line 3715
  goto _L___5;
}
---------
SID [2212] -> Line 3715
_L___6: /* CIL Label */ 
#line 3715
if (is_print) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___68 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___68 + ch) & 16384) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___5;
    }
  } else {
#line 3715
    goto _L___5;
  }
} else
_L___5: /* CIL Label */ 
#line 3715
if (is_punct) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___69 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___69 + ch) & 4) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___4;
    }
  } else {
#line 3715
    goto _L___4;
  }
} else
_L___4: /* CIL Label */ 
#line 3715
if (is_space) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___70 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___70 + ch) & 8192) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___3;
    }
  } else {
#line 3715
    goto _L___3;
  }
} else
_L___3: /* CIL Label */ 
#line 3715
if (is_upper) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___71 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___71 + ch) & 256) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___2;
    }
  } else {
#line 3715
    goto _L___2;
  }
} else
_L___2: /* CIL Label */ 
#line 3715
if (is_xdigit) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___72 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___72 + ch) & 4096) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {

    }
  } else {

  }
} else {

}
---------
SID [2211] -> Line 3715
#line 3715
goto _L___6;
---------
SID [2210] -> Line 3715
#line 3715
goto _L___6;
---------
SID [2209] -> Line 3727
#line 3727
*(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
---------
SID [2208] -> Line 3715
#line 3715
if ((int const   )*(*tmp___67 + ch) & 512) {
#line 3727
  *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
} else {
#line 3715
  goto _L___6;
}
---------
SID [2207] -> Line 3715
#line 3715
tmp___67 = __ctype_b_loc();
---------
SID [2206] -> Line 3715
#line 3715
if ((ch & -128) == 0) {
#line 3715
  tmp___67 = __ctype_b_loc();
#line 3715
  if ((int const   )*(*tmp___67 + ch) & 512) {
#line 3727
    *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
  } else {
#line 3715
    goto _L___6;
  }
} else {
#line 3715
  goto _L___6;
}
---------
SID [2205] -> Line 3715
_L___7: /* CIL Label */ 
#line 3715
if (is_lower) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___67 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___67 + ch) & 512) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___6;
    }
  } else {
#line 3715
    goto _L___6;
  }
} else
_L___6: /* CIL Label */ 
#line 3715
if (is_print) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___68 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___68 + ch) & 16384) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___5;
    }
  } else {
#line 3715
    goto _L___5;
  }
} else
_L___5: /* CIL Label */ 
#line 3715
if (is_punct) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___69 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___69 + ch) & 4) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___4;
    }
  } else {
#line 3715
    goto _L___4;
  }
} else
_L___4: /* CIL Label */ 
#line 3715
if (is_space) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___70 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___70 + ch) & 8192) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___3;
    }
  } else {
#line 3715
    goto _L___3;
  }
} else
_L___3: /* CIL Label */ 
#line 3715
if (is_upper) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___71 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___71 + ch) & 256) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___2;
    }
  } else {
#line 3715
    goto _L___2;
  }
} else
_L___2: /* CIL Label */ 
#line 3715
if (is_xdigit) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___72 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___72 + ch) & 4096) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {

    }
  } else {

  }
} else {

}
---------
SID [2204] -> Line 3715
#line 3715
goto _L___7;
---------
SID [2203] -> Line 3715
#line 3715
goto _L___7;
---------
SID [2202] -> Line 3727
#line 3727
*(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
---------
SID [2201] -> Line 3715
#line 3715
if ((int const   )*(*tmp___66 + ch) & 32768) {
#line 3727
  *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
} else {
#line 3715
  goto _L___7;
}
---------
SID [2200] -> Line 3715
#line 3715
tmp___66 = __ctype_b_loc();
---------
SID [2199] -> Line 3715
#line 3715
if ((ch & -128) == 0) {
#line 3715
  tmp___66 = __ctype_b_loc();
#line 3715
  if ((int const   )*(*tmp___66 + ch) & 32768) {
#line 3727
    *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
  } else {
#line 3715
    goto _L___7;
  }
} else {
#line 3715
  goto _L___7;
}
---------
SID [2198] -> Line 3715
_L___8: /* CIL Label */ 
#line 3715
if (is_graph) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___66 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___66 + ch) & 32768) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___7;
    }
  } else {
#line 3715
    goto _L___7;
  }
} else
_L___7: /* CIL Label */ 
#line 3715
if (is_lower) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___67 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___67 + ch) & 512) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___6;
    }
  } else {
#line 3715
    goto _L___6;
  }
} else
_L___6: /* CIL Label */ 
#line 3715
if (is_print) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___68 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___68 + ch) & 16384) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___5;
    }
  } else {
#line 3715
    goto _L___5;
  }
} else
_L___5: /* CIL Label */ 
#line 3715
if (is_punct) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___69 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___69 + ch) & 4) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___4;
    }
  } else {
#line 3715
    goto _L___4;
  }
} else
_L___4: /* CIL Label */ 
#line 3715
if (is_space) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___70 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___70 + ch) & 8192) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___3;
    }
  } else {
#line 3715
    goto _L___3;
  }
} else
_L___3: /* CIL Label */ 
#line 3715
if (is_upper) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___71 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___71 + ch) & 256) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___2;
    }
  } else {
#line 3715
    goto _L___2;
  }
} else
_L___2: /* CIL Label */ 
#line 3715
if (is_xdigit) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___72 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___72 + ch) & 4096) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {

    }
  } else {

  }
} else {

}
---------
SID [2197] -> Line 3715
#line 3715
goto _L___8;
---------
SID [2196] -> Line 3715
#line 3715
goto _L___8;
---------
SID [2195] -> Line 3727
#line 3727
*(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
---------
SID [2194] -> Line 3715
#line 3715
if ((int const   )*(*tmp___65 + ch) & 2048) {
#line 3727
  *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
} else {
#line 3715
  goto _L___8;
}
---------
SID [2193] -> Line 3715
#line 3715
tmp___65 = __ctype_b_loc();
---------
SID [2192] -> Line 3715
#line 3715
if ((ch & -128) == 0) {
#line 3715
  tmp___65 = __ctype_b_loc();
#line 3715
  if ((int const   )*(*tmp___65 + ch) & 2048) {
#line 3727
    *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
  } else {
#line 3715
    goto _L___8;
  }
} else {
#line 3715
  goto _L___8;
}
---------
SID [2191] -> Line 3715
_L___9: /* CIL Label */ 
#line 3715
if (is_digit) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___65 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___65 + ch) & 2048) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___8;
    }
  } else {
#line 3715
    goto _L___8;
  }
} else
_L___8: /* CIL Label */ 
#line 3715
if (is_graph) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___66 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___66 + ch) & 32768) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___7;
    }
  } else {
#line 3715
    goto _L___7;
  }
} else
_L___7: /* CIL Label */ 
#line 3715
if (is_lower) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___67 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___67 + ch) & 512) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___6;
    }
  } else {
#line 3715
    goto _L___6;
  }
} else
_L___6: /* CIL Label */ 
#line 3715
if (is_print) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___68 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___68 + ch) & 16384) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___5;
    }
  } else {
#line 3715
    goto _L___5;
  }
} else
_L___5: /* CIL Label */ 
#line 3715
if (is_punct) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___69 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___69 + ch) & 4) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___4;
    }
  } else {
#line 3715
    goto _L___4;
  }
} else
_L___4: /* CIL Label */ 
#line 3715
if (is_space) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___70 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___70 + ch) & 8192) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___3;
    }
  } else {
#line 3715
    goto _L___3;
  }
} else
_L___3: /* CIL Label */ 
#line 3715
if (is_upper) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___71 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___71 + ch) & 256) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___2;
    }
  } else {
#line 3715
    goto _L___2;
  }
} else
_L___2: /* CIL Label */ 
#line 3715
if (is_xdigit) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___72 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___72 + ch) & 4096) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {

    }
  } else {

  }
} else {

}
---------
SID [2190] -> Line 3715
#line 3715
goto _L___9;
---------
SID [2189] -> Line 3715
#line 3715
goto _L___9;
---------
SID [2188] -> Line 3727
#line 3727
*(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
---------
SID [2187] -> Line 3715
#line 3715
if ((int const   )*(*tmp___64 + ch) & 2) {
#line 3727
  *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
} else {
#line 3715
  goto _L___9;
}
---------
SID [2186] -> Line 3715
#line 3715
tmp___64 = __ctype_b_loc();
---------
SID [2185] -> Line 3715
#line 3715
if ((ch & -128) == 0) {
#line 3715
  tmp___64 = __ctype_b_loc();
#line 3715
  if ((int const   )*(*tmp___64 + ch) & 2) {
#line 3727
    *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
  } else {
#line 3715
    goto _L___9;
  }
} else {
#line 3715
  goto _L___9;
}
---------
SID [2184] -> Line 3715
_L___10: /* CIL Label */ 
#line 3715
if (is_cntrl) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___64 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___64 + ch) & 2) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___9;
    }
  } else {
#line 3715
    goto _L___9;
  }
} else
_L___9: /* CIL Label */ 
#line 3715
if (is_digit) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___65 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___65 + ch) & 2048) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___8;
    }
  } else {
#line 3715
    goto _L___8;
  }
} else
_L___8: /* CIL Label */ 
#line 3715
if (is_graph) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___66 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___66 + ch) & 32768) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___7;
    }
  } else {
#line 3715
    goto _L___7;
  }
} else
_L___7: /* CIL Label */ 
#line 3715
if (is_lower) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___67 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___67 + ch) & 512) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___6;
    }
  } else {
#line 3715
    goto _L___6;
  }
} else
_L___6: /* CIL Label */ 
#line 3715
if (is_print) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___68 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___68 + ch) & 16384) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___5;
    }
  } else {
#line 3715
    goto _L___5;
  }
} else
_L___5: /* CIL Label */ 
#line 3715
if (is_punct) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___69 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___69 + ch) & 4) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___4;
    }
  } else {
#line 3715
    goto _L___4;
  }
} else
_L___4: /* CIL Label */ 
#line 3715
if (is_space) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___70 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___70 + ch) & 8192) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___3;
    }
  } else {
#line 3715
    goto _L___3;
  }
} else
_L___3: /* CIL Label */ 
#line 3715
if (is_upper) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___71 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___71 + ch) & 256) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___2;
    }
  } else {
#line 3715
    goto _L___2;
  }
} else
_L___2: /* CIL Label */ 
#line 3715
if (is_xdigit) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___72 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___72 + ch) & 4096) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {

    }
  } else {

  }
} else {

}
---------
SID [2183] -> Line 3715
#line 3715
goto _L___10;
---------
SID [2182] -> Line 3715
#line 3715
goto _L___10;
---------
SID [2181] -> Line 3727
#line 3727
*(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
---------
SID [2180] -> Line 3715
#line 3715
if ((int const   )*(*tmp___63 + ch) & 1) {
#line 3727
  *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
} else {
#line 3715
  goto _L___10;
}
---------
SID [2179] -> Line 3715
#line 3715
tmp___63 = __ctype_b_loc();
---------
SID [2178] -> Line 3715
#line 3715
if ((ch & -128) == 0) {
#line 3715
  tmp___63 = __ctype_b_loc();
#line 3715
  if ((int const   )*(*tmp___63 + ch) & 1) {
#line 3727
    *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
  } else {
#line 3715
    goto _L___10;
  }
} else {
#line 3715
  goto _L___10;
}
---------
SID [2177] -> Line 3715
_L___11: /* CIL Label */ 
#line 3715
if (is_blank) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___63 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___63 + ch) & 1) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___10;
    }
  } else {
#line 3715
    goto _L___10;
  }
} else
_L___10: /* CIL Label */ 
#line 3715
if (is_cntrl) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___64 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___64 + ch) & 2) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___9;
    }
  } else {
#line 3715
    goto _L___9;
  }
} else
_L___9: /* CIL Label */ 
#line 3715
if (is_digit) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___65 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___65 + ch) & 2048) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___8;
    }
  } else {
#line 3715
    goto _L___8;
  }
} else
_L___8: /* CIL Label */ 
#line 3715
if (is_graph) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___66 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___66 + ch) & 32768) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___7;
    }
  } else {
#line 3715
    goto _L___7;
  }
} else
_L___7: /* CIL Label */ 
#line 3715
if (is_lower) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___67 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___67 + ch) & 512) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___6;
    }
  } else {
#line 3715
    goto _L___6;
  }
} else
_L___6: /* CIL Label */ 
#line 3715
if (is_print) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___68 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___68 + ch) & 16384) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___5;
    }
  } else {
#line 3715
    goto _L___5;
  }
} else
_L___5: /* CIL Label */ 
#line 3715
if (is_punct) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___69 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___69 + ch) & 4) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___4;
    }
  } else {
#line 3715
    goto _L___4;
  }
} else
_L___4: /* CIL Label */ 
#line 3715
if (is_space) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___70 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___70 + ch) & 8192) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___3;
    }
  } else {
#line 3715
    goto _L___3;
  }
} else
_L___3: /* CIL Label */ 
#line 3715
if (is_upper) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___71 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___71 + ch) & 256) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___2;
    }
  } else {
#line 3715
    goto _L___2;
  }
} else
_L___2: /* CIL Label */ 
#line 3715
if (is_xdigit) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___72 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___72 + ch) & 4096) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {

    }
  } else {

  }
} else {

}
---------
SID [2176] -> Line 3715
#line 3715
goto _L___11;
---------
SID [2175] -> Line 3715
#line 3715
goto _L___11;
---------
SID [2174] -> Line 3727
#line 3727
*(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
---------
SID [2173] -> Line 3715
#line 3715
if ((int const   )*(*tmp___62 + ch) & 1024) {
#line 3727
  *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
} else {
#line 3715
  goto _L___11;
}
---------
SID [2172] -> Line 3715
#line 3715
tmp___62 = __ctype_b_loc();
---------
SID [2171] -> Line 3715
#line 3715
if ((ch & -128) == 0) {
#line 3715
  tmp___62 = __ctype_b_loc();
#line 3715
  if ((int const   )*(*tmp___62 + ch) & 1024) {
#line 3727
    *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
  } else {
#line 3715
    goto _L___11;
  }
} else {
#line 3715
  goto _L___11;
}
---------
SID [2170] -> Line 3715
_L___12: /* CIL Label */ 
#line 3715
if (is_alpha) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___62 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___62 + ch) & 1024) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___11;
    }
  } else {
#line 3715
    goto _L___11;
  }
} else
_L___11: /* CIL Label */ 
#line 3715
if (is_blank) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___63 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___63 + ch) & 1) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___10;
    }
  } else {
#line 3715
    goto _L___10;
  }
} else
_L___10: /* CIL Label */ 
#line 3715
if (is_cntrl) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___64 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___64 + ch) & 2) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___9;
    }
  } else {
#line 3715
    goto _L___9;
  }
} else
_L___9: /* CIL Label */ 
#line 3715
if (is_digit) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___65 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___65 + ch) & 2048) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___8;
    }
  } else {
#line 3715
    goto _L___8;
  }
} else
_L___8: /* CIL Label */ 
#line 3715
if (is_graph) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___66 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___66 + ch) & 32768) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___7;
    }
  } else {
#line 3715
    goto _L___7;
  }
} else
_L___7: /* CIL Label */ 
#line 3715
if (is_lower) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___67 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___67 + ch) & 512) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___6;
    }
  } else {
#line 3715
    goto _L___6;
  }
} else
_L___6: /* CIL Label */ 
#line 3715
if (is_print) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___68 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___68 + ch) & 16384) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___5;
    }
  } else {
#line 3715
    goto _L___5;
  }
} else
_L___5: /* CIL Label */ 
#line 3715
if (is_punct) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___69 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___69 + ch) & 4) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___4;
    }
  } else {
#line 3715
    goto _L___4;
  }
} else
_L___4: /* CIL Label */ 
#line 3715
if (is_space) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___70 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___70 + ch) & 8192) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___3;
    }
  } else {
#line 3715
    goto _L___3;
  }
} else
_L___3: /* CIL Label */ 
#line 3715
if (is_upper) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___71 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___71 + ch) & 256) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___2;
    }
  } else {
#line 3715
    goto _L___2;
  }
} else
_L___2: /* CIL Label */ 
#line 3715
if (is_xdigit) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___72 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___72 + ch) & 4096) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {

    }
  } else {

  }
} else {

}
---------
SID [2169] -> Line 3715
#line 3715
goto _L___12;
---------
SID [2168] -> Line 3715
#line 3715
goto _L___12;
---------
SID [2167] -> Line 3727
#line 3727
*(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
---------
SID [2166] -> Line 3715
#line 3715
if ((int const   )*(*tmp___61 + ch) & 8) {
#line 3727
  *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
} else {
#line 3715
  goto _L___12;
}
---------
SID [2165] -> Line 3715
#line 3715
tmp___61 = __ctype_b_loc();
---------
SID [2164] -> Line 3715
#line 3715
if ((ch & -128) == 0) {
#line 3715
  tmp___61 = __ctype_b_loc();
#line 3715
  if ((int const   )*(*tmp___61 + ch) & 8) {
#line 3727
    *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
  } else {
#line 3715
    goto _L___12;
  }
} else {
#line 3715
  goto _L___12;
}
---------
SID [2163] -> Line 3715
#line 3715
if (is_alnum) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___61 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___61 + ch) & 8) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___12;
    }
  } else {
#line 3715
    goto _L___12;
  }
} else
_L___12: /* CIL Label */ 
#line 3715
if (is_alpha) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___62 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___62 + ch) & 1024) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___11;
    }
  } else {
#line 3715
    goto _L___11;
  }
} else
_L___11: /* CIL Label */ 
#line 3715
if (is_blank) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___63 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___63 + ch) & 1) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___10;
    }
  } else {
#line 3715
    goto _L___10;
  }
} else
_L___10: /* CIL Label */ 
#line 3715
if (is_cntrl) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___64 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___64 + ch) & 2) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___9;
    }
  } else {
#line 3715
    goto _L___9;
  }
} else
_L___9: /* CIL Label */ 
#line 3715
if (is_digit) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___65 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___65 + ch) & 2048) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___8;
    }
  } else {
#line 3715
    goto _L___8;
  }
} else
_L___8: /* CIL Label */ 
#line 3715
if (is_graph) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___66 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___66 + ch) & 32768) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___7;
    }
  } else {
#line 3715
    goto _L___7;
  }
} else
_L___7: /* CIL Label */ 
#line 3715
if (is_lower) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___67 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___67 + ch) & 512) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___6;
    }
  } else {
#line 3715
    goto _L___6;
  }
} else
_L___6: /* CIL Label */ 
#line 3715
if (is_print) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___68 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___68 + ch) & 16384) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___5;
    }
  } else {
#line 3715
    goto _L___5;
  }
} else
_L___5: /* CIL Label */ 
#line 3715
if (is_punct) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___69 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___69 + ch) & 4) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___4;
    }
  } else {
#line 3715
    goto _L___4;
  }
} else
_L___4: /* CIL Label */ 
#line 3715
if (is_space) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___70 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___70 + ch) & 8192) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___3;
    }
  } else {
#line 3715
    goto _L___3;
  }
} else
_L___3: /* CIL Label */ 
#line 3715
if (is_upper) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___71 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___71 + ch) & 256) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {
#line 3715
      goto _L___2;
    }
  } else {
#line 3715
    goto _L___2;
  }
} else
_L___2: /* CIL Label */ 
#line 3715
if (is_xdigit) {
#line 3715
  if ((ch & -128) == 0) {
#line 3715
    tmp___72 = __ctype_b_loc();
#line 3715
    if ((int const   )*(*tmp___72 + ch) & 4096) {
#line 3727
      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
    } else {

    }
  } else {

  }
} else {

}
---------
SID [2162] -> Line 3713
#line 3713
break;
---------
SID [2161] -> Line -1

---------
SID [2160] -> Line 3713
#line 3713
if (ch < 1 << 8) {

} else {
#line 3713
  break;
}
---------
SID [2159] -> Line 3713
#line 3713
while (ch < 1 << 8) {
#line 3715
  if (is_alnum) {
#line 3715
    if ((ch & -128) == 0) {
#line 3715
      tmp___61 = __ctype_b_loc();
#line 3715
      if ((int const   )*(*tmp___61 + ch) & 8) {
#line 3727
        *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
      } else {
#line 3715
        goto _L___12;
      }
    } else {
#line 3715
      goto _L___12;
    }
  } else
  _L___12: /* CIL Label */ 
#line 3715
  if (is_alpha) {
#line 3715
    if ((ch & -128) == 0) {
#line 3715
      tmp___62 = __ctype_b_loc();
#line 3715
      if ((int const   )*(*tmp___62 + ch) & 1024) {
#line 3727
        *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
      } else {
#line 3715
        goto _L___11;
      }
    } else {
#line 3715
      goto _L___11;
    }
  } else
  _L___11: /* CIL Label */ 
#line 3715
  if (is_blank) {
#line 3715
    if ((ch & -128) == 0) {
#line 3715
      tmp___63 = __ctype_b_loc();
#line 3715
      if ((int const   )*(*tmp___63 + ch) & 1) {
#line 3727
        *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
      } else {
#line 3715
        goto _L___10;
      }
    } else {
#line 3715
      goto _L___10;
    }
  } else
  _L___10: /* CIL Label */ 
#line 3715
  if (is_cntrl) {
#line 3715
    if ((ch & -128) == 0) {
#line 3715
      tmp___64 = __ctype_b_loc();
#line 3715
      if ((int const   )*(*tmp___64 + ch) & 2) {
#line 3727
        *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
      } else {
#line 3715
        goto _L___9;
      }
    } else {
#line 3715
      goto _L___9;
    }
  } else
  _L___9: /* CIL Label */ 
#line 3715
  if (is_digit) {
#line 3715
    if ((ch & -128) == 0) {
#line 3715
      tmp___65 = __ctype_b_loc();
#line 3715
      if ((int const   )*(*tmp___65 + ch) & 2048) {
#line 3727
        *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
      } else {
#line 3715
        goto _L___8;
      }
    } else {
#line 3715
      goto _L___8;
    }
  } else
  _L___8: /* CIL Label */ 
#line 3715
  if (is_graph) {
#line 3715
    if ((ch & -128) == 0) {
#line 3715
      tmp___66 = __ctype_b_loc();
#line 3715
      if ((int const   )*(*tmp___66 + ch) & 32768) {
#line 3727
        *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
      } else {
#line 3715
        goto _L___7;
      }
    } else {
#line 3715
      goto _L___7;
    }
  } else
  _L___7: /* CIL Label */ 
#line 3715
  if (is_lower) {
#line 3715
    if ((ch & -128) == 0) {
#line 3715
      tmp___67 = __ctype_b_loc();
#line 3715
      if ((int const   )*(*tmp___67 + ch) & 512) {
#line 3727
        *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
      } else {
#line 3715
        goto _L___6;
      }
    } else {
#line 3715
      goto _L___6;
    }
  } else
  _L___6: /* CIL Label */ 
#line 3715
  if (is_print) {
#line 3715
    if ((ch & -128) == 0) {
#line 3715
      tmp___68 = __ctype_b_loc();
#line 3715
      if ((int const   )*(*tmp___68 + ch) & 16384) {
#line 3727
        *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
      } else {
#line 3715
        goto _L___5;
      }
    } else {
#line 3715
      goto _L___5;
    }
  } else
  _L___5: /* CIL Label */ 
#line 3715
  if (is_punct) {
#line 3715
    if ((ch & -128) == 0) {
#line 3715
      tmp___69 = __ctype_b_loc();
#line 3715
      if ((int const   )*(*tmp___69 + ch) & 4) {
#line 3727
        *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
      } else {
#line 3715
        goto _L___4;
      }
    } else {
#line 3715
      goto _L___4;
    }
  } else
  _L___4: /* CIL Label */ 
#line 3715
  if (is_space) {
#line 3715
    if ((ch & -128) == 0) {
#line 3715
      tmp___70 = __ctype_b_loc();
#line 3715
      if ((int const   )*(*tmp___70 + ch) & 8192) {
#line 3727
        *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
      } else {
#line 3715
        goto _L___3;
      }
    } else {
#line 3715
      goto _L___3;
    }
  } else
  _L___3: /* CIL Label */ 
#line 3715
  if (is_upper) {
#line 3715
    if ((ch & -128) == 0) {
#line 3715
      tmp___71 = __ctype_b_loc();
#line 3715
      if ((int const   )*(*tmp___71 + ch) & 256) {
#line 3727
        *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
      } else {
#line 3715
        goto _L___2;
      }
    } else {
#line 3715
      goto _L___2;
    }
  } else
  _L___2: /* CIL Label */ 
#line 3715
  if (is_xdigit) {
#line 3715
    if ((ch & -128) == 0) {
#line 3715
      tmp___72 = __ctype_b_loc();
#line 3715
      if ((int const   )*(*tmp___72 + ch) & 4096) {
#line 3727
        *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
      } else {

      }
    } else {

    }
  } else {

  }
#line 3713
  ch ++;
}
---------
SID [2158] -> Line 3713
#line 3713
ch = 0;
---------
SID [2157] -> Line -1

---------
SID [2156] -> Line 3711
#line 3711
return ((reg_errcode_t )7);
---------
SID [2155] -> Line 3711
#line 3711
if ((unsigned long )p == (unsigned long )pend) {
#line 3711
  return ((reg_errcode_t )7);
} else {

}
---------
SID [2154] -> Line 3709
#line 3709
break;
---------
SID [2153] -> Line -1

---------
SID [2152] -> Line 3709
#line 3709
c = (unsigned char )*(translate + c);
---------
SID [2151] -> Line 3709
#line 3709
if (translate) {
#line 3709
  c = (unsigned char )*(translate + c);
} else {

}
---------
SID [2150] -> Line 3709
#line 3709
c = (unsigned char )*tmp___60;
---------
SID [2149] -> Line 3709
#line 3709
p ++;
---------
SID [2148] -> Line 3709
#line 3709
tmp___60 = p;
---------
SID [2147] -> Line -1

---------
SID [2146] -> Line 3709
#line 3709
return ((reg_errcode_t )14);
---------
SID [2145] -> Line 3709
#line 3709
if ((unsigned long )p == (unsigned long )pend) {
#line 3709
  return ((reg_errcode_t )14);
} else {

}
---------
SID [2144] -> Line 3709
#line 3709
while (1) {
#line 3709
  if ((unsigned long )p == (unsigned long )pend) {
#line 3709
    return ((reg_errcode_t )14);
  } else {

  }
#line 3709
  tmp___60 = p;
#line 3709
  p ++;
#line 3709
  c = (unsigned char )*tmp___60;
#line 3709
  if (translate) {
#line 3709
    c = (unsigned char )*(translate + c);
  } else {

  }
#line 3709
  break;
}
---------
SID [2143] -> Line 3705
#line 3705
return ((reg_errcode_t )4);
---------
SID [2142] -> Line -1

---------
SID [2141] -> Line 3705
#line 3705
if (tmp___59 == 0) {

} else {
#line 3705
  return ((reg_errcode_t )4);
}
---------
SID [2140] -> Line 3705
#line 3705
tmp___59 = strcmp((char const   *)(str), "blank");
---------
SID [2139] -> Line -1

---------
SID [2138] -> Line 3705
#line 3705
if (tmp___58 == 0) {

} else {
#line 3705
  tmp___59 = strcmp((char const   *)(str), "blank");
#line 3705
  if (tmp___59 == 0) {

  } else {
#line 3705
    return ((reg_errcode_t )4);
  }
}
---------
SID [2137] -> Line 3705
#line 3705
tmp___58 = strcmp((char const   *)(str), "cntrl");
---------
SID [2136] -> Line -1

---------
SID [2135] -> Line 3705
#line 3705
if (tmp___57 == 0) {

} else {
#line 3705
  tmp___58 = strcmp((char const   *)(str), "cntrl");
#line 3705
  if (tmp___58 == 0) {

  } else {
#line 3705
    tmp___59 = strcmp((char const   *)(str), "blank");
#line 3705
    if (tmp___59 == 0) {

    } else {
#line 3705
      return ((reg_errcode_t )4);
    }
  }
}
---------
SID [2134] -> Line 3705
#line 3705
tmp___57 = strcmp((char const   *)(str), "graph");
---------
SID [2133] -> Line -1

---------
SID [2132] -> Line 3705
#line 3705
if (tmp___56 == 0) {

} else {
#line 3705
  tmp___57 = strcmp((char const   *)(str), "graph");
#line 3705
  if (tmp___57 == 0) {

  } else {
#line 3705
    tmp___58 = strcmp((char const   *)(str), "cntrl");
#line 3705
    if (tmp___58 == 0) {

    } else {
#line 3705
      tmp___59 = strcmp((char const   *)(str), "blank");
#line 3705
      if (tmp___59 == 0) {

      } else {
#line 3705
        return ((reg_errcode_t )4);
      }
    }
  }
}
---------
SID [2131] -> Line 3705
#line 3705
tmp___56 = strcmp((char const   *)(str), "punct");
---------
SID [2130] -> Line -1

---------
SID [2129] -> Line 3705
#line 3705
if (tmp___55 == 0) {

} else {
#line 3705
  tmp___56 = strcmp((char const   *)(str), "punct");
#line 3705
  if (tmp___56 == 0) {

  } else {
#line 3705
    tmp___57 = strcmp((char const   *)(str), "graph");
#line 3705
    if (tmp___57 == 0) {

    } else {
#line 3705
      tmp___58 = strcmp((char const   *)(str), "cntrl");
#line 3705
      if (tmp___58 == 0) {

      } else {
#line 3705
        tmp___59 = strcmp((char const   *)(str), "blank");
#line 3705
        if (tmp___59 == 0) {

        } else {
#line 3705
          return ((reg_errcode_t )4);
        }
      }
    }
  }
}
---------
SID [2128] -> Line 3705
#line 3705
tmp___55 = strcmp((char const   *)(str), "print");
---------
SID [2127] -> Line -1

---------
SID [2126] -> Line 3705
#line 3705
if (tmp___54 == 0) {

} else {
#line 3705
  tmp___55 = strcmp((char const   *)(str), "print");
#line 3705
  if (tmp___55 == 0) {

  } else {
#line 3705
    tmp___56 = strcmp((char const   *)(str), "punct");
#line 3705
    if (tmp___56 == 0) {

    } else {
#line 3705
      tmp___57 = strcmp((char const   *)(str), "graph");
#line 3705
      if (tmp___57 == 0) {

      } else {
#line 3705
        tmp___58 = strcmp((char const   *)(str), "cntrl");
#line 3705
        if (tmp___58 == 0) {

        } else {
#line 3705
          tmp___59 = strcmp((char const   *)(str), "blank");
#line 3705
          if (tmp___59 == 0) {

          } else {
#line 3705
            return ((reg_errcode_t )4);
          }
        }
      }
    }
  }
}
---------
SID [2125] -> Line 3705
#line 3705
tmp___54 = strcmp((char const   *)(str), "space");
---------
SID [2124] -> Line -1

---------
SID [2123] -> Line 3705
#line 3705
if (tmp___53 == 0) {

} else {
#line 3705
  tmp___54 = strcmp((char const   *)(str), "space");
#line 3705
  if (tmp___54 == 0) {

  } else {
#line 3705
    tmp___55 = strcmp((char const   *)(str), "print");
#line 3705
    if (tmp___55 == 0) {

    } else {
#line 3705
      tmp___56 = strcmp((char const   *)(str), "punct");
#line 3705
      if (tmp___56 == 0) {

      } else {
#line 3705
        tmp___57 = strcmp((char const   *)(str), "graph");
#line 3705
        if (tmp___57 == 0) {

        } else {
#line 3705
          tmp___58 = strcmp((char const   *)(str), "cntrl");
#line 3705
          if (tmp___58 == 0) {

          } else {
#line 3705
            tmp___59 = strcmp((char const   *)(str), "blank");
#line 3705
            if (tmp___59 == 0) {

            } else {
#line 3705
              return ((reg_errcode_t )4);
            }
          }
        }
      }
    }
  }
}
---------
SID [2122] -> Line 3705
#line 3705
tmp___53 = strcmp((char const   *)(str), "xdigit");
---------
SID [2121] -> Line -1

---------
SID [2120] -> Line 3705
#line 3705
if (tmp___52 == 0) {

} else {
#line 3705
  tmp___53 = strcmp((char const   *)(str), "xdigit");
#line 3705
  if (tmp___53 == 0) {

  } else {
#line 3705
    tmp___54 = strcmp((char const   *)(str), "space");
#line 3705
    if (tmp___54 == 0) {

    } else {
#line 3705
      tmp___55 = strcmp((char const   *)(str), "print");
#line 3705
      if (tmp___55 == 0) {

      } else {
#line 3705
        tmp___56 = strcmp((char const   *)(str), "punct");
#line 3705
        if (tmp___56 == 0) {

        } else {
#line 3705
          tmp___57 = strcmp((char const   *)(str), "graph");
#line 3705
          if (tmp___57 == 0) {

          } else {
#line 3705
            tmp___58 = strcmp((char const   *)(str), "cntrl");
#line 3705
            if (tmp___58 == 0) {

            } else {
#line 3705
              tmp___59 = strcmp((char const   *)(str), "blank");
#line 3705
              if (tmp___59 == 0) {

              } else {
#line 3705
                return ((reg_errcode_t )4);
              }
            }
          }
        }
      }
    }
  }
}
---------
SID [2119] -> Line 3705
#line 3705
tmp___52 = strcmp((char const   *)(str), "alnum");
---------
SID [2118] -> Line -1

---------
SID [2117] -> Line 3705
#line 3705
if (tmp___51 == 0) {

} else {
#line 3705
  tmp___52 = strcmp((char const   *)(str), "alnum");
#line 3705
  if (tmp___52 == 0) {

  } else {
#line 3705
    tmp___53 = strcmp((char const   *)(str), "xdigit");
#line 3705
    if (tmp___53 == 0) {

    } else {
#line 3705
      tmp___54 = strcmp((char const   *)(str), "space");
#line 3705
      if (tmp___54 == 0) {

      } else {
#line 3705
        tmp___55 = strcmp((char const   *)(str), "print");
#line 3705
        if (tmp___55 == 0) {

        } else {
#line 3705
          tmp___56 = strcmp((char const   *)(str), "punct");
#line 3705
          if (tmp___56 == 0) {

          } else {
#line 3705
            tmp___57 = strcmp((char const   *)(str), "graph");
#line 3705
            if (tmp___57 == 0) {

            } else {
#line 3705
              tmp___58 = strcmp((char const   *)(str), "cntrl");
#line 3705
              if (tmp___58 == 0) {

              } else {
#line 3705
                tmp___59 = strcmp((char const   *)(str), "blank");
#line 3705
                if (tmp___59 == 0) {

                } else {
#line 3705
                  return ((reg_errcode_t )4);
                }
              }
            }
          }
        }
      }
    }
  }
}
---------
SID [2116] -> Line 3705
#line 3705
tmp___51 = strcmp((char const   *)(str), "digit");
---------
SID [2115] -> Line -1

---------
SID [2114] -> Line 3705
#line 3705
if (tmp___50 == 0) {

} else {
#line 3705
  tmp___51 = strcmp((char const   *)(str), "digit");
#line 3705
  if (tmp___51 == 0) {

  } else {
#line 3705
    tmp___52 = strcmp((char const   *)(str), "alnum");
#line 3705
    if (tmp___52 == 0) {

    } else {
#line 3705
      tmp___53 = strcmp((char const   *)(str), "xdigit");
#line 3705
      if (tmp___53 == 0) {

      } else {
#line 3705
        tmp___54 = strcmp((char const   *)(str), "space");
#line 3705
        if (tmp___54 == 0) {

        } else {
#line 3705
          tmp___55 = strcmp((char const   *)(str), "print");
#line 3705
          if (tmp___55 == 0) {

          } else {
#line 3705
            tmp___56 = strcmp((char const   *)(str), "punct");
#line 3705
            if (tmp___56 == 0) {

            } else {
#line 3705
              tmp___57 = strcmp((char const   *)(str), "graph");
#line 3705
              if (tmp___57 == 0) {

              } else {
#line 3705
                tmp___58 = strcmp((char const   *)(str), "cntrl");
#line 3705
                if (tmp___58 == 0) {

                } else {
#line 3705
                  tmp___59 = strcmp((char const   *)(str), "blank");
#line 3705
                  if (tmp___59 == 0) {

                  } else {
#line 3705
                    return ((reg_errcode_t )4);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
---------
SID [2113] -> Line 3705
#line 3705
tmp___50 = strcmp((char const   *)(str), "lower");
---------
SID [2112] -> Line -1

---------
SID [2111] -> Line 3705
#line 3705
if (tmp___49 == 0) {

} else {
#line 3705
  tmp___50 = strcmp((char const   *)(str), "lower");
#line 3705
  if (tmp___50 == 0) {

  } else {
#line 3705
    tmp___51 = strcmp((char const   *)(str), "digit");
#line 3705
    if (tmp___51 == 0) {

    } else {
#line 3705
      tmp___52 = strcmp((char const   *)(str), "alnum");
#line 3705
      if (tmp___52 == 0) {

      } else {
#line 3705
        tmp___53 = strcmp((char const   *)(str), "xdigit");
#line 3705
        if (tmp___53 == 0) {

        } else {
#line 3705
          tmp___54 = strcmp((char const   *)(str), "space");
#line 3705
          if (tmp___54 == 0) {

          } else {
#line 3705
            tmp___55 = strcmp((char const   *)(str), "print");
#line 3705
            if (tmp___55 == 0) {

            } else {
#line 3705
              tmp___56 = strcmp((char const   *)(str), "punct");
#line 3705
              if (tmp___56 == 0) {

              } else {
#line 3705
                tmp___57 = strcmp((char const   *)(str), "graph");
#line 3705
                if (tmp___57 == 0) {

                } else {
#line 3705
                  tmp___58 = strcmp((char const   *)(str), "cntrl");
#line 3705
                  if (tmp___58 == 0) {

                  } else {
#line 3705
                    tmp___59 = strcmp((char const   *)(str), "blank");
#line 3705
                    if (tmp___59 == 0) {

                    } else {
#line 3705
                      return ((reg_errcode_t )4);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
---------
SID [2110] -> Line 3705
#line 3705
tmp___49 = strcmp((char const   *)(str), "upper");
---------
SID [2109] -> Line -1

---------
SID [2108] -> Line 3705
#line 3705
if (tmp___48 == 0) {

} else {
#line 3705
  tmp___49 = strcmp((char const   *)(str), "upper");
#line 3705
  if (tmp___49 == 0) {

  } else {
#line 3705
    tmp___50 = strcmp((char const   *)(str), "lower");
#line 3705
    if (tmp___50 == 0) {

    } else {
#line 3705
      tmp___51 = strcmp((char const   *)(str), "digit");
#line 3705
      if (tmp___51 == 0) {

      } else {
#line 3705
        tmp___52 = strcmp((char const   *)(str), "alnum");
#line 3705
        if (tmp___52 == 0) {

        } else {
#line 3705
          tmp___53 = strcmp((char const   *)(str), "xdigit");
#line 3705
          if (tmp___53 == 0) {

          } else {
#line 3705
            tmp___54 = strcmp((char const   *)(str), "space");
#line 3705
            if (tmp___54 == 0) {

            } else {
#line 3705
              tmp___55 = strcmp((char const   *)(str), "print");
#line 3705
              if (tmp___55 == 0) {

              } else {
#line 3705
                tmp___56 = strcmp((char const   *)(str), "punct");
#line 3705
                if (tmp___56 == 0) {

                } else {
#line 3705
                  tmp___57 = strcmp((char const   *)(str), "graph");
#line 3705
                  if (tmp___57 == 0) {

                  } else {
#line 3705
                    tmp___58 = strcmp((char const   *)(str), "cntrl");
#line 3705
                    if (tmp___58 == 0) {

                    } else {
#line 3705
                      tmp___59 = strcmp((char const   *)(str), "blank");
#line 3705
                      if (tmp___59 == 0) {

                      } else {
#line 3705
                        return ((reg_errcode_t )4);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
---------
SID [2107] -> Line 3705
#line 3705
tmp___48 = strcmp((char const   *)(str), "alpha");
---------
SID [2106] -> Line 3703
#line 3703
is_xdigit = (boolean )(tmp___47 == 0);
---------
SID [2105] -> Line 3703
#line 3703
tmp___47 = strcmp((char const   *)(str), "xdigit");
---------
SID [2104] -> Line 3702
#line 3702
is_upper = (boolean )(tmp___46 == 0);
---------
SID [2103] -> Line 3702
#line 3702
tmp___46 = strcmp((char const   *)(str), "upper");
---------
SID [2102] -> Line 3701
#line 3701
is_space = (boolean )(tmp___45 == 0);
---------
SID [2101] -> Line 3701
#line 3701
tmp___45 = strcmp((char const   *)(str), "space");
---------
SID [2100] -> Line 3700
#line 3700
is_punct = (boolean )(tmp___44 == 0);
---------
SID [2099] -> Line 3700
#line 3700
tmp___44 = strcmp((char const   *)(str), "punct");
---------
SID [2098] -> Line 3699
#line 3699
is_print = (boolean )(tmp___43 == 0);
---------
SID [2097] -> Line 3699
#line 3699
tmp___43 = strcmp((char const   *)(str), "print");
---------
SID [2096] -> Line 3698
#line 3698
is_lower = (boolean )(tmp___42 == 0);
---------
SID [2095] -> Line 3698
#line 3698
tmp___42 = strcmp((char const   *)(str), "lower");
---------
SID [2094] -> Line 3697
#line 3697
is_graph = (boolean )(tmp___41 == 0);
---------
SID [2093] -> Line 3697
#line 3697
tmp___41 = strcmp((char const   *)(str), "graph");
---------
SID [2092] -> Line 3696
#line 3696
is_digit = (boolean )(tmp___40 == 0);
---------
SID [2091] -> Line 3696
#line 3696
tmp___40 = strcmp((char const   *)(str), "digit");
---------
SID [2090] -> Line 3695
#line 3695
is_cntrl = (boolean )(tmp___39 == 0);
---------
SID [2089] -> Line 3695
#line 3695
tmp___39 = strcmp((char const   *)(str), "cntrl");
---------
SID [2088] -> Line 3694
#line 3694
is_blank = (boolean )(tmp___38 == 0);
---------
SID [2087] -> Line 3694
#line 3694
tmp___38 = strcmp((char const   *)(str), "blank");
---------
SID [2086] -> Line 3693
#line 3693
is_alpha = (boolean )(tmp___37 == 0);
---------
SID [2085] -> Line 3693
#line 3693
tmp___37 = strcmp((char const   *)(str), "alpha");
---------
SID [2084] -> Line 3692
#line 3692
is_alnum = (boolean )(tmp___36 == 0);
---------
SID [2083] -> Line 3692
#line 3692
tmp___36 = strcmp((char const   *)(str), "alnum");
---------
SID [2082] -> Line 3689
#line 3689
if ((int const   )*p == 93) {
#line 3692
  tmp___36 = strcmp((char const   *)(str), "alnum");
#line 3692
  is_alnum = (boolean )(tmp___36 == 0);
#line 3693
  tmp___37 = strcmp((char const   *)(str), "alpha");
#line 3693
  is_alpha = (boolean )(tmp___37 == 0);
#line 3694
  tmp___38 = strcmp((char const   *)(str), "blank");
#line 3694
  is_blank = (boolean )(tmp___38 == 0);
#line 3695
  tmp___39 = strcmp((char const   *)(str), "cntrl");
#line 3695
  is_cntrl = (boolean )(tmp___39 == 0);
#line 3696
  tmp___40 = strcmp((char const   *)(str), "digit");
#line 3696
  is_digit = (boolean )(tmp___40 == 0);
#line 3697
  tmp___41 = strcmp((char const   *)(str), "graph");
#line 3697
  is_graph = (boolean )(tmp___41 == 0);
#line 3698
  tmp___42 = strcmp((char const   *)(str), "lower");
#line 3698
  is_lower = (boolean )(tmp___42 == 0);
#line 3699
  tmp___43 = strcmp((char const   *)(str), "print");
#line 3699
  is_print = (boolean )(tmp___43 == 0);
#line 3700
  tmp___44 = strcmp((char const   *)(str), "punct");
#line 3700
  is_punct = (boolean )(tmp___44 == 0);
#line 3701
  tmp___45 = strcmp((char const   *)(str), "space");
#line 3701
  is_space = (boolean )(tmp___45 == 0);
#line 3702
  tmp___46 = strcmp((char const   *)(str), "upper");
#line 3702
  is_upper = (boolean )(tmp___46 == 0);
#line 3703
  tmp___47 = strcmp((char const   *)(str), "xdigit");
#line 3703
  is_xdigit = (boolean )(tmp___47 == 0);
#line 3705
  tmp___48 = strcmp((char const   *)(str), "alpha");
#line 3705
  if (tmp___48 == 0) {

  } else {
#line 3705
    tmp___49 = strcmp((char const   *)(str), "upper");
#line 3705
    if (tmp___49 == 0) {

    } else {
#line 3705
      tmp___50 = strcmp((char const   *)(str), "lower");
#line 3705
      if (tmp___50 == 0) {

      } else {
#line 3705
        tmp___51 = strcmp((char const   *)(str), "digit");
#line 3705
        if (tmp___51 == 0) {

        } else {
#line 3705
          tmp___52 = strcmp((char const   *)(str), "alnum");
#line 3705
          if (tmp___52 == 0) {

          } else {
#line 3705
            tmp___53 = strcmp((char const   *)(str), "xdigit");
#line 3705
            if (tmp___53 == 0) {

            } else {
#line 3705
              tmp___54 = strcmp((char const   *)(str), "space");
#line 3705
              if (tmp___54 == 0) {

              } else {
#line 3705
                tmp___55 = strcmp((char const   *)(str), "print");
#line 3705
                if (tmp___55 == 0) {

                } else {
#line 3705
                  tmp___56 = strcmp((char const   *)(str), "punct");
#line 3705
                  if (tmp___56 == 0) {

                  } else {
#line 3705
                    tmp___57 = strcmp((char const   *)(str), "graph");
#line 3705
                    if (tmp___57 == 0) {

                    } else {
#line 3705
                      tmp___58 = strcmp((char const   *)(str), "cntrl");
#line 3705
                      if (tmp___58 == 0) {

                      } else {
#line 3705
                        tmp___59 = strcmp((char const   *)(str), "blank");
#line 3705
                        if (tmp___59 == 0) {

                        } else {
#line 3705
                          return ((reg_errcode_t )4);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
#line 3709
  while (1) {
#line 3709
    if ((unsigned long )p == (unsigned long )pend) {
#line 3709
      return ((reg_errcode_t )14);
    } else {

    }
#line 3709
    tmp___60 = p;
#line 3709
    p ++;
#line 3709
    c = (unsigned char )*tmp___60;
#line 3709
    if (translate) {
#line 3709
      c = (unsigned char )*(translate + c);
    } else {

    }
#line 3709
    break;
  }
#line 3711
  if ((unsigned long )p == (unsigned long )pend) {
#line 3711
    return ((reg_errcode_t )7);
  } else {

  }
#line 3713
  ch = 0;
#line 3713
  while (ch < 1 << 8) {
#line 3715
    if (is_alnum) {
#line 3715
      if ((ch & -128) == 0) {
#line 3715
        tmp___61 = __ctype_b_loc();
#line 3715
        if ((int const   )*(*tmp___61 + ch) & 8) {
#line 3727
          *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
        } else {
#line 3715
          goto _L___12;
        }
      } else {
#line 3715
        goto _L___12;
      }
    } else
    _L___12: /* CIL Label */ 
#line 3715
    if (is_alpha) {
#line 3715
      if ((ch & -128) == 0) {
#line 3715
        tmp___62 = __ctype_b_loc();
#line 3715
        if ((int const   )*(*tmp___62 + ch) & 1024) {
#line 3727
          *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
        } else {
#line 3715
          goto _L___11;
        }
      } else {
#line 3715
        goto _L___11;
      }
    } else
    _L___11: /* CIL Label */ 
#line 3715
    if (is_blank) {
#line 3715
      if ((ch & -128) == 0) {
#line 3715
        tmp___63 = __ctype_b_loc();
#line 3715
        if ((int const   )*(*tmp___63 + ch) & 1) {
#line 3727
          *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
        } else {
#line 3715
          goto _L___10;
        }
      } else {
#line 3715
        goto _L___10;
      }
    } else
    _L___10: /* CIL Label */ 
#line 3715
    if (is_cntrl) {
#line 3715
      if ((ch & -128) == 0) {
#line 3715
        tmp___64 = __ctype_b_loc();
#line 3715
        if ((int const   )*(*tmp___64 + ch) & 2) {
#line 3727
          *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
        } else {
#line 3715
          goto _L___9;
        }
      } else {
#line 3715
        goto _L___9;
      }
    } else
    _L___9: /* CIL Label */ 
#line 3715
    if (is_digit) {
#line 3715
      if ((ch & -128) == 0) {
#line 3715
        tmp___65 = __ctype_b_loc();
#line 3715
        if ((int const   )*(*tmp___65 + ch) & 2048) {
#line 3727
          *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
        } else {
#line 3715
          goto _L___8;
        }
      } else {
#line 3715
        goto _L___8;
      }
    } else
    _L___8: /* CIL Label */ 
#line 3715
    if (is_graph) {
#line 3715
      if ((ch & -128) == 0) {
#line 3715
        tmp___66 = __ctype_b_loc();
#line 3715
        if ((int const   )*(*tmp___66 + ch) & 32768) {
#line 3727
          *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
        } else {
#line 3715
          goto _L___7;
        }
      } else {
#line 3715
        goto _L___7;
      }
    } else
    _L___7: /* CIL Label */ 
#line 3715
    if (is_lower) {
#line 3715
      if ((ch & -128) == 0) {
#line 3715
        tmp___67 = __ctype_b_loc();
#line 3715
        if ((int const   )*(*tmp___67 + ch) & 512) {
#line 3727
          *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
        } else {
#line 3715
          goto _L___6;
        }
      } else {
#line 3715
        goto _L___6;
      }
    } else
    _L___6: /* CIL Label */ 
#line 3715
    if (is_print) {
#line 3715
      if ((ch & -128) == 0) {
#line 3715
        tmp___68 = __ctype_b_loc();
#line 3715
        if ((int const   )*(*tmp___68 + ch) & 16384) {
#line 3727
          *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
        } else {
#line 3715
          goto _L___5;
        }
      } else {
#line 3715
        goto _L___5;
      }
    } else
    _L___5: /* CIL Label */ 
#line 3715
    if (is_punct) {
#line 3715
      if ((ch & -128) == 0) {
#line 3715
        tmp___69 = __ctype_b_loc();
#line 3715
        if ((int const   )*(*tmp___69 + ch) & 4) {
#line 3727
          *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
        } else {
#line 3715
          goto _L___4;
        }
      } else {
#line 3715
        goto _L___4;
      }
    } else
    _L___4: /* CIL Label */ 
#line 3715
    if (is_space) {
#line 3715
      if ((ch & -128) == 0) {
#line 3715
        tmp___70 = __ctype_b_loc();
#line 3715
        if ((int const   )*(*tmp___70 + ch) & 8192) {
#line 3727
          *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
        } else {
#line 3715
          goto _L___3;
        }
      } else {
#line 3715
        goto _L___3;
      }
    } else
    _L___3: /* CIL Label */ 
#line 3715
    if (is_upper) {
#line 3715
      if ((ch & -128) == 0) {
#line 3715
        tmp___71 = __ctype_b_loc();
#line 3715
        if ((int const   )*(*tmp___71 + ch) & 256) {
#line 3727
          *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
        } else {
#line 3715
          goto _L___2;
        }
      } else {
#line 3715
        goto _L___2;
      }
    } else
    _L___2: /* CIL Label */ 
#line 3715
    if (is_xdigit) {
#line 3715
      if ((ch & -128) == 0) {
#line 3715
        tmp___72 = __ctype_b_loc();
#line 3715
        if ((int const   )*(*tmp___72 + ch) & 4096) {
#line 3727
          *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
        } else {

        }
      } else {

      }
    } else {

    }
#line 3713
    ch ++;
  }
#line 3729
  had_char_class = (boolean )1;
} else {
#line 3689
  goto _L___13;
}
---------
SID [2081] -> Line 3689
#line 3689
if ((int )c == 58) {
#line 3689
  if ((int const   )*p == 93) {
#line 3692
    tmp___36 = strcmp((char const   *)(str), "alnum");
#line 3692
    is_alnum = (boolean )(tmp___36 == 0);
#line 3693
    tmp___37 = strcmp((char const   *)(str), "alpha");
#line 3693
    is_alpha = (boolean )(tmp___37 == 0);
#line 3694
    tmp___38 = strcmp((char const   *)(str), "blank");
#line 3694
    is_blank = (boolean )(tmp___38 == 0);
#line 3695
    tmp___39 = strcmp((char const   *)(str), "cntrl");
#line 3695
    is_cntrl = (boolean )(tmp___39 == 0);
#line 3696
    tmp___40 = strcmp((char const   *)(str), "digit");
#line 3696
    is_digit = (boolean )(tmp___40 == 0);
#line 3697
    tmp___41 = strcmp((char const   *)(str), "graph");
#line 3697
    is_graph = (boolean )(tmp___41 == 0);
#line 3698
    tmp___42 = strcmp((char const   *)(str), "lower");
#line 3698
    is_lower = (boolean )(tmp___42 == 0);
#line 3699
    tmp___43 = strcmp((char const   *)(str), "print");
#line 3699
    is_print = (boolean )(tmp___43 == 0);
#line 3700
    tmp___44 = strcmp((char const   *)(str), "punct");
#line 3700
    is_punct = (boolean )(tmp___44 == 0);
#line 3701
    tmp___45 = strcmp((char const   *)(str), "space");
#line 3701
    is_space = (boolean )(tmp___45 == 0);
#line 3702
    tmp___46 = strcmp((char const   *)(str), "upper");
#line 3702
    is_upper = (boolean )(tmp___46 == 0);
#line 3703
    tmp___47 = strcmp((char const   *)(str), "xdigit");
#line 3703
    is_xdigit = (boolean )(tmp___47 == 0);
#line 3705
    tmp___48 = strcmp((char const   *)(str), "alpha");
#line 3705
    if (tmp___48 == 0) {

    } else {
#line 3705
      tmp___49 = strcmp((char const   *)(str), "upper");
#line 3705
      if (tmp___49 == 0) {

      } else {
#line 3705
        tmp___50 = strcmp((char const   *)(str), "lower");
#line 3705
        if (tmp___50 == 0) {

        } else {
#line 3705
          tmp___51 = strcmp((char const   *)(str), "digit");
#line 3705
          if (tmp___51 == 0) {

          } else {
#line 3705
            tmp___52 = strcmp((char const   *)(str), "alnum");
#line 3705
            if (tmp___52 == 0) {

            } else {
#line 3705
              tmp___53 = strcmp((char const   *)(str), "xdigit");
#line 3705
              if (tmp___53 == 0) {

              } else {
#line 3705
                tmp___54 = strcmp((char const   *)(str), "space");
#line 3705
                if (tmp___54 == 0) {

                } else {
#line 3705
                  tmp___55 = strcmp((char const   *)(str), "print");
#line 3705
                  if (tmp___55 == 0) {

                  } else {
#line 3705
                    tmp___56 = strcmp((char const   *)(str), "punct");
#line 3705
                    if (tmp___56 == 0) {

                    } else {
#line 3705
                      tmp___57 = strcmp((char const   *)(str), "graph");
#line 3705
                      if (tmp___57 == 0) {

                      } else {
#line 3705
                        tmp___58 = strcmp((char const   *)(str), "cntrl");
#line 3705
                        if (tmp___58 == 0) {

                        } else {
#line 3705
                          tmp___59 = strcmp((char const   *)(str), "blank");
#line 3705
                          if (tmp___59 == 0) {

                          } else {
#line 3705
                            return ((reg_errcode_t )4);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
#line 3709
    while (1) {
#line 3709
      if ((unsigned long )p == (unsigned long )pend) {
#line 3709
        return ((reg_errcode_t )14);
      } else {

      }
#line 3709
      tmp___60 = p;
#line 3709
      p ++;
#line 3709
      c = (unsigned char )*tmp___60;
#line 3709
      if (translate) {
#line 3709
        c = (unsigned char )*(translate + c);
      } else {

      }
#line 3709
      break;
    }
#line 3711
    if ((unsigned long )p == (unsigned long )pend) {
#line 3711
      return ((reg_errcode_t )7);
    } else {

    }
#line 3713
    ch = 0;
#line 3713
    while (ch < 1 << 8) {
#line 3715
      if (is_alnum) {
#line 3715
        if ((ch & -128) == 0) {
#line 3715
          tmp___61 = __ctype_b_loc();
#line 3715
          if ((int const   )*(*tmp___61 + ch) & 8) {
#line 3727
            *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
          } else {
#line 3715
            goto _L___12;
          }
        } else {
#line 3715
          goto _L___12;
        }
      } else
      _L___12: /* CIL Label */ 
#line 3715
      if (is_alpha) {
#line 3715
        if ((ch & -128) == 0) {
#line 3715
          tmp___62 = __ctype_b_loc();
#line 3715
          if ((int const   )*(*tmp___62 + ch) & 1024) {
#line 3727
            *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
          } else {
#line 3715
            goto _L___11;
          }
        } else {
#line 3715
          goto _L___11;
        }
      } else
      _L___11: /* CIL Label */ 
#line 3715
      if (is_blank) {
#line 3715
        if ((ch & -128) == 0) {
#line 3715
          tmp___63 = __ctype_b_loc();
#line 3715
          if ((int const   )*(*tmp___63 + ch) & 1) {
#line 3727
            *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
          } else {
#line 3715
            goto _L___10;
          }
        } else {
#line 3715
          goto _L___10;
        }
      } else
      _L___10: /* CIL Label */ 
#line 3715
      if (is_cntrl) {
#line 3715
        if ((ch & -128) == 0) {
#line 3715
          tmp___64 = __ctype_b_loc();
#line 3715
          if ((int const   )*(*tmp___64 + ch) & 2) {
#line 3727
            *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
          } else {
#line 3715
            goto _L___9;
          }
        } else {
#line 3715
          goto _L___9;
        }
      } else
      _L___9: /* CIL Label */ 
#line 3715
      if (is_digit) {
#line 3715
        if ((ch & -128) == 0) {
#line 3715
          tmp___65 = __ctype_b_loc();
#line 3715
          if ((int const   )*(*tmp___65 + ch) & 2048) {
#line 3727
            *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
          } else {
#line 3715
            goto _L___8;
          }
        } else {
#line 3715
          goto _L___8;
        }
      } else
      _L___8: /* CIL Label */ 
#line 3715
      if (is_graph) {
#line 3715
        if ((ch & -128) == 0) {
#line 3715
          tmp___66 = __ctype_b_loc();
#line 3715
          if ((int const   )*(*tmp___66 + ch) & 32768) {
#line 3727
            *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
          } else {
#line 3715
            goto _L___7;
          }
        } else {
#line 3715
          goto _L___7;
        }
      } else
      _L___7: /* CIL Label */ 
#line 3715
      if (is_lower) {
#line 3715
        if ((ch & -128) == 0) {
#line 3715
          tmp___67 = __ctype_b_loc();
#line 3715
          if ((int const   )*(*tmp___67 + ch) & 512) {
#line 3727
            *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
          } else {
#line 3715
            goto _L___6;
          }
        } else {
#line 3715
          goto _L___6;
        }
      } else
      _L___6: /* CIL Label */ 
#line 3715
      if (is_print) {
#line 3715
        if ((ch & -128) == 0) {
#line 3715
          tmp___68 = __ctype_b_loc();
#line 3715
          if ((int const   )*(*tmp___68 + ch) & 16384) {
#line 3727
            *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
          } else {
#line 3715
            goto _L___5;
          }
        } else {
#line 3715
          goto _L___5;
        }
      } else
      _L___5: /* CIL Label */ 
#line 3715
      if (is_punct) {
#line 3715
        if ((ch & -128) == 0) {
#line 3715
          tmp___69 = __ctype_b_loc();
#line 3715
          if ((int const   )*(*tmp___69 + ch) & 4) {
#line 3727
            *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
          } else {
#line 3715
            goto _L___4;
          }
        } else {
#line 3715
          goto _L___4;
        }
      } else
      _L___4: /* CIL Label */ 
#line 3715
      if (is_space) {
#line 3715
        if ((ch & -128) == 0) {
#line 3715
          tmp___70 = __ctype_b_loc();
#line 3715
          if ((int const   )*(*tmp___70 + ch) & 8192) {
#line 3727
            *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
          } else {
#line 3715
            goto _L___3;
          }
        } else {
#line 3715
          goto _L___3;
        }
      } else
      _L___3: /* CIL Label */ 
#line 3715
      if (is_upper) {
#line 3715
        if ((ch & -128) == 0) {
#line 3715
          tmp___71 = __ctype_b_loc();
#line 3715
          if ((int const   )*(*tmp___71 + ch) & 256) {
#line 3727
            *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
          } else {
#line 3715
            goto _L___2;
          }
        } else {
#line 3715
          goto _L___2;
        }
      } else
      _L___2: /* CIL Label */ 
#line 3715
      if (is_xdigit) {
#line 3715
        if ((ch & -128) == 0) {
#line 3715
          tmp___72 = __ctype_b_loc();
#line 3715
          if ((int const   )*(*tmp___72 + ch) & 4096) {
#line 3727
            *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
          } else {

          }
        } else {

        }
      } else {

      }
#line 3713
      ch ++;
    }
#line 3729
    had_char_class = (boolean )1;
  } else {
#line 3689
    goto _L___13;
  }
} else {
  _L___13: /* CIL Label */ 
#line 3733
  c1 = (unsigned char )((int )c1 + 1);
#line 3734
  while (1) {
#line 3734
    tmp___73 = c1;
#line 3734
    c1 = (unsigned char )((int )c1 - 1);
#line 3734
    if (tmp___73) {

    } else {
#line 3734
      break;
    }
#line 3735
    p --;
  }
#line 3736
  *(b + 11) = (unsigned char )((int )*(b + 11) | (1 << 3));
#line 3737
  *(b + 7) = (unsigned char )((int )*(b + 7) | (1 << 2));
#line 3738
  had_char_class = (boolean )0;
}
---------
SID [2080] -> Line 3684
#line 3684
str[c1] = (char )'\000';
---------
SID [2079] -> Line 3682
#line 3682
str[tmp___35] = (char )c;
---------
SID [2078] -> Line 3682
#line 3682
c1 = (unsigned char )((int )c1 + 1);
---------
SID [2077] -> Line 3682
#line 3682
tmp___35 = c1;
---------
SID [2076] -> Line -1

---------
SID [2075] -> Line 3681
#line 3681
break;
---------
SID [2074] -> Line 3679
#line 3679
if ((int )c1 == 6) {
#line 3681
  break;
} else {

}
---------
SID [2073] -> Line 3681
#line 3681
break;
---------
SID [2072] -> Line 3679
#line 3679
if ((unsigned long )p == (unsigned long )pend) {
#line 3681
  break;
} else
#line 3679
if ((int )c1 == 6) {
#line 3681
  break;
} else {

}
---------
SID [2071] -> Line 3681
#line 3681
break;
---------
SID [2070] -> Line 3679
#line 3679
if ((int )c == 93) {
#line 3681
  break;
} else
#line 3679
if ((unsigned long )p == (unsigned long )pend) {
#line 3681
  break;
} else
#line 3679
if ((int )c1 == 6) {
#line 3681
  break;
} else {

}
---------
SID [2069] -> Line 3681
#line 3681
break;
---------
SID [2068] -> Line 3679
#line 3679
if ((int )c == 58) {
#line 3681
  break;
} else
#line 3679
if ((int )c == 93) {
#line 3681
  break;
} else
#line 3679
if ((unsigned long )p == (unsigned long )pend) {
#line 3681
  break;
} else
#line 3679
if ((int )c1 == 6) {
#line 3681
  break;
} else {

}
---------
SID [2067] -> Line 3678
#line 3678
break;
---------
SID [2066] -> Line -1

---------
SID [2065] -> Line 3678
#line 3678
c = (unsigned char )*(translate + c);
---------
SID [2064] -> Line 3678
#line 3678
if (translate) {
#line 3678
  c = (unsigned char )*(translate + c);
} else {

}
---------
SID [2063] -> Line 3678
#line 3678
c = (unsigned char )*tmp___34;
---------
SID [2062] -> Line 3678
#line 3678
p ++;
---------
SID [2061] -> Line 3678
#line 3678
tmp___34 = p;
---------
SID [2060] -> Line -1

---------
SID [2059] -> Line 3678
#line 3678
return ((reg_errcode_t )14);
---------
SID [2058] -> Line 3678
#line 3678
if ((unsigned long )p == (unsigned long )pend) {
#line 3678
  return ((reg_errcode_t )14);
} else {

}
---------
SID [2057] -> Line 3678
#line 3678
while (1) {
#line 3678
  if ((unsigned long )p == (unsigned long )pend) {
#line 3678
    return ((reg_errcode_t )14);
  } else {

  }
#line 3678
  tmp___34 = p;
#line 3678
  p ++;
#line 3678
  c = (unsigned char )*tmp___34;
#line 3678
  if (translate) {
#line 3678
    c = (unsigned char )*(translate + c);
  } else {

  }
#line 3678
  break;
}
---------
SID [2056] -> Line 3676
#line 3676
while (1) {
#line 3678
  while (1) {
#line 3678
    if ((unsigned long )p == (unsigned long )pend) {
#line 3678
      return ((reg_errcode_t )14);
    } else {

    }
#line 3678
    tmp___34 = p;
#line 3678
    p ++;
#line 3678
    c = (unsigned char )*tmp___34;
#line 3678
    if (translate) {
#line 3678
      c = (unsigned char )*(translate + c);
    } else {

    }
#line 3678
    break;
  }
#line 3679
  if ((int )c == 58) {
#line 3681
    break;
  } else
#line 3679
  if ((int )c == 93) {
#line 3681
    break;
  } else
#line 3679
  if ((unsigned long )p == (unsigned long )pend) {
#line 3681
    break;
  } else
#line 3679
  if ((int )c1 == 6) {
#line 3681
    break;
  } else {

  }
#line 3682
  tmp___35 = c1;
#line 3682
  c1 = (unsigned char )((int )c1 + 1);
#line 3682
  str[tmp___35] = (char )c;
}
---------
SID [2055] -> Line -1

---------
SID [2054] -> Line 3674
#line 3674
return ((reg_errcode_t )7);
---------
SID [2053] -> Line 3674
#line 3674
if ((unsigned long )p == (unsigned long )pend) {
#line 3674
  return ((reg_errcode_t )7);
} else {

}
---------
SID [2052] -> Line 3671
#line 3671
c1 = (unsigned char)0;
---------
SID [2051] -> Line 3670
#line 3670
break;
---------
SID [2050] -> Line -1

---------
SID [2049] -> Line 3670
#line 3670
c = (unsigned char )*(translate + c);
---------
SID [2048] -> Line 3670
#line 3670
if (translate) {
#line 3670
  c = (unsigned char )*(translate + c);
} else {

}
---------
SID [2047] -> Line 3670
#line 3670
c = (unsigned char )*tmp___33;
---------
SID [2046] -> Line 3670
#line 3670
p ++;
---------
SID [2045] -> Line 3670
#line 3670
tmp___33 = p;
---------
SID [2044] -> Line -1

---------
SID [2043] -> Line 3670
#line 3670
return ((reg_errcode_t )14);
---------
SID [2042] -> Line 3670
#line 3670
if ((unsigned long )p == (unsigned long )pend) {
#line 3670
  return ((reg_errcode_t )14);
} else {

}
---------
SID [2041] -> Line 3670
#line 3670
while (1) {
#line 3670
  if ((unsigned long )p == (unsigned long )pend) {
#line 3670
    return ((reg_errcode_t )14);
  } else {

  }
#line 3670
  tmp___33 = p;
#line 3670
  p ++;
#line 3670
  c = (unsigned char )*tmp___33;
#line 3670
  if (translate) {
#line 3670
    c = (unsigned char )*(translate + c);
  } else {

  }
#line 3670
  break;
}
---------
SID [2040] -> Line 3666
#line 3666
if ((int const   )*p == 58) {
#line 3670
  while (1) {
#line 3670
    if ((unsigned long )p == (unsigned long )pend) {
#line 3670
      return ((reg_errcode_t )14);
    } else {

    }
#line 3670
    tmp___33 = p;
#line 3670
    p ++;
#line 3670
    c = (unsigned char )*tmp___33;
#line 3670
    if (translate) {
#line 3670
      c = (unsigned char )*(translate + c);
    } else {

    }
#line 3670
    break;
  }
#line 3671
  c1 = (unsigned char)0;
#line 3674
  if ((unsigned long )p == (unsigned long )pend) {
#line 3674
    return ((reg_errcode_t )7);
  } else {

  }
#line 3676
  while (1) {
#line 3678
    while (1) {
#line 3678
      if ((unsigned long )p == (unsigned long )pend) {
#line 3678
        return ((reg_errcode_t )14);
      } else {

      }
#line 3678
      tmp___34 = p;
#line 3678
      p ++;
#line 3678
      c = (unsigned char )*tmp___34;
#line 3678
      if (translate) {
#line 3678
        c = (unsigned char )*(translate + c);
      } else {

      }
#line 3678
      break;
    }
#line 3679
    if ((int )c == 58) {
#line 3681
      break;
    } else
#line 3679
    if ((int )c == 93) {
#line 3681
      break;
    } else
#line 3679
    if ((unsigned long )p == (unsigned long )pend) {
#line 3681
      break;
    } else
#line 3679
    if ((int )c1 == 6) {
#line 3681
      break;
    } else {

    }
#line 3682
    tmp___35 = c1;
#line 3682
    c1 = (unsigned char )((int )c1 + 1);
#line 3682
    str[tmp___35] = (char )c;
  }
#line 3684
  str[c1] = (char )'\000';
#line 3689
  if ((int )c == 58) {
#line 3689
    if ((int const   )*p == 93) {
#line 3692
      tmp___36 = strcmp((char const   *)(str), "alnum");
#line 3692
      is_alnum = (boolean )(tmp___36 == 0);
#line 3693
      tmp___37 = strcmp((char const   *)(str), "alpha");
#line 3693
      is_alpha = (boolean )(tmp___37 == 0);
#line 3694
      tmp___38 = strcmp((char const   *)(str), "blank");
#line 3694
      is_blank = (boolean )(tmp___38 == 0);
#line 3695
      tmp___39 = strcmp((char const   *)(str), "cntrl");
#line 3695
      is_cntrl = (boolean )(tmp___39 == 0);
#line 3696
      tmp___40 = strcmp((char const   *)(str), "digit");
#line 3696
      is_digit = (boolean )(tmp___40 == 0);
#line 3697
      tmp___41 = strcmp((char const   *)(str), "graph");
#line 3697
      is_graph = (boolean )(tmp___41 == 0);
#line 3698
      tmp___42 = strcmp((char const   *)(str), "lower");
#line 3698
      is_lower = (boolean )(tmp___42 == 0);
#line 3699
      tmp___43 = strcmp((char const   *)(str), "print");
#line 3699
      is_print = (boolean )(tmp___43 == 0);
#line 3700
      tmp___44 = strcmp((char const   *)(str), "punct");
#line 3700
      is_punct = (boolean )(tmp___44 == 0);
#line 3701
      tmp___45 = strcmp((char const   *)(str), "space");
#line 3701
      is_space = (boolean )(tmp___45 == 0);
#line 3702
      tmp___46 = strcmp((char const   *)(str), "upper");
#line 3702
      is_upper = (boolean )(tmp___46 == 0);
#line 3703
      tmp___47 = strcmp((char const   *)(str), "xdigit");
#line 3703
      is_xdigit = (boolean )(tmp___47 == 0);
#line 3705
      tmp___48 = strcmp((char const   *)(str), "alpha");
#line 3705
      if (tmp___48 == 0) {

      } else {
#line 3705
        tmp___49 = strcmp((char const   *)(str), "upper");
#line 3705
        if (tmp___49 == 0) {

        } else {
#line 3705
          tmp___50 = strcmp((char const   *)(str), "lower");
#line 3705
          if (tmp___50 == 0) {

          } else {
#line 3705
            tmp___51 = strcmp((char const   *)(str), "digit");
#line 3705
            if (tmp___51 == 0) {

            } else {
#line 3705
              tmp___52 = strcmp((char const   *)(str), "alnum");
#line 3705
              if (tmp___52 == 0) {

              } else {
#line 3705
                tmp___53 = strcmp((char const   *)(str), "xdigit");
#line 3705
                if (tmp___53 == 0) {

                } else {
#line 3705
                  tmp___54 = strcmp((char const   *)(str), "space");
#line 3705
                  if (tmp___54 == 0) {

                  } else {
#line 3705
                    tmp___55 = strcmp((char const   *)(str), "print");
#line 3705
                    if (tmp___55 == 0) {

                    } else {
#line 3705
                      tmp___56 = strcmp((char const   *)(str), "punct");
#line 3705
                      if (tmp___56 == 0) {

                      } else {
#line 3705
                        tmp___57 = strcmp((char const   *)(str), "graph");
#line 3705
                        if (tmp___57 == 0) {

                        } else {
#line 3705
                          tmp___58 = strcmp((char const   *)(str), "cntrl");
#line 3705
                          if (tmp___58 == 0) {

                          } else {
#line 3705
                            tmp___59 = strcmp((char const   *)(str), "blank");
#line 3705
                            if (tmp___59 == 0) {

                            } else {
#line 3705
                              return ((reg_errcode_t )4);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
#line 3709
      while (1) {
#line 3709
        if ((unsigned long )p == (unsigned long )pend) {
#line 3709
          return ((reg_errcode_t )14);
        } else {

        }
#line 3709
        tmp___60 = p;
#line 3709
        p ++;
#line 3709
        c = (unsigned char )*tmp___60;
#line 3709
        if (translate) {
#line 3709
          c = (unsigned char )*(translate + c);
        } else {

        }
#line 3709
        break;
      }
#line 3711
      if ((unsigned long )p == (unsigned long )pend) {
#line 3711
        return ((reg_errcode_t )7);
      } else {

      }
#line 3713
      ch = 0;
#line 3713
      while (ch < 1 << 8) {
#line 3715
        if (is_alnum) {
#line 3715
          if ((ch & -128) == 0) {
#line 3715
            tmp___61 = __ctype_b_loc();
#line 3715
            if ((int const   )*(*tmp___61 + ch) & 8) {
#line 3727
              *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
            } else {
#line 3715
              goto _L___12;
            }
          } else {
#line 3715
            goto _L___12;
          }
        } else
        _L___12: /* CIL Label */ 
#line 3715
        if (is_alpha) {
#line 3715
          if ((ch & -128) == 0) {
#line 3715
            tmp___62 = __ctype_b_loc();
#line 3715
            if ((int const   )*(*tmp___62 + ch) & 1024) {
#line 3727
              *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
            } else {
#line 3715
              goto _L___11;
            }
          } else {
#line 3715
            goto _L___11;
          }
        } else
        _L___11: /* CIL Label */ 
#line 3715
        if (is_blank) {
#line 3715
          if ((ch & -128) == 0) {
#line 3715
            tmp___63 = __ctype_b_loc();
#line 3715
            if ((int const   )*(*tmp___63 + ch) & 1) {
#line 3727
              *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
            } else {
#line 3715
              goto _L___10;
            }
          } else {
#line 3715
            goto _L___10;
          }
        } else
        _L___10: /* CIL Label */ 
#line 3715
        if (is_cntrl) {
#line 3715
          if ((ch & -128) == 0) {
#line 3715
            tmp___64 = __ctype_b_loc();
#line 3715
            if ((int const   )*(*tmp___64 + ch) & 2) {
#line 3727
              *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
            } else {
#line 3715
              goto _L___9;
            }
          } else {
#line 3715
            goto _L___9;
          }
        } else
        _L___9: /* CIL Label */ 
#line 3715
        if (is_digit) {
#line 3715
          if ((ch & -128) == 0) {
#line 3715
            tmp___65 = __ctype_b_loc();
#line 3715
            if ((int const   )*(*tmp___65 + ch) & 2048) {
#line 3727
              *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
            } else {
#line 3715
              goto _L___8;
            }
          } else {
#line 3715
            goto _L___8;
          }
        } else
        _L___8: /* CIL Label */ 
#line 3715
        if (is_graph) {
#line 3715
          if ((ch & -128) == 0) {
#line 3715
            tmp___66 = __ctype_b_loc();
#line 3715
            if ((int const   )*(*tmp___66 + ch) & 32768) {
#line 3727
              *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
            } else {
#line 3715
              goto _L___7;
            }
          } else {
#line 3715
            goto _L___7;
          }
        } else
        _L___7: /* CIL Label */ 
#line 3715
        if (is_lower) {
#line 3715
          if ((ch & -128) == 0) {
#line 3715
            tmp___67 = __ctype_b_loc();
#line 3715
            if ((int const   )*(*tmp___67 + ch) & 512) {
#line 3727
              *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
            } else {
#line 3715
              goto _L___6;
            }
          } else {
#line 3715
            goto _L___6;
          }
        } else
        _L___6: /* CIL Label */ 
#line 3715
        if (is_print) {
#line 3715
          if ((ch & -128) == 0) {
#line 3715
            tmp___68 = __ctype_b_loc();
#line 3715
            if ((int const   )*(*tmp___68 + ch) & 16384) {
#line 3727
              *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
            } else {
#line 3715
              goto _L___5;
            }
          } else {
#line 3715
            goto _L___5;
          }
        } else
        _L___5: /* CIL Label */ 
#line 3715
        if (is_punct) {
#line 3715
          if ((ch & -128) == 0) {
#line 3715
            tmp___69 = __ctype_b_loc();
#line 3715
            if ((int const   )*(*tmp___69 + ch) & 4) {
#line 3727
              *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
            } else {
#line 3715
              goto _L___4;
            }
          } else {
#line 3715
            goto _L___4;
          }
        } else
        _L___4: /* CIL Label */ 
#line 3715
        if (is_space) {
#line 3715
          if ((ch & -128) == 0) {
#line 3715
            tmp___70 = __ctype_b_loc();
#line 3715
            if ((int const   )*(*tmp___70 + ch) & 8192) {
#line 3727
              *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
            } else {
#line 3715
              goto _L___3;
            }
          } else {
#line 3715
            goto _L___3;
          }
        } else
        _L___3: /* CIL Label */ 
#line 3715
        if (is_upper) {
#line 3715
          if ((ch & -128) == 0) {
#line 3715
            tmp___71 = __ctype_b_loc();
#line 3715
            if ((int const   )*(*tmp___71 + ch) & 256) {
#line 3727
              *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
            } else {
#line 3715
              goto _L___2;
            }
          } else {
#line 3715
            goto _L___2;
          }
        } else
        _L___2: /* CIL Label */ 
#line 3715
        if (is_xdigit) {
#line 3715
          if ((ch & -128) == 0) {
#line 3715
            tmp___72 = __ctype_b_loc();
#line 3715
            if ((int const   )*(*tmp___72 + ch) & 4096) {
#line 3727
              *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
            } else {

            }
          } else {

          }
        } else {

        }
#line 3713
        ch ++;
      }
#line 3729
      had_char_class = (boolean )1;
    } else {
#line 3689
      goto _L___13;
    }
  } else {
    _L___13: /* CIL Label */ 
#line 3733
    c1 = (unsigned char )((int )c1 + 1);
#line 3734
    while (1) {
#line 3734
      tmp___73 = c1;
#line 3734
      c1 = (unsigned char )((int )c1 - 1);
#line 3734
      if (tmp___73) {

      } else {
#line 3734
        break;
      }
#line 3735
      p --;
    }
#line 3736
    *(b + 11) = (unsigned char )((int )*(b + 11) | (1 << 3));
#line 3737
    *(b + 7) = (unsigned char )((int )*(b + 7) | (1 << 2));
#line 3738
    had_char_class = (boolean )0;
  }
} else {
#line 3743
  had_char_class = (boolean )0;
#line 3744
  *(b + (int )c / 8) = (unsigned char )((int )*(b + (int )c / 8) | (1 << (int )c % 8));
}
---------
SID [2039] -> Line 3666
#line 3666
if ((int )c == 91) {
#line 3666
  if ((int const   )*p == 58) {
#line 3670
    while (1) {
#line 3670
      if ((unsigned long )p == (unsigned long )pend) {
#line 3670
        return ((reg_errcode_t )14);
      } else {

      }
#line 3670
      tmp___33 = p;
#line 3670
      p ++;
#line 3670
      c = (unsigned char )*tmp___33;
#line 3670
      if (translate) {
#line 3670
        c = (unsigned char )*(translate + c);
      } else {

      }
#line 3670
      break;
    }
#line 3671
    c1 = (unsigned char)0;
#line 3674
    if ((unsigned long )p == (unsigned long )pend) {
#line 3674
      return ((reg_errcode_t )7);
    } else {

    }
#line 3676
    while (1) {
#line 3678
      while (1) {
#line 3678
        if ((unsigned long )p == (unsigned long )pend) {
#line 3678
          return ((reg_errcode_t )14);
        } else {

        }
#line 3678
        tmp___34 = p;
#line 3678
        p ++;
#line 3678
        c = (unsigned char )*tmp___34;
#line 3678
        if (translate) {
#line 3678
          c = (unsigned char )*(translate + c);
        } else {

        }
#line 3678
        break;
      }
#line 3679
      if ((int )c == 58) {
#line 3681
        break;
      } else
#line 3679
      if ((int )c == 93) {
#line 3681
        break;
      } else
#line 3679
      if ((unsigned long )p == (unsigned long )pend) {
#line 3681
        break;
      } else
#line 3679
      if ((int )c1 == 6) {
#line 3681
        break;
      } else {

      }
#line 3682
      tmp___35 = c1;
#line 3682
      c1 = (unsigned char )((int )c1 + 1);
#line 3682
      str[tmp___35] = (char )c;
    }
#line 3684
    str[c1] = (char )'\000';
#line 3689
    if ((int )c == 58) {
#line 3689
      if ((int const   )*p == 93) {
#line 3692
        tmp___36 = strcmp((char const   *)(str), "alnum");
#line 3692
        is_alnum = (boolean )(tmp___36 == 0);
#line 3693
        tmp___37 = strcmp((char const   *)(str), "alpha");
#line 3693
        is_alpha = (boolean )(tmp___37 == 0);
#line 3694
        tmp___38 = strcmp((char const   *)(str), "blank");
#line 3694
        is_blank = (boolean )(tmp___38 == 0);
#line 3695
        tmp___39 = strcmp((char const   *)(str), "cntrl");
#line 3695
        is_cntrl = (boolean )(tmp___39 == 0);
#line 3696
        tmp___40 = strcmp((char const   *)(str), "digit");
#line 3696
        is_digit = (boolean )(tmp___40 == 0);
#line 3697
        tmp___41 = strcmp((char const   *)(str), "graph");
#line 3697
        is_graph = (boolean )(tmp___41 == 0);
#line 3698
        tmp___42 = strcmp((char const   *)(str), "lower");
#line 3698
        is_lower = (boolean )(tmp___42 == 0);
#line 3699
        tmp___43 = strcmp((char const   *)(str), "print");
#line 3699
        is_print = (boolean )(tmp___43 == 0);
#line 3700
        tmp___44 = strcmp((char const   *)(str), "punct");
#line 3700
        is_punct = (boolean )(tmp___44 == 0);
#line 3701
        tmp___45 = strcmp((char const   *)(str), "space");
#line 3701
        is_space = (boolean )(tmp___45 == 0);
#line 3702
        tmp___46 = strcmp((char const   *)(str), "upper");
#line 3702
        is_upper = (boolean )(tmp___46 == 0);
#line 3703
        tmp___47 = strcmp((char const   *)(str), "xdigit");
#line 3703
        is_xdigit = (boolean )(tmp___47 == 0);
#line 3705
        tmp___48 = strcmp((char const   *)(str), "alpha");
#line 3705
        if (tmp___48 == 0) {

        } else {
#line 3705
          tmp___49 = strcmp((char const   *)(str), "upper");
#line 3705
          if (tmp___49 == 0) {

          } else {
#line 3705
            tmp___50 = strcmp((char const   *)(str), "lower");
#line 3705
            if (tmp___50 == 0) {

            } else {
#line 3705
              tmp___51 = strcmp((char const   *)(str), "digit");
#line 3705
              if (tmp___51 == 0) {

              } else {
#line 3705
                tmp___52 = strcmp((char const   *)(str), "alnum");
#line 3705
                if (tmp___52 == 0) {

                } else {
#line 3705
                  tmp___53 = strcmp((char const   *)(str), "xdigit");
#line 3705
                  if (tmp___53 == 0) {

                  } else {
#line 3705
                    tmp___54 = strcmp((char const   *)(str), "space");
#line 3705
                    if (tmp___54 == 0) {

                    } else {
#line 3705
                      tmp___55 = strcmp((char const   *)(str), "print");
#line 3705
                      if (tmp___55 == 0) {

                      } else {
#line 3705
                        tmp___56 = strcmp((char const   *)(str), "punct");
#line 3705
                        if (tmp___56 == 0) {

                        } else {
#line 3705
                          tmp___57 = strcmp((char const   *)(str), "graph");
#line 3705
                          if (tmp___57 == 0) {

                          } else {
#line 3705
                            tmp___58 = strcmp((char const   *)(str), "cntrl");
#line 3705
                            if (tmp___58 == 0) {

                            } else {
#line 3705
                              tmp___59 = strcmp((char const   *)(str), "blank");
#line 3705
                              if (tmp___59 == 0) {

                              } else {
#line 3705
                                return ((reg_errcode_t )4);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
#line 3709
        while (1) {
#line 3709
          if ((unsigned long )p == (unsigned long )pend) {
#line 3709
            return ((reg_errcode_t )14);
          } else {

          }
#line 3709
          tmp___60 = p;
#line 3709
          p ++;
#line 3709
          c = (unsigned char )*tmp___60;
#line 3709
          if (translate) {
#line 3709
            c = (unsigned char )*(translate + c);
          } else {

          }
#line 3709
          break;
        }
#line 3711
        if ((unsigned long )p == (unsigned long )pend) {
#line 3711
          return ((reg_errcode_t )7);
        } else {

        }
#line 3713
        ch = 0;
#line 3713
        while (ch < 1 << 8) {
#line 3715
          if (is_alnum) {
#line 3715
            if ((ch & -128) == 0) {
#line 3715
              tmp___61 = __ctype_b_loc();
#line 3715
              if ((int const   )*(*tmp___61 + ch) & 8) {
#line 3727
                *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
              } else {
#line 3715
                goto _L___12;
              }
            } else {
#line 3715
              goto _L___12;
            }
          } else
          _L___12: /* CIL Label */ 
#line 3715
          if (is_alpha) {
#line 3715
            if ((ch & -128) == 0) {
#line 3715
              tmp___62 = __ctype_b_loc();
#line 3715
              if ((int const   )*(*tmp___62 + ch) & 1024) {
#line 3727
                *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
              } else {
#line 3715
                goto _L___11;
              }
            } else {
#line 3715
              goto _L___11;
            }
          } else
          _L___11: /* CIL Label */ 
#line 3715
          if (is_blank) {
#line 3715
            if ((ch & -128) == 0) {
#line 3715
              tmp___63 = __ctype_b_loc();
#line 3715
              if ((int const   )*(*tmp___63 + ch) & 1) {
#line 3727
                *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
              } else {
#line 3715
                goto _L___10;
              }
            } else {
#line 3715
              goto _L___10;
            }
          } else
          _L___10: /* CIL Label */ 
#line 3715
          if (is_cntrl) {
#line 3715
            if ((ch & -128) == 0) {
#line 3715
              tmp___64 = __ctype_b_loc();
#line 3715
              if ((int const   )*(*tmp___64 + ch) & 2) {
#line 3727
                *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
              } else {
#line 3715
                goto _L___9;
              }
            } else {
#line 3715
              goto _L___9;
            }
          } else
          _L___9: /* CIL Label */ 
#line 3715
          if (is_digit) {
#line 3715
            if ((ch & -128) == 0) {
#line 3715
              tmp___65 = __ctype_b_loc();
#line 3715
              if ((int const   )*(*tmp___65 + ch) & 2048) {
#line 3727
                *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
              } else {
#line 3715
                goto _L___8;
              }
            } else {
#line 3715
              goto _L___8;
            }
          } else
          _L___8: /* CIL Label */ 
#line 3715
          if (is_graph) {
#line 3715
            if ((ch & -128) == 0) {
#line 3715
              tmp___66 = __ctype_b_loc();
#line 3715
              if ((int const   )*(*tmp___66 + ch) & 32768) {
#line 3727
                *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
              } else {
#line 3715
                goto _L___7;
              }
            } else {
#line 3715
              goto _L___7;
            }
          } else
          _L___7: /* CIL Label */ 
#line 3715
          if (is_lower) {
#line 3715
            if ((ch & -128) == 0) {
#line 3715
              tmp___67 = __ctype_b_loc();
#line 3715
              if ((int const   )*(*tmp___67 + ch) & 512) {
#line 3727
                *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
              } else {
#line 3715
                goto _L___6;
              }
            } else {
#line 3715
              goto _L___6;
            }
          } else
          _L___6: /* CIL Label */ 
#line 3715
          if (is_print) {
#line 3715
            if ((ch & -128) == 0) {
#line 3715
              tmp___68 = __ctype_b_loc();
#line 3715
              if ((int const   )*(*tmp___68 + ch) & 16384) {
#line 3727
                *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
              } else {
#line 3715
                goto _L___5;
              }
            } else {
#line 3715
              goto _L___5;
            }
          } else
          _L___5: /* CIL Label */ 
#line 3715
          if (is_punct) {
#line 3715
            if ((ch & -128) == 0) {
#line 3715
              tmp___69 = __ctype_b_loc();
#line 3715
              if ((int const   )*(*tmp___69 + ch) & 4) {
#line 3727
                *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
              } else {
#line 3715
                goto _L___4;
              }
            } else {
#line 3715
              goto _L___4;
            }
          } else
          _L___4: /* CIL Label */ 
#line 3715
          if (is_space) {
#line 3715
            if ((ch & -128) == 0) {
#line 3715
              tmp___70 = __ctype_b_loc();
#line 3715
              if ((int const   )*(*tmp___70 + ch) & 8192) {
#line 3727
                *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
              } else {
#line 3715
                goto _L___3;
              }
            } else {
#line 3715
              goto _L___3;
            }
          } else
          _L___3: /* CIL Label */ 
#line 3715
          if (is_upper) {
#line 3715
            if ((ch & -128) == 0) {
#line 3715
              tmp___71 = __ctype_b_loc();
#line 3715
              if ((int const   )*(*tmp___71 + ch) & 256) {
#line 3727
                *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
              } else {
#line 3715
                goto _L___2;
              }
            } else {
#line 3715
              goto _L___2;
            }
          } else
          _L___2: /* CIL Label */ 
#line 3715
          if (is_xdigit) {
#line 3715
            if ((ch & -128) == 0) {
#line 3715
              tmp___72 = __ctype_b_loc();
#line 3715
              if ((int const   )*(*tmp___72 + ch) & 4096) {
#line 3727
                *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
              } else {

              }
            } else {

            }
          } else {

          }
#line 3713
          ch ++;
        }
#line 3729
        had_char_class = (boolean )1;
      } else {
#line 3689
        goto _L___13;
      }
    } else {
      _L___13: /* CIL Label */ 
#line 3733
      c1 = (unsigned char )((int )c1 + 1);
#line 3734
      while (1) {
#line 3734
        tmp___73 = c1;
#line 3734
        c1 = (unsigned char )((int )c1 - 1);
#line 3734
        if (tmp___73) {

        } else {
#line 3734
          break;
        }
#line 3735
        p --;
      }
#line 3736
      *(b + 11) = (unsigned char )((int )*(b + 11) | (1 << 3));
#line 3737
      *(b + 7) = (unsigned char )((int )*(b + 7) | (1 << 2));
#line 3738
      had_char_class = (boolean )0;
    }
  } else {
#line 3743
    had_char_class = (boolean )0;
#line 3744
    *(b + (int )c / 8) = (unsigned char )((int )*(b + (int )c / 8) | (1 << (int )c % 8));
  }
} else {
#line 3743
  had_char_class = (boolean )0;
#line 3744
  *(b + (int )c / 8) = (unsigned char )((int )*(b + (int )c / 8) | (1 << (int )c % 8));
}
---------
SID [2038] -> Line 3666
_L___14: /* CIL Label */ 
#line 3666
if (syntax & (unsigned int )((1 << 1) << 1)) {
#line 3666
  if ((int )c == 91) {
#line 3666
    if ((int const   )*p == 58) {
#line 3670
      while (1) {
#line 3670
        if ((unsigned long )p == (unsigned long )pend) {
#line 3670
          return ((reg_errcode_t )14);
        } else {

        }
#line 3670
        tmp___33 = p;
#line 3670
        p ++;
#line 3670
        c = (unsigned char )*tmp___33;
#line 3670
        if (translate) {
#line 3670
          c = (unsigned char )*(translate + c);
        } else {

        }
#line 3670
        break;
      }
#line 3671
      c1 = (unsigned char)0;
#line 3674
      if ((unsigned long )p == (unsigned long )pend) {
#line 3674
        return ((reg_errcode_t )7);
      } else {

      }
#line 3676
      while (1) {
#line 3678
        while (1) {
#line 3678
          if ((unsigned long )p == (unsigned long )pend) {
#line 3678
            return ((reg_errcode_t )14);
          } else {

          }
#line 3678
          tmp___34 = p;
#line 3678
          p ++;
#line 3678
          c = (unsigned char )*tmp___34;
#line 3678
          if (translate) {
#line 3678
            c = (unsigned char )*(translate + c);
          } else {

          }
#line 3678
          break;
        }
#line 3679
        if ((int )c == 58) {
#line 3681
          break;
        } else
#line 3679
        if ((int )c == 93) {
#line 3681
          break;
        } else
#line 3679
        if ((unsigned long )p == (unsigned long )pend) {
#line 3681
          break;
        } else
#line 3679
        if ((int )c1 == 6) {
#line 3681
          break;
        } else {

        }
#line 3682
        tmp___35 = c1;
#line 3682
        c1 = (unsigned char )((int )c1 + 1);
#line 3682
        str[tmp___35] = (char )c;
      }
#line 3684
      str[c1] = (char )'\000';
#line 3689
      if ((int )c == 58) {
#line 3689
        if ((int const   )*p == 93) {
#line 3692
          tmp___36 = strcmp((char const   *)(str), "alnum");
#line 3692
          is_alnum = (boolean )(tmp___36 == 0);
#line 3693
          tmp___37 = strcmp((char const   *)(str), "alpha");
#line 3693
          is_alpha = (boolean )(tmp___37 == 0);
#line 3694
          tmp___38 = strcmp((char const   *)(str), "blank");
#line 3694
          is_blank = (boolean )(tmp___38 == 0);
#line 3695
          tmp___39 = strcmp((char const   *)(str), "cntrl");
#line 3695
          is_cntrl = (boolean )(tmp___39 == 0);
#line 3696
          tmp___40 = strcmp((char const   *)(str), "digit");
#line 3696
          is_digit = (boolean )(tmp___40 == 0);
#line 3697
          tmp___41 = strcmp((char const   *)(str), "graph");
#line 3697
          is_graph = (boolean )(tmp___41 == 0);
#line 3698
          tmp___42 = strcmp((char const   *)(str), "lower");
#line 3698
          is_lower = (boolean )(tmp___42 == 0);
#line 3699
          tmp___43 = strcmp((char const   *)(str), "print");
#line 3699
          is_print = (boolean )(tmp___43 == 0);
#line 3700
          tmp___44 = strcmp((char const   *)(str), "punct");
#line 3700
          is_punct = (boolean )(tmp___44 == 0);
#line 3701
          tmp___45 = strcmp((char const   *)(str), "space");
#line 3701
          is_space = (boolean )(tmp___45 == 0);
#line 3702
          tmp___46 = strcmp((char const   *)(str), "upper");
#line 3702
          is_upper = (boolean )(tmp___46 == 0);
#line 3703
          tmp___47 = strcmp((char const   *)(str), "xdigit");
#line 3703
          is_xdigit = (boolean )(tmp___47 == 0);
#line 3705
          tmp___48 = strcmp((char const   *)(str), "alpha");
#line 3705
          if (tmp___48 == 0) {

          } else {
#line 3705
            tmp___49 = strcmp((char const   *)(str), "upper");
#line 3705
            if (tmp___49 == 0) {

            } else {
#line 3705
              tmp___50 = strcmp((char const   *)(str), "lower");
#line 3705
              if (tmp___50 == 0) {

              } else {
#line 3705
                tmp___51 = strcmp((char const   *)(str), "digit");
#line 3705
                if (tmp___51 == 0) {

                } else {
#line 3705
                  tmp___52 = strcmp((char const   *)(str), "alnum");
#line 3705
                  if (tmp___52 == 0) {

                  } else {
#line 3705
                    tmp___53 = strcmp((char const   *)(str), "xdigit");
#line 3705
                    if (tmp___53 == 0) {

                    } else {
#line 3705
                      tmp___54 = strcmp((char const   *)(str), "space");
#line 3705
                      if (tmp___54 == 0) {

                      } else {
#line 3705
                        tmp___55 = strcmp((char const   *)(str), "print");
#line 3705
                        if (tmp___55 == 0) {

                        } else {
#line 3705
                          tmp___56 = strcmp((char const   *)(str), "punct");
#line 3705
                          if (tmp___56 == 0) {

                          } else {
#line 3705
                            tmp___57 = strcmp((char const   *)(str), "graph");
#line 3705
                            if (tmp___57 == 0) {

                            } else {
#line 3705
                              tmp___58 = strcmp((char const   *)(str), "cntrl");
#line 3705
                              if (tmp___58 == 0) {

                              } else {
#line 3705
                                tmp___59 = strcmp((char const   *)(str),
                                                  "blank");
#line 3705
                                if (tmp___59 == 0) {

                                } else {
#line 3705
                                  return ((reg_errcode_t )4);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
#line 3709
          while (1) {
#line 3709
            if ((unsigned long )p == (unsigned long )pend) {
#line 3709
              return ((reg_errcode_t )14);
            } else {

            }
#line 3709
            tmp___60 = p;
#line 3709
            p ++;
#line 3709
            c = (unsigned char )*tmp___60;
#line 3709
            if (translate) {
#line 3709
              c = (unsigned char )*(translate + c);
            } else {

            }
#line 3709
            break;
          }
#line 3711
          if ((unsigned long )p == (unsigned long )pend) {
#line 3711
            return ((reg_errcode_t )7);
          } else {

          }
#line 3713
          ch = 0;
#line 3713
          while (ch < 1 << 8) {
#line 3715
            if (is_alnum) {
#line 3715
              if ((ch & -128) == 0) {
#line 3715
                tmp___61 = __ctype_b_loc();
#line 3715
                if ((int const   )*(*tmp___61 + ch) & 8) {
#line 3727
                  *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                } else {
#line 3715
                  goto _L___12;
                }
              } else {
#line 3715
                goto _L___12;
              }
            } else
            _L___12: /* CIL Label */ 
#line 3715
            if (is_alpha) {
#line 3715
              if ((ch & -128) == 0) {
#line 3715
                tmp___62 = __ctype_b_loc();
#line 3715
                if ((int const   )*(*tmp___62 + ch) & 1024) {
#line 3727
                  *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                } else {
#line 3715
                  goto _L___11;
                }
              } else {
#line 3715
                goto _L___11;
              }
            } else
            _L___11: /* CIL Label */ 
#line 3715
            if (is_blank) {
#line 3715
              if ((ch & -128) == 0) {
#line 3715
                tmp___63 = __ctype_b_loc();
#line 3715
                if ((int const   )*(*tmp___63 + ch) & 1) {
#line 3727
                  *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                } else {
#line 3715
                  goto _L___10;
                }
              } else {
#line 3715
                goto _L___10;
              }
            } else
            _L___10: /* CIL Label */ 
#line 3715
            if (is_cntrl) {
#line 3715
              if ((ch & -128) == 0) {
#line 3715
                tmp___64 = __ctype_b_loc();
#line 3715
                if ((int const   )*(*tmp___64 + ch) & 2) {
#line 3727
                  *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                } else {
#line 3715
                  goto _L___9;
                }
              } else {
#line 3715
                goto _L___9;
              }
            } else
            _L___9: /* CIL Label */ 
#line 3715
            if (is_digit) {
#line 3715
              if ((ch & -128) == 0) {
#line 3715
                tmp___65 = __ctype_b_loc();
#line 3715
                if ((int const   )*(*tmp___65 + ch) & 2048) {
#line 3727
                  *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                } else {
#line 3715
                  goto _L___8;
                }
              } else {
#line 3715
                goto _L___8;
              }
            } else
            _L___8: /* CIL Label */ 
#line 3715
            if (is_graph) {
#line 3715
              if ((ch & -128) == 0) {
#line 3715
                tmp___66 = __ctype_b_loc();
#line 3715
                if ((int const   )*(*tmp___66 + ch) & 32768) {
#line 3727
                  *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                } else {
#line 3715
                  goto _L___7;
                }
              } else {
#line 3715
                goto _L___7;
              }
            } else
            _L___7: /* CIL Label */ 
#line 3715
            if (is_lower) {
#line 3715
              if ((ch & -128) == 0) {
#line 3715
                tmp___67 = __ctype_b_loc();
#line 3715
                if ((int const   )*(*tmp___67 + ch) & 512) {
#line 3727
                  *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                } else {
#line 3715
                  goto _L___6;
                }
              } else {
#line 3715
                goto _L___6;
              }
            } else
            _L___6: /* CIL Label */ 
#line 3715
            if (is_print) {
#line 3715
              if ((ch & -128) == 0) {
#line 3715
                tmp___68 = __ctype_b_loc();
#line 3715
                if ((int const   )*(*tmp___68 + ch) & 16384) {
#line 3727
                  *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                } else {
#line 3715
                  goto _L___5;
                }
              } else {
#line 3715
                goto _L___5;
              }
            } else
            _L___5: /* CIL Label */ 
#line 3715
            if (is_punct) {
#line 3715
              if ((ch & -128) == 0) {
#line 3715
                tmp___69 = __ctype_b_loc();
#line 3715
                if ((int const   )*(*tmp___69 + ch) & 4) {
#line 3727
                  *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                } else {
#line 3715
                  goto _L___4;
                }
              } else {
#line 3715
                goto _L___4;
              }
            } else
            _L___4: /* CIL Label */ 
#line 3715
            if (is_space) {
#line 3715
              if ((ch & -128) == 0) {
#line 3715
                tmp___70 = __ctype_b_loc();
#line 3715
                if ((int const   )*(*tmp___70 + ch) & 8192) {
#line 3727
                  *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                } else {
#line 3715
                  goto _L___3;
                }
              } else {
#line 3715
                goto _L___3;
              }
            } else
            _L___3: /* CIL Label */ 
#line 3715
            if (is_upper) {
#line 3715
              if ((ch & -128) == 0) {
#line 3715
                tmp___71 = __ctype_b_loc();
#line 3715
                if ((int const   )*(*tmp___71 + ch) & 256) {
#line 3727
                  *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                } else {
#line 3715
                  goto _L___2;
                }
              } else {
#line 3715
                goto _L___2;
              }
            } else
            _L___2: /* CIL Label */ 
#line 3715
            if (is_xdigit) {
#line 3715
              if ((ch & -128) == 0) {
#line 3715
                tmp___72 = __ctype_b_loc();
#line 3715
                if ((int const   )*(*tmp___72 + ch) & 4096) {
#line 3727
                  *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                } else {

                }
              } else {

              }
            } else {

            }
#line 3713
            ch ++;
          }
#line 3729
          had_char_class = (boolean )1;
        } else {
#line 3689
          goto _L___13;
        }
      } else {
        _L___13: /* CIL Label */ 
#line 3733
        c1 = (unsigned char )((int )c1 + 1);
#line 3734
        while (1) {
#line 3734
          tmp___73 = c1;
#line 3734
          c1 = (unsigned char )((int )c1 - 1);
#line 3734
          if (tmp___73) {

          } else {
#line 3734
            break;
          }
#line 3735
          p --;
        }
#line 3736
        *(b + 11) = (unsigned char )((int )*(b + 11) | (1 << 3));
#line 3737
        *(b + 7) = (unsigned char )((int )*(b + 7) | (1 << 2));
#line 3738
        had_char_class = (boolean )0;
      }
    } else {
#line 3743
      had_char_class = (boolean )0;
#line 3744
      *(b + (int )c / 8) = (unsigned char )((int )*(b + (int )c / 8) | (1 << (int )c % 8));
    }
  } else {
#line 3743
    had_char_class = (boolean )0;
#line 3744
    *(b + (int )c / 8) = (unsigned char )((int )*(b + (int )c / 8) | (1 << (int )c % 8));
  }
} else {
#line 3743
  had_char_class = (boolean )0;
#line 3744
  *(b + (int )c / 8) = (unsigned char )((int )*(b + (int )c / 8) | (1 << (int )c % 8));
}
---------
SID [2037] -> Line 3652
#line 3652
goto _L___14;
---------
SID [2036] -> Line -1

---------
SID [2035] -> Line 3660
#line 3660
return (ret___0);
---------
SID [2034] -> Line 3660
#line 3660
if ((unsigned int )ret___0 != 0U) {
#line 3660
  return (ret___0);
} else {

}
---------
SID [2033] -> Line 3659
#line 3659
ret___0 = compile_range(& p, pend, translate, syntax, b);
---------
SID [2032] -> Line 3657
#line 3657
break;
---------
SID [2031] -> Line -1

---------
SID [2030] -> Line 3657
#line 3657
c1 = (unsigned char )*(translate + c1);
---------
SID [2029] -> Line 3657
#line 3657
if (translate) {
#line 3657
  c1 = (unsigned char )*(translate + c1);
} else {

}
---------
SID [2028] -> Line 3657
#line 3657
c1 = (unsigned char )*tmp___32;
---------
SID [2027] -> Line 3657
#line 3657
p ++;
---------
SID [2026] -> Line 3657
#line 3657
tmp___32 = p;
---------
SID [2025] -> Line -1

---------
SID [2024] -> Line 3657
#line 3657
return ((reg_errcode_t )14);
---------
SID [2023] -> Line 3657
#line 3657
if ((unsigned long )p == (unsigned long )pend) {
#line 3657
  return ((reg_errcode_t )14);
} else {

}
---------
SID [2022] -> Line 3657
#line 3657
while (1) {
#line 3657
  if ((unsigned long )p == (unsigned long )pend) {
#line 3657
    return ((reg_errcode_t )14);
  } else {

  }
#line 3657
  tmp___32 = p;
#line 3657
  p ++;
#line 3657
  c1 = (unsigned char )*tmp___32;
#line 3657
  if (translate) {
#line 3657
    c1 = (unsigned char )*(translate + c1);
  } else {

  }
#line 3657
  break;
}
---------
SID [2021] -> Line 3652
#line 3652
if ((int const   )*(p + 1) != 93) {
#line 3657
  while (1) {
#line 3657
    if ((unsigned long )p == (unsigned long )pend) {
#line 3657
      return ((reg_errcode_t )14);
    } else {

    }
#line 3657
    tmp___32 = p;
#line 3657
    p ++;
#line 3657
    c1 = (unsigned char )*tmp___32;
#line 3657
    if (translate) {
#line 3657
      c1 = (unsigned char )*(translate + c1);
    } else {

    }
#line 3657
    break;
  }
#line 3659
  ret___0 = compile_range(& p, pend, translate, syntax, b);
#line 3660
  if ((unsigned int )ret___0 != 0U) {
#line 3660
    return (ret___0);
  } else {

  }
} else {
#line 3652
  goto _L___14;
}
---------
SID [2020] -> Line 3652
_L___19: /* CIL Label */ 
_L___16: /* CIL Label */ 
_L___15: /* CIL Label */ 
#line 3652
if ((int const   )*(p + 0) == 45) {
#line 3652
  if ((int const   )*(p + 1) != 93) {
#line 3657
    while (1) {
#line 3657
      if ((unsigned long )p == (unsigned long )pend) {
#line 3657
        return ((reg_errcode_t )14);
      } else {

      }
#line 3657
      tmp___32 = p;
#line 3657
      p ++;
#line 3657
      c1 = (unsigned char )*tmp___32;
#line 3657
      if (translate) {
#line 3657
        c1 = (unsigned char )*(translate + c1);
      } else {

      }
#line 3657
      break;
    }
#line 3659
    ret___0 = compile_range(& p, pend, translate, syntax, b);
#line 3660
    if ((unsigned int )ret___0 != 0U) {
#line 3660
      return (ret___0);
    } else {

    }
  } else {
#line 3652
    goto _L___14;
  }
} else
_L___14: /* CIL Label */ 
#line 3666
if (syntax & (unsigned int )((1 << 1) << 1)) {
#line 3666
  if ((int )c == 91) {
#line 3666
    if ((int const   )*p == 58) {
#line 3670
      while (1) {
#line 3670
        if ((unsigned long )p == (unsigned long )pend) {
#line 3670
          return ((reg_errcode_t )14);
        } else {

        }
#line 3670
        tmp___33 = p;
#line 3670
        p ++;
#line 3670
        c = (unsigned char )*tmp___33;
#line 3670
        if (translate) {
#line 3670
          c = (unsigned char )*(translate + c);
        } else {

        }
#line 3670
        break;
      }
#line 3671
      c1 = (unsigned char)0;
#line 3674
      if ((unsigned long )p == (unsigned long )pend) {
#line 3674
        return ((reg_errcode_t )7);
      } else {

      }
#line 3676
      while (1) {
#line 3678
        while (1) {
#line 3678
          if ((unsigned long )p == (unsigned long )pend) {
#line 3678
            return ((reg_errcode_t )14);
          } else {

          }
#line 3678
          tmp___34 = p;
#line 3678
          p ++;
#line 3678
          c = (unsigned char )*tmp___34;
#line 3678
          if (translate) {
#line 3678
            c = (unsigned char )*(translate + c);
          } else {

          }
#line 3678
          break;
        }
#line 3679
        if ((int )c == 58) {
#line 3681
          break;
        } else
#line 3679
        if ((int )c == 93) {
#line 3681
          break;
        } else
#line 3679
        if ((unsigned long )p == (unsigned long )pend) {
#line 3681
          break;
        } else
#line 3679
        if ((int )c1 == 6) {
#line 3681
          break;
        } else {

        }
#line 3682
        tmp___35 = c1;
#line 3682
        c1 = (unsigned char )((int )c1 + 1);
#line 3682
        str[tmp___35] = (char )c;
      }
#line 3684
      str[c1] = (char )'\000';
#line 3689
      if ((int )c == 58) {
#line 3689
        if ((int const   )*p == 93) {
#line 3692
          tmp___36 = strcmp((char const   *)(str), "alnum");
#line 3692
          is_alnum = (boolean )(tmp___36 == 0);
#line 3693
          tmp___37 = strcmp((char const   *)(str), "alpha");
#line 3693
          is_alpha = (boolean )(tmp___37 == 0);
#line 3694
          tmp___38 = strcmp((char const   *)(str), "blank");
#line 3694
          is_blank = (boolean )(tmp___38 == 0);
#line 3695
          tmp___39 = strcmp((char const   *)(str), "cntrl");
#line 3695
          is_cntrl = (boolean )(tmp___39 == 0);
#line 3696
          tmp___40 = strcmp((char const   *)(str), "digit");
#line 3696
          is_digit = (boolean )(tmp___40 == 0);
#line 3697
          tmp___41 = strcmp((char const   *)(str), "graph");
#line 3697
          is_graph = (boolean )(tmp___41 == 0);
#line 3698
          tmp___42 = strcmp((char const   *)(str), "lower");
#line 3698
          is_lower = (boolean )(tmp___42 == 0);
#line 3699
          tmp___43 = strcmp((char const   *)(str), "print");
#line 3699
          is_print = (boolean )(tmp___43 == 0);
#line 3700
          tmp___44 = strcmp((char const   *)(str), "punct");
#line 3700
          is_punct = (boolean )(tmp___44 == 0);
#line 3701
          tmp___45 = strcmp((char const   *)(str), "space");
#line 3701
          is_space = (boolean )(tmp___45 == 0);
#line 3702
          tmp___46 = strcmp((char const   *)(str), "upper");
#line 3702
          is_upper = (boolean )(tmp___46 == 0);
#line 3703
          tmp___47 = strcmp((char const   *)(str), "xdigit");
#line 3703
          is_xdigit = (boolean )(tmp___47 == 0);
#line 3705
          tmp___48 = strcmp((char const   *)(str), "alpha");
#line 3705
          if (tmp___48 == 0) {

          } else {
#line 3705
            tmp___49 = strcmp((char const   *)(str), "upper");
#line 3705
            if (tmp___49 == 0) {

            } else {
#line 3705
              tmp___50 = strcmp((char const   *)(str), "lower");
#line 3705
              if (tmp___50 == 0) {

              } else {
#line 3705
                tmp___51 = strcmp((char const   *)(str), "digit");
#line 3705
                if (tmp___51 == 0) {

                } else {
#line 3705
                  tmp___52 = strcmp((char const   *)(str), "alnum");
#line 3705
                  if (tmp___52 == 0) {

                  } else {
#line 3705
                    tmp___53 = strcmp((char const   *)(str), "xdigit");
#line 3705
                    if (tmp___53 == 0) {

                    } else {
#line 3705
                      tmp___54 = strcmp((char const   *)(str), "space");
#line 3705
                      if (tmp___54 == 0) {

                      } else {
#line 3705
                        tmp___55 = strcmp((char const   *)(str), "print");
#line 3705
                        if (tmp___55 == 0) {

                        } else {
#line 3705
                          tmp___56 = strcmp((char const   *)(str), "punct");
#line 3705
                          if (tmp___56 == 0) {

                          } else {
#line 3705
                            tmp___57 = strcmp((char const   *)(str), "graph");
#line 3705
                            if (tmp___57 == 0) {

                            } else {
#line 3705
                              tmp___58 = strcmp((char const   *)(str), "cntrl");
#line 3705
                              if (tmp___58 == 0) {

                              } else {
#line 3705
                                tmp___59 = strcmp((char const   *)(str),
                                                  "blank");
#line 3705
                                if (tmp___59 == 0) {

                                } else {
#line 3705
                                  return ((reg_errcode_t )4);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
#line 3709
          while (1) {
#line 3709
            if ((unsigned long )p == (unsigned long )pend) {
#line 3709
              return ((reg_errcode_t )14);
            } else {

            }
#line 3709
            tmp___60 = p;
#line 3709
            p ++;
#line 3709
            c = (unsigned char )*tmp___60;
#line 3709
            if (translate) {
#line 3709
              c = (unsigned char )*(translate + c);
            } else {

            }
#line 3709
            break;
          }
#line 3711
          if ((unsigned long )p == (unsigned long )pend) {
#line 3711
            return ((reg_errcode_t )7);
          } else {

          }
#line 3713
          ch = 0;
#line 3713
          while (ch < 1 << 8) {
#line 3715
            if (is_alnum) {
#line 3715
              if ((ch & -128) == 0) {
#line 3715
                tmp___61 = __ctype_b_loc();
#line 3715
                if ((int const   )*(*tmp___61 + ch) & 8) {
#line 3727
                  *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                } else {
#line 3715
                  goto _L___12;
                }
              } else {
#line 3715
                goto _L___12;
              }
            } else
            _L___12: /* CIL Label */ 
#line 3715
            if (is_alpha) {
#line 3715
              if ((ch & -128) == 0) {
#line 3715
                tmp___62 = __ctype_b_loc();
#line 3715
                if ((int const   )*(*tmp___62 + ch) & 1024) {
#line 3727
                  *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                } else {
#line 3715
                  goto _L___11;
                }
              } else {
#line 3715
                goto _L___11;
              }
            } else
            _L___11: /* CIL Label */ 
#line 3715
            if (is_blank) {
#line 3715
              if ((ch & -128) == 0) {
#line 3715
                tmp___63 = __ctype_b_loc();
#line 3715
                if ((int const   )*(*tmp___63 + ch) & 1) {
#line 3727
                  *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                } else {
#line 3715
                  goto _L___10;
                }
              } else {
#line 3715
                goto _L___10;
              }
            } else
            _L___10: /* CIL Label */ 
#line 3715
            if (is_cntrl) {
#line 3715
              if ((ch & -128) == 0) {
#line 3715
                tmp___64 = __ctype_b_loc();
#line 3715
                if ((int const   )*(*tmp___64 + ch) & 2) {
#line 3727
                  *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                } else {
#line 3715
                  goto _L___9;
                }
              } else {
#line 3715
                goto _L___9;
              }
            } else
            _L___9: /* CIL Label */ 
#line 3715
            if (is_digit) {
#line 3715
              if ((ch & -128) == 0) {
#line 3715
                tmp___65 = __ctype_b_loc();
#line 3715
                if ((int const   )*(*tmp___65 + ch) & 2048) {
#line 3727
                  *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                } else {
#line 3715
                  goto _L___8;
                }
              } else {
#line 3715
                goto _L___8;
              }
            } else
            _L___8: /* CIL Label */ 
#line 3715
            if (is_graph) {
#line 3715
              if ((ch & -128) == 0) {
#line 3715
                tmp___66 = __ctype_b_loc();
#line 3715
                if ((int const   )*(*tmp___66 + ch) & 32768) {
#line 3727
                  *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                } else {
#line 3715
                  goto _L___7;
                }
              } else {
#line 3715
                goto _L___7;
              }
            } else
            _L___7: /* CIL Label */ 
#line 3715
            if (is_lower) {
#line 3715
              if ((ch & -128) == 0) {
#line 3715
                tmp___67 = __ctype_b_loc();
#line 3715
                if ((int const   )*(*tmp___67 + ch) & 512) {
#line 3727
                  *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                } else {
#line 3715
                  goto _L___6;
                }
              } else {
#line 3715
                goto _L___6;
              }
            } else
            _L___6: /* CIL Label */ 
#line 3715
            if (is_print) {
#line 3715
              if ((ch & -128) == 0) {
#line 3715
                tmp___68 = __ctype_b_loc();
#line 3715
                if ((int const   )*(*tmp___68 + ch) & 16384) {
#line 3727
                  *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                } else {
#line 3715
                  goto _L___5;
                }
              } else {
#line 3715
                goto _L___5;
              }
            } else
            _L___5: /* CIL Label */ 
#line 3715
            if (is_punct) {
#line 3715
              if ((ch & -128) == 0) {
#line 3715
                tmp___69 = __ctype_b_loc();
#line 3715
                if ((int const   )*(*tmp___69 + ch) & 4) {
#line 3727
                  *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                } else {
#line 3715
                  goto _L___4;
                }
              } else {
#line 3715
                goto _L___4;
              }
            } else
            _L___4: /* CIL Label */ 
#line 3715
            if (is_space) {
#line 3715
              if ((ch & -128) == 0) {
#line 3715
                tmp___70 = __ctype_b_loc();
#line 3715
                if ((int const   )*(*tmp___70 + ch) & 8192) {
#line 3727
                  *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                } else {
#line 3715
                  goto _L___3;
                }
              } else {
#line 3715
                goto _L___3;
              }
            } else
            _L___3: /* CIL Label */ 
#line 3715
            if (is_upper) {
#line 3715
              if ((ch & -128) == 0) {
#line 3715
                tmp___71 = __ctype_b_loc();
#line 3715
                if ((int const   )*(*tmp___71 + ch) & 256) {
#line 3727
                  *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                } else {
#line 3715
                  goto _L___2;
                }
              } else {
#line 3715
                goto _L___2;
              }
            } else
            _L___2: /* CIL Label */ 
#line 3715
            if (is_xdigit) {
#line 3715
              if ((ch & -128) == 0) {
#line 3715
                tmp___72 = __ctype_b_loc();
#line 3715
                if ((int const   )*(*tmp___72 + ch) & 4096) {
#line 3727
                  *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                } else {

                }
              } else {

              }
            } else {

            }
#line 3713
            ch ++;
          }
#line 3729
          had_char_class = (boolean )1;
        } else {
#line 3689
          goto _L___13;
        }
      } else {
        _L___13: /* CIL Label */ 
#line 3733
        c1 = (unsigned char )((int )c1 + 1);
#line 3734
        while (1) {
#line 3734
          tmp___73 = c1;
#line 3734
          c1 = (unsigned char )((int )c1 - 1);
#line 3734
          if (tmp___73) {

          } else {
#line 3734
            break;
          }
#line 3735
          p --;
        }
#line 3736
        *(b + 11) = (unsigned char )((int )*(b + 11) | (1 << 3));
#line 3737
        *(b + 7) = (unsigned char )((int )*(b + 7) | (1 << 2));
#line 3738
        had_char_class = (boolean )0;
      }
    } else {
#line 3743
      had_char_class = (boolean )0;
#line 3744
      *(b + (int )c / 8) = (unsigned char )((int )*(b + (int )c / 8) | (1 << (int )c % 8));
    }
  } else {
#line 3743
    had_char_class = (boolean )0;
#line 3744
    *(b + (int )c / 8) = (unsigned char )((int )*(b + (int )c / 8) | (1 << (int )c % 8));
  }
} else {
#line 3743
  had_char_class = (boolean )0;
#line 3744
  *(b + (int )c / 8) = (unsigned char )((int )*(b + (int )c / 8) | (1 << (int )c % 8));
}
---------
SID [2019] -> Line 3642
#line 3642
goto _L___19;
---------
SID [2018] -> Line -1

---------
SID [2017] -> Line 3649
#line 3649
return (ret);
---------
SID [2016] -> Line 3649
#line 3649
if ((unsigned int )ret != 0U) {
#line 3649
  return (ret);
} else {

}
---------
SID [2015] -> Line 3647
#line 3647
ret = tmp___31;
---------
SID [2014] -> Line 3647
#line 3647
tmp___31 = compile_range(& p, pend, translate, syntax, b);
---------
SID [2013] -> Line 3642
_L___18: /* CIL Label */ 
_L___17: /* CIL Label */ 
#line 3642
if ((int const   )*p != 93) {
#line 3647
  tmp___31 = compile_range(& p, pend, translate, syntax, b);
#line 3647
  ret = tmp___31;
#line 3649
  if ((unsigned int )ret != 0U) {
#line 3649
    return (ret);
  } else {

  }
} else {
#line 3642
  goto _L___19;
}
---------
SID [2012] -> Line 3642
#line 3642
goto _L___18;
---------
SID [2011] -> Line 3642
#line 3642
goto _L___18;
---------
SID [2010] -> Line 3642
#line 3642
goto _L___19;
---------
SID [2009] -> Line 3642
#line 3642
if ((int const   )*(p + -2) == 94) {
#line 3642
  goto _L___19;
} else {
#line 3642
  goto _L___18;
}
---------
SID [2008] -> Line 3642
#line 3642
if ((int const   )*(p + -3) == 91) {
#line 3642
  if ((int const   )*(p + -2) == 94) {
#line 3642
    goto _L___19;
  } else {
#line 3642
    goto _L___18;
  }
} else {
#line 3642
  goto _L___18;
}
---------
SID [2007] -> Line 3642
_L___20: /* CIL Label */ 
#line 3642
if ((unsigned long )(p - 3) >= (unsigned long )pattern) {
#line 3642
  if ((int const   )*(p + -3) == 91) {
#line 3642
    if ((int const   )*(p + -2) == 94) {
#line 3642
      goto _L___19;
    } else {
#line 3642
      goto _L___18;
    }
  } else {
#line 3642
    goto _L___18;
  }
} else
_L___18: /* CIL Label */ 
_L___17: /* CIL Label */ 
#line 3642
if ((int const   )*p != 93) {
#line 3647
  tmp___31 = compile_range(& p, pend, translate, syntax, b);
#line 3647
  ret = tmp___31;
#line 3649
  if ((unsigned int )ret != 0U) {
#line 3649
    return (ret);
  } else {

  }
} else {
#line 3642
  goto _L___19;
}
---------
SID [2006] -> Line 3642
#line 3642
goto _L___20;
---------
SID [2005] -> Line 3642
#line 3642
goto _L___19;
---------
SID [2004] -> Line 3642
#line 3642
if ((int const   )*(p + -2) == 91) {
#line 3642
  goto _L___19;
} else {
#line 3642
  goto _L___20;
}
---------
SID [2003] -> Line 3642
#line 3642
if ((unsigned long )(p - 2) >= (unsigned long )pattern) {
#line 3642
  if ((int const   )*(p + -2) == 91) {
#line 3642
    goto _L___19;
  } else {
#line 3642
    goto _L___20;
  }
} else
_L___20: /* CIL Label */ 
#line 3642
if ((unsigned long )(p - 3) >= (unsigned long )pattern) {
#line 3642
  if ((int const   )*(p + -3) == 91) {
#line 3642
    if ((int const   )*(p + -2) == 94) {
#line 3642
      goto _L___19;
    } else {
#line 3642
      goto _L___18;
    }
  } else {
#line 3642
    goto _L___18;
  }
} else
_L___18: /* CIL Label */ 
_L___17: /* CIL Label */ 
#line 3642
if ((int const   )*p != 93) {
#line 3647
  tmp___31 = compile_range(& p, pend, translate, syntax, b);
#line 3647
  ret = tmp___31;
#line 3649
  if ((unsigned int )ret != 0U) {
#line 3649
    return (ret);
  } else {

  }
} else {
#line 3642
  goto _L___19;
}
---------
SID [2002] -> Line 3642
#line 3642
if ((int )c == 45) {
#line 3642
  if ((unsigned long )(p - 2) >= (unsigned long )pattern) {
#line 3642
    if ((int const   )*(p + -2) == 91) {
#line 3642
      goto _L___19;
    } else {
#line 3642
      goto _L___20;
    }
  } else
  _L___20: /* CIL Label */ 
#line 3642
  if ((unsigned long )(p - 3) >= (unsigned long )pattern) {
#line 3642
    if ((int const   )*(p + -3) == 91) {
#line 3642
      if ((int const   )*(p + -2) == 94) {
#line 3642
        goto _L___19;
      } else {
#line 3642
        goto _L___18;
      }
    } else {
#line 3642
      goto _L___18;
    }
  } else
  _L___18: /* CIL Label */ 
  _L___17: /* CIL Label */ 
#line 3642
  if ((int const   )*p != 93) {
#line 3647
    tmp___31 = compile_range(& p, pend, translate, syntax, b);
#line 3647
    ret = tmp___31;
#line 3649
    if ((unsigned int )ret != 0U) {
#line 3649
      return (ret);
    } else {

    }
  } else {
#line 3642
    goto _L___19;
  }
} else
_L___19: /* CIL Label */ 
_L___16: /* CIL Label */ 
_L___15: /* CIL Label */ 
#line 3652
if ((int const   )*(p + 0) == 45) {
#line 3652
  if ((int const   )*(p + 1) != 93) {
#line 3657
    while (1) {
#line 3657
      if ((unsigned long )p == (unsigned long )pend) {
#line 3657
        return ((reg_errcode_t )14);
      } else {

      }
#line 3657
      tmp___32 = p;
#line 3657
      p ++;
#line 3657
      c1 = (unsigned char )*tmp___32;
#line 3657
      if (translate) {
#line 3657
        c1 = (unsigned char )*(translate + c1);
      } else {

      }
#line 3657
      break;
    }
#line 3659
    ret___0 = compile_range(& p, pend, translate, syntax, b);
#line 3660
    if ((unsigned int )ret___0 != 0U) {
#line 3660
      return (ret___0);
    } else {

    }
  } else {
#line 3652
    goto _L___14;
  }
} else
_L___14: /* CIL Label */ 
#line 3666
if (syntax & (unsigned int )((1 << 1) << 1)) {
#line 3666
  if ((int )c == 91) {
#line 3666
    if ((int const   )*p == 58) {
#line 3670
      while (1) {
#line 3670
        if ((unsigned long )p == (unsigned long )pend) {
#line 3670
          return ((reg_errcode_t )14);
        } else {

        }
#line 3670
        tmp___33 = p;
#line 3670
        p ++;
#line 3670
        c = (unsigned char )*tmp___33;
#line 3670
        if (translate) {
#line 3670
          c = (unsigned char )*(translate + c);
        } else {

        }
#line 3670
        break;
      }
#line 3671
      c1 = (unsigned char)0;
#line 3674
      if ((unsigned long )p == (unsigned long )pend) {
#line 3674
        return ((reg_errcode_t )7);
      } else {

      }
#line 3676
      while (1) {
#line 3678
        while (1) {
#line 3678
          if ((unsigned long )p == (unsigned long )pend) {
#line 3678
            return ((reg_errcode_t )14);
          } else {

          }
#line 3678
          tmp___34 = p;
#line 3678
          p ++;
#line 3678
          c = (unsigned char )*tmp___34;
#line 3678
          if (translate) {
#line 3678
            c = (unsigned char )*(translate + c);
          } else {

          }
#line 3678
          break;
        }
#line 3679
        if ((int )c == 58) {
#line 3681
          break;
        } else
#line 3679
        if ((int )c == 93) {
#line 3681
          break;
        } else
#line 3679
        if ((unsigned long )p == (unsigned long )pend) {
#line 3681
          break;
        } else
#line 3679
        if ((int )c1 == 6) {
#line 3681
          break;
        } else {

        }
#line 3682
        tmp___35 = c1;
#line 3682
        c1 = (unsigned char )((int )c1 + 1);
#line 3682
        str[tmp___35] = (char )c;
      }
#line 3684
      str[c1] = (char )'\000';
#line 3689
      if ((int )c == 58) {
#line 3689
        if ((int const   )*p == 93) {
#line 3692
          tmp___36 = strcmp((char const   *)(str), "alnum");
#line 3692
          is_alnum = (boolean )(tmp___36 == 0);
#line 3693
          tmp___37 = strcmp((char const   *)(str), "alpha");
#line 3693
          is_alpha = (boolean )(tmp___37 == 0);
#line 3694
          tmp___38 = strcmp((char const   *)(str), "blank");
#line 3694
          is_blank = (boolean )(tmp___38 == 0);
#line 3695
          tmp___39 = strcmp((char const   *)(str), "cntrl");
#line 3695
          is_cntrl = (boolean )(tmp___39 == 0);
#line 3696
          tmp___40 = strcmp((char const   *)(str), "digit");
#line 3696
          is_digit = (boolean )(tmp___40 == 0);
#line 3697
          tmp___41 = strcmp((char const   *)(str), "graph");
#line 3697
          is_graph = (boolean )(tmp___41 == 0);
#line 3698
          tmp___42 = strcmp((char const   *)(str), "lower");
#line 3698
          is_lower = (boolean )(tmp___42 == 0);
#line 3699
          tmp___43 = strcmp((char const   *)(str), "print");
#line 3699
          is_print = (boolean )(tmp___43 == 0);
#line 3700
          tmp___44 = strcmp((char const   *)(str), "punct");
#line 3700
          is_punct = (boolean )(tmp___44 == 0);
#line 3701
          tmp___45 = strcmp((char const   *)(str), "space");
#line 3701
          is_space = (boolean )(tmp___45 == 0);
#line 3702
          tmp___46 = strcmp((char const   *)(str), "upper");
#line 3702
          is_upper = (boolean )(tmp___46 == 0);
#line 3703
          tmp___47 = strcmp((char const   *)(str), "xdigit");
#line 3703
          is_xdigit = (boolean )(tmp___47 == 0);
#line 3705
          tmp___48 = strcmp((char const   *)(str), "alpha");
#line 3705
          if (tmp___48 == 0) {

          } else {
#line 3705
            tmp___49 = strcmp((char const   *)(str), "upper");
#line 3705
            if (tmp___49 == 0) {

            } else {
#line 3705
              tmp___50 = strcmp((char const   *)(str), "lower");
#line 3705
              if (tmp___50 == 0) {

              } else {
#line 3705
                tmp___51 = strcmp((char const   *)(str), "digit");
#line 3705
                if (tmp___51 == 0) {

                } else {
#line 3705
                  tmp___52 = strcmp((char const   *)(str), "alnum");
#line 3705
                  if (tmp___52 == 0) {

                  } else {
#line 3705
                    tmp___53 = strcmp((char const   *)(str), "xdigit");
#line 3705
                    if (tmp___53 == 0) {

                    } else {
#line 3705
                      tmp___54 = strcmp((char const   *)(str), "space");
#line 3705
                      if (tmp___54 == 0) {

                      } else {
#line 3705
                        tmp___55 = strcmp((char const   *)(str), "print");
#line 3705
                        if (tmp___55 == 0) {

                        } else {
#line 3705
                          tmp___56 = strcmp((char const   *)(str), "punct");
#line 3705
                          if (tmp___56 == 0) {

                          } else {
#line 3705
                            tmp___57 = strcmp((char const   *)(str), "graph");
#line 3705
                            if (tmp___57 == 0) {

                            } else {
#line 3705
                              tmp___58 = strcmp((char const   *)(str), "cntrl");
#line 3705
                              if (tmp___58 == 0) {

                              } else {
#line 3705
                                tmp___59 = strcmp((char const   *)(str),
                                                  "blank");
#line 3705
                                if (tmp___59 == 0) {

                                } else {
#line 3705
                                  return ((reg_errcode_t )4);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
#line 3709
          while (1) {
#line 3709
            if ((unsigned long )p == (unsigned long )pend) {
#line 3709
              return ((reg_errcode_t )14);
            } else {

            }
#line 3709
            tmp___60 = p;
#line 3709
            p ++;
#line 3709
            c = (unsigned char )*tmp___60;
#line 3709
            if (translate) {
#line 3709
              c = (unsigned char )*(translate + c);
            } else {

            }
#line 3709
            break;
          }
#line 3711
          if ((unsigned long )p == (unsigned long )pend) {
#line 3711
            return ((reg_errcode_t )7);
          } else {

          }
#line 3713
          ch = 0;
#line 3713
          while (ch < 1 << 8) {
#line 3715
            if (is_alnum) {
#line 3715
              if ((ch & -128) == 0) {
#line 3715
                tmp___61 = __ctype_b_loc();
#line 3715
                if ((int const   )*(*tmp___61 + ch) & 8) {
#line 3727
                  *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                } else {
#line 3715
                  goto _L___12;
                }
              } else {
#line 3715
                goto _L___12;
              }
            } else
            _L___12: /* CIL Label */ 
#line 3715
            if (is_alpha) {
#line 3715
              if ((ch & -128) == 0) {
#line 3715
                tmp___62 = __ctype_b_loc();
#line 3715
                if ((int const   )*(*tmp___62 + ch) & 1024) {
#line 3727
                  *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                } else {
#line 3715
                  goto _L___11;
                }
              } else {
#line 3715
                goto _L___11;
              }
            } else
            _L___11: /* CIL Label */ 
#line 3715
            if (is_blank) {
#line 3715
              if ((ch & -128) == 0) {
#line 3715
                tmp___63 = __ctype_b_loc();
#line 3715
                if ((int const   )*(*tmp___63 + ch) & 1) {
#line 3727
                  *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                } else {
#line 3715
                  goto _L___10;
                }
              } else {
#line 3715
                goto _L___10;
              }
            } else
            _L___10: /* CIL Label */ 
#line 3715
            if (is_cntrl) {
#line 3715
              if ((ch & -128) == 0) {
#line 3715
                tmp___64 = __ctype_b_loc();
#line 3715
                if ((int const   )*(*tmp___64 + ch) & 2) {
#line 3727
                  *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                } else {
#line 3715
                  goto _L___9;
                }
              } else {
#line 3715
                goto _L___9;
              }
            } else
            _L___9: /* CIL Label */ 
#line 3715
            if (is_digit) {
#line 3715
              if ((ch & -128) == 0) {
#line 3715
                tmp___65 = __ctype_b_loc();
#line 3715
                if ((int const   )*(*tmp___65 + ch) & 2048) {
#line 3727
                  *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                } else {
#line 3715
                  goto _L___8;
                }
              } else {
#line 3715
                goto _L___8;
              }
            } else
            _L___8: /* CIL Label */ 
#line 3715
            if (is_graph) {
#line 3715
              if ((ch & -128) == 0) {
#line 3715
                tmp___66 = __ctype_b_loc();
#line 3715
                if ((int const   )*(*tmp___66 + ch) & 32768) {
#line 3727
                  *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                } else {
#line 3715
                  goto _L___7;
                }
              } else {
#line 3715
                goto _L___7;
              }
            } else
            _L___7: /* CIL Label */ 
#line 3715
            if (is_lower) {
#line 3715
              if ((ch & -128) == 0) {
#line 3715
                tmp___67 = __ctype_b_loc();
#line 3715
                if ((int const   )*(*tmp___67 + ch) & 512) {
#line 3727
                  *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                } else {
#line 3715
                  goto _L___6;
                }
              } else {
#line 3715
                goto _L___6;
              }
            } else
            _L___6: /* CIL Label */ 
#line 3715
            if (is_print) {
#line 3715
              if ((ch & -128) == 0) {
#line 3715
                tmp___68 = __ctype_b_loc();
#line 3715
                if ((int const   )*(*tmp___68 + ch) & 16384) {
#line 3727
                  *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                } else {
#line 3715
                  goto _L___5;
                }
              } else {
#line 3715
                goto _L___5;
              }
            } else
            _L___5: /* CIL Label */ 
#line 3715
            if (is_punct) {
#line 3715
              if ((ch & -128) == 0) {
#line 3715
                tmp___69 = __ctype_b_loc();
#line 3715
                if ((int const   )*(*tmp___69 + ch) & 4) {
#line 3727
                  *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                } else {
#line 3715
                  goto _L___4;
                }
              } else {
#line 3715
                goto _L___4;
              }
            } else
            _L___4: /* CIL Label */ 
#line 3715
            if (is_space) {
#line 3715
              if ((ch & -128) == 0) {
#line 3715
                tmp___70 = __ctype_b_loc();
#line 3715
                if ((int const   )*(*tmp___70 + ch) & 8192) {
#line 3727
                  *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                } else {
#line 3715
                  goto _L___3;
                }
              } else {
#line 3715
                goto _L___3;
              }
            } else
            _L___3: /* CIL Label */ 
#line 3715
            if (is_upper) {
#line 3715
              if ((ch & -128) == 0) {
#line 3715
                tmp___71 = __ctype_b_loc();
#line 3715
                if ((int const   )*(*tmp___71 + ch) & 256) {
#line 3727
                  *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                } else {
#line 3715
                  goto _L___2;
                }
              } else {
#line 3715
                goto _L___2;
              }
            } else
            _L___2: /* CIL Label */ 
#line 3715
            if (is_xdigit) {
#line 3715
              if ((ch & -128) == 0) {
#line 3715
                tmp___72 = __ctype_b_loc();
#line 3715
                if ((int const   )*(*tmp___72 + ch) & 4096) {
#line 3727
                  *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                } else {

                }
              } else {

              }
            } else {

            }
#line 3713
            ch ++;
          }
#line 3729
          had_char_class = (boolean )1;
        } else {
#line 3689
          goto _L___13;
        }
      } else {
        _L___13: /* CIL Label */ 
#line 3733
        c1 = (unsigned char )((int )c1 + 1);
#line 3734
        while (1) {
#line 3734
          tmp___73 = c1;
#line 3734
          c1 = (unsigned char )((int )c1 - 1);
#line 3734
          if (tmp___73) {

          } else {
#line 3734
            break;
          }
#line 3735
          p --;
        }
#line 3736
        *(b + 11) = (unsigned char )((int )*(b + 11) | (1 << 3));
#line 3737
        *(b + 7) = (unsigned char )((int )*(b + 7) | (1 << 2));
#line 3738
        had_char_class = (boolean )0;
      }
    } else {
#line 3743
      had_char_class = (boolean )0;
#line 3744
      *(b + (int )c / 8) = (unsigned char )((int )*(b + (int )c / 8) | (1 << (int )c % 8));
    }
  } else {
#line 3743
    had_char_class = (boolean )0;
#line 3744
    *(b + (int )c / 8) = (unsigned char )((int )*(b + (int )c / 8) | (1 << (int )c % 8));
  }
} else {
#line 3743
  had_char_class = (boolean )0;
#line 3744
  *(b + (int )c / 8) = (unsigned char )((int )*(b + (int )c / 8) | (1 << (int )c % 8));
}
---------
SID [2001] -> Line -1

---------
SID [2000] -> Line -1

---------
SID [1999] -> Line -1

---------
SID [1998] -> Line 3636
#line 3636
return ((reg_errcode_t )11);
---------
SID [1997] -> Line 3635
#line 3635
if ((int const   )*p != 93) {
#line 3636
  return ((reg_errcode_t )11);
} else {

}
---------
SID [1996] -> Line 3635
#line 3635
if ((int )c == 45) {
#line 3635
  if ((int const   )*p != 93) {
#line 3636
    return ((reg_errcode_t )11);
  } else {

  }
} else {

}
---------
SID [1995] -> Line 3635
#line 3635
if (had_char_class) {
#line 3635
  if ((int )c == 45) {
#line 3635
    if ((int const   )*p != 93) {
#line 3636
      return ((reg_errcode_t )11);
    } else {

    }
  } else {

  }
} else {

}
---------
SID [1994] -> Line -1

---------
SID [1993] -> Line -1

---------
SID [1992] -> Line 3631
#line 3631
break;
---------
SID [1991] -> Line 3630
#line 3630
if ((unsigned long )p != (unsigned long )(p1 + 1)) {
#line 3631
  break;
} else {

}
---------
SID [1990] -> Line 3630
#line 3630
if ((int )c == 93) {
#line 3630
  if ((unsigned long )p != (unsigned long )(p1 + 1)) {
#line 3631
    break;
  } else {

  }
} else {

}
---------
SID [1989] -> Line -1

---------
SID [1988] -> Line -1

---------
SID [1987] -> Line 3624
#line 3624
goto __Cont;
---------
SID [1986] -> Line 3623
#line 3623
*(b + (int )c1 / 8) = (unsigned char )((int )*(b + (int )c1 / 8) | (1 << (int )c1 % 8));
---------
SID [1985] -> Line 3622
#line 3622
break;
---------
SID [1984] -> Line -1

---------
SID [1983] -> Line 3622
#line 3622
c1 = (unsigned char )*(translate + c1);
---------
SID [1982] -> Line 3622
#line 3622
if (translate) {
#line 3622
  c1 = (unsigned char )*(translate + c1);
} else {

}
---------
SID [1981] -> Line 3622
#line 3622
c1 = (unsigned char )*tmp___30;
---------
SID [1980] -> Line 3622
#line 3622
p ++;
---------
SID [1979] -> Line 3622
#line 3622
tmp___30 = p;
---------
SID [1978] -> Line -1

---------
SID [1977] -> Line 3622
#line 3622
return ((reg_errcode_t )14);
---------
SID [1976] -> Line 3622
#line 3622
if ((unsigned long )p == (unsigned long )pend) {
#line 3622
  return ((reg_errcode_t )14);
} else {

}
---------
SID [1975] -> Line 3622
#line 3622
while (1) {
#line 3622
  if ((unsigned long )p == (unsigned long )pend) {
#line 3622
    return ((reg_errcode_t )14);
  } else {

  }
#line 3622
  tmp___30 = p;
#line 3622
  p ++;
#line 3622
  c1 = (unsigned char )*tmp___30;
#line 3622
  if (translate) {
#line 3622
    c1 = (unsigned char )*(translate + c1);
  } else {

  }
#line 3622
  break;
}
---------
SID [1974] -> Line -1

---------
SID [1973] -> Line 3620
#line 3620
return ((reg_errcode_t )5);
---------
SID [1972] -> Line 3620
#line 3620
if ((unsigned long )p == (unsigned long )pend) {
#line 3620
  return ((reg_errcode_t )5);
} else {

}
---------
SID [1971] -> Line 3618
#line 3618
if ((int )c == 92) {
#line 3620
  if ((unsigned long )p == (unsigned long )pend) {
#line 3620
    return ((reg_errcode_t )5);
  } else {

  }
#line 3622
  while (1) {
#line 3622
    if ((unsigned long )p == (unsigned long )pend) {
#line 3622
      return ((reg_errcode_t )14);
    } else {

    }
#line 3622
    tmp___30 = p;
#line 3622
    p ++;
#line 3622
    c1 = (unsigned char )*tmp___30;
#line 3622
    if (translate) {
#line 3622
      c1 = (unsigned char )*(translate + c1);
    } else {

    }
#line 3622
    break;
  }
#line 3623
  *(b + (int )c1 / 8) = (unsigned char )((int )*(b + (int )c1 / 8) | (1 << (int )c1 % 8));
#line 3624
  goto __Cont;
} else {

}
---------
SID [1970] -> Line 3618
#line 3618
if (syntax & 1U) {
#line 3618
  if ((int )c == 92) {
#line 3620
    if ((unsigned long )p == (unsigned long )pend) {
#line 3620
      return ((reg_errcode_t )5);
    } else {

    }
#line 3622
    while (1) {
#line 3622
      if ((unsigned long )p == (unsigned long )pend) {
#line 3622
        return ((reg_errcode_t )14);
      } else {

      }
#line 3622
      tmp___30 = p;
#line 3622
      p ++;
#line 3622
      c1 = (unsigned char )*tmp___30;
#line 3622
      if (translate) {
#line 3622
        c1 = (unsigned char )*(translate + c1);
      } else {

      }
#line 3622
      break;
    }
#line 3623
    *(b + (int )c1 / 8) = (unsigned char )((int )*(b + (int )c1 / 8) | (1 << (int )c1 % 8));
#line 3624
    goto __Cont;
  } else {

  }
} else {

}
---------
SID [1969] -> Line 3615
#line 3615
break;
---------
SID [1968] -> Line -1

---------
SID [1967] -> Line 3615
#line 3615
c = (unsigned char )*(translate + c);
---------
SID [1966] -> Line 3615
#line 3615
if (translate) {
#line 3615
  c = (unsigned char )*(translate + c);
} else {

}
---------
SID [1965] -> Line 3615
#line 3615
c = (unsigned char )*tmp___29;
---------
SID [1964] -> Line 3615
#line 3615
p ++;
---------
SID [1963] -> Line 3615
#line 3615
tmp___29 = p;
---------
SID [1962] -> Line -1

---------
SID [1961] -> Line 3615
#line 3615
return ((reg_errcode_t )14);
---------
SID [1960] -> Line 3615
#line 3615
if ((unsigned long )p == (unsigned long )pend) {
#line 3615
  return ((reg_errcode_t )14);
} else {

}
---------
SID [1959] -> Line 3615
#line 3615
while (1) {
#line 3615
  if ((unsigned long )p == (unsigned long )pend) {
#line 3615
    return ((reg_errcode_t )14);
  } else {

  }
#line 3615
  tmp___29 = p;
#line 3615
  p ++;
#line 3615
  c = (unsigned char )*tmp___29;
#line 3615
  if (translate) {
#line 3615
    c = (unsigned char )*(translate + c);
  } else {

  }
#line 3615
  break;
}
---------
SID [1958] -> Line -1

---------
SID [1957] -> Line 3613
#line 3613
return ((reg_errcode_t )7);
---------
SID [1956] -> Line 3613
#line 3613
if ((unsigned long )p == (unsigned long )pend) {
#line 3613
  return ((reg_errcode_t )7);
} else {

}
---------
SID [1955] -> Line 3611
#line 3611
while (1) {
#line 3613
  if ((unsigned long )p == (unsigned long )pend) {
#line 3613
    return ((reg_errcode_t )7);
  } else {

  }
#line 3615
  while (1) {
#line 3615
    if ((unsigned long )p == (unsigned long )pend) {
#line 3615
      return ((reg_errcode_t )14);
    } else {

    }
#line 3615
    tmp___29 = p;
#line 3615
    p ++;
#line 3615
    c = (unsigned char )*tmp___29;
#line 3615
    if (translate) {
#line 3615
      c = (unsigned char )*(translate + c);
    } else {

    }
#line 3615
    break;
  }
#line 3618
  if (syntax & 1U) {
#line 3618
    if ((int )c == 92) {
#line 3620
      if ((unsigned long )p == (unsigned long )pend) {
#line 3620
        return ((reg_errcode_t )5);
      } else {

      }
#line 3622
      while (1) {
#line 3622
        if ((unsigned long )p == (unsigned long )pend) {
#line 3622
          return ((reg_errcode_t )14);
        } else {

        }
#line 3622
        tmp___30 = p;
#line 3622
        p ++;
#line 3622
        c1 = (unsigned char )*tmp___30;
#line 3622
        if (translate) {
#line 3622
          c1 = (unsigned char )*(translate + c1);
        } else {

        }
#line 3622
        break;
      }
#line 3623
      *(b + (int )c1 / 8) = (unsigned char )((int )*(b + (int )c1 / 8) | (1 << (int )c1 % 8));
#line 3624
      goto __Cont;
    } else {

    }
  } else {

  }
#line 3630
  if ((int )c == 93) {
#line 3630
    if ((unsigned long )p != (unsigned long )(p1 + 1)) {
#line 3631
      break;
    } else {

    }
  } else {

  }
#line 3635
  if (had_char_class) {
#line 3635
    if ((int )c == 45) {
#line 3635
      if ((int const   )*p != 93) {
#line 3636
        return ((reg_errcode_t )11);
      } else {

      }
    } else {

    }
  } else {

  }
#line 3642
  if ((int )c == 45) {
#line 3642
    if ((unsigned long )(p - 2) >= (unsigned long )pattern) {
#line 3642
      if ((int const   )*(p + -2) == 91) {
#line 3642
        goto _L___19;
      } else {
#line 3642
        goto _L___20;
      }
    } else
    _L___20: /* CIL Label */ 
#line 3642
    if ((unsigned long )(p - 3) >= (unsigned long )pattern) {
#line 3642
      if ((int const   )*(p + -3) == 91) {
#line 3642
        if ((int const   )*(p + -2) == 94) {
#line 3642
          goto _L___19;
        } else {
#line 3642
          goto _L___18;
        }
      } else {
#line 3642
        goto _L___18;
      }
    } else
    _L___18: /* CIL Label */ 
    _L___17: /* CIL Label */ 
#line 3642
    if ((int const   )*p != 93) {
#line 3647
      tmp___31 = compile_range(& p, pend, translate, syntax, b);
#line 3647
      ret = tmp___31;
#line 3649
      if ((unsigned int )ret != 0U) {
#line 3649
        return (ret);
      } else {

      }
    } else {
#line 3642
      goto _L___19;
    }
  } else
  _L___19: /* CIL Label */ 
  _L___16: /* CIL Label */ 
  _L___15: /* CIL Label */ 
#line 3652
  if ((int const   )*(p + 0) == 45) {
#line 3652
    if ((int const   )*(p + 1) != 93) {
#line 3657
      while (1) {
#line 3657
        if ((unsigned long )p == (unsigned long )pend) {
#line 3657
          return ((reg_errcode_t )14);
        } else {

        }
#line 3657
        tmp___32 = p;
#line 3657
        p ++;
#line 3657
        c1 = (unsigned char )*tmp___32;
#line 3657
        if (translate) {
#line 3657
          c1 = (unsigned char )*(translate + c1);
        } else {

        }
#line 3657
        break;
      }
#line 3659
      ret___0 = compile_range(& p, pend, translate, syntax, b);
#line 3660
      if ((unsigned int )ret___0 != 0U) {
#line 3660
        return (ret___0);
      } else {

      }
    } else {
#line 3652
      goto _L___14;
    }
  } else
  _L___14: /* CIL Label */ 
#line 3666
  if (syntax & (unsigned int )((1 << 1) << 1)) {
#line 3666
    if ((int )c == 91) {
#line 3666
      if ((int const   )*p == 58) {
#line 3670
        while (1) {
#line 3670
          if ((unsigned long )p == (unsigned long )pend) {
#line 3670
            return ((reg_errcode_t )14);
          } else {

          }
#line 3670
          tmp___33 = p;
#line 3670
          p ++;
#line 3670
          c = (unsigned char )*tmp___33;
#line 3670
          if (translate) {
#line 3670
            c = (unsigned char )*(translate + c);
          } else {

          }
#line 3670
          break;
        }
#line 3671
        c1 = (unsigned char)0;
#line 3674
        if ((unsigned long )p == (unsigned long )pend) {
#line 3674
          return ((reg_errcode_t )7);
        } else {

        }
#line 3676
        while (1) {
#line 3678
          while (1) {
#line 3678
            if ((unsigned long )p == (unsigned long )pend) {
#line 3678
              return ((reg_errcode_t )14);
            } else {

            }
#line 3678
            tmp___34 = p;
#line 3678
            p ++;
#line 3678
            c = (unsigned char )*tmp___34;
#line 3678
            if (translate) {
#line 3678
              c = (unsigned char )*(translate + c);
            } else {

            }
#line 3678
            break;
          }
#line 3679
          if ((int )c == 58) {
#line 3681
            break;
          } else
#line 3679
          if ((int )c == 93) {
#line 3681
            break;
          } else
#line 3679
          if ((unsigned long )p == (unsigned long )pend) {
#line 3681
            break;
          } else
#line 3679
          if ((int )c1 == 6) {
#line 3681
            break;
          } else {

          }
#line 3682
          tmp___35 = c1;
#line 3682
          c1 = (unsigned char )((int )c1 + 1);
#line 3682
          str[tmp___35] = (char )c;
        }
#line 3684
        str[c1] = (char )'\000';
#line 3689
        if ((int )c == 58) {
#line 3689
          if ((int const   )*p == 93) {
#line 3692
            tmp___36 = strcmp((char const   *)(str), "alnum");
#line 3692
            is_alnum = (boolean )(tmp___36 == 0);
#line 3693
            tmp___37 = strcmp((char const   *)(str), "alpha");
#line 3693
            is_alpha = (boolean )(tmp___37 == 0);
#line 3694
            tmp___38 = strcmp((char const   *)(str), "blank");
#line 3694
            is_blank = (boolean )(tmp___38 == 0);
#line 3695
            tmp___39 = strcmp((char const   *)(str), "cntrl");
#line 3695
            is_cntrl = (boolean )(tmp___39 == 0);
#line 3696
            tmp___40 = strcmp((char const   *)(str), "digit");
#line 3696
            is_digit = (boolean )(tmp___40 == 0);
#line 3697
            tmp___41 = strcmp((char const   *)(str), "graph");
#line 3697
            is_graph = (boolean )(tmp___41 == 0);
#line 3698
            tmp___42 = strcmp((char const   *)(str), "lower");
#line 3698
            is_lower = (boolean )(tmp___42 == 0);
#line 3699
            tmp___43 = strcmp((char const   *)(str), "print");
#line 3699
            is_print = (boolean )(tmp___43 == 0);
#line 3700
            tmp___44 = strcmp((char const   *)(str), "punct");
#line 3700
            is_punct = (boolean )(tmp___44 == 0);
#line 3701
            tmp___45 = strcmp((char const   *)(str), "space");
#line 3701
            is_space = (boolean )(tmp___45 == 0);
#line 3702
            tmp___46 = strcmp((char const   *)(str), "upper");
#line 3702
            is_upper = (boolean )(tmp___46 == 0);
#line 3703
            tmp___47 = strcmp((char const   *)(str), "xdigit");
#line 3703
            is_xdigit = (boolean )(tmp___47 == 0);
#line 3705
            tmp___48 = strcmp((char const   *)(str), "alpha");
#line 3705
            if (tmp___48 == 0) {

            } else {
#line 3705
              tmp___49 = strcmp((char const   *)(str), "upper");
#line 3705
              if (tmp___49 == 0) {

              } else {
#line 3705
                tmp___50 = strcmp((char const   *)(str), "lower");
#line 3705
                if (tmp___50 == 0) {

                } else {
#line 3705
                  tmp___51 = strcmp((char const   *)(str), "digit");
#line 3705
                  if (tmp___51 == 0) {

                  } else {
#line 3705
                    tmp___52 = strcmp((char const   *)(str), "alnum");
#line 3705
                    if (tmp___52 == 0) {

                    } else {
#line 3705
                      tmp___53 = strcmp((char const   *)(str), "xdigit");
#line 3705
                      if (tmp___53 == 0) {

                      } else {
#line 3705
                        tmp___54 = strcmp((char const   *)(str), "space");
#line 3705
                        if (tmp___54 == 0) {

                        } else {
#line 3705
                          tmp___55 = strcmp((char const   *)(str), "print");
#line 3705
                          if (tmp___55 == 0) {

                          } else {
#line 3705
                            tmp___56 = strcmp((char const   *)(str), "punct");
#line 3705
                            if (tmp___56 == 0) {

                            } else {
#line 3705
                              tmp___57 = strcmp((char const   *)(str), "graph");
#line 3705
                              if (tmp___57 == 0) {

                              } else {
#line 3705
                                tmp___58 = strcmp((char const   *)(str),
                                                  "cntrl");
#line 3705
                                if (tmp___58 == 0) {

                                } else {
#line 3705
                                  tmp___59 = strcmp((char const   *)(str),
                                                    "blank");
#line 3705
                                  if (tmp___59 == 0) {

                                  } else {
#line 3705
                                    return ((reg_errcode_t )4);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
#line 3709
            while (1) {
#line 3709
              if ((unsigned long )p == (unsigned long )pend) {
#line 3709
                return ((reg_errcode_t )14);
              } else {

              }
#line 3709
              tmp___60 = p;
#line 3709
              p ++;
#line 3709
              c = (unsigned char )*tmp___60;
#line 3709
              if (translate) {
#line 3709
                c = (unsigned char )*(translate + c);
              } else {

              }
#line 3709
              break;
            }
#line 3711
            if ((unsigned long )p == (unsigned long )pend) {
#line 3711
              return ((reg_errcode_t )7);
            } else {

            }
#line 3713
            ch = 0;
#line 3713
            while (ch < 1 << 8) {
#line 3715
              if (is_alnum) {
#line 3715
                if ((ch & -128) == 0) {
#line 3715
                  tmp___61 = __ctype_b_loc();
#line 3715
                  if ((int const   )*(*tmp___61 + ch) & 8) {
#line 3727
                    *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                  } else {
#line 3715
                    goto _L___12;
                  }
                } else {
#line 3715
                  goto _L___12;
                }
              } else
              _L___12: /* CIL Label */ 
#line 3715
              if (is_alpha) {
#line 3715
                if ((ch & -128) == 0) {
#line 3715
                  tmp___62 = __ctype_b_loc();
#line 3715
                  if ((int const   )*(*tmp___62 + ch) & 1024) {
#line 3727
                    *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                  } else {
#line 3715
                    goto _L___11;
                  }
                } else {
#line 3715
                  goto _L___11;
                }
              } else
              _L___11: /* CIL Label */ 
#line 3715
              if (is_blank) {
#line 3715
                if ((ch & -128) == 0) {
#line 3715
                  tmp___63 = __ctype_b_loc();
#line 3715
                  if ((int const   )*(*tmp___63 + ch) & 1) {
#line 3727
                    *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                  } else {
#line 3715
                    goto _L___10;
                  }
                } else {
#line 3715
                  goto _L___10;
                }
              } else
              _L___10: /* CIL Label */ 
#line 3715
              if (is_cntrl) {
#line 3715
                if ((ch & -128) == 0) {
#line 3715
                  tmp___64 = __ctype_b_loc();
#line 3715
                  if ((int const   )*(*tmp___64 + ch) & 2) {
#line 3727
                    *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                  } else {
#line 3715
                    goto _L___9;
                  }
                } else {
#line 3715
                  goto _L___9;
                }
              } else
              _L___9: /* CIL Label */ 
#line 3715
              if (is_digit) {
#line 3715
                if ((ch & -128) == 0) {
#line 3715
                  tmp___65 = __ctype_b_loc();
#line 3715
                  if ((int const   )*(*tmp___65 + ch) & 2048) {
#line 3727
                    *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                  } else {
#line 3715
                    goto _L___8;
                  }
                } else {
#line 3715
                  goto _L___8;
                }
              } else
              _L___8: /* CIL Label */ 
#line 3715
              if (is_graph) {
#line 3715
                if ((ch & -128) == 0) {
#line 3715
                  tmp___66 = __ctype_b_loc();
#line 3715
                  if ((int const   )*(*tmp___66 + ch) & 32768) {
#line 3727
                    *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                  } else {
#line 3715
                    goto _L___7;
                  }
                } else {
#line 3715
                  goto _L___7;
                }
              } else
              _L___7: /* CIL Label */ 
#line 3715
              if (is_lower) {
#line 3715
                if ((ch & -128) == 0) {
#line 3715
                  tmp___67 = __ctype_b_loc();
#line 3715
                  if ((int const   )*(*tmp___67 + ch) & 512) {
#line 3727
                    *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                  } else {
#line 3715
                    goto _L___6;
                  }
                } else {
#line 3715
                  goto _L___6;
                }
              } else
              _L___6: /* CIL Label */ 
#line 3715
              if (is_print) {
#line 3715
                if ((ch & -128) == 0) {
#line 3715
                  tmp___68 = __ctype_b_loc();
#line 3715
                  if ((int const   )*(*tmp___68 + ch) & 16384) {
#line 3727
                    *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                  } else {
#line 3715
                    goto _L___5;
                  }
                } else {
#line 3715
                  goto _L___5;
                }
              } else
              _L___5: /* CIL Label */ 
#line 3715
              if (is_punct) {
#line 3715
                if ((ch & -128) == 0) {
#line 3715
                  tmp___69 = __ctype_b_loc();
#line 3715
                  if ((int const   )*(*tmp___69 + ch) & 4) {
#line 3727
                    *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                  } else {
#line 3715
                    goto _L___4;
                  }
                } else {
#line 3715
                  goto _L___4;
                }
              } else
              _L___4: /* CIL Label */ 
#line 3715
              if (is_space) {
#line 3715
                if ((ch & -128) == 0) {
#line 3715
                  tmp___70 = __ctype_b_loc();
#line 3715
                  if ((int const   )*(*tmp___70 + ch) & 8192) {
#line 3727
                    *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                  } else {
#line 3715
                    goto _L___3;
                  }
                } else {
#line 3715
                  goto _L___3;
                }
              } else
              _L___3: /* CIL Label */ 
#line 3715
              if (is_upper) {
#line 3715
                if ((ch & -128) == 0) {
#line 3715
                  tmp___71 = __ctype_b_loc();
#line 3715
                  if ((int const   )*(*tmp___71 + ch) & 256) {
#line 3727
                    *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                  } else {
#line 3715
                    goto _L___2;
                  }
                } else {
#line 3715
                  goto _L___2;
                }
              } else
              _L___2: /* CIL Label */ 
#line 3715
              if (is_xdigit) {
#line 3715
                if ((ch & -128) == 0) {
#line 3715
                  tmp___72 = __ctype_b_loc();
#line 3715
                  if ((int const   )*(*tmp___72 + ch) & 4096) {
#line 3727
                    *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                  } else {

                  }
                } else {

                }
              } else {

              }
#line 3713
              ch ++;
            }
#line 3729
            had_char_class = (boolean )1;
          } else {
#line 3689
            goto _L___13;
          }
        } else {
          _L___13: /* CIL Label */ 
#line 3733
          c1 = (unsigned char )((int )c1 + 1);
#line 3734
          while (1) {
#line 3734
            tmp___73 = c1;
#line 3734
            c1 = (unsigned char )((int )c1 - 1);
#line 3734
            if (tmp___73) {

            } else {
#line 3734
              break;
            }
#line 3735
            p --;
          }
#line 3736
          *(b + 11) = (unsigned char )((int )*(b + 11) | (1 << 3));
#line 3737
          *(b + 7) = (unsigned char )((int )*(b + 7) | (1 << 2));
#line 3738
          had_char_class = (boolean )0;
        }
      } else {
#line 3743
        had_char_class = (boolean )0;
#line 3744
        *(b + (int )c / 8) = (unsigned char )((int )*(b + (int )c / 8) | (1 << (int )c % 8));
      }
    } else {
#line 3743
      had_char_class = (boolean )0;
#line 3744
      *(b + (int )c / 8) = (unsigned char )((int )*(b + (int )c / 8) | (1 << (int )c % 8));
    }
  } else {
#line 3743
    had_char_class = (boolean )0;
#line 3744
    *(b + (int )c / 8) = (unsigned char )((int )*(b + (int )c / 8) | (1 << (int )c % 8));
  }
  __Cont: /* CIL Label */ ;
}
---------
SID [1954] -> Line -1

---------
SID [1953] -> Line -1

---------
SID [1952] -> Line 3608
#line 3608
*(b + 1) = (unsigned char )((int )*(b + 1) | (1 << 2));
---------
SID [1951] -> Line 3606
#line 3606
if (syntax & (unsigned int )((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3608
  *(b + 1) = (unsigned char )((int )*(b + 1) | (1 << 2));
} else {

}
---------
SID [1950] -> Line 3606
#line 3606
if ((unsigned int )((re_opcode_t )*(b + -2)) == 4U) {
#line 3606
  if (syntax & (unsigned int )((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3608
    *(b + 1) = (unsigned char )((int )*(b + 1) | (1 << 2));
  } else {

  }
} else {

}
---------
SID [1949] -> Line 3603
#line 3603
memset((void *)b, 0, (size_t )((1 << 8) / 8));
---------
SID [1948] -> Line 3600
#line 3600
break;
---------
SID [1947] -> Line 3600
#line 3600
*tmp___28 = (unsigned char )((1 << 8) / 8);
---------
SID [1946] -> Line 3600
#line 3600
b ++;
---------
SID [1945] -> Line 3600
#line 3600
tmp___28 = b;
---------
SID [1944] -> Line 3600
#line 3600
break;
---------
SID [1943] -> Line -1

---------
SID [1942] -> Line -1

---------
SID [1941] -> Line 3600
#line 3600
pending_exact = bufp->buffer + (pending_exact - old_buffer___7);
---------
SID [1940] -> Line 3600
#line 3600
if (pending_exact) {
#line 3600
  pending_exact = bufp->buffer + (pending_exact - old_buffer___7);
} else {

}
---------
SID [1939] -> Line -1

---------
SID [1938] -> Line 3600
#line 3600
laststart = bufp->buffer + (laststart - old_buffer___7);
---------
SID [1937] -> Line 3600
#line 3600
if (laststart) {
#line 3600
  laststart = bufp->buffer + (laststart - old_buffer___7);
} else {

}
---------
SID [1936] -> Line -1

---------
SID [1935] -> Line 3600
#line 3600
fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___7);
---------
SID [1934] -> Line 3600
#line 3600
if (fixup_alt_jump) {
#line 3600
  fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___7);
} else {

}
---------
SID [1933] -> Line 3600
#line 3600
begalt = bufp->buffer + (begalt - old_buffer___7);
---------
SID [1932] -> Line 3600
#line 3600
b = bufp->buffer + (b - old_buffer___7);
---------
SID [1931] -> Line 3600
#line 3600
if ((unsigned long )old_buffer___7 != (unsigned long )bufp->buffer) {
#line 3600
  b = bufp->buffer + (b - old_buffer___7);
#line 3600
  begalt = bufp->buffer + (begalt - old_buffer___7);
#line 3600
  if (fixup_alt_jump) {
#line 3600
    fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___7);
  } else {

  }
#line 3600
  if (laststart) {
#line 3600
    laststart = bufp->buffer + (laststart - old_buffer___7);
  } else {

  }
#line 3600
  if (pending_exact) {
#line 3600
    pending_exact = bufp->buffer + (pending_exact - old_buffer___7);
  } else {

  }
} else {

}
---------
SID [1930] -> Line -1

---------
SID [1929] -> Line 3600
#line 3600
return ((reg_errcode_t )12);
---------
SID [1928] -> Line 3600
#line 3600
if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3600
  return ((reg_errcode_t )12);
} else {

}
---------
SID [1927] -> Line 3600
#line 3600
bufp->buffer = (unsigned char *)tmp___27;
---------
SID [1926] -> Line 3600
#line 3600
tmp___27 = realloc((void *)bufp->buffer, bufp->allocated);
---------
SID [1925] -> Line -1

---------
SID [1924] -> Line 3600
#line 3600
bufp->allocated = (unsigned long )(1L << 16);
---------
SID [1923] -> Line 3600
#line 3600
if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3600
  bufp->allocated = (unsigned long )(1L << 16);
} else {

}
---------
SID [1922] -> Line 3600
#line 3600
bufp->allocated <<= 1;
---------
SID [1921] -> Line -1

---------
SID [1920] -> Line 3600
#line 3600
return ((reg_errcode_t )15);
---------
SID [1919] -> Line 3600
#line 3600
if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3600
  return ((reg_errcode_t )15);
} else {

}
---------
SID [1918] -> Line 3600
#line 3600
old_buffer___7 = bufp->buffer;
---------
SID [1917] -> Line 3600
#line 3600
while (1) {
#line 3600
  old_buffer___7 = bufp->buffer;
#line 3600
  if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3600
    return ((reg_errcode_t )15);
  } else {

  }
#line 3600
  bufp->allocated <<= 1;
#line 3600
  if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3600
    bufp->allocated = (unsigned long )(1L << 16);
  } else {

  }
#line 3600
  tmp___27 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3600
  bufp->buffer = (unsigned char *)tmp___27;
#line 3600
  if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3600
    return ((reg_errcode_t )12);
  } else {

  }
#line 3600
  if ((unsigned long )old_buffer___7 != (unsigned long )bufp->buffer) {
#line 3600
    b = bufp->buffer + (b - old_buffer___7);
#line 3600
    begalt = bufp->buffer + (begalt - old_buffer___7);
#line 3600
    if (fixup_alt_jump) {
#line 3600
      fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___7);
    } else {

    }
#line 3600
    if (laststart) {
#line 3600
      laststart = bufp->buffer + (laststart - old_buffer___7);
    } else {

    }
#line 3600
    if (pending_exact) {
#line 3600
      pending_exact = bufp->buffer + (pending_exact - old_buffer___7);
    } else {

    }
  } else {

  }
#line 3600
  break;
}
---------
SID [1916] -> Line 3600
#line 3600
break;
---------
SID [1915] -> Line -1

---------
SID [1914] -> Line 3600
#line 3600
if ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {

} else {
#line 3600
  break;
}
---------
SID [1913] -> Line 3600
#line 3600
while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 3600
  while (1) {
#line 3600
    old_buffer___7 = bufp->buffer;
#line 3600
    if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3600
      return ((reg_errcode_t )15);
    } else {

    }
#line 3600
    bufp->allocated <<= 1;
#line 3600
    if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3600
      bufp->allocated = (unsigned long )(1L << 16);
    } else {

    }
#line 3600
    tmp___27 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3600
    bufp->buffer = (unsigned char *)tmp___27;
#line 3600
    if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3600
      return ((reg_errcode_t )12);
    } else {

    }
#line 3600
    if ((unsigned long )old_buffer___7 != (unsigned long )bufp->buffer) {
#line 3600
      b = bufp->buffer + (b - old_buffer___7);
#line 3600
      begalt = bufp->buffer + (begalt - old_buffer___7);
#line 3600
      if (fixup_alt_jump) {
#line 3600
        fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___7);
      } else {

      }
#line 3600
      if (laststart) {
#line 3600
        laststart = bufp->buffer + (laststart - old_buffer___7);
      } else {

      }
#line 3600
      if (pending_exact) {
#line 3600
        pending_exact = bufp->buffer + (pending_exact - old_buffer___7);
      } else {

      }
    } else {

    }
#line 3600
    break;
  }
}
---------
SID [1912] -> Line 3600
#line 3600
while (1) {
#line 3600
  while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 3600
    while (1) {
#line 3600
      old_buffer___7 = bufp->buffer;
#line 3600
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3600
        return ((reg_errcode_t )15);
      } else {

      }
#line 3600
      bufp->allocated <<= 1;
#line 3600
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3600
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 3600
      tmp___27 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3600
      bufp->buffer = (unsigned char *)tmp___27;
#line 3600
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3600
        return ((reg_errcode_t )12);
      } else {

      }
#line 3600
      if ((unsigned long )old_buffer___7 != (unsigned long )bufp->buffer) {
#line 3600
        b = bufp->buffer + (b - old_buffer___7);
#line 3600
        begalt = bufp->buffer + (begalt - old_buffer___7);
#line 3600
        if (fixup_alt_jump) {
#line 3600
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___7);
        } else {

        }
#line 3600
        if (laststart) {
#line 3600
          laststart = bufp->buffer + (laststart - old_buffer___7);
        } else {

        }
#line 3600
        if (pending_exact) {
#line 3600
          pending_exact = bufp->buffer + (pending_exact - old_buffer___7);
        } else {

        }
      } else {

      }
#line 3600
      break;
    }
  }
#line 3600
  tmp___28 = b;
#line 3600
  b ++;
#line 3600
  *tmp___28 = (unsigned char )((1 << 8) / 8);
#line 3600
  break;
}
---------
SID [1911] -> Line 3597
#line 3597
p1 = p;
---------
SID [1910] -> Line -1

---------
SID [1909] -> Line 3594
#line 3594
p ++;
---------
SID [1908] -> Line 3593
#line 3593
if ((int const   )*p == 94) {
#line 3594
  p ++;
} else {

}
---------
SID [1907] -> Line 3592
#line 3592
break;
---------
SID [1906] -> Line 3592
#line 3592
*tmp___25 = (unsigned char )tmp___26;
---------
SID [1905] -> Line 3592
#line 3592
tmp___26 = 3;
---------
SID [1904] -> Line 3592
#line 3592
tmp___26 = 4;
---------
SID [1903] -> Line 3592
#line 3592
if ((int const   )*p == 94) {
#line 3592
  tmp___26 = 4;
} else {
#line 3592
  tmp___26 = 3;
}
---------
SID [1902] -> Line 3592
#line 3592
b ++;
---------
SID [1901] -> Line 3592
#line 3592
tmp___25 = b;
---------
SID [1900] -> Line 3592
#line 3592
break;
---------
SID [1899] -> Line -1

---------
SID [1898] -> Line -1

---------
SID [1897] -> Line 3592
#line 3592
pending_exact = bufp->buffer + (pending_exact - old_buffer___6);
---------
SID [1896] -> Line 3592
#line 3592
if (pending_exact) {
#line 3592
  pending_exact = bufp->buffer + (pending_exact - old_buffer___6);
} else {

}
---------
SID [1895] -> Line -1

---------
SID [1894] -> Line 3592
#line 3592
laststart = bufp->buffer + (laststart - old_buffer___6);
---------
SID [1893] -> Line 3592
#line 3592
if (laststart) {
#line 3592
  laststart = bufp->buffer + (laststart - old_buffer___6);
} else {

}
---------
SID [1892] -> Line -1

---------
SID [1891] -> Line 3592
#line 3592
fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___6);
---------
SID [1890] -> Line 3592
#line 3592
if (fixup_alt_jump) {
#line 3592
  fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___6);
} else {

}
---------
SID [1889] -> Line 3592
#line 3592
begalt = bufp->buffer + (begalt - old_buffer___6);
---------
SID [1888] -> Line 3592
#line 3592
b = bufp->buffer + (b - old_buffer___6);
---------
SID [1887] -> Line 3592
#line 3592
if ((unsigned long )old_buffer___6 != (unsigned long )bufp->buffer) {
#line 3592
  b = bufp->buffer + (b - old_buffer___6);
#line 3592
  begalt = bufp->buffer + (begalt - old_buffer___6);
#line 3592
  if (fixup_alt_jump) {
#line 3592
    fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___6);
  } else {

  }
#line 3592
  if (laststart) {
#line 3592
    laststart = bufp->buffer + (laststart - old_buffer___6);
  } else {

  }
#line 3592
  if (pending_exact) {
#line 3592
    pending_exact = bufp->buffer + (pending_exact - old_buffer___6);
  } else {

  }
} else {

}
---------
SID [1886] -> Line -1

---------
SID [1885] -> Line 3592
#line 3592
return ((reg_errcode_t )12);
---------
SID [1884] -> Line 3592
#line 3592
if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3592
  return ((reg_errcode_t )12);
} else {

}
---------
SID [1883] -> Line 3592
#line 3592
bufp->buffer = (unsigned char *)tmp___24;
---------
SID [1882] -> Line 3592
#line 3592
tmp___24 = realloc((void *)bufp->buffer, bufp->allocated);
---------
SID [1881] -> Line -1

---------
SID [1880] -> Line 3592
#line 3592
bufp->allocated = (unsigned long )(1L << 16);
---------
SID [1879] -> Line 3592
#line 3592
if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3592
  bufp->allocated = (unsigned long )(1L << 16);
} else {

}
---------
SID [1878] -> Line 3592
#line 3592
bufp->allocated <<= 1;
---------
SID [1877] -> Line -1

---------
SID [1876] -> Line 3592
#line 3592
return ((reg_errcode_t )15);
---------
SID [1875] -> Line 3592
#line 3592
if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3592
  return ((reg_errcode_t )15);
} else {

}
---------
SID [1874] -> Line 3592
#line 3592
old_buffer___6 = bufp->buffer;
---------
SID [1873] -> Line 3592
#line 3592
while (1) {
#line 3592
  old_buffer___6 = bufp->buffer;
#line 3592
  if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3592
    return ((reg_errcode_t )15);
  } else {

  }
#line 3592
  bufp->allocated <<= 1;
#line 3592
  if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3592
    bufp->allocated = (unsigned long )(1L << 16);
  } else {

  }
#line 3592
  tmp___24 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3592
  bufp->buffer = (unsigned char *)tmp___24;
#line 3592
  if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3592
    return ((reg_errcode_t )12);
  } else {

  }
#line 3592
  if ((unsigned long )old_buffer___6 != (unsigned long )bufp->buffer) {
#line 3592
    b = bufp->buffer + (b - old_buffer___6);
#line 3592
    begalt = bufp->buffer + (begalt - old_buffer___6);
#line 3592
    if (fixup_alt_jump) {
#line 3592
      fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___6);
    } else {

    }
#line 3592
    if (laststart) {
#line 3592
      laststart = bufp->buffer + (laststart - old_buffer___6);
    } else {

    }
#line 3592
    if (pending_exact) {
#line 3592
      pending_exact = bufp->buffer + (pending_exact - old_buffer___6);
    } else {

    }
  } else {

  }
#line 3592
  break;
}
---------
SID [1872] -> Line 3592
#line 3592
break;
---------
SID [1871] -> Line -1

---------
SID [1870] -> Line 3592
#line 3592
if ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {

} else {
#line 3592
  break;
}
---------
SID [1869] -> Line 3592
#line 3592
while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 3592
  while (1) {
#line 3592
    old_buffer___6 = bufp->buffer;
#line 3592
    if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3592
      return ((reg_errcode_t )15);
    } else {

    }
#line 3592
    bufp->allocated <<= 1;
#line 3592
    if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3592
      bufp->allocated = (unsigned long )(1L << 16);
    } else {

    }
#line 3592
    tmp___24 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3592
    bufp->buffer = (unsigned char *)tmp___24;
#line 3592
    if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3592
      return ((reg_errcode_t )12);
    } else {

    }
#line 3592
    if ((unsigned long )old_buffer___6 != (unsigned long )bufp->buffer) {
#line 3592
      b = bufp->buffer + (b - old_buffer___6);
#line 3592
      begalt = bufp->buffer + (begalt - old_buffer___6);
#line 3592
      if (fixup_alt_jump) {
#line 3592
        fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___6);
      } else {

      }
#line 3592
      if (laststart) {
#line 3592
        laststart = bufp->buffer + (laststart - old_buffer___6);
      } else {

      }
#line 3592
      if (pending_exact) {
#line 3592
        pending_exact = bufp->buffer + (pending_exact - old_buffer___6);
      } else {

      }
    } else {

    }
#line 3592
    break;
  }
}
---------
SID [1868] -> Line 3592
#line 3592
while (1) {
#line 3592
  while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 3592
    while (1) {
#line 3592
      old_buffer___6 = bufp->buffer;
#line 3592
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3592
        return ((reg_errcode_t )15);
      } else {

      }
#line 3592
      bufp->allocated <<= 1;
#line 3592
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3592
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 3592
      tmp___24 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3592
      bufp->buffer = (unsigned char *)tmp___24;
#line 3592
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3592
        return ((reg_errcode_t )12);
      } else {

      }
#line 3592
      if ((unsigned long )old_buffer___6 != (unsigned long )bufp->buffer) {
#line 3592
        b = bufp->buffer + (b - old_buffer___6);
#line 3592
        begalt = bufp->buffer + (begalt - old_buffer___6);
#line 3592
        if (fixup_alt_jump) {
#line 3592
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___6);
        } else {

        }
#line 3592
        if (laststart) {
#line 3592
          laststart = bufp->buffer + (laststart - old_buffer___6);
        } else {

        }
#line 3592
        if (pending_exact) {
#line 3592
          pending_exact = bufp->buffer + (pending_exact - old_buffer___6);
        } else {

        }
      } else {

      }
#line 3592
      break;
    }
  }
#line 3592
  tmp___25 = b;
#line 3592
  b ++;
#line 3592
  if ((int const   )*p == 94) {
#line 3592
    tmp___26 = 4;
  } else {
#line 3592
    tmp___26 = 3;
  }
#line 3592
  *tmp___25 = (unsigned char )tmp___26;
#line 3592
  break;
}
---------
SID [1867] -> Line 3588
#line 3588
laststart = b;
---------
SID [1866] -> Line 3586
#line 3586
break;
---------
SID [1865] -> Line -1

---------
SID [1864] -> Line -1

---------
SID [1863] -> Line 3586
#line 3586
pending_exact = bufp->buffer + (pending_exact - old_buffer___5);
---------
SID [1862] -> Line 3586
#line 3586
if (pending_exact) {
#line 3586
  pending_exact = bufp->buffer + (pending_exact - old_buffer___5);
} else {

}
---------
SID [1861] -> Line -1

---------
SID [1860] -> Line 3586
#line 3586
laststart = bufp->buffer + (laststart - old_buffer___5);
---------
SID [1859] -> Line 3586
#line 3586
if (laststart) {
#line 3586
  laststart = bufp->buffer + (laststart - old_buffer___5);
} else {

}
---------
SID [1858] -> Line -1

---------
SID [1857] -> Line 3586
#line 3586
fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___5);
---------
SID [1856] -> Line 3586
#line 3586
if (fixup_alt_jump) {
#line 3586
  fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___5);
} else {

}
---------
SID [1855] -> Line 3586
#line 3586
begalt = bufp->buffer + (begalt - old_buffer___5);
---------
SID [1854] -> Line 3586
#line 3586
b = bufp->buffer + (b - old_buffer___5);
---------
SID [1853] -> Line 3586
#line 3586
if ((unsigned long )old_buffer___5 != (unsigned long )bufp->buffer) {
#line 3586
  b = bufp->buffer + (b - old_buffer___5);
#line 3586
  begalt = bufp->buffer + (begalt - old_buffer___5);
#line 3586
  if (fixup_alt_jump) {
#line 3586
    fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___5);
  } else {

  }
#line 3586
  if (laststart) {
#line 3586
    laststart = bufp->buffer + (laststart - old_buffer___5);
  } else {

  }
#line 3586
  if (pending_exact) {
#line 3586
    pending_exact = bufp->buffer + (pending_exact - old_buffer___5);
  } else {

  }
} else {

}
---------
SID [1852] -> Line -1

---------
SID [1851] -> Line 3586
#line 3586
return ((reg_errcode_t )12);
---------
SID [1850] -> Line 3586
#line 3586
if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3586
  return ((reg_errcode_t )12);
} else {

}
---------
SID [1849] -> Line 3586
#line 3586
bufp->buffer = (unsigned char *)tmp___23;
---------
SID [1848] -> Line 3586
#line 3586
tmp___23 = realloc((void *)bufp->buffer, bufp->allocated);
---------
SID [1847] -> Line -1

---------
SID [1846] -> Line 3586
#line 3586
bufp->allocated = (unsigned long )(1L << 16);
---------
SID [1845] -> Line 3586
#line 3586
if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3586
  bufp->allocated = (unsigned long )(1L << 16);
} else {

}
---------
SID [1844] -> Line 3586
#line 3586
bufp->allocated <<= 1;
---------
SID [1843] -> Line -1

---------
SID [1842] -> Line 3586
#line 3586
return ((reg_errcode_t )15);
---------
SID [1841] -> Line 3586
#line 3586
if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3586
  return ((reg_errcode_t )15);
} else {

}
---------
SID [1840] -> Line 3586
#line 3586
old_buffer___5 = bufp->buffer;
---------
SID [1839] -> Line 3586
#line 3586
while (1) {
#line 3586
  old_buffer___5 = bufp->buffer;
#line 3586
  if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3586
    return ((reg_errcode_t )15);
  } else {

  }
#line 3586
  bufp->allocated <<= 1;
#line 3586
  if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3586
    bufp->allocated = (unsigned long )(1L << 16);
  } else {

  }
#line 3586
  tmp___23 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3586
  bufp->buffer = (unsigned char *)tmp___23;
#line 3586
  if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3586
    return ((reg_errcode_t )12);
  } else {

  }
#line 3586
  if ((unsigned long )old_buffer___5 != (unsigned long )bufp->buffer) {
#line 3586
    b = bufp->buffer + (b - old_buffer___5);
#line 3586
    begalt = bufp->buffer + (begalt - old_buffer___5);
#line 3586
    if (fixup_alt_jump) {
#line 3586
      fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___5);
    } else {

    }
#line 3586
    if (laststart) {
#line 3586
      laststart = bufp->buffer + (laststart - old_buffer___5);
    } else {

    }
#line 3586
    if (pending_exact) {
#line 3586
      pending_exact = bufp->buffer + (pending_exact - old_buffer___5);
    } else {

    }
  } else {

  }
#line 3586
  break;
}
---------
SID [1838] -> Line 3586
#line 3586
break;
---------
SID [1837] -> Line -1

---------
SID [1836] -> Line 3586
#line 3586
if ((unsigned long )((b - bufp->buffer) + 34L) > bufp->allocated) {

} else {
#line 3586
  break;
}
---------
SID [1835] -> Line 3586
#line 3586
while ((unsigned long )((b - bufp->buffer) + 34L) > bufp->allocated) {
#line 3586
  while (1) {
#line 3586
    old_buffer___5 = bufp->buffer;
#line 3586
    if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3586
      return ((reg_errcode_t )15);
    } else {

    }
#line 3586
    bufp->allocated <<= 1;
#line 3586
    if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3586
      bufp->allocated = (unsigned long )(1L << 16);
    } else {

    }
#line 3586
    tmp___23 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3586
    bufp->buffer = (unsigned char *)tmp___23;
#line 3586
    if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3586
      return ((reg_errcode_t )12);
    } else {

    }
#line 3586
    if ((unsigned long )old_buffer___5 != (unsigned long )bufp->buffer) {
#line 3586
      b = bufp->buffer + (b - old_buffer___5);
#line 3586
      begalt = bufp->buffer + (begalt - old_buffer___5);
#line 3586
      if (fixup_alt_jump) {
#line 3586
        fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___5);
      } else {

      }
#line 3586
      if (laststart) {
#line 3586
        laststart = bufp->buffer + (laststart - old_buffer___5);
      } else {

      }
#line 3586
      if (pending_exact) {
#line 3586
        pending_exact = bufp->buffer + (pending_exact - old_buffer___5);
      } else {

      }
    } else {

    }
#line 3586
    break;
  }
}
---------
SID [1834] -> Line -1

---------
SID [1833] -> Line 3582
#line 3582
return ((reg_errcode_t )7);
---------
SID [1832] -> Line 3582
#line 3582
if ((unsigned long )p == (unsigned long )pend) {
#line 3582
  return ((reg_errcode_t )7);
} else {

}
---------
SID [1831] -> Line 3580
case 91: 
#line 3580
had_char_class = (boolean )0;
---------
SID [1830] -> Line 3575
#line 3575
break;
---------
SID [1829] -> Line 3574
#line 3574
break;
---------
SID [1828] -> Line 3574
#line 3574
*tmp___22 = (unsigned char)2;
---------
SID [1827] -> Line 3574
#line 3574
b ++;
---------
SID [1826] -> Line 3574
#line 3574
tmp___22 = b;
---------
SID [1825] -> Line 3574
#line 3574
break;
---------
SID [1824] -> Line -1

---------
SID [1823] -> Line -1

---------
SID [1822] -> Line 3574
#line 3574
pending_exact = bufp->buffer + (pending_exact - old_buffer___4);
---------
SID [1821] -> Line 3574
#line 3574
if (pending_exact) {
#line 3574
  pending_exact = bufp->buffer + (pending_exact - old_buffer___4);
} else {

}
---------
SID [1820] -> Line -1

---------
SID [1819] -> Line 3574
#line 3574
laststart = bufp->buffer + (laststart - old_buffer___4);
---------
SID [1818] -> Line 3574
#line 3574
if (laststart) {
#line 3574
  laststart = bufp->buffer + (laststart - old_buffer___4);
} else {

}
---------
SID [1817] -> Line -1

---------
SID [1816] -> Line 3574
#line 3574
fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___4);
---------
SID [1815] -> Line 3574
#line 3574
if (fixup_alt_jump) {
#line 3574
  fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___4);
} else {

}
---------
SID [1814] -> Line 3574
#line 3574
begalt = bufp->buffer + (begalt - old_buffer___4);
---------
SID [1813] -> Line 3574
#line 3574
b = bufp->buffer + (b - old_buffer___4);
---------
SID [1812] -> Line 3574
#line 3574
if ((unsigned long )old_buffer___4 != (unsigned long )bufp->buffer) {
#line 3574
  b = bufp->buffer + (b - old_buffer___4);
#line 3574
  begalt = bufp->buffer + (begalt - old_buffer___4);
#line 3574
  if (fixup_alt_jump) {
#line 3574
    fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___4);
  } else {

  }
#line 3574
  if (laststart) {
#line 3574
    laststart = bufp->buffer + (laststart - old_buffer___4);
  } else {

  }
#line 3574
  if (pending_exact) {
#line 3574
    pending_exact = bufp->buffer + (pending_exact - old_buffer___4);
  } else {

  }
} else {

}
---------
SID [1811] -> Line -1

---------
SID [1810] -> Line 3574
#line 3574
return ((reg_errcode_t )12);
---------
SID [1809] -> Line 3574
#line 3574
if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3574
  return ((reg_errcode_t )12);
} else {

}
---------
SID [1808] -> Line 3574
#line 3574
bufp->buffer = (unsigned char *)tmp___21;
---------
SID [1807] -> Line 3574
#line 3574
tmp___21 = realloc((void *)bufp->buffer, bufp->allocated);
---------
SID [1806] -> Line -1

---------
SID [1805] -> Line 3574
#line 3574
bufp->allocated = (unsigned long )(1L << 16);
---------
SID [1804] -> Line 3574
#line 3574
if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3574
  bufp->allocated = (unsigned long )(1L << 16);
} else {

}
---------
SID [1803] -> Line 3574
#line 3574
bufp->allocated <<= 1;
---------
SID [1802] -> Line -1

---------
SID [1801] -> Line 3574
#line 3574
return ((reg_errcode_t )15);
---------
SID [1800] -> Line 3574
#line 3574
if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3574
  return ((reg_errcode_t )15);
} else {

}
---------
SID [1799] -> Line 3574
#line 3574
old_buffer___4 = bufp->buffer;
---------
SID [1798] -> Line 3574
#line 3574
while (1) {
#line 3574
  old_buffer___4 = bufp->buffer;
#line 3574
  if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3574
    return ((reg_errcode_t )15);
  } else {

  }
#line 3574
  bufp->allocated <<= 1;
#line 3574
  if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3574
    bufp->allocated = (unsigned long )(1L << 16);
  } else {

  }
#line 3574
  tmp___21 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3574
  bufp->buffer = (unsigned char *)tmp___21;
#line 3574
  if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3574
    return ((reg_errcode_t )12);
  } else {

  }
#line 3574
  if ((unsigned long )old_buffer___4 != (unsigned long )bufp->buffer) {
#line 3574
    b = bufp->buffer + (b - old_buffer___4);
#line 3574
    begalt = bufp->buffer + (begalt - old_buffer___4);
#line 3574
    if (fixup_alt_jump) {
#line 3574
      fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___4);
    } else {

    }
#line 3574
    if (laststart) {
#line 3574
      laststart = bufp->buffer + (laststart - old_buffer___4);
    } else {

    }
#line 3574
    if (pending_exact) {
#line 3574
      pending_exact = bufp->buffer + (pending_exact - old_buffer___4);
    } else {

    }
  } else {

  }
#line 3574
  break;
}
---------
SID [1797] -> Line 3574
#line 3574
break;
---------
SID [1796] -> Line -1

---------
SID [1795] -> Line 3574
#line 3574
if ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {

} else {
#line 3574
  break;
}
---------
SID [1794] -> Line 3574
#line 3574
while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 3574
  while (1) {
#line 3574
    old_buffer___4 = bufp->buffer;
#line 3574
    if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3574
      return ((reg_errcode_t )15);
    } else {

    }
#line 3574
    bufp->allocated <<= 1;
#line 3574
    if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3574
      bufp->allocated = (unsigned long )(1L << 16);
    } else {

    }
#line 3574
    tmp___21 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3574
    bufp->buffer = (unsigned char *)tmp___21;
#line 3574
    if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3574
      return ((reg_errcode_t )12);
    } else {

    }
#line 3574
    if ((unsigned long )old_buffer___4 != (unsigned long )bufp->buffer) {
#line 3574
      b = bufp->buffer + (b - old_buffer___4);
#line 3574
      begalt = bufp->buffer + (begalt - old_buffer___4);
#line 3574
      if (fixup_alt_jump) {
#line 3574
        fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___4);
      } else {

      }
#line 3574
      if (laststart) {
#line 3574
        laststart = bufp->buffer + (laststart - old_buffer___4);
      } else {

      }
#line 3574
      if (pending_exact) {
#line 3574
        pending_exact = bufp->buffer + (pending_exact - old_buffer___4);
      } else {

      }
    } else {

    }
#line 3574
    break;
  }
}
---------
SID [1793] -> Line 3574
#line 3574
while (1) {
#line 3574
  while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 3574
    while (1) {
#line 3574
      old_buffer___4 = bufp->buffer;
#line 3574
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3574
        return ((reg_errcode_t )15);
      } else {

      }
#line 3574
      bufp->allocated <<= 1;
#line 3574
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3574
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 3574
      tmp___21 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3574
      bufp->buffer = (unsigned char *)tmp___21;
#line 3574
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3574
        return ((reg_errcode_t )12);
      } else {

      }
#line 3574
      if ((unsigned long )old_buffer___4 != (unsigned long )bufp->buffer) {
#line 3574
        b = bufp->buffer + (b - old_buffer___4);
#line 3574
        begalt = bufp->buffer + (begalt - old_buffer___4);
#line 3574
        if (fixup_alt_jump) {
#line 3574
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___4);
        } else {

        }
#line 3574
        if (laststart) {
#line 3574
          laststart = bufp->buffer + (laststart - old_buffer___4);
        } else {

        }
#line 3574
        if (pending_exact) {
#line 3574
          pending_exact = bufp->buffer + (pending_exact - old_buffer___4);
        } else {

        }
      } else {

      }
#line 3574
      break;
    }
  }
#line 3574
  tmp___22 = b;
#line 3574
  b ++;
#line 3574
  *tmp___22 = (unsigned char)2;
#line 3574
  break;
}
---------
SID [1792] -> Line 3573
case 46: 
#line 3573
laststart = b;
---------
SID [1791] -> Line 3569
#line 3569
break;
---------
SID [1790] -> Line -1

---------
SID [1789] -> Line 3566
#line 3566
b += 3;
---------
SID [1788] -> Line 3565
#line 3565
insert_op1(18, laststart, ((laststart + 6) - laststart) - 3L, b);
---------
SID [1787] -> Line 3564
#line 3564
break;
---------
SID [1786] -> Line -1

---------
SID [1785] -> Line -1

---------
SID [1784] -> Line 3564
#line 3564
pending_exact = bufp->buffer + (pending_exact - old_buffer___3);
---------
SID [1783] -> Line 3564
#line 3564
if (pending_exact) {
#line 3564
  pending_exact = bufp->buffer + (pending_exact - old_buffer___3);
} else {

}
---------
SID [1782] -> Line -1

---------
SID [1781] -> Line 3564
#line 3564
laststart = bufp->buffer + (laststart - old_buffer___3);
---------
SID [1780] -> Line 3564
#line 3564
if (laststart) {
#line 3564
  laststart = bufp->buffer + (laststart - old_buffer___3);
} else {

}
---------
SID [1779] -> Line -1

---------
SID [1778] -> Line 3564
#line 3564
fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___3);
---------
SID [1777] -> Line 3564
#line 3564
if (fixup_alt_jump) {
#line 3564
  fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___3);
} else {

}
---------
SID [1776] -> Line 3564
#line 3564
begalt = bufp->buffer + (begalt - old_buffer___3);
---------
SID [1775] -> Line 3564
#line 3564
b = bufp->buffer + (b - old_buffer___3);
---------
SID [1774] -> Line 3564
#line 3564
if ((unsigned long )old_buffer___3 != (unsigned long )bufp->buffer) {
#line 3564
  b = bufp->buffer + (b - old_buffer___3);
#line 3564
  begalt = bufp->buffer + (begalt - old_buffer___3);
#line 3564
  if (fixup_alt_jump) {
#line 3564
    fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___3);
  } else {

  }
#line 3564
  if (laststart) {
#line 3564
    laststart = bufp->buffer + (laststart - old_buffer___3);
  } else {

  }
#line 3564
  if (pending_exact) {
#line 3564
    pending_exact = bufp->buffer + (pending_exact - old_buffer___3);
  } else {

  }
} else {

}
---------
SID [1773] -> Line -1

---------
SID [1772] -> Line 3564
#line 3564
return ((reg_errcode_t )12);
---------
SID [1771] -> Line 3564
#line 3564
if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3564
  return ((reg_errcode_t )12);
} else {

}
---------
SID [1770] -> Line 3564
#line 3564
bufp->buffer = (unsigned char *)tmp___20;
---------
SID [1769] -> Line 3564
#line 3564
tmp___20 = realloc((void *)bufp->buffer, bufp->allocated);
---------
SID [1768] -> Line -1

---------
SID [1767] -> Line 3564
#line 3564
bufp->allocated = (unsigned long )(1L << 16);
---------
SID [1766] -> Line 3564
#line 3564
if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3564
  bufp->allocated = (unsigned long )(1L << 16);
} else {

}
---------
SID [1765] -> Line 3564
#line 3564
bufp->allocated <<= 1;
---------
SID [1764] -> Line -1

---------
SID [1763] -> Line 3564
#line 3564
return ((reg_errcode_t )15);
---------
SID [1762] -> Line 3564
#line 3564
if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3564
  return ((reg_errcode_t )15);
} else {

}
---------
SID [1761] -> Line 3564
#line 3564
old_buffer___3 = bufp->buffer;
---------
SID [1760] -> Line 3564
#line 3564
while (1) {
#line 3564
  old_buffer___3 = bufp->buffer;
#line 3564
  if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3564
    return ((reg_errcode_t )15);
  } else {

  }
#line 3564
  bufp->allocated <<= 1;
#line 3564
  if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3564
    bufp->allocated = (unsigned long )(1L << 16);
  } else {

  }
#line 3564
  tmp___20 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3564
  bufp->buffer = (unsigned char *)tmp___20;
#line 3564
  if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3564
    return ((reg_errcode_t )12);
  } else {

  }
#line 3564
  if ((unsigned long )old_buffer___3 != (unsigned long )bufp->buffer) {
#line 3564
    b = bufp->buffer + (b - old_buffer___3);
#line 3564
    begalt = bufp->buffer + (begalt - old_buffer___3);
#line 3564
    if (fixup_alt_jump) {
#line 3564
      fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___3);
    } else {

    }
#line 3564
    if (laststart) {
#line 3564
      laststart = bufp->buffer + (laststart - old_buffer___3);
    } else {

    }
#line 3564
    if (pending_exact) {
#line 3564
      pending_exact = bufp->buffer + (pending_exact - old_buffer___3);
    } else {

    }
  } else {

  }
#line 3564
  break;
}
---------
SID [1759] -> Line 3564
#line 3564
break;
---------
SID [1758] -> Line -1

---------
SID [1757] -> Line 3564
#line 3564
if ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated) {

} else {
#line 3564
  break;
}
---------
SID [1756] -> Line 3564
#line 3564
while ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated) {
#line 3564
  while (1) {
#line 3564
    old_buffer___3 = bufp->buffer;
#line 3564
    if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3564
      return ((reg_errcode_t )15);
    } else {

    }
#line 3564
    bufp->allocated <<= 1;
#line 3564
    if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3564
      bufp->allocated = (unsigned long )(1L << 16);
    } else {

    }
#line 3564
    tmp___20 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3564
    bufp->buffer = (unsigned char *)tmp___20;
#line 3564
    if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3564
      return ((reg_errcode_t )12);
    } else {

    }
#line 3564
    if ((unsigned long )old_buffer___3 != (unsigned long )bufp->buffer) {
#line 3564
      b = bufp->buffer + (b - old_buffer___3);
#line 3564
      begalt = bufp->buffer + (begalt - old_buffer___3);
#line 3564
      if (fixup_alt_jump) {
#line 3564
        fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___3);
      } else {

      }
#line 3564
      if (laststart) {
#line 3564
        laststart = bufp->buffer + (laststart - old_buffer___3);
      } else {

      }
#line 3564
      if (pending_exact) {
#line 3564
        pending_exact = bufp->buffer + (pending_exact - old_buffer___3);
      } else {

      }
    } else {

    }
#line 3564
    break;
  }
}
---------
SID [1755] -> Line 3557
#line 3557
if (! zero_times_ok) {
#line 3564
  while ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated) {
#line 3564
    while (1) {
#line 3564
      old_buffer___3 = bufp->buffer;
#line 3564
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3564
        return ((reg_errcode_t )15);
      } else {

      }
#line 3564
      bufp->allocated <<= 1;
#line 3564
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3564
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 3564
      tmp___20 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3564
      bufp->buffer = (unsigned char *)tmp___20;
#line 3564
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3564
        return ((reg_errcode_t )12);
      } else {

      }
#line 3564
      if ((unsigned long )old_buffer___3 != (unsigned long )bufp->buffer) {
#line 3564
        b = bufp->buffer + (b - old_buffer___3);
#line 3564
        begalt = bufp->buffer + (begalt - old_buffer___3);
#line 3564
        if (fixup_alt_jump) {
#line 3564
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___3);
        } else {

        }
#line 3564
        if (laststart) {
#line 3564
          laststart = bufp->buffer + (laststart - old_buffer___3);
        } else {

        }
#line 3564
        if (pending_exact) {
#line 3564
          pending_exact = bufp->buffer + (pending_exact - old_buffer___3);
        } else {

        }
      } else {

      }
#line 3564
      break;
    }
  }
#line 3565
  insert_op1(18, laststart, ((laststart + 6) - laststart) - 3L, b);
#line 3566
  b += 3;
} else {

}
---------
SID [1754] -> Line 3555
#line 3555
b += 3;
---------
SID [1753] -> Line 3554
#line 3554
pending_exact = (unsigned char *)0;
---------
SID [1752] -> Line 3551
#line 3551
insert_op1(tmp___19, laststart, ((b + 3) - laststart) - 3L, b);
---------
SID [1751] -> Line 3551
#line 3551
tmp___19 = 14;
---------
SID [1750] -> Line 3551
#line 3551
tmp___19 = 15;
---------
SID [1749] -> Line 3551
#line 3551
if (keep_string_p) {
#line 3551
  tmp___19 = 15;
} else {
#line 3551
  tmp___19 = 14;
}
---------
SID [1748] -> Line 3550
#line 3550
break;
---------
SID [1747] -> Line -1

---------
SID [1746] -> Line -1

---------
SID [1745] -> Line 3550
#line 3550
pending_exact = bufp->buffer + (pending_exact - old_buffer___2);
---------
SID [1744] -> Line 3550
#line 3550
if (pending_exact) {
#line 3550
  pending_exact = bufp->buffer + (pending_exact - old_buffer___2);
} else {

}
---------
SID [1743] -> Line -1

---------
SID [1742] -> Line 3550
#line 3550
laststart = bufp->buffer + (laststart - old_buffer___2);
---------
SID [1741] -> Line 3550
#line 3550
if (laststart) {
#line 3550
  laststart = bufp->buffer + (laststart - old_buffer___2);
} else {

}
---------
SID [1740] -> Line -1

---------
SID [1739] -> Line 3550
#line 3550
fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___2);
---------
SID [1738] -> Line 3550
#line 3550
if (fixup_alt_jump) {
#line 3550
  fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___2);
} else {

}
---------
SID [1737] -> Line 3550
#line 3550
begalt = bufp->buffer + (begalt - old_buffer___2);
---------
SID [1736] -> Line 3550
#line 3550
b = bufp->buffer + (b - old_buffer___2);
---------
SID [1735] -> Line 3550
#line 3550
if ((unsigned long )old_buffer___2 != (unsigned long )bufp->buffer) {
#line 3550
  b = bufp->buffer + (b - old_buffer___2);
#line 3550
  begalt = bufp->buffer + (begalt - old_buffer___2);
#line 3550
  if (fixup_alt_jump) {
#line 3550
    fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___2);
  } else {

  }
#line 3550
  if (laststart) {
#line 3550
    laststart = bufp->buffer + (laststart - old_buffer___2);
  } else {

  }
#line 3550
  if (pending_exact) {
#line 3550
    pending_exact = bufp->buffer + (pending_exact - old_buffer___2);
  } else {

  }
} else {

}
---------
SID [1734] -> Line -1

---------
SID [1733] -> Line 3550
#line 3550
return ((reg_errcode_t )12);
---------
SID [1732] -> Line 3550
#line 3550
if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3550
  return ((reg_errcode_t )12);
} else {

}
---------
SID [1731] -> Line 3550
#line 3550
bufp->buffer = (unsigned char *)tmp___18;
---------
SID [1730] -> Line 3550
#line 3550
tmp___18 = realloc((void *)bufp->buffer, bufp->allocated);
---------
SID [1729] -> Line -1

---------
SID [1728] -> Line 3550
#line 3550
bufp->allocated = (unsigned long )(1L << 16);
---------
SID [1727] -> Line 3550
#line 3550
if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3550
  bufp->allocated = (unsigned long )(1L << 16);
} else {

}
---------
SID [1726] -> Line 3550
#line 3550
bufp->allocated <<= 1;
---------
SID [1725] -> Line -1

---------
SID [1724] -> Line 3550
#line 3550
return ((reg_errcode_t )15);
---------
SID [1723] -> Line 3550
#line 3550
if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3550
  return ((reg_errcode_t )15);
} else {

}
---------
SID [1722] -> Line 3550
#line 3550
old_buffer___2 = bufp->buffer;
---------
SID [1721] -> Line 3550
#line 3550
while (1) {
#line 3550
  old_buffer___2 = bufp->buffer;
#line 3550
  if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3550
    return ((reg_errcode_t )15);
  } else {

  }
#line 3550
  bufp->allocated <<= 1;
#line 3550
  if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3550
    bufp->allocated = (unsigned long )(1L << 16);
  } else {

  }
#line 3550
  tmp___18 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3550
  bufp->buffer = (unsigned char *)tmp___18;
#line 3550
  if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3550
    return ((reg_errcode_t )12);
  } else {

  }
#line 3550
  if ((unsigned long )old_buffer___2 != (unsigned long )bufp->buffer) {
#line 3550
    b = bufp->buffer + (b - old_buffer___2);
#line 3550
    begalt = bufp->buffer + (begalt - old_buffer___2);
#line 3550
    if (fixup_alt_jump) {
#line 3550
      fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___2);
    } else {

    }
#line 3550
    if (laststart) {
#line 3550
      laststart = bufp->buffer + (laststart - old_buffer___2);
    } else {

    }
#line 3550
    if (pending_exact) {
#line 3550
      pending_exact = bufp->buffer + (pending_exact - old_buffer___2);
    } else {

    }
  } else {

  }
#line 3550
  break;
}
---------
SID [1720] -> Line 3550
#line 3550
break;
---------
SID [1719] -> Line -1

---------
SID [1718] -> Line 3550
#line 3550
if ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated) {

} else {
#line 3550
  break;
}
---------
SID [1717] -> Line 3550
#line 3550
while ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated) {
#line 3550
  while (1) {
#line 3550
    old_buffer___2 = bufp->buffer;
#line 3550
    if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3550
      return ((reg_errcode_t )15);
    } else {

    }
#line 3550
    bufp->allocated <<= 1;
#line 3550
    if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3550
      bufp->allocated = (unsigned long )(1L << 16);
    } else {

    }
#line 3550
    tmp___18 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3550
    bufp->buffer = (unsigned char *)tmp___18;
#line 3550
    if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3550
      return ((reg_errcode_t )12);
    } else {

    }
#line 3550
    if ((unsigned long )old_buffer___2 != (unsigned long )bufp->buffer) {
#line 3550
      b = bufp->buffer + (b - old_buffer___2);
#line 3550
      begalt = bufp->buffer + (begalt - old_buffer___2);
#line 3550
      if (fixup_alt_jump) {
#line 3550
        fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___2);
      } else {

      }
#line 3550
      if (laststart) {
#line 3550
        laststart = bufp->buffer + (laststart - old_buffer___2);
      } else {

      }
#line 3550
      if (pending_exact) {
#line 3550
        pending_exact = bufp->buffer + (pending_exact - old_buffer___2);
      } else {

      }
    } else {

    }
#line 3550
    break;
  }
}
---------
SID [1716] -> Line -1

---------
SID [1715] -> Line 3545
#line 3545
b += 3;
---------
SID [1714] -> Line 3542
#line 3542
store_op1(17, b, ((laststart - 3) - b) - 3L);
---------
SID [1713] -> Line 3542
#line 3542
store_op1(17, b, ((laststart - 3) - b) - 3L);
---------
SID [1712] -> Line 3542
#line 3542
store_op1(17, b, ((laststart - 3) - b) - 3L);
---------
SID [1711] -> Line 3542
#line 3542
store_op1(17, b, ((laststart - 3) - b) - 3L);
---------
SID [1710] -> Line 3542
#line 3542
store_op1(17, b, ((laststart - 3) - b) - 3L);
---------
SID [1709] -> Line 3538
#line 3538
keep_string_p = (boolean )1;
---------
SID [1708] -> Line 3537
#line 3537
store_op1(12, b, (laststart - b) - 3L);
---------
SID [1707] -> Line 3532
#line 3532
if (! (syntax & (unsigned int )((((((1 << 1) << 1) << 1) << 1) << 1) << 1))) {
#line 3537
  store_op1(12, b, (laststart - b) - 3L);
#line 3538
  keep_string_p = (boolean )1;
} else {
#line 3542
  store_op1(17, b, ((laststart - 3) - b) - 3L);
}
---------
SID [1706] -> Line 3532
#line 3532
if (tmp___16 == tmp___17) {
#line 3532
  if (! (syntax & (unsigned int )((((((1 << 1) << 1) << 1) << 1) << 1) << 1))) {
#line 3537
    store_op1(12, b, (laststart - b) - 3L);
#line 3538
    keep_string_p = (boolean )1;
  } else {
#line 3542
    store_op1(17, b, ((laststart - 3) - b) - 3L);
  }
} else {
#line 3542
  store_op1(17, b, ((laststart - 3) - b) - 3L);
}
---------
SID [1705] -> Line 3532
#line 3532
tmp___17 = '\n';
---------
SID [1704] -> Line 3532
#line 3532
tmp___17 = (int )*(translate + (unsigned char )'\n');
---------
SID [1703] -> Line 3532
#line 3532
if (translate) {
#line 3532
  tmp___17 = (int )*(translate + (unsigned char )'\n');
} else {
#line 3532
  tmp___17 = '\n';
}
---------
SID [1702] -> Line 3532
#line 3532
tmp___16 = (int )*p;
---------
SID [1701] -> Line 3532
#line 3532
tmp___16 = (int )*(translate + (unsigned char )*p);
---------
SID [1700] -> Line 3532
#line 3532
if (translate) {
#line 3532
  tmp___16 = (int )*(translate + (unsigned char )*p);
} else {
#line 3532
  tmp___16 = (int )*p;
}
---------
SID [1699] -> Line 3532
#line 3532
if ((unsigned long )p < (unsigned long )pend) {
#line 3532
  if (translate) {
#line 3532
    tmp___16 = (int )*(translate + (unsigned char )*p);
  } else {
#line 3532
    tmp___16 = (int )*p;
  }
#line 3532
  if (translate) {
#line 3532
    tmp___17 = (int )*(translate + (unsigned char )'\n');
  } else {
#line 3532
    tmp___17 = '\n';
  }
#line 3532
  if (tmp___16 == tmp___17) {
#line 3532
    if (! (syntax & (unsigned int )((((((1 << 1) << 1) << 1) << 1) << 1) << 1))) {
#line 3537
      store_op1(12, b, (laststart - b) - 3L);
#line 3538
      keep_string_p = (boolean )1;
    } else {
#line 3542
      store_op1(17, b, ((laststart - 3) - b) - 3L);
    }
  } else {
#line 3542
    store_op1(17, b, ((laststart - 3) - b) - 3L);
  }
} else {
#line 3542
  store_op1(17, b, ((laststart - 3) - b) - 3L);
}
---------
SID [1698] -> Line 3532
#line 3532
if (zero_times_ok) {
#line 3532
  if ((unsigned long )p < (unsigned long )pend) {
#line 3532
    if (translate) {
#line 3532
      tmp___16 = (int )*(translate + (unsigned char )*p);
    } else {
#line 3532
      tmp___16 = (int )*p;
    }
#line 3532
    if (translate) {
#line 3532
      tmp___17 = (int )*(translate + (unsigned char )'\n');
    } else {
#line 3532
      tmp___17 = '\n';
    }
#line 3532
    if (tmp___16 == tmp___17) {
#line 3532
      if (! (syntax & (unsigned int )((((((1 << 1) << 1) << 1) << 1) << 1) << 1))) {
#line 3537
        store_op1(12, b, (laststart - b) - 3L);
#line 3538
        keep_string_p = (boolean )1;
      } else {
#line 3542
        store_op1(17, b, ((laststart - 3) - b) - 3L);
      }
    } else {
#line 3542
      store_op1(17, b, ((laststart - 3) - b) - 3L);
    }
  } else {
#line 3542
    store_op1(17, b, ((laststart - 3) - b) - 3L);
  }
} else {
#line 3542
  store_op1(17, b, ((laststart - 3) - b) - 3L);
}
---------
SID [1697] -> Line 3532
#line 3532
if (tmp___14 == tmp___15) {
#line 3532
  if (zero_times_ok) {
#line 3532
    if ((unsigned long )p < (unsigned long )pend) {
#line 3532
      if (translate) {
#line 3532
        tmp___16 = (int )*(translate + (unsigned char )*p);
      } else {
#line 3532
        tmp___16 = (int )*p;
      }
#line 3532
      if (translate) {
#line 3532
        tmp___17 = (int )*(translate + (unsigned char )'\n');
      } else {
#line 3532
        tmp___17 = '\n';
      }
#line 3532
      if (tmp___16 == tmp___17) {
#line 3532
        if (! (syntax & (unsigned int )((((((1 << 1) << 1) << 1) << 1) << 1) << 1))) {
#line 3537
          store_op1(12, b, (laststart - b) - 3L);
#line 3538
          keep_string_p = (boolean )1;
        } else {
#line 3542
          store_op1(17, b, ((laststart - 3) - b) - 3L);
        }
      } else {
#line 3542
        store_op1(17, b, ((laststart - 3) - b) - 3L);
      }
    } else {
#line 3542
      store_op1(17, b, ((laststart - 3) - b) - 3L);
    }
  } else {
#line 3542
    store_op1(17, b, ((laststart - 3) - b) - 3L);
  }
} else {
#line 3542
  store_op1(17, b, ((laststart - 3) - b) - 3L);
}
---------
SID [1696] -> Line 3532
#line 3532
tmp___15 = '.';
---------
SID [1695] -> Line 3532
#line 3532
tmp___15 = (int )*(translate + (unsigned char )'.');
---------
SID [1694] -> Line 3532
#line 3532
if (translate) {
#line 3532
  tmp___15 = (int )*(translate + (unsigned char )'.');
} else {
#line 3532
  tmp___15 = '.';
}
---------
SID [1693] -> Line 3532
#line 3532
tmp___14 = (int )*(p - 2);
---------
SID [1692] -> Line 3532
#line 3532
tmp___14 = (int )*(translate + (unsigned char )*(p - 2));
---------
SID [1691] -> Line 3532
#line 3532
if (translate) {
#line 3532
  tmp___14 = (int )*(translate + (unsigned char )*(p - 2));
} else {
#line 3532
  tmp___14 = (int )*(p - 2);
}
---------
SID [1690] -> Line 3525
#line 3525
break;
---------
SID [1689] -> Line -1

---------
SID [1688] -> Line -1

---------
SID [1687] -> Line 3525
#line 3525
pending_exact = bufp->buffer + (pending_exact - old_buffer___1);
---------
SID [1686] -> Line 3525
#line 3525
if (pending_exact) {
#line 3525
  pending_exact = bufp->buffer + (pending_exact - old_buffer___1);
} else {

}
---------
SID [1685] -> Line -1

---------
SID [1684] -> Line 3525
#line 3525
laststart = bufp->buffer + (laststart - old_buffer___1);
---------
SID [1683] -> Line 3525
#line 3525
if (laststart) {
#line 3525
  laststart = bufp->buffer + (laststart - old_buffer___1);
} else {

}
---------
SID [1682] -> Line -1

---------
SID [1681] -> Line 3525
#line 3525
fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___1);
---------
SID [1680] -> Line 3525
#line 3525
if (fixup_alt_jump) {
#line 3525
  fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___1);
} else {

}
---------
SID [1679] -> Line 3525
#line 3525
begalt = bufp->buffer + (begalt - old_buffer___1);
---------
SID [1678] -> Line 3525
#line 3525
b = bufp->buffer + (b - old_buffer___1);
---------
SID [1677] -> Line 3525
#line 3525
if ((unsigned long )old_buffer___1 != (unsigned long )bufp->buffer) {
#line 3525
  b = bufp->buffer + (b - old_buffer___1);
#line 3525
  begalt = bufp->buffer + (begalt - old_buffer___1);
#line 3525
  if (fixup_alt_jump) {
#line 3525
    fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___1);
  } else {

  }
#line 3525
  if (laststart) {
#line 3525
    laststart = bufp->buffer + (laststart - old_buffer___1);
  } else {

  }
#line 3525
  if (pending_exact) {
#line 3525
    pending_exact = bufp->buffer + (pending_exact - old_buffer___1);
  } else {

  }
} else {

}
---------
SID [1676] -> Line -1

---------
SID [1675] -> Line 3525
#line 3525
return ((reg_errcode_t )12);
---------
SID [1674] -> Line 3525
#line 3525
if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3525
  return ((reg_errcode_t )12);
} else {

}
---------
SID [1673] -> Line 3525
#line 3525
bufp->buffer = (unsigned char *)tmp___13;
---------
SID [1672] -> Line 3525
#line 3525
tmp___13 = realloc((void *)bufp->buffer, bufp->allocated);
---------
SID [1671] -> Line -1

---------
SID [1670] -> Line 3525
#line 3525
bufp->allocated = (unsigned long )(1L << 16);
---------
SID [1669] -> Line 3525
#line 3525
if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3525
  bufp->allocated = (unsigned long )(1L << 16);
} else {

}
---------
SID [1668] -> Line 3525
#line 3525
bufp->allocated <<= 1;
---------
SID [1667] -> Line -1

---------
SID [1666] -> Line 3525
#line 3525
return ((reg_errcode_t )15);
---------
SID [1665] -> Line 3525
#line 3525
if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3525
  return ((reg_errcode_t )15);
} else {

}
---------
SID [1664] -> Line 3525
#line 3525
old_buffer___1 = bufp->buffer;
---------
SID [1663] -> Line 3525
#line 3525
while (1) {
#line 3525
  old_buffer___1 = bufp->buffer;
#line 3525
  if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3525
    return ((reg_errcode_t )15);
  } else {

  }
#line 3525
  bufp->allocated <<= 1;
#line 3525
  if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3525
    bufp->allocated = (unsigned long )(1L << 16);
  } else {

  }
#line 3525
  tmp___13 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3525
  bufp->buffer = (unsigned char *)tmp___13;
#line 3525
  if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3525
    return ((reg_errcode_t )12);
  } else {

  }
#line 3525
  if ((unsigned long )old_buffer___1 != (unsigned long )bufp->buffer) {
#line 3525
    b = bufp->buffer + (b - old_buffer___1);
#line 3525
    begalt = bufp->buffer + (begalt - old_buffer___1);
#line 3525
    if (fixup_alt_jump) {
#line 3525
      fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___1);
    } else {

    }
#line 3525
    if (laststart) {
#line 3525
      laststart = bufp->buffer + (laststart - old_buffer___1);
    } else {

    }
#line 3525
    if (pending_exact) {
#line 3525
      pending_exact = bufp->buffer + (pending_exact - old_buffer___1);
    } else {

    }
  } else {

  }
#line 3525
  break;
}
---------
SID [1662] -> Line 3525
#line 3525
break;
---------
SID [1661] -> Line -1

---------
SID [1660] -> Line 3525
#line 3525
if ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated) {

} else {
#line 3525
  break;
}
---------
SID [1659] -> Line 3525
#line 3525
while ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated) {
#line 3525
  while (1) {
#line 3525
    old_buffer___1 = bufp->buffer;
#line 3525
    if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3525
      return ((reg_errcode_t )15);
    } else {

    }
#line 3525
    bufp->allocated <<= 1;
#line 3525
    if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3525
      bufp->allocated = (unsigned long )(1L << 16);
    } else {

    }
#line 3525
    tmp___13 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3525
    bufp->buffer = (unsigned char *)tmp___13;
#line 3525
    if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3525
      return ((reg_errcode_t )12);
    } else {

    }
#line 3525
    if ((unsigned long )old_buffer___1 != (unsigned long )bufp->buffer) {
#line 3525
      b = bufp->buffer + (b - old_buffer___1);
#line 3525
      begalt = bufp->buffer + (begalt - old_buffer___1);
#line 3525
      if (fixup_alt_jump) {
#line 3525
        fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___1);
      } else {

      }
#line 3525
      if (laststart) {
#line 3525
        laststart = bufp->buffer + (laststart - old_buffer___1);
      } else {

      }
#line 3525
      if (pending_exact) {
#line 3525
        pending_exact = bufp->buffer + (pending_exact - old_buffer___1);
      } else {

      }
    } else {

    }
#line 3525
    break;
  }
}
---------
SID [1658] -> Line 3511
#line 3511
if (many_times_ok) {
#line 3525
  while ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated) {
#line 3525
    while (1) {
#line 3525
      old_buffer___1 = bufp->buffer;
#line 3525
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3525
        return ((reg_errcode_t )15);
      } else {

      }
#line 3525
      bufp->allocated <<= 1;
#line 3525
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3525
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 3525
      tmp___13 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3525
      bufp->buffer = (unsigned char *)tmp___13;
#line 3525
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3525
        return ((reg_errcode_t )12);
      } else {

      }
#line 3525
      if ((unsigned long )old_buffer___1 != (unsigned long )bufp->buffer) {
#line 3525
        b = bufp->buffer + (b - old_buffer___1);
#line 3525
        begalt = bufp->buffer + (begalt - old_buffer___1);
#line 3525
        if (fixup_alt_jump) {
#line 3525
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___1);
        } else {

        }
#line 3525
        if (laststart) {
#line 3525
          laststart = bufp->buffer + (laststart - old_buffer___1);
        } else {

        }
#line 3525
        if (pending_exact) {
#line 3525
          pending_exact = bufp->buffer + (pending_exact - old_buffer___1);
        } else {

        }
      } else {

      }
#line 3525
      break;
    }
  }
#line 3532
  if (translate) {
#line 3532
    tmp___14 = (int )*(translate + (unsigned char )*(p - 2));
  } else {
#line 3532
    tmp___14 = (int )*(p - 2);
  }
#line 3532
  if (translate) {
#line 3532
    tmp___15 = (int )*(translate + (unsigned char )'.');
  } else {
#line 3532
    tmp___15 = '.';
  }
#line 3532
  if (tmp___14 == tmp___15) {
#line 3532
    if (zero_times_ok) {
#line 3532
      if ((unsigned long )p < (unsigned long )pend) {
#line 3532
        if (translate) {
#line 3532
          tmp___16 = (int )*(translate + (unsigned char )*p);
        } else {
#line 3532
          tmp___16 = (int )*p;
        }
#line 3532
        if (translate) {
#line 3532
          tmp___17 = (int )*(translate + (unsigned char )'\n');
        } else {
#line 3532
          tmp___17 = '\n';
        }
#line 3532
        if (tmp___16 == tmp___17) {
#line 3532
          if (! (syntax & (unsigned int )((((((1 << 1) << 1) << 1) << 1) << 1) << 1))) {
#line 3537
            store_op1(12, b, (laststart - b) - 3L);
#line 3538
            keep_string_p = (boolean )1;
          } else {
#line 3542
            store_op1(17, b, ((laststart - 3) - b) - 3L);
          }
        } else {
#line 3542
          store_op1(17, b, ((laststart - 3) - b) - 3L);
        }
      } else {
#line 3542
        store_op1(17, b, ((laststart - 3) - b) - 3L);
      }
    } else {
#line 3542
      store_op1(17, b, ((laststart - 3) - b) - 3L);
    }
  } else {
#line 3542
    store_op1(17, b, ((laststart - 3) - b) - 3L);
  }
#line 3545
  b += 3;
} else {

}
---------
SID [1657] -> Line -1

---------
SID [1656] -> Line 3507
#line 3507
break;
---------
SID [1655] -> Line 3506
#line 3506
if (! laststart) {
#line 3507
  break;
} else {

}
---------
SID [1654] -> Line 3498
#line 3498
break;
---------
SID [1653] -> Line 3497
#line 3497
p --;
---------
SID [1652] -> Line 3498
#line 3498
break;
---------
SID [1651] -> Line 3497
#line 3497
p --;
---------
SID [1650] -> Line 3493
#line 3493
c = c1;
---------
SID [1649] -> Line 3490
#line 3490
break;
---------
SID [1648] -> Line 3489
#line 3489
p --;
---------
SID [1647] -> Line 3488
#line 3488
p --;
---------
SID [1646] -> Line -1

---------
SID [1645] -> Line 3486
#line 3486
if ((int )c1 == 63) {

} else {
#line 3488
  p --;
#line 3489
  p --;
#line 3490
  break;
}
---------
SID [1644] -> Line -1

---------
SID [1643] -> Line 3486
#line 3486
if ((int )c1 == 43) {

} else
#line 3486
if ((int )c1 == 63) {

} else {
#line 3488
  p --;
#line 3489
  p --;
#line 3490
  break;
}
---------
SID [1642] -> Line 3485
#line 3485
break;
---------
SID [1641] -> Line -1

---------
SID [1640] -> Line 3485
#line 3485
c1 = (unsigned char )*(translate + c1);
---------
SID [1639] -> Line 3485
#line 3485
if (translate) {
#line 3485
  c1 = (unsigned char )*(translate + c1);
} else {

}
---------
SID [1638] -> Line 3485
#line 3485
c1 = (unsigned char )*tmp___12;
---------
SID [1637] -> Line 3485
#line 3485
p ++;
---------
SID [1636] -> Line 3485
#line 3485
tmp___12 = p;
---------
SID [1635] -> Line -1

---------
SID [1634] -> Line 3485
#line 3485
return ((reg_errcode_t )14);
---------
SID [1633] -> Line 3485
#line 3485
if ((unsigned long )p == (unsigned long )pend) {
#line 3485
  return ((reg_errcode_t )14);
} else {

}
---------
SID [1632] -> Line 3485
#line 3485
while (1) {
#line 3485
  if ((unsigned long )p == (unsigned long )pend) {
#line 3485
    return ((reg_errcode_t )14);
  } else {

  }
#line 3485
  tmp___12 = p;
#line 3485
  p ++;
#line 3485
  c1 = (unsigned char )*tmp___12;
#line 3485
  if (translate) {
#line 3485
    c1 = (unsigned char )*(translate + c1);
  } else {

  }
#line 3485
  break;
}
---------
SID [1631] -> Line -1

---------
SID [1630] -> Line 3483
#line 3483
return ((reg_errcode_t )5);
---------
SID [1629] -> Line 3483
#line 3483
if ((unsigned long )p == (unsigned long )pend) {
#line 3483
  return ((reg_errcode_t )5);
} else {

}
---------
SID [1628] -> Line 3481
#line 3481
if ((int )c == 92) {
#line 3483
  if ((unsigned long )p == (unsigned long )pend) {
#line 3483
    return ((reg_errcode_t )5);
  } else {

  }
#line 3485
  while (1) {
#line 3485
    if ((unsigned long )p == (unsigned long )pend) {
#line 3485
      return ((reg_errcode_t )14);
    } else {

    }
#line 3485
    tmp___12 = p;
#line 3485
    p ++;
#line 3485
    c1 = (unsigned char )*tmp___12;
#line 3485
    if (translate) {
#line 3485
      c1 = (unsigned char )*(translate + c1);
    } else {

    }
#line 3485
    break;
  }
#line 3486
  if ((int )c1 == 43) {

  } else
#line 3486
  if ((int )c1 == 63) {

  } else {
#line 3488
    p --;
#line 3489
    p --;
#line 3490
    break;
  }
#line 3493
  c = c1;
} else {
#line 3497
  p --;
#line 3498
  break;
}
---------
SID [1627] -> Line 3481
_L___1: /* CIL Label */ 
#line 3481
if (syntax & (unsigned int )(1 << 1)) {
#line 3481
  if ((int )c == 92) {
#line 3483
    if ((unsigned long )p == (unsigned long )pend) {
#line 3483
      return ((reg_errcode_t )5);
    } else {

    }
#line 3485
    while (1) {
#line 3485
      if ((unsigned long )p == (unsigned long )pend) {
#line 3485
        return ((reg_errcode_t )14);
      } else {

      }
#line 3485
      tmp___12 = p;
#line 3485
      p ++;
#line 3485
      c1 = (unsigned char )*tmp___12;
#line 3485
      if (translate) {
#line 3485
        c1 = (unsigned char )*(translate + c1);
      } else {

      }
#line 3485
      break;
    }
#line 3486
    if ((int )c1 == 43) {

    } else
#line 3486
    if ((int )c1 == 63) {

    } else {
#line 3488
      p --;
#line 3489
      p --;
#line 3490
      break;
    }
#line 3493
    c = c1;
  } else {
#line 3497
    p --;
#line 3498
    break;
  }
} else {
#line 3497
  p --;
#line 3498
  break;
}
---------
SID [1626] -> Line 3477
#line 3477
goto _L___1;
---------
SID [1625] -> Line -1

---------
SID [1624] -> Line 3477
#line 3477
if ((int )c == 63) {

} else {
#line 3477
  goto _L___1;
}
---------
SID [1623] -> Line -1

---------
SID [1622] -> Line 3477
#line 3477
if ((int )c == 43) {

} else
#line 3477
if ((int )c == 63) {

} else {
#line 3477
  goto _L___1;
}
---------
SID [1621] -> Line 3477
#line 3477
if (! (syntax & (unsigned int )(1 << 1))) {
#line 3477
  if ((int )c == 43) {

  } else
#line 3477
  if ((int )c == 63) {

  } else {
#line 3477
    goto _L___1;
  }
} else
_L___1: /* CIL Label */ 
#line 3481
if (syntax & (unsigned int )(1 << 1)) {
#line 3481
  if ((int )c == 92) {
#line 3483
    if ((unsigned long )p == (unsigned long )pend) {
#line 3483
      return ((reg_errcode_t )5);
    } else {

    }
#line 3485
    while (1) {
#line 3485
      if ((unsigned long )p == (unsigned long )pend) {
#line 3485
        return ((reg_errcode_t )14);
      } else {

      }
#line 3485
      tmp___12 = p;
#line 3485
      p ++;
#line 3485
      c1 = (unsigned char )*tmp___12;
#line 3485
      if (translate) {
#line 3485
        c1 = (unsigned char )*(translate + c1);
      } else {

      }
#line 3485
      break;
    }
#line 3486
    if ((int )c1 == 43) {

    } else
#line 3486
    if ((int )c1 == 63) {

    } else {
#line 3488
      p --;
#line 3489
      p --;
#line 3490
      break;
    }
#line 3493
    c = c1;
  } else {
#line 3497
    p --;
#line 3498
    break;
  }
} else {
#line 3497
  p --;
#line 3498
  break;
}
---------
SID [1620] -> Line -1

---------
SID [1619] -> Line 3477
#line 3477
if ((int )c == 42) {

} else
#line 3477
if (! (syntax & (unsigned int )(1 << 1))) {
#line 3477
  if ((int )c == 43) {

  } else
#line 3477
  if ((int )c == 63) {

  } else {
#line 3477
    goto _L___1;
  }
} else
_L___1: /* CIL Label */ 
#line 3481
if (syntax & (unsigned int )(1 << 1)) {
#line 3481
  if ((int )c == 92) {
#line 3483
    if ((unsigned long )p == (unsigned long )pend) {
#line 3483
      return ((reg_errcode_t )5);
    } else {

    }
#line 3485
    while (1) {
#line 3485
      if ((unsigned long )p == (unsigned long )pend) {
#line 3485
        return ((reg_errcode_t )14);
      } else {

      }
#line 3485
      tmp___12 = p;
#line 3485
      p ++;
#line 3485
      c1 = (unsigned char )*tmp___12;
#line 3485
      if (translate) {
#line 3485
        c1 = (unsigned char )*(translate + c1);
      } else {

      }
#line 3485
      break;
    }
#line 3486
    if ((int )c1 == 43) {

    } else
#line 3486
    if ((int )c1 == 63) {

    } else {
#line 3488
      p --;
#line 3489
      p --;
#line 3490
      break;
    }
#line 3493
    c = c1;
  } else {
#line 3497
    p --;
#line 3498
    break;
  }
} else {
#line 3497
  p --;
#line 3498
  break;
}
---------
SID [1618] -> Line 3475
#line 3475
break;
---------
SID [1617] -> Line -1

---------
SID [1616] -> Line 3475
#line 3475
c = (unsigned char )*(translate + c);
---------
SID [1615] -> Line 3475
#line 3475
if (translate) {
#line 3475
  c = (unsigned char )*(translate + c);
} else {

}
---------
SID [1614] -> Line 3475
#line 3475
c = (unsigned char )*tmp___11;
---------
SID [1613] -> Line 3475
#line 3475
p ++;
---------
SID [1612] -> Line 3475
#line 3475
tmp___11 = p;
---------
SID [1611] -> Line -1

---------
SID [1610] -> Line 3475
#line 3475
return ((reg_errcode_t )14);
---------
SID [1609] -> Line 3475
#line 3475
if ((unsigned long )p == (unsigned long )pend) {
#line 3475
  return ((reg_errcode_t )14);
} else {

}
---------
SID [1608] -> Line 3475
#line 3475
while (1) {
#line 3475
  if ((unsigned long )p == (unsigned long )pend) {
#line 3475
    return ((reg_errcode_t )14);
  } else {

  }
#line 3475
  tmp___11 = p;
#line 3475
  p ++;
#line 3475
  c = (unsigned char )*tmp___11;
#line 3475
  if (translate) {
#line 3475
    c = (unsigned char )*(translate + c);
  } else {

  }
#line 3475
  break;
}
---------
SID [1607] -> Line -1

---------
SID [1606] -> Line 3473
#line 3473
break;
---------
SID [1605] -> Line 3472
#line 3472
if ((unsigned long )p == (unsigned long )pend) {
#line 3473
  break;
} else {

}
---------
SID [1604] -> Line 3470
#line 3470
many_times_ok = (char )((int )many_times_ok | ((int )c != 63));
---------
SID [1603] -> Line 3469
#line 3469
zero_times_ok = (char )((int )zero_times_ok | ((int )c != 43));
---------
SID [1602] -> Line 3467
#line 3467
while (1) {
#line 3469
  zero_times_ok = (char )((int )zero_times_ok | ((int )c != 43));
#line 3470
  many_times_ok = (char )((int )many_times_ok | ((int )c != 63));
#line 3472
  if ((unsigned long )p == (unsigned long )pend) {
#line 3473
    break;
  } else {

  }
#line 3475
  while (1) {
#line 3475
    if ((unsigned long )p == (unsigned long )pend) {
#line 3475
      return ((reg_errcode_t )14);
    } else {

    }
#line 3475
    tmp___11 = p;
#line 3475
    p ++;
#line 3475
    c = (unsigned char )*tmp___11;
#line 3475
    if (translate) {
#line 3475
      c = (unsigned char )*(translate + c);
    } else {

    }
#line 3475
    break;
  }
#line 3477
  if ((int )c == 42) {

  } else
#line 3477
  if (! (syntax & (unsigned int )(1 << 1))) {
#line 3477
    if ((int )c == 43) {

    } else
#line 3477
    if ((int )c == 63) {

    } else {
#line 3477
      goto _L___1;
    }
  } else
  _L___1: /* CIL Label */ 
#line 3481
  if (syntax & (unsigned int )(1 << 1)) {
#line 3481
    if ((int )c == 92) {
#line 3483
      if ((unsigned long )p == (unsigned long )pend) {
#line 3483
        return ((reg_errcode_t )5);
      } else {

      }
#line 3485
      while (1) {
#line 3485
        if ((unsigned long )p == (unsigned long )pend) {
#line 3485
          return ((reg_errcode_t )14);
        } else {

        }
#line 3485
        tmp___12 = p;
#line 3485
        p ++;
#line 3485
        c1 = (unsigned char )*tmp___12;
#line 3485
        if (translate) {
#line 3485
          c1 = (unsigned char )*(translate + c1);
        } else {

        }
#line 3485
        break;
      }
#line 3486
      if ((int )c1 == 43) {

      } else
#line 3486
      if ((int )c1 == 63) {

      } else {
#line 3488
        p --;
#line 3489
        p --;
#line 3490
        break;
      }
#line 3493
      c = c1;
    } else {
#line 3497
      p --;
#line 3498
      break;
    }
  } else {
#line 3497
    p --;
#line 3498
    break;
  }
}
---------
SID [1601] -> Line 3460
#line 3460
many_times_ok = (char)0;
---------
SID [1600] -> Line 3460
#line 3460
zero_times_ok = (char)0;
---------
SID [1599] -> Line 3457
#line 3457
keep_string_p = (boolean )0;
---------
SID [1598] -> Line -1

---------
SID [1597] -> Line -1

---------
SID [1596] -> Line 3452
#line 3452
goto normal_char;
---------
SID [1595] -> Line 3451
#line 3451
if (! (syntax & (unsigned int )((((1 << 1) << 1) << 1) << 1))) {
#line 3452
  goto normal_char;
} else {

}
---------
SID [1594] -> Line 3450
#line 3450
return ((reg_errcode_t )13);
---------
SID [1593] -> Line 3449
#line 3449
if (syntax & (unsigned int )(((((1 << 1) << 1) << 1) << 1) << 1)) {
#line 3450
  return ((reg_errcode_t )13);
} else
#line 3451
if (! (syntax & (unsigned int )((((1 << 1) << 1) << 1) << 1))) {
#line 3452
  goto normal_char;
} else {

}
---------
SID [1592] -> Line 3447
case 42: 
handle_plus: 
#line 3447
if (! laststart) {
#line 3449
  if (syntax & (unsigned int )(((((1 << 1) << 1) << 1) << 1) << 1)) {
#line 3450
    return ((reg_errcode_t )13);
  } else
#line 3451
  if (! (syntax & (unsigned int )((((1 << 1) << 1) << 1) << 1))) {
#line 3452
    goto normal_char;
  } else {

  }
} else {

}
---------
SID [1591] -> Line -1

---------
SID [1590] -> Line 3443
#line 3443
goto normal_char;
---------
SID [1589] -> Line 3441
#line 3441
if (syntax & (unsigned int )((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3443
  goto normal_char;
} else {

}
---------
SID [1588] -> Line 3443
#line 3443
goto normal_char;
---------
SID [1587] -> Line 3441
case 63: 
case 43: 
#line 3441
if (syntax & (unsigned int )(1 << 1)) {
#line 3443
  goto normal_char;
} else
#line 3441
if (syntax & (unsigned int )((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3443
  goto normal_char;
} else {

}
---------
SID [1586] -> Line 3436
#line 3436
break;
---------
SID [1585] -> Line 3434
#line 3434
goto normal_char;
---------
SID [1584] -> Line 3432
#line 3432
break;
---------
SID [1583] -> Line 3432
#line 3432
*tmp___9 = (unsigned char)9;
---------
SID [1582] -> Line 3432
#line 3432
b ++;
---------
SID [1581] -> Line 3432
#line 3432
tmp___9 = b;
---------
SID [1580] -> Line 3432
#line 3432
break;
---------
SID [1579] -> Line -1

---------
SID [1578] -> Line -1

---------
SID [1577] -> Line 3432
#line 3432
pending_exact = bufp->buffer + (pending_exact - old_buffer___0);
---------
SID [1576] -> Line 3432
#line 3432
if (pending_exact) {
#line 3432
  pending_exact = bufp->buffer + (pending_exact - old_buffer___0);
} else {

}
---------
SID [1575] -> Line -1

---------
SID [1574] -> Line 3432
#line 3432
laststart = bufp->buffer + (laststart - old_buffer___0);
---------
SID [1573] -> Line 3432
#line 3432
if (laststart) {
#line 3432
  laststart = bufp->buffer + (laststart - old_buffer___0);
} else {

}
---------
SID [1572] -> Line -1

---------
SID [1571] -> Line 3432
#line 3432
fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___0);
---------
SID [1570] -> Line 3432
#line 3432
if (fixup_alt_jump) {
#line 3432
  fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___0);
} else {

}
---------
SID [1569] -> Line 3432
#line 3432
begalt = bufp->buffer + (begalt - old_buffer___0);
---------
SID [1568] -> Line 3432
#line 3432
b = bufp->buffer + (b - old_buffer___0);
---------
SID [1567] -> Line 3432
#line 3432
if ((unsigned long )old_buffer___0 != (unsigned long )bufp->buffer) {
#line 3432
  b = bufp->buffer + (b - old_buffer___0);
#line 3432
  begalt = bufp->buffer + (begalt - old_buffer___0);
#line 3432
  if (fixup_alt_jump) {
#line 3432
    fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___0);
  } else {

  }
#line 3432
  if (laststart) {
#line 3432
    laststart = bufp->buffer + (laststart - old_buffer___0);
  } else {

  }
#line 3432
  if (pending_exact) {
#line 3432
    pending_exact = bufp->buffer + (pending_exact - old_buffer___0);
  } else {

  }
} else {

}
---------
SID [1566] -> Line -1

---------
SID [1565] -> Line 3432
#line 3432
return ((reg_errcode_t )12);
---------
SID [1564] -> Line 3432
#line 3432
if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3432
  return ((reg_errcode_t )12);
} else {

}
---------
SID [1563] -> Line 3432
#line 3432
bufp->buffer = (unsigned char *)tmp___8;
---------
SID [1562] -> Line 3432
#line 3432
tmp___8 = realloc((void *)bufp->buffer, bufp->allocated);
---------
SID [1561] -> Line -1

---------
SID [1560] -> Line 3432
#line 3432
bufp->allocated = (unsigned long )(1L << 16);
---------
SID [1559] -> Line 3432
#line 3432
if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3432
  bufp->allocated = (unsigned long )(1L << 16);
} else {

}
---------
SID [1558] -> Line 3432
#line 3432
bufp->allocated <<= 1;
---------
SID [1557] -> Line -1

---------
SID [1556] -> Line 3432
#line 3432
return ((reg_errcode_t )15);
---------
SID [1555] -> Line 3432
#line 3432
if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3432
  return ((reg_errcode_t )15);
} else {

}
---------
SID [1554] -> Line 3432
#line 3432
old_buffer___0 = bufp->buffer;
---------
SID [1553] -> Line 3432
#line 3432
while (1) {
#line 3432
  old_buffer___0 = bufp->buffer;
#line 3432
  if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3432
    return ((reg_errcode_t )15);
  } else {

  }
#line 3432
  bufp->allocated <<= 1;
#line 3432
  if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3432
    bufp->allocated = (unsigned long )(1L << 16);
  } else {

  }
#line 3432
  tmp___8 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3432
  bufp->buffer = (unsigned char *)tmp___8;
#line 3432
  if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3432
    return ((reg_errcode_t )12);
  } else {

  }
#line 3432
  if ((unsigned long )old_buffer___0 != (unsigned long )bufp->buffer) {
#line 3432
    b = bufp->buffer + (b - old_buffer___0);
#line 3432
    begalt = bufp->buffer + (begalt - old_buffer___0);
#line 3432
    if (fixup_alt_jump) {
#line 3432
      fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___0);
    } else {

    }
#line 3432
    if (laststart) {
#line 3432
      laststart = bufp->buffer + (laststart - old_buffer___0);
    } else {

    }
#line 3432
    if (pending_exact) {
#line 3432
      pending_exact = bufp->buffer + (pending_exact - old_buffer___0);
    } else {

    }
  } else {

  }
#line 3432
  break;
}
---------
SID [1552] -> Line 3432
#line 3432
break;
---------
SID [1551] -> Line -1

---------
SID [1550] -> Line 3432
#line 3432
if ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {

} else {
#line 3432
  break;
}
---------
SID [1549] -> Line 3432
#line 3432
while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 3432
  while (1) {
#line 3432
    old_buffer___0 = bufp->buffer;
#line 3432
    if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3432
      return ((reg_errcode_t )15);
    } else {

    }
#line 3432
    bufp->allocated <<= 1;
#line 3432
    if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3432
      bufp->allocated = (unsigned long )(1L << 16);
    } else {

    }
#line 3432
    tmp___8 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3432
    bufp->buffer = (unsigned char *)tmp___8;
#line 3432
    if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3432
      return ((reg_errcode_t )12);
    } else {

    }
#line 3432
    if ((unsigned long )old_buffer___0 != (unsigned long )bufp->buffer) {
#line 3432
      b = bufp->buffer + (b - old_buffer___0);
#line 3432
      begalt = bufp->buffer + (begalt - old_buffer___0);
#line 3432
      if (fixup_alt_jump) {
#line 3432
        fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___0);
      } else {

      }
#line 3432
      if (laststart) {
#line 3432
        laststart = bufp->buffer + (laststart - old_buffer___0);
      } else {

      }
#line 3432
      if (pending_exact) {
#line 3432
        pending_exact = bufp->buffer + (pending_exact - old_buffer___0);
      } else {

      }
    } else {

    }
#line 3432
    break;
  }
}
---------
SID [1548] -> Line 3432
_L___0: /* CIL Label */ 
#line 3432
while (1) {
#line 3432
  while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 3432
    while (1) {
#line 3432
      old_buffer___0 = bufp->buffer;
#line 3432
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3432
        return ((reg_errcode_t )15);
      } else {

      }
#line 3432
      bufp->allocated <<= 1;
#line 3432
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3432
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 3432
      tmp___8 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3432
      bufp->buffer = (unsigned char *)tmp___8;
#line 3432
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3432
        return ((reg_errcode_t )12);
      } else {

      }
#line 3432
      if ((unsigned long )old_buffer___0 != (unsigned long )bufp->buffer) {
#line 3432
        b = bufp->buffer + (b - old_buffer___0);
#line 3432
        begalt = bufp->buffer + (begalt - old_buffer___0);
#line 3432
        if (fixup_alt_jump) {
#line 3432
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___0);
        } else {

        }
#line 3432
        if (laststart) {
#line 3432
          laststart = bufp->buffer + (laststart - old_buffer___0);
        } else {

        }
#line 3432
        if (pending_exact) {
#line 3432
          pending_exact = bufp->buffer + (pending_exact - old_buffer___0);
        } else {

        }
      } else {

      }
#line 3432
      break;
    }
  }
#line 3432
  tmp___9 = b;
#line 3432
  b ++;
#line 3432
  *tmp___9 = (unsigned char)9;
#line 3432
  break;
}
---------
SID [1547] -> Line 3426
#line 3426
if (tmp___10) {
  _L___0: /* CIL Label */ 
#line 3432
  while (1) {
#line 3432
    while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 3432
      while (1) {
#line 3432
        old_buffer___0 = bufp->buffer;
#line 3432
        if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3432
          return ((reg_errcode_t )15);
        } else {

        }
#line 3432
        bufp->allocated <<= 1;
#line 3432
        if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3432
          bufp->allocated = (unsigned long )(1L << 16);
        } else {

        }
#line 3432
        tmp___8 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3432
        bufp->buffer = (unsigned char *)tmp___8;
#line 3432
        if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3432
          return ((reg_errcode_t )12);
        } else {

        }
#line 3432
        if ((unsigned long )old_buffer___0 != (unsigned long )bufp->buffer) {
#line 3432
          b = bufp->buffer + (b - old_buffer___0);
#line 3432
          begalt = bufp->buffer + (begalt - old_buffer___0);
#line 3432
          if (fixup_alt_jump) {
#line 3432
            fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___0);
          } else {

          }
#line 3432
          if (laststart) {
#line 3432
            laststart = bufp->buffer + (laststart - old_buffer___0);
          } else {

          }
#line 3432
          if (pending_exact) {
#line 3432
            pending_exact = bufp->buffer + (pending_exact - old_buffer___0);
          } else {

          }
        } else {

        }
#line 3432
        break;
      }
    }
#line 3432
    tmp___9 = b;
#line 3432
    b ++;
#line 3432
    *tmp___9 = (unsigned char)9;
#line 3432
    break;
  }
} else {
#line 3434
  goto normal_char;
}
---------
SID [1546] -> Line 3426
#line 3426
tmp___10 = at_endline_loc_p(p, pend, syntax);
---------
SID [1545] -> Line 3426
#line 3426
goto _L___0;
---------
SID [1544] -> Line 3426
#line 3426
if (syntax & (unsigned int )(((1 << 1) << 1) << 1)) {
#line 3426
  goto _L___0;
} else {
#line 3426
  tmp___10 = at_endline_loc_p(p, pend, syntax);
#line 3426
  if (tmp___10) {
    _L___0: /* CIL Label */ 
#line 3432
    while (1) {
#line 3432
      while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 3432
        while (1) {
#line 3432
          old_buffer___0 = bufp->buffer;
#line 3432
          if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3432
            return ((reg_errcode_t )15);
          } else {

          }
#line 3432
          bufp->allocated <<= 1;
#line 3432
          if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3432
            bufp->allocated = (unsigned long )(1L << 16);
          } else {

          }
#line 3432
          tmp___8 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3432
          bufp->buffer = (unsigned char *)tmp___8;
#line 3432
          if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3432
            return ((reg_errcode_t )12);
          } else {

          }
#line 3432
          if ((unsigned long )old_buffer___0 != (unsigned long )bufp->buffer) {
#line 3432
            b = bufp->buffer + (b - old_buffer___0);
#line 3432
            begalt = bufp->buffer + (begalt - old_buffer___0);
#line 3432
            if (fixup_alt_jump) {
#line 3432
              fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___0);
            } else {

            }
#line 3432
            if (laststart) {
#line 3432
              laststart = bufp->buffer + (laststart - old_buffer___0);
            } else {

            }
#line 3432
            if (pending_exact) {
#line 3432
              pending_exact = bufp->buffer + (pending_exact - old_buffer___0);
            } else {

            }
          } else {

          }
#line 3432
          break;
        }
      }
#line 3432
      tmp___9 = b;
#line 3432
      b ++;
#line 3432
      *tmp___9 = (unsigned char)9;
#line 3432
      break;
    }
  } else {
#line 3434
    goto normal_char;
  }
}
---------
SID [1543] -> Line 3426
#line 3426
goto _L___0;
---------
SID [1542] -> Line 3426
case 36: 
#line 3426
if ((unsigned long )p == (unsigned long )pend) {
#line 3426
  goto _L___0;
} else
#line 3426
if (syntax & (unsigned int )(((1 << 1) << 1) << 1)) {
#line 3426
  goto _L___0;
} else {
#line 3426
  tmp___10 = at_endline_loc_p(p, pend, syntax);
#line 3426
  if (tmp___10) {
    _L___0: /* CIL Label */ 
#line 3432
    while (1) {
#line 3432
      while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 3432
        while (1) {
#line 3432
          old_buffer___0 = bufp->buffer;
#line 3432
          if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3432
            return ((reg_errcode_t )15);
          } else {

          }
#line 3432
          bufp->allocated <<= 1;
#line 3432
          if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3432
            bufp->allocated = (unsigned long )(1L << 16);
          } else {

          }
#line 3432
          tmp___8 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3432
          bufp->buffer = (unsigned char *)tmp___8;
#line 3432
          if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3432
            return ((reg_errcode_t )12);
          } else {

          }
#line 3432
          if ((unsigned long )old_buffer___0 != (unsigned long )bufp->buffer) {
#line 3432
            b = bufp->buffer + (b - old_buffer___0);
#line 3432
            begalt = bufp->buffer + (begalt - old_buffer___0);
#line 3432
            if (fixup_alt_jump) {
#line 3432
              fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___0);
            } else {

            }
#line 3432
            if (laststart) {
#line 3432
              laststart = bufp->buffer + (laststart - old_buffer___0);
            } else {

            }
#line 3432
            if (pending_exact) {
#line 3432
              pending_exact = bufp->buffer + (pending_exact - old_buffer___0);
            } else {

            }
          } else {

          }
#line 3432
          break;
        }
      }
#line 3432
      tmp___9 = b;
#line 3432
      b ++;
#line 3432
      *tmp___9 = (unsigned char)9;
#line 3432
      break;
    }
  } else {
#line 3434
    goto normal_char;
  }
}
---------
SID [1541] -> Line 3421
#line 3421
break;
---------
SID [1540] -> Line 3419
#line 3419
goto normal_char;
---------
SID [1539] -> Line 3417
#line 3417
break;
---------
SID [1538] -> Line 3417
#line 3417
*tmp___6 = (unsigned char)8;
---------
SID [1537] -> Line 3417
#line 3417
b ++;
---------
SID [1536] -> Line 3417
#line 3417
tmp___6 = b;
---------
SID [1535] -> Line 3417
#line 3417
break;
---------
SID [1534] -> Line -1

---------
SID [1533] -> Line -1

---------
SID [1532] -> Line 3417
#line 3417
pending_exact = bufp->buffer + (pending_exact - old_buffer);
---------
SID [1531] -> Line 3417
#line 3417
if (pending_exact) {
#line 3417
  pending_exact = bufp->buffer + (pending_exact - old_buffer);
} else {

}
---------
SID [1530] -> Line -1

---------
SID [1529] -> Line 3417
#line 3417
laststart = bufp->buffer + (laststart - old_buffer);
---------
SID [1528] -> Line 3417
#line 3417
if (laststart) {
#line 3417
  laststart = bufp->buffer + (laststart - old_buffer);
} else {

}
---------
SID [1527] -> Line -1

---------
SID [1526] -> Line 3417
#line 3417
fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer);
---------
SID [1525] -> Line 3417
#line 3417
if (fixup_alt_jump) {
#line 3417
  fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer);
} else {

}
---------
SID [1524] -> Line 3417
#line 3417
begalt = bufp->buffer + (begalt - old_buffer);
---------
SID [1523] -> Line 3417
#line 3417
b = bufp->buffer + (b - old_buffer);
---------
SID [1522] -> Line 3417
#line 3417
if ((unsigned long )old_buffer != (unsigned long )bufp->buffer) {
#line 3417
  b = bufp->buffer + (b - old_buffer);
#line 3417
  begalt = bufp->buffer + (begalt - old_buffer);
#line 3417
  if (fixup_alt_jump) {
#line 3417
    fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer);
  } else {

  }
#line 3417
  if (laststart) {
#line 3417
    laststart = bufp->buffer + (laststart - old_buffer);
  } else {

  }
#line 3417
  if (pending_exact) {
#line 3417
    pending_exact = bufp->buffer + (pending_exact - old_buffer);
  } else {

  }
} else {

}
---------
SID [1521] -> Line -1

---------
SID [1520] -> Line 3417
#line 3417
return ((reg_errcode_t )12);
---------
SID [1519] -> Line 3417
#line 3417
if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3417
  return ((reg_errcode_t )12);
} else {

}
---------
SID [1518] -> Line 3417
#line 3417
bufp->buffer = (unsigned char *)tmp___5;
---------
SID [1517] -> Line 3417
#line 3417
tmp___5 = realloc((void *)bufp->buffer, bufp->allocated);
---------
SID [1516] -> Line -1

---------
SID [1515] -> Line 3417
#line 3417
bufp->allocated = (unsigned long )(1L << 16);
---------
SID [1514] -> Line 3417
#line 3417
if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3417
  bufp->allocated = (unsigned long )(1L << 16);
} else {

}
---------
SID [1513] -> Line 3417
#line 3417
bufp->allocated <<= 1;
---------
SID [1512] -> Line -1

---------
SID [1511] -> Line 3417
#line 3417
return ((reg_errcode_t )15);
---------
SID [1510] -> Line 3417
#line 3417
if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3417
  return ((reg_errcode_t )15);
} else {

}
---------
SID [1509] -> Line 3417
#line 3417
old_buffer = bufp->buffer;
---------
SID [1508] -> Line 3417
#line 3417
while (1) {
#line 3417
  old_buffer = bufp->buffer;
#line 3417
  if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3417
    return ((reg_errcode_t )15);
  } else {

  }
#line 3417
  bufp->allocated <<= 1;
#line 3417
  if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3417
    bufp->allocated = (unsigned long )(1L << 16);
  } else {

  }
#line 3417
  tmp___5 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3417
  bufp->buffer = (unsigned char *)tmp___5;
#line 3417
  if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3417
    return ((reg_errcode_t )12);
  } else {

  }
#line 3417
  if ((unsigned long )old_buffer != (unsigned long )bufp->buffer) {
#line 3417
    b = bufp->buffer + (b - old_buffer);
#line 3417
    begalt = bufp->buffer + (begalt - old_buffer);
#line 3417
    if (fixup_alt_jump) {
#line 3417
      fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer);
    } else {

    }
#line 3417
    if (laststart) {
#line 3417
      laststart = bufp->buffer + (laststart - old_buffer);
    } else {

    }
#line 3417
    if (pending_exact) {
#line 3417
      pending_exact = bufp->buffer + (pending_exact - old_buffer);
    } else {

    }
  } else {

  }
#line 3417
  break;
}
---------
SID [1507] -> Line 3417
#line 3417
break;
---------
SID [1506] -> Line -1

---------
SID [1505] -> Line 3417
#line 3417
if ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {

} else {
#line 3417
  break;
}
---------
SID [1504] -> Line 3417
#line 3417
while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 3417
  while (1) {
#line 3417
    old_buffer = bufp->buffer;
#line 3417
    if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3417
      return ((reg_errcode_t )15);
    } else {

    }
#line 3417
    bufp->allocated <<= 1;
#line 3417
    if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3417
      bufp->allocated = (unsigned long )(1L << 16);
    } else {

    }
#line 3417
    tmp___5 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3417
    bufp->buffer = (unsigned char *)tmp___5;
#line 3417
    if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3417
      return ((reg_errcode_t )12);
    } else {

    }
#line 3417
    if ((unsigned long )old_buffer != (unsigned long )bufp->buffer) {
#line 3417
      b = bufp->buffer + (b - old_buffer);
#line 3417
      begalt = bufp->buffer + (begalt - old_buffer);
#line 3417
      if (fixup_alt_jump) {
#line 3417
        fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer);
      } else {

      }
#line 3417
      if (laststart) {
#line 3417
        laststart = bufp->buffer + (laststart - old_buffer);
      } else {

      }
#line 3417
      if (pending_exact) {
#line 3417
        pending_exact = bufp->buffer + (pending_exact - old_buffer);
      } else {

      }
    } else {

    }
#line 3417
    break;
  }
}
---------
SID [1503] -> Line 3417
_L: /* CIL Label */ 
#line 3417
while (1) {
#line 3417
  while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 3417
    while (1) {
#line 3417
      old_buffer = bufp->buffer;
#line 3417
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3417
        return ((reg_errcode_t )15);
      } else {

      }
#line 3417
      bufp->allocated <<= 1;
#line 3417
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3417
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 3417
      tmp___5 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3417
      bufp->buffer = (unsigned char *)tmp___5;
#line 3417
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3417
        return ((reg_errcode_t )12);
      } else {

      }
#line 3417
      if ((unsigned long )old_buffer != (unsigned long )bufp->buffer) {
#line 3417
        b = bufp->buffer + (b - old_buffer);
#line 3417
        begalt = bufp->buffer + (begalt - old_buffer);
#line 3417
        if (fixup_alt_jump) {
#line 3417
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer);
        } else {

        }
#line 3417
        if (laststart) {
#line 3417
          laststart = bufp->buffer + (laststart - old_buffer);
        } else {

        }
#line 3417
        if (pending_exact) {
#line 3417
          pending_exact = bufp->buffer + (pending_exact - old_buffer);
        } else {

        }
      } else {

      }
#line 3417
      break;
    }
  }
#line 3417
  tmp___6 = b;
#line 3417
  b ++;
#line 3417
  *tmp___6 = (unsigned char)8;
#line 3417
  break;
}
---------
SID [1502] -> Line 3411
#line 3411
if (tmp___7) {
  _L: /* CIL Label */ 
#line 3417
  while (1) {
#line 3417
    while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 3417
      while (1) {
#line 3417
        old_buffer = bufp->buffer;
#line 3417
        if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3417
          return ((reg_errcode_t )15);
        } else {

        }
#line 3417
        bufp->allocated <<= 1;
#line 3417
        if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3417
          bufp->allocated = (unsigned long )(1L << 16);
        } else {

        }
#line 3417
        tmp___5 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3417
        bufp->buffer = (unsigned char *)tmp___5;
#line 3417
        if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3417
          return ((reg_errcode_t )12);
        } else {

        }
#line 3417
        if ((unsigned long )old_buffer != (unsigned long )bufp->buffer) {
#line 3417
          b = bufp->buffer + (b - old_buffer);
#line 3417
          begalt = bufp->buffer + (begalt - old_buffer);
#line 3417
          if (fixup_alt_jump) {
#line 3417
            fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer);
          } else {

          }
#line 3417
          if (laststart) {
#line 3417
            laststart = bufp->buffer + (laststart - old_buffer);
          } else {

          }
#line 3417
          if (pending_exact) {
#line 3417
            pending_exact = bufp->buffer + (pending_exact - old_buffer);
          } else {

          }
        } else {

        }
#line 3417
        break;
      }
    }
#line 3417
    tmp___6 = b;
#line 3417
    b ++;
#line 3417
    *tmp___6 = (unsigned char)8;
#line 3417
    break;
  }
} else {
#line 3419
  goto normal_char;
}
---------
SID [1501] -> Line 3411
#line 3411
tmp___7 = at_begline_loc_p(pattern, p, syntax);
---------
SID [1500] -> Line 3411
#line 3411
goto _L;
---------
SID [1499] -> Line 3411
#line 3411
if (syntax & (unsigned int )(((1 << 1) << 1) << 1)) {
#line 3411
  goto _L;
} else {
#line 3411
  tmp___7 = at_begline_loc_p(pattern, p, syntax);
#line 3411
  if (tmp___7) {
    _L: /* CIL Label */ 
#line 3417
    while (1) {
#line 3417
      while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 3417
        while (1) {
#line 3417
          old_buffer = bufp->buffer;
#line 3417
          if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3417
            return ((reg_errcode_t )15);
          } else {

          }
#line 3417
          bufp->allocated <<= 1;
#line 3417
          if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3417
            bufp->allocated = (unsigned long )(1L << 16);
          } else {

          }
#line 3417
          tmp___5 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3417
          bufp->buffer = (unsigned char *)tmp___5;
#line 3417
          if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3417
            return ((reg_errcode_t )12);
          } else {

          }
#line 3417
          if ((unsigned long )old_buffer != (unsigned long )bufp->buffer) {
#line 3417
            b = bufp->buffer + (b - old_buffer);
#line 3417
            begalt = bufp->buffer + (begalt - old_buffer);
#line 3417
            if (fixup_alt_jump) {
#line 3417
              fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer);
            } else {

            }
#line 3417
            if (laststart) {
#line 3417
              laststart = bufp->buffer + (laststart - old_buffer);
            } else {

            }
#line 3417
            if (pending_exact) {
#line 3417
              pending_exact = bufp->buffer + (pending_exact - old_buffer);
            } else {

            }
          } else {

          }
#line 3417
          break;
        }
      }
#line 3417
      tmp___6 = b;
#line 3417
      b ++;
#line 3417
      *tmp___6 = (unsigned char)8;
#line 3417
      break;
    }
  } else {
#line 3419
    goto normal_char;
  }
}
---------
SID [1498] -> Line 3411
#line 3411
goto _L;
---------
SID [1497] -> Line 3411
case 94: 
#line 3411
if ((unsigned long )p == (unsigned long )(pattern + 1)) {
#line 3411
  goto _L;
} else
#line 3411
if (syntax & (unsigned int )(((1 << 1) << 1) << 1)) {
#line 3411
  goto _L;
} else {
#line 3411
  tmp___7 = at_begline_loc_p(pattern, p, syntax);
#line 3411
  if (tmp___7) {
    _L: /* CIL Label */ 
#line 3417
    while (1) {
#line 3417
      while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 3417
        while (1) {
#line 3417
          old_buffer = bufp->buffer;
#line 3417
          if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3417
            return ((reg_errcode_t )15);
          } else {

          }
#line 3417
          bufp->allocated <<= 1;
#line 3417
          if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3417
            bufp->allocated = (unsigned long )(1L << 16);
          } else {

          }
#line 3417
          tmp___5 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3417
          bufp->buffer = (unsigned char *)tmp___5;
#line 3417
          if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3417
            return ((reg_errcode_t )12);
          } else {

          }
#line 3417
          if ((unsigned long )old_buffer != (unsigned long )bufp->buffer) {
#line 3417
            b = bufp->buffer + (b - old_buffer);
#line 3417
            begalt = bufp->buffer + (begalt - old_buffer);
#line 3417
            if (fixup_alt_jump) {
#line 3417
              fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer);
            } else {

            }
#line 3417
            if (laststart) {
#line 3417
              laststart = bufp->buffer + (laststart - old_buffer);
            } else {

            }
#line 3417
            if (pending_exact) {
#line 3417
              pending_exact = bufp->buffer + (pending_exact - old_buffer);
            } else {

            }
          } else {

          }
#line 3417
          break;
        }
      }
#line 3417
      tmp___6 = b;
#line 3417
      b ++;
#line 3417
      *tmp___6 = (unsigned char)8;
#line 3417
      break;
    }
  } else {
#line 3419
    goto normal_char;
  }
}
---------
SID [1496] -> Line 3407
#line 3407
switch ((int )c) {
case 94: 
#line 3411
if ((unsigned long )p == (unsigned long )(pattern + 1)) {
#line 3411
  goto _L;
} else
#line 3411
if (syntax & (unsigned int )(((1 << 1) << 1) << 1)) {
#line 3411
  goto _L;
} else {
#line 3411
  tmp___7 = at_begline_loc_p(pattern, p, syntax);
#line 3411
  if (tmp___7) {
    _L: /* CIL Label */ 
#line 3417
    while (1) {
#line 3417
      while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 3417
        while (1) {
#line 3417
          old_buffer = bufp->buffer;
#line 3417
          if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3417
            return ((reg_errcode_t )15);
          } else {

          }
#line 3417
          bufp->allocated <<= 1;
#line 3417
          if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3417
            bufp->allocated = (unsigned long )(1L << 16);
          } else {

          }
#line 3417
          tmp___5 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3417
          bufp->buffer = (unsigned char *)tmp___5;
#line 3417
          if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3417
            return ((reg_errcode_t )12);
          } else {

          }
#line 3417
          if ((unsigned long )old_buffer != (unsigned long )bufp->buffer) {
#line 3417
            b = bufp->buffer + (b - old_buffer);
#line 3417
            begalt = bufp->buffer + (begalt - old_buffer);
#line 3417
            if (fixup_alt_jump) {
#line 3417
              fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer);
            } else {

            }
#line 3417
            if (laststart) {
#line 3417
              laststart = bufp->buffer + (laststart - old_buffer);
            } else {

            }
#line 3417
            if (pending_exact) {
#line 3417
              pending_exact = bufp->buffer + (pending_exact - old_buffer);
            } else {

            }
          } else {

          }
#line 3417
          break;
        }
      }
#line 3417
      tmp___6 = b;
#line 3417
      b ++;
#line 3417
      *tmp___6 = (unsigned char)8;
#line 3417
      break;
    }
  } else {
#line 3419
    goto normal_char;
  }
}
#line 3421
break;
case 36: 
#line 3426
if ((unsigned long )p == (unsigned long )pend) {
#line 3426
  goto _L___0;
} else
#line 3426
if (syntax & (unsigned int )(((1 << 1) << 1) << 1)) {
#line 3426
  goto _L___0;
} else {
#line 3426
  tmp___10 = at_endline_loc_p(p, pend, syntax);
#line 3426
  if (tmp___10) {
    _L___0: /* CIL Label */ 
#line 3432
    while (1) {
#line 3432
      while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 3432
        while (1) {
#line 3432
          old_buffer___0 = bufp->buffer;
#line 3432
          if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3432
            return ((reg_errcode_t )15);
          } else {

          }
#line 3432
          bufp->allocated <<= 1;
#line 3432
          if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3432
            bufp->allocated = (unsigned long )(1L << 16);
          } else {

          }
#line 3432
          tmp___8 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3432
          bufp->buffer = (unsigned char *)tmp___8;
#line 3432
          if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3432
            return ((reg_errcode_t )12);
          } else {

          }
#line 3432
          if ((unsigned long )old_buffer___0 != (unsigned long )bufp->buffer) {
#line 3432
            b = bufp->buffer + (b - old_buffer___0);
#line 3432
            begalt = bufp->buffer + (begalt - old_buffer___0);
#line 3432
            if (fixup_alt_jump) {
#line 3432
              fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___0);
            } else {

            }
#line 3432
            if (laststart) {
#line 3432
              laststart = bufp->buffer + (laststart - old_buffer___0);
            } else {

            }
#line 3432
            if (pending_exact) {
#line 3432
              pending_exact = bufp->buffer + (pending_exact - old_buffer___0);
            } else {

            }
          } else {

          }
#line 3432
          break;
        }
      }
#line 3432
      tmp___9 = b;
#line 3432
      b ++;
#line 3432
      *tmp___9 = (unsigned char)9;
#line 3432
      break;
    }
  } else {
#line 3434
    goto normal_char;
  }
}
#line 3436
break;
case 63: 
case 43: 
#line 3441
if (syntax & (unsigned int )(1 << 1)) {
#line 3443
  goto normal_char;
} else
#line 3441
if (syntax & (unsigned int )((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3443
  goto normal_char;
} else {

}
case 42: 
handle_plus: 
#line 3447
if (! laststart) {
#line 3449
  if (syntax & (unsigned int )(((((1 << 1) << 1) << 1) << 1) << 1)) {
#line 3450
    return ((reg_errcode_t )13);
  } else
#line 3451
  if (! (syntax & (unsigned int )((((1 << 1) << 1) << 1) << 1))) {
#line 3452
    goto normal_char;
  } else {

  }
} else {

}
#line 3457
keep_string_p = (boolean )0;
#line 3460
zero_times_ok = (char)0;
#line 3460
many_times_ok = (char)0;
#line 3467
while (1) {
#line 3469
  zero_times_ok = (char )((int )zero_times_ok | ((int )c != 43));
#line 3470
  many_times_ok = (char )((int )many_times_ok | ((int )c != 63));
#line 3472
  if ((unsigned long )p == (unsigned long )pend) {
#line 3473
    break;
  } else {

  }
#line 3475
  while (1) {
#line 3475
    if ((unsigned long )p == (unsigned long )pend) {
#line 3475
      return ((reg_errcode_t )14);
    } else {

    }
#line 3475
    tmp___11 = p;
#line 3475
    p ++;
#line 3475
    c = (unsigned char )*tmp___11;
#line 3475
    if (translate) {
#line 3475
      c = (unsigned char )*(translate + c);
    } else {

    }
#line 3475
    break;
  }
#line 3477
  if ((int )c == 42) {

  } else
#line 3477
  if (! (syntax & (unsigned int )(1 << 1))) {
#line 3477
    if ((int )c == 43) {

    } else
#line 3477
    if ((int )c == 63) {

    } else {
#line 3477
      goto _L___1;
    }
  } else
  _L___1: /* CIL Label */ 
#line 3481
  if (syntax & (unsigned int )(1 << 1)) {
#line 3481
    if ((int )c == 92) {
#line 3483
      if ((unsigned long )p == (unsigned long )pend) {
#line 3483
        return ((reg_errcode_t )5);
      } else {

      }
#line 3485
      while (1) {
#line 3485
        if ((unsigned long )p == (unsigned long )pend) {
#line 3485
          return ((reg_errcode_t )14);
        } else {

        }
#line 3485
        tmp___12 = p;
#line 3485
        p ++;
#line 3485
        c1 = (unsigned char )*tmp___12;
#line 3485
        if (translate) {
#line 3485
          c1 = (unsigned char )*(translate + c1);
        } else {

        }
#line 3485
        break;
      }
#line 3486
      if ((int )c1 == 43) {

      } else
#line 3486
      if ((int )c1 == 63) {

      } else {
#line 3488
        p --;
#line 3489
        p --;
#line 3490
        break;
      }
#line 3493
      c = c1;
    } else {
#line 3497
      p --;
#line 3498
      break;
    }
  } else {
#line 3497
    p --;
#line 3498
    break;
  }
}
#line 3506
if (! laststart) {
#line 3507
  break;
} else {

}
#line 3511
if (many_times_ok) {
#line 3525
  while ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated) {
#line 3525
    while (1) {
#line 3525
      old_buffer___1 = bufp->buffer;
#line 3525
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3525
        return ((reg_errcode_t )15);
      } else {

      }
#line 3525
      bufp->allocated <<= 1;
#line 3525
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3525
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 3525
      tmp___13 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3525
      bufp->buffer = (unsigned char *)tmp___13;
#line 3525
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3525
        return ((reg_errcode_t )12);
      } else {

      }
#line 3525
      if ((unsigned long )old_buffer___1 != (unsigned long )bufp->buffer) {
#line 3525
        b = bufp->buffer + (b - old_buffer___1);
#line 3525
        begalt = bufp->buffer + (begalt - old_buffer___1);
#line 3525
        if (fixup_alt_jump) {
#line 3525
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___1);
        } else {

        }
#line 3525
        if (laststart) {
#line 3525
          laststart = bufp->buffer + (laststart - old_buffer___1);
        } else {

        }
#line 3525
        if (pending_exact) {
#line 3525
          pending_exact = bufp->buffer + (pending_exact - old_buffer___1);
        } else {

        }
      } else {

      }
#line 3525
      break;
    }
  }
#line 3532
  if (translate) {
#line 3532
    tmp___14 = (int )*(translate + (unsigned char )*(p - 2));
  } else {
#line 3532
    tmp___14 = (int )*(p - 2);
  }
#line 3532
  if (translate) {
#line 3532
    tmp___15 = (int )*(translate + (unsigned char )'.');
  } else {
#line 3532
    tmp___15 = '.';
  }
#line 3532
  if (tmp___14 == tmp___15) {
#line 3532
    if (zero_times_ok) {
#line 3532
      if ((unsigned long )p < (unsigned long )pend) {
#line 3532
        if (translate) {
#line 3532
          tmp___16 = (int )*(translate + (unsigned char )*p);
        } else {
#line 3532
          tmp___16 = (int )*p;
        }
#line 3532
        if (translate) {
#line 3532
          tmp___17 = (int )*(translate + (unsigned char )'\n');
        } else {
#line 3532
          tmp___17 = '\n';
        }
#line 3532
        if (tmp___16 == tmp___17) {
#line 3532
          if (! (syntax & (unsigned int )((((((1 << 1) << 1) << 1) << 1) << 1) << 1))) {
#line 3537
            store_op1(12, b, (laststart - b) - 3L);
#line 3538
            keep_string_p = (boolean )1;
          } else {
#line 3542
            store_op1(17, b, ((laststart - 3) - b) - 3L);
          }
        } else {
#line 3542
          store_op1(17, b, ((laststart - 3) - b) - 3L);
        }
      } else {
#line 3542
        store_op1(17, b, ((laststart - 3) - b) - 3L);
      }
    } else {
#line 3542
      store_op1(17, b, ((laststart - 3) - b) - 3L);
    }
  } else {
#line 3542
    store_op1(17, b, ((laststart - 3) - b) - 3L);
  }
#line 3545
  b += 3;
} else {

}
#line 3550
while ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated) {
#line 3550
  while (1) {
#line 3550
    old_buffer___2 = bufp->buffer;
#line 3550
    if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3550
      return ((reg_errcode_t )15);
    } else {

    }
#line 3550
    bufp->allocated <<= 1;
#line 3550
    if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3550
      bufp->allocated = (unsigned long )(1L << 16);
    } else {

    }
#line 3550
    tmp___18 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3550
    bufp->buffer = (unsigned char *)tmp___18;
#line 3550
    if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3550
      return ((reg_errcode_t )12);
    } else {

    }
#line 3550
    if ((unsigned long )old_buffer___2 != (unsigned long )bufp->buffer) {
#line 3550
      b = bufp->buffer + (b - old_buffer___2);
#line 3550
      begalt = bufp->buffer + (begalt - old_buffer___2);
#line 3550
      if (fixup_alt_jump) {
#line 3550
        fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___2);
      } else {

      }
#line 3550
      if (laststart) {
#line 3550
        laststart = bufp->buffer + (laststart - old_buffer___2);
      } else {

      }
#line 3550
      if (pending_exact) {
#line 3550
        pending_exact = bufp->buffer + (pending_exact - old_buffer___2);
      } else {

      }
    } else {

    }
#line 3550
    break;
  }
}
#line 3551
if (keep_string_p) {
#line 3551
  tmp___19 = 15;
} else {
#line 3551
  tmp___19 = 14;
}
#line 3551
insert_op1(tmp___19, laststart, ((b + 3) - laststart) - 3L, b);
#line 3554
pending_exact = (unsigned char *)0;
#line 3555
b += 3;
#line 3557
if (! zero_times_ok) {
#line 3564
  while ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated) {
#line 3564
    while (1) {
#line 3564
      old_buffer___3 = bufp->buffer;
#line 3564
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3564
        return ((reg_errcode_t )15);
      } else {

      }
#line 3564
      bufp->allocated <<= 1;
#line 3564
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3564
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 3564
      tmp___20 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3564
      bufp->buffer = (unsigned char *)tmp___20;
#line 3564
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3564
        return ((reg_errcode_t )12);
      } else {

      }
#line 3564
      if ((unsigned long )old_buffer___3 != (unsigned long )bufp->buffer) {
#line 3564
        b = bufp->buffer + (b - old_buffer___3);
#line 3564
        begalt = bufp->buffer + (begalt - old_buffer___3);
#line 3564
        if (fixup_alt_jump) {
#line 3564
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___3);
        } else {

        }
#line 3564
        if (laststart) {
#line 3564
          laststart = bufp->buffer + (laststart - old_buffer___3);
        } else {

        }
#line 3564
        if (pending_exact) {
#line 3564
          pending_exact = bufp->buffer + (pending_exact - old_buffer___3);
        } else {

        }
      } else {

      }
#line 3564
      break;
    }
  }
#line 3565
  insert_op1(18, laststart, ((laststart + 6) - laststart) - 3L, b);
#line 3566
  b += 3;
} else {

}
#line 3569
break;
case 46: 
#line 3573
laststart = b;
#line 3574
while (1) {
#line 3574
  while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 3574
    while (1) {
#line 3574
      old_buffer___4 = bufp->buffer;
#line 3574
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3574
        return ((reg_errcode_t )15);
      } else {

      }
#line 3574
      bufp->allocated <<= 1;
#line 3574
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3574
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 3574
      tmp___21 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3574
      bufp->buffer = (unsigned char *)tmp___21;
#line 3574
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3574
        return ((reg_errcode_t )12);
      } else {

      }
#line 3574
      if ((unsigned long )old_buffer___4 != (unsigned long )bufp->buffer) {
#line 3574
        b = bufp->buffer + (b - old_buffer___4);
#line 3574
        begalt = bufp->buffer + (begalt - old_buffer___4);
#line 3574
        if (fixup_alt_jump) {
#line 3574
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___4);
        } else {

        }
#line 3574
        if (laststart) {
#line 3574
          laststart = bufp->buffer + (laststart - old_buffer___4);
        } else {

        }
#line 3574
        if (pending_exact) {
#line 3574
          pending_exact = bufp->buffer + (pending_exact - old_buffer___4);
        } else {

        }
      } else {

      }
#line 3574
      break;
    }
  }
#line 3574
  tmp___22 = b;
#line 3574
  b ++;
#line 3574
  *tmp___22 = (unsigned char)2;
#line 3574
  break;
}
#line 3575
break;
case 91: 
#line 3580
had_char_class = (boolean )0;
#line 3582
if ((unsigned long )p == (unsigned long )pend) {
#line 3582
  return ((reg_errcode_t )7);
} else {

}
#line 3586
while ((unsigned long )((b - bufp->buffer) + 34L) > bufp->allocated) {
#line 3586
  while (1) {
#line 3586
    old_buffer___5 = bufp->buffer;
#line 3586
    if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3586
      return ((reg_errcode_t )15);
    } else {

    }
#line 3586
    bufp->allocated <<= 1;
#line 3586
    if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3586
      bufp->allocated = (unsigned long )(1L << 16);
    } else {

    }
#line 3586
    tmp___23 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3586
    bufp->buffer = (unsigned char *)tmp___23;
#line 3586
    if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3586
      return ((reg_errcode_t )12);
    } else {

    }
#line 3586
    if ((unsigned long )old_buffer___5 != (unsigned long )bufp->buffer) {
#line 3586
      b = bufp->buffer + (b - old_buffer___5);
#line 3586
      begalt = bufp->buffer + (begalt - old_buffer___5);
#line 3586
      if (fixup_alt_jump) {
#line 3586
        fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___5);
      } else {

      }
#line 3586
      if (laststart) {
#line 3586
        laststart = bufp->buffer + (laststart - old_buffer___5);
      } else {

      }
#line 3586
      if (pending_exact) {
#line 3586
        pending_exact = bufp->buffer + (pending_exact - old_buffer___5);
      } else {

      }
    } else {

    }
#line 3586
    break;
  }
}
#line 3588
laststart = b;
#line 3592
while (1) {
#line 3592
  while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 3592
    while (1) {
#line 3592
      old_buffer___6 = bufp->buffer;
#line 3592
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3592
        return ((reg_errcode_t )15);
      } else {

      }
#line 3592
      bufp->allocated <<= 1;
#line 3592
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3592
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 3592
      tmp___24 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3592
      bufp->buffer = (unsigned char *)tmp___24;
#line 3592
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3592
        return ((reg_errcode_t )12);
      } else {

      }
#line 3592
      if ((unsigned long )old_buffer___6 != (unsigned long )bufp->buffer) {
#line 3592
        b = bufp->buffer + (b - old_buffer___6);
#line 3592
        begalt = bufp->buffer + (begalt - old_buffer___6);
#line 3592
        if (fixup_alt_jump) {
#line 3592
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___6);
        } else {

        }
#line 3592
        if (laststart) {
#line 3592
          laststart = bufp->buffer + (laststart - old_buffer___6);
        } else {

        }
#line 3592
        if (pending_exact) {
#line 3592
          pending_exact = bufp->buffer + (pending_exact - old_buffer___6);
        } else {

        }
      } else {

      }
#line 3592
      break;
    }
  }
#line 3592
  tmp___25 = b;
#line 3592
  b ++;
#line 3592
  if ((int const   )*p == 94) {
#line 3592
    tmp___26 = 4;
  } else {
#line 3592
    tmp___26 = 3;
  }
#line 3592
  *tmp___25 = (unsigned char )tmp___26;
#line 3592
  break;
}
#line 3593
if ((int const   )*p == 94) {
#line 3594
  p ++;
} else {

}
#line 3597
p1 = p;
#line 3600
while (1) {
#line 3600
  while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 3600
    while (1) {
#line 3600
      old_buffer___7 = bufp->buffer;
#line 3600
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3600
        return ((reg_errcode_t )15);
      } else {

      }
#line 3600
      bufp->allocated <<= 1;
#line 3600
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3600
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 3600
      tmp___27 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3600
      bufp->buffer = (unsigned char *)tmp___27;
#line 3600
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3600
        return ((reg_errcode_t )12);
      } else {

      }
#line 3600
      if ((unsigned long )old_buffer___7 != (unsigned long )bufp->buffer) {
#line 3600
        b = bufp->buffer + (b - old_buffer___7);
#line 3600
        begalt = bufp->buffer + (begalt - old_buffer___7);
#line 3600
        if (fixup_alt_jump) {
#line 3600
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___7);
        } else {

        }
#line 3600
        if (laststart) {
#line 3600
          laststart = bufp->buffer + (laststart - old_buffer___7);
        } else {

        }
#line 3600
        if (pending_exact) {
#line 3600
          pending_exact = bufp->buffer + (pending_exact - old_buffer___7);
        } else {

        }
      } else {

      }
#line 3600
      break;
    }
  }
#line 3600
  tmp___28 = b;
#line 3600
  b ++;
#line 3600
  *tmp___28 = (unsigned char )((1 << 8) / 8);
#line 3600
  break;
}
#line 3603
memset((void *)b, 0, (size_t )((1 << 8) / 8));
#line 3606
if ((unsigned int )((re_opcode_t )*(b + -2)) == 4U) {
#line 3606
  if (syntax & (unsigned int )((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3608
    *(b + 1) = (unsigned char )((int )*(b + 1) | (1 << 2));
  } else {

  }
} else {

}
#line 3611
while (1) {
#line 3613
  if ((unsigned long )p == (unsigned long )pend) {
#line 3613
    return ((reg_errcode_t )7);
  } else {

  }
#line 3615
  while (1) {
#line 3615
    if ((unsigned long )p == (unsigned long )pend) {
#line 3615
      return ((reg_errcode_t )14);
    } else {

    }
#line 3615
    tmp___29 = p;
#line 3615
    p ++;
#line 3615
    c = (unsigned char )*tmp___29;
#line 3615
    if (translate) {
#line 3615
      c = (unsigned char )*(translate + c);
    } else {

    }
#line 3615
    break;
  }
#line 3618
  if (syntax & 1U) {
#line 3618
    if ((int )c == 92) {
#line 3620
      if ((unsigned long )p == (unsigned long )pend) {
#line 3620
        return ((reg_errcode_t )5);
      } else {

      }
#line 3622
      while (1) {
#line 3622
        if ((unsigned long )p == (unsigned long )pend) {
#line 3622
          return ((reg_errcode_t )14);
        } else {

        }
#line 3622
        tmp___30 = p;
#line 3622
        p ++;
#line 3622
        c1 = (unsigned char )*tmp___30;
#line 3622
        if (translate) {
#line 3622
          c1 = (unsigned char )*(translate + c1);
        } else {

        }
#line 3622
        break;
      }
#line 3623
      *(b + (int )c1 / 8) = (unsigned char )((int )*(b + (int )c1 / 8) | (1 << (int )c1 % 8));
#line 3624
      goto __Cont;
    } else {

    }
  } else {

  }
#line 3630
  if ((int )c == 93) {
#line 3630
    if ((unsigned long )p != (unsigned long )(p1 + 1)) {
#line 3631
      break;
    } else {

    }
  } else {

  }
#line 3635
  if (had_char_class) {
#line 3635
    if ((int )c == 45) {
#line 3635
      if ((int const   )*p != 93) {
#line 3636
        return ((reg_errcode_t )11);
      } else {

      }
    } else {

    }
  } else {

  }
#line 3642
  if ((int )c == 45) {
#line 3642
    if ((unsigned long )(p - 2) >= (unsigned long )pattern) {
#line 3642
      if ((int const   )*(p + -2) == 91) {
#line 3642
        goto _L___19;
      } else {
#line 3642
        goto _L___20;
      }
    } else
    _L___20: /* CIL Label */ 
#line 3642
    if ((unsigned long )(p - 3) >= (unsigned long )pattern) {
#line 3642
      if ((int const   )*(p + -3) == 91) {
#line 3642
        if ((int const   )*(p + -2) == 94) {
#line 3642
          goto _L___19;
        } else {
#line 3642
          goto _L___18;
        }
      } else {
#line 3642
        goto _L___18;
      }
    } else
    _L___18: /* CIL Label */ 
    _L___17: /* CIL Label */ 
#line 3642
    if ((int const   )*p != 93) {
#line 3647
      tmp___31 = compile_range(& p, pend, translate, syntax, b);
#line 3647
      ret = tmp___31;
#line 3649
      if ((unsigned int )ret != 0U) {
#line 3649
        return (ret);
      } else {

      }
    } else {
#line 3642
      goto _L___19;
    }
  } else
  _L___19: /* CIL Label */ 
  _L___16: /* CIL Label */ 
  _L___15: /* CIL Label */ 
#line 3652
  if ((int const   )*(p + 0) == 45) {
#line 3652
    if ((int const   )*(p + 1) != 93) {
#line 3657
      while (1) {
#line 3657
        if ((unsigned long )p == (unsigned long )pend) {
#line 3657
          return ((reg_errcode_t )14);
        } else {

        }
#line 3657
        tmp___32 = p;
#line 3657
        p ++;
#line 3657
        c1 = (unsigned char )*tmp___32;
#line 3657
        if (translate) {
#line 3657
          c1 = (unsigned char )*(translate + c1);
        } else {

        }
#line 3657
        break;
      }
#line 3659
      ret___0 = compile_range(& p, pend, translate, syntax, b);
#line 3660
      if ((unsigned int )ret___0 != 0U) {
#line 3660
        return (ret___0);
      } else {

      }
    } else {
#line 3652
      goto _L___14;
    }
  } else
  _L___14: /* CIL Label */ 
#line 3666
  if (syntax & (unsigned int )((1 << 1) << 1)) {
#line 3666
    if ((int )c == 91) {
#line 3666
      if ((int const   )*p == 58) {
#line 3670
        while (1) {
#line 3670
          if ((unsigned long )p == (unsigned long )pend) {
#line 3670
            return ((reg_errcode_t )14);
          } else {

          }
#line 3670
          tmp___33 = p;
#line 3670
          p ++;
#line 3670
          c = (unsigned char )*tmp___33;
#line 3670
          if (translate) {
#line 3670
            c = (unsigned char )*(translate + c);
          } else {

          }
#line 3670
          break;
        }
#line 3671
        c1 = (unsigned char)0;
#line 3674
        if ((unsigned long )p == (unsigned long )pend) {
#line 3674
          return ((reg_errcode_t )7);
        } else {

        }
#line 3676
        while (1) {
#line 3678
          while (1) {
#line 3678
            if ((unsigned long )p == (unsigned long )pend) {
#line 3678
              return ((reg_errcode_t )14);
            } else {

            }
#line 3678
            tmp___34 = p;
#line 3678
            p ++;
#line 3678
            c = (unsigned char )*tmp___34;
#line 3678
            if (translate) {
#line 3678
              c = (unsigned char )*(translate + c);
            } else {

            }
#line 3678
            break;
          }
#line 3679
          if ((int )c == 58) {
#line 3681
            break;
          } else
#line 3679
          if ((int )c == 93) {
#line 3681
            break;
          } else
#line 3679
          if ((unsigned long )p == (unsigned long )pend) {
#line 3681
            break;
          } else
#line 3679
          if ((int )c1 == 6) {
#line 3681
            break;
          } else {

          }
#line 3682
          tmp___35 = c1;
#line 3682
          c1 = (unsigned char )((int )c1 + 1);
#line 3682
          str[tmp___35] = (char )c;
        }
#line 3684
        str[c1] = (char )'\000';
#line 3689
        if ((int )c == 58) {
#line 3689
          if ((int const   )*p == 93) {
#line 3692
            tmp___36 = strcmp((char const   *)(str), "alnum");
#line 3692
            is_alnum = (boolean )(tmp___36 == 0);
#line 3693
            tmp___37 = strcmp((char const   *)(str), "alpha");
#line 3693
            is_alpha = (boolean )(tmp___37 == 0);
#line 3694
            tmp___38 = strcmp((char const   *)(str), "blank");
#line 3694
            is_blank = (boolean )(tmp___38 == 0);
#line 3695
            tmp___39 = strcmp((char const   *)(str), "cntrl");
#line 3695
            is_cntrl = (boolean )(tmp___39 == 0);
#line 3696
            tmp___40 = strcmp((char const   *)(str), "digit");
#line 3696
            is_digit = (boolean )(tmp___40 == 0);
#line 3697
            tmp___41 = strcmp((char const   *)(str), "graph");
#line 3697
            is_graph = (boolean )(tmp___41 == 0);
#line 3698
            tmp___42 = strcmp((char const   *)(str), "lower");
#line 3698
            is_lower = (boolean )(tmp___42 == 0);
#line 3699
            tmp___43 = strcmp((char const   *)(str), "print");
#line 3699
            is_print = (boolean )(tmp___43 == 0);
#line 3700
            tmp___44 = strcmp((char const   *)(str), "punct");
#line 3700
            is_punct = (boolean )(tmp___44 == 0);
#line 3701
            tmp___45 = strcmp((char const   *)(str), "space");
#line 3701
            is_space = (boolean )(tmp___45 == 0);
#line 3702
            tmp___46 = strcmp((char const   *)(str), "upper");
#line 3702
            is_upper = (boolean )(tmp___46 == 0);
#line 3703
            tmp___47 = strcmp((char const   *)(str), "xdigit");
#line 3703
            is_xdigit = (boolean )(tmp___47 == 0);
#line 3705
            tmp___48 = strcmp((char const   *)(str), "alpha");
#line 3705
            if (tmp___48 == 0) {

            } else {
#line 3705
              tmp___49 = strcmp((char const   *)(str), "upper");
#line 3705
              if (tmp___49 == 0) {

              } else {
#line 3705
                tmp___50 = strcmp((char const   *)(str), "lower");
#line 3705
                if (tmp___50 == 0) {

                } else {
#line 3705
                  tmp___51 = strcmp((char const   *)(str), "digit");
#line 3705
                  if (tmp___51 == 0) {

                  } else {
#line 3705
                    tmp___52 = strcmp((char const   *)(str), "alnum");
#line 3705
                    if (tmp___52 == 0) {

                    } else {
#line 3705
                      tmp___53 = strcmp((char const   *)(str), "xdigit");
#line 3705
                      if (tmp___53 == 0) {

                      } else {
#line 3705
                        tmp___54 = strcmp((char const   *)(str), "space");
#line 3705
                        if (tmp___54 == 0) {

                        } else {
#line 3705
                          tmp___55 = strcmp((char const   *)(str), "print");
#line 3705
                          if (tmp___55 == 0) {

                          } else {
#line 3705
                            tmp___56 = strcmp((char const   *)(str), "punct");
#line 3705
                            if (tmp___56 == 0) {

                            } else {
#line 3705
                              tmp___57 = strcmp((char const   *)(str), "graph");
#line 3705
                              if (tmp___57 == 0) {

                              } else {
#line 3705
                                tmp___58 = strcmp((char const   *)(str),
                                                  "cntrl");
#line 3705
                                if (tmp___58 == 0) {

                                } else {
#line 3705
                                  tmp___59 = strcmp((char const   *)(str),
                                                    "blank");
#line 3705
                                  if (tmp___59 == 0) {

                                  } else {
#line 3705
                                    return ((reg_errcode_t )4);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
#line 3709
            while (1) {
#line 3709
              if ((unsigned long )p == (unsigned long )pend) {
#line 3709
                return ((reg_errcode_t )14);
              } else {

              }
#line 3709
              tmp___60 = p;
#line 3709
              p ++;
#line 3709
              c = (unsigned char )*tmp___60;
#line 3709
              if (translate) {
#line 3709
                c = (unsigned char )*(translate + c);
              } else {

              }
#line 3709
              break;
            }
#line 3711
            if ((unsigned long )p == (unsigned long )pend) {
#line 3711
              return ((reg_errcode_t )7);
            } else {

            }
#line 3713
            ch = 0;
#line 3713
            while (ch < 1 << 8) {
#line 3715
              if (is_alnum) {
#line 3715
                if ((ch & -128) == 0) {
#line 3715
                  tmp___61 = __ctype_b_loc();
#line 3715
                  if ((int const   )*(*tmp___61 + ch) & 8) {
#line 3727
                    *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                  } else {
#line 3715
                    goto _L___12;
                  }
                } else {
#line 3715
                  goto _L___12;
                }
              } else
              _L___12: /* CIL Label */ 
#line 3715
              if (is_alpha) {
#line 3715
                if ((ch & -128) == 0) {
#line 3715
                  tmp___62 = __ctype_b_loc();
#line 3715
                  if ((int const   )*(*tmp___62 + ch) & 1024) {
#line 3727
                    *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                  } else {
#line 3715
                    goto _L___11;
                  }
                } else {
#line 3715
                  goto _L___11;
                }
              } else
              _L___11: /* CIL Label */ 
#line 3715
              if (is_blank) {
#line 3715
                if ((ch & -128) == 0) {
#line 3715
                  tmp___63 = __ctype_b_loc();
#line 3715
                  if ((int const   )*(*tmp___63 + ch) & 1) {
#line 3727
                    *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                  } else {
#line 3715
                    goto _L___10;
                  }
                } else {
#line 3715
                  goto _L___10;
                }
              } else
              _L___10: /* CIL Label */ 
#line 3715
              if (is_cntrl) {
#line 3715
                if ((ch & -128) == 0) {
#line 3715
                  tmp___64 = __ctype_b_loc();
#line 3715
                  if ((int const   )*(*tmp___64 + ch) & 2) {
#line 3727
                    *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                  } else {
#line 3715
                    goto _L___9;
                  }
                } else {
#line 3715
                  goto _L___9;
                }
              } else
              _L___9: /* CIL Label */ 
#line 3715
              if (is_digit) {
#line 3715
                if ((ch & -128) == 0) {
#line 3715
                  tmp___65 = __ctype_b_loc();
#line 3715
                  if ((int const   )*(*tmp___65 + ch) & 2048) {
#line 3727
                    *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                  } else {
#line 3715
                    goto _L___8;
                  }
                } else {
#line 3715
                  goto _L___8;
                }
              } else
              _L___8: /* CIL Label */ 
#line 3715
              if (is_graph) {
#line 3715
                if ((ch & -128) == 0) {
#line 3715
                  tmp___66 = __ctype_b_loc();
#line 3715
                  if ((int const   )*(*tmp___66 + ch) & 32768) {
#line 3727
                    *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                  } else {
#line 3715
                    goto _L___7;
                  }
                } else {
#line 3715
                  goto _L___7;
                }
              } else
              _L___7: /* CIL Label */ 
#line 3715
              if (is_lower) {
#line 3715
                if ((ch & -128) == 0) {
#line 3715
                  tmp___67 = __ctype_b_loc();
#line 3715
                  if ((int const   )*(*tmp___67 + ch) & 512) {
#line 3727
                    *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                  } else {
#line 3715
                    goto _L___6;
                  }
                } else {
#line 3715
                  goto _L___6;
                }
              } else
              _L___6: /* CIL Label */ 
#line 3715
              if (is_print) {
#line 3715
                if ((ch & -128) == 0) {
#line 3715
                  tmp___68 = __ctype_b_loc();
#line 3715
                  if ((int const   )*(*tmp___68 + ch) & 16384) {
#line 3727
                    *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                  } else {
#line 3715
                    goto _L___5;
                  }
                } else {
#line 3715
                  goto _L___5;
                }
              } else
              _L___5: /* CIL Label */ 
#line 3715
              if (is_punct) {
#line 3715
                if ((ch & -128) == 0) {
#line 3715
                  tmp___69 = __ctype_b_loc();
#line 3715
                  if ((int const   )*(*tmp___69 + ch) & 4) {
#line 3727
                    *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                  } else {
#line 3715
                    goto _L___4;
                  }
                } else {
#line 3715
                  goto _L___4;
                }
              } else
              _L___4: /* CIL Label */ 
#line 3715
              if (is_space) {
#line 3715
                if ((ch & -128) == 0) {
#line 3715
                  tmp___70 = __ctype_b_loc();
#line 3715
                  if ((int const   )*(*tmp___70 + ch) & 8192) {
#line 3727
                    *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                  } else {
#line 3715
                    goto _L___3;
                  }
                } else {
#line 3715
                  goto _L___3;
                }
              } else
              _L___3: /* CIL Label */ 
#line 3715
              if (is_upper) {
#line 3715
                if ((ch & -128) == 0) {
#line 3715
                  tmp___71 = __ctype_b_loc();
#line 3715
                  if ((int const   )*(*tmp___71 + ch) & 256) {
#line 3727
                    *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                  } else {
#line 3715
                    goto _L___2;
                  }
                } else {
#line 3715
                  goto _L___2;
                }
              } else
              _L___2: /* CIL Label */ 
#line 3715
              if (is_xdigit) {
#line 3715
                if ((ch & -128) == 0) {
#line 3715
                  tmp___72 = __ctype_b_loc();
#line 3715
                  if ((int const   )*(*tmp___72 + ch) & 4096) {
#line 3727
                    *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                  } else {

                  }
                } else {

                }
              } else {

              }
#line 3713
              ch ++;
            }
#line 3729
            had_char_class = (boolean )1;
          } else {
#line 3689
            goto _L___13;
          }
        } else {
          _L___13: /* CIL Label */ 
#line 3733
          c1 = (unsigned char )((int )c1 + 1);
#line 3734
          while (1) {
#line 3734
            tmp___73 = c1;
#line 3734
            c1 = (unsigned char )((int )c1 - 1);
#line 3734
            if (tmp___73) {

            } else {
#line 3734
              break;
            }
#line 3735
            p --;
          }
#line 3736
          *(b + 11) = (unsigned char )((int )*(b + 11) | (1 << 3));
#line 3737
          *(b + 7) = (unsigned char )((int )*(b + 7) | (1 << 2));
#line 3738
          had_char_class = (boolean )0;
        }
      } else {
#line 3743
        had_char_class = (boolean )0;
#line 3744
        *(b + (int )c / 8) = (unsigned char )((int )*(b + (int )c / 8) | (1 << (int )c % 8));
      }
    } else {
#line 3743
      had_char_class = (boolean )0;
#line 3744
      *(b + (int )c / 8) = (unsigned char )((int )*(b + (int )c / 8) | (1 << (int )c % 8));
    }
  } else {
#line 3743
    had_char_class = (boolean )0;
#line 3744
    *(b + (int )c / 8) = (unsigned char )((int )*(b + (int )c / 8) | (1 << (int )c % 8));
  }
  __Cont: /* CIL Label */ ;
}
#line 3750
while (1) {
#line 3750
  if ((int )*(b + -1) > 0) {
#line 3750
    if ((int )*(b + ((int )*(b + -1) - 1)) == 0) {

    } else {
#line 3750
      break;
    }
  } else {
#line 3750
    break;
  }
#line 3751
  *(b + -1) = (unsigned char )((int )*(b + -1) - 1);
}
#line 3752
b += (int )*(b + -1);
#line 3754
break;
case 40: 
#line 3758
if (syntax & (unsigned int )(((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3759
  goto handle_open;
} else {
#line 3761
  goto normal_char;
}
case 41: 
#line 3765
if (syntax & (unsigned int )(((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3766
  goto handle_close;
} else {
#line 3768
  goto normal_char;
}
case 10: 
#line 3772
if (syntax & (unsigned int )(((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3773
  goto handle_alt;
} else {
#line 3775
  goto normal_char;
}
case 124: 
#line 3779
if (syntax & (unsigned int )(((((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3780
  goto handle_alt;
} else {
#line 3782
  goto normal_char;
}
case 123: 
#line 3786
if (syntax & (unsigned int )(((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3786
  if (syntax & (unsigned int )((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3787
    goto handle_interval;
  } else {
#line 3789
    goto normal_char;
  }
} else {
#line 3789
  goto normal_char;
}
case 92: 
#line 3793
if ((unsigned long )p == (unsigned long )pend) {
#line 3793
  return ((reg_errcode_t )5);
} else {

}
#line 3798
while (1) {
#line 3798
  if ((unsigned long )p == (unsigned long )pend) {
#line 3798
    return ((reg_errcode_t )14);
  } else {

  }
#line 3798
  tmp___74 = p;
#line 3798
  p ++;
#line 3798
  c = (unsigned char )*tmp___74;
#line 3798
  break;
}
#line 3800
switch ((int )c) {
case 40: 
#line 3803
if (syntax & (unsigned int )(((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3804
  goto normal_backslash;
} else {

}
handle_open: 
#line 3807
(bufp->re_nsub) ++;
#line 3808
regnum ++;
#line 3810
if (compile_stack.avail == compile_stack.size) {
#line 3812
  tmp___75 = realloc((void *)compile_stack.stack,
                     (unsigned long )(compile_stack.size << 1) * sizeof(compile_stack_elt_t ));
#line 3812
  compile_stack.stack = (compile_stack_elt_t *)tmp___75;
#line 3814
  if ((unsigned long )compile_stack.stack == (unsigned long )((void *)0)) {
#line 3814
    return ((reg_errcode_t )12);
  } else {

  }
#line 3816
  compile_stack.size <<= 1;
} else {

}
#line 3823
(compile_stack.stack + compile_stack.avail)->begalt_offset = (pattern_offset_t )(begalt - bufp->buffer);
#line 3824
if (fixup_alt_jump) {
#line 3824
  (compile_stack.stack + compile_stack.avail)->fixup_alt_jump = (pattern_offset_t )((fixup_alt_jump - bufp->buffer) + 1L);
} else {
#line 3824
  (compile_stack.stack + compile_stack.avail)->fixup_alt_jump = 0;
}
#line 3826
(compile_stack.stack + compile_stack.avail)->laststart_offset = (pattern_offset_t )(b - bufp->buffer);
#line 3827
(compile_stack.stack + compile_stack.avail)->regnum = regnum;
#line 3833
if (regnum <= 255U) {
#line 3835
  (compile_stack.stack + compile_stack.avail)->inner_group_offset = (pattern_offset_t )((b - bufp->buffer) + 2L);
#line 3836
  while (1) {
#line 3836
    while ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated) {
#line 3836
      while (1) {
#line 3836
        old_buffer___8 = bufp->buffer;
#line 3836
        if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3836
          return ((reg_errcode_t )15);
        } else {

        }
#line 3836
        bufp->allocated <<= 1;
#line 3836
        if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3836
          bufp->allocated = (unsigned long )(1L << 16);
        } else {

        }
#line 3836
        tmp___76 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3836
        bufp->buffer = (unsigned char *)tmp___76;
#line 3836
        if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3836
          return ((reg_errcode_t )12);
        } else {

        }
#line 3836
        if ((unsigned long )old_buffer___8 != (unsigned long )bufp->buffer) {
#line 3836
          b = bufp->buffer + (b - old_buffer___8);
#line 3836
          begalt = bufp->buffer + (begalt - old_buffer___8);
#line 3836
          if (fixup_alt_jump) {
#line 3836
            fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___8);
          } else {

          }
#line 3836
          if (laststart) {
#line 3836
            laststart = bufp->buffer + (laststart - old_buffer___8);
          } else {

          }
#line 3836
          if (pending_exact) {
#line 3836
            pending_exact = bufp->buffer + (pending_exact - old_buffer___8);
          } else {

          }
        } else {

        }
#line 3836
        break;
      }
    }
#line 3836
    tmp___77 = b;
#line 3836
    b ++;
#line 3836
    *tmp___77 = (unsigned char)5;
#line 3836
    tmp___78 = b;
#line 3836
    b ++;
#line 3836
    *tmp___78 = (unsigned char )regnum;
#line 3836
    tmp___79 = b;
#line 3836
    b ++;
#line 3836
    *tmp___79 = (unsigned char)0;
#line 3836
    break;
  }
} else {

}
#line 3839
(compile_stack.avail) ++;
#line 3841
fixup_alt_jump = (unsigned char *)0;
#line 3842
laststart = (unsigned char *)0;
#line 3843
begalt = b;
#line 3847
pending_exact = (unsigned char *)0;
#line 3848
break;
case 41: 
#line 3852
if (syntax & (unsigned int )(((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3852
  goto normal_backslash;
} else {

}
#line 3854
if (compile_stack.avail == 0U) {
#line 3855
  if (syntax & (unsigned int )(((((((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3856
    goto normal_backslash;
  } else {
#line 3858
    return ((reg_errcode_t )16);
  }
} else {

}
handle_close: 
#line 3861
if (fixup_alt_jump) {
#line 3866
  while (1) {
#line 3866
    while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 3866
      while (1) {
#line 3866
        old_buffer___9 = bufp->buffer;
#line 3866
        if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3866
          return ((reg_errcode_t )15);
        } else {

        }
#line 3866
        bufp->allocated <<= 1;
#line 3866
        if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3866
          bufp->allocated = (unsigned long )(1L << 16);
        } else {

        }
#line 3866
        tmp___80 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3866
        bufp->buffer = (unsigned char *)tmp___80;
#line 3866
        if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3866
          return ((reg_errcode_t )12);
        } else {

        }
#line 3866
        if ((unsigned long )old_buffer___9 != (unsigned long )bufp->buffer) {
#line 3866
          b = bufp->buffer + (b - old_buffer___9);
#line 3866
          begalt = bufp->buffer + (begalt - old_buffer___9);
#line 3866
          if (fixup_alt_jump) {
#line 3866
            fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___9);
          } else {

          }
#line 3866
          if (laststart) {
#line 3866
            laststart = bufp->buffer + (laststart - old_buffer___9);
          } else {

          }
#line 3866
          if (pending_exact) {
#line 3866
            pending_exact = bufp->buffer + (pending_exact - old_buffer___9);
          } else {

          }
        } else {

        }
#line 3866
        break;
      }
    }
#line 3866
    tmp___81 = b;
#line 3866
    b ++;
#line 3866
    *tmp___81 = (unsigned char)19;
#line 3866
    break;
  }
#line 3870
  store_op1(13, fixup_alt_jump, ((b - 1) - fixup_alt_jump) - 3L);
} else {

}
#line 3874
if (compile_stack.avail == 0U) {
#line 3875
  if (syntax & (unsigned int )(((((((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3876
    goto normal_char;
  } else {
#line 3878
    return ((reg_errcode_t )16);
  }
} else {

}
#line 3889
(compile_stack.avail) --;
#line 3890
begalt = bufp->buffer + (compile_stack.stack + compile_stack.avail)->begalt_offset;
#line 3891
if ((compile_stack.stack + compile_stack.avail)->fixup_alt_jump) {
#line 3891
  fixup_alt_jump = (bufp->buffer + (compile_stack.stack + compile_stack.avail)->fixup_alt_jump) - 1;
} else {
#line 3891
  fixup_alt_jump = (unsigned char *)0;
}
#line 3895
laststart = bufp->buffer + (compile_stack.stack + compile_stack.avail)->laststart_offset;
#line 3896
this_group_regnum = (compile_stack.stack + compile_stack.avail)->regnum;
#line 3900
pending_exact = (unsigned char *)0;
#line 3904
if (this_group_regnum <= 255U) {
#line 3906
  inner_group_loc = bufp->buffer + (compile_stack.stack + compile_stack.avail)->inner_group_offset;
#line 3909
  *inner_group_loc = (unsigned char )(regnum - this_group_regnum);
#line 3910
  while (1) {
#line 3910
    while ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated) {
#line 3910
      while (1) {
#line 3910
        old_buffer___10 = bufp->buffer;
#line 3910
        if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3910
          return ((reg_errcode_t )15);
        } else {

        }
#line 3910
        bufp->allocated <<= 1;
#line 3910
        if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3910
          bufp->allocated = (unsigned long )(1L << 16);
        } else {

        }
#line 3910
        tmp___82 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3910
        bufp->buffer = (unsigned char *)tmp___82;
#line 3910
        if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3910
          return ((reg_errcode_t )12);
        } else {

        }
#line 3910
        if ((unsigned long )old_buffer___10 != (unsigned long )bufp->buffer) {
#line 3910
          b = bufp->buffer + (b - old_buffer___10);
#line 3910
          begalt = bufp->buffer + (begalt - old_buffer___10);
#line 3910
          if (fixup_alt_jump) {
#line 3910
            fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___10);
          } else {

          }
#line 3910
          if (laststart) {
#line 3910
            laststart = bufp->buffer + (laststart - old_buffer___10);
          } else {

          }
#line 3910
          if (pending_exact) {
#line 3910
            pending_exact = bufp->buffer + (pending_exact - old_buffer___10);
          } else {

          }
        } else {

        }
#line 3910
        break;
      }
    }
#line 3910
    tmp___83 = b;
#line 3910
    b ++;
#line 3910
    *tmp___83 = (unsigned char)6;
#line 3910
    tmp___84 = b;
#line 3910
    b ++;
#line 3910
    *tmp___84 = (unsigned char )this_group_regnum;
#line 3910
    tmp___85 = b;
#line 3910
    b ++;
#line 3910
    *tmp___85 = (unsigned char )(regnum - this_group_regnum);
#line 3910
    break;
  }
} else {

}
#line 3914
break;
case 124: 
#line 3918
if (syntax & (unsigned int )((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3919
  goto normal_backslash;
} else
#line 3918
if (syntax & (unsigned int )(((((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3919
  goto normal_backslash;
} else {

}
handle_alt: 
#line 3921
if (syntax & (unsigned int )((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3922
  goto normal_char;
} else {

}
#line 3926
while ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated) {
#line 3926
  while (1) {
#line 3926
    old_buffer___11 = bufp->buffer;
#line 3926
    if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3926
      return ((reg_errcode_t )15);
    } else {

    }
#line 3926
    bufp->allocated <<= 1;
#line 3926
    if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3926
      bufp->allocated = (unsigned long )(1L << 16);
    } else {

    }
#line 3926
    tmp___86 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3926
    bufp->buffer = (unsigned char *)tmp___86;
#line 3926
    if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3926
      return ((reg_errcode_t )12);
    } else {

    }
#line 3926
    if ((unsigned long )old_buffer___11 != (unsigned long )bufp->buffer) {
#line 3926
      b = bufp->buffer + (b - old_buffer___11);
#line 3926
      begalt = bufp->buffer + (begalt - old_buffer___11);
#line 3926
      if (fixup_alt_jump) {
#line 3926
        fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___11);
      } else {

      }
#line 3926
      if (laststart) {
#line 3926
        laststart = bufp->buffer + (laststart - old_buffer___11);
      } else {

      }
#line 3926
      if (pending_exact) {
#line 3926
        pending_exact = bufp->buffer + (pending_exact - old_buffer___11);
      } else {

      }
    } else {

    }
#line 3926
    break;
  }
}
#line 3927
insert_op1(14, begalt, ((b + 6) - begalt) - 3L, b);
#line 3928
pending_exact = (unsigned char *)0;
#line 3929
b += 3;
#line 3947
if (fixup_alt_jump) {
#line 3948
  store_op1(13, fixup_alt_jump, (b - fixup_alt_jump) - 3L);
} else {

}
#line 3953
fixup_alt_jump = b;
#line 3954
while ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated) {
#line 3954
  while (1) {
#line 3954
    old_buffer___12 = bufp->buffer;
#line 3954
    if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3954
      return ((reg_errcode_t )15);
    } else {

    }
#line 3954
    bufp->allocated <<= 1;
#line 3954
    if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3954
      bufp->allocated = (unsigned long )(1L << 16);
    } else {

    }
#line 3954
    tmp___87 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3954
    bufp->buffer = (unsigned char *)tmp___87;
#line 3954
    if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3954
      return ((reg_errcode_t )12);
    } else {

    }
#line 3954
    if ((unsigned long )old_buffer___12 != (unsigned long )bufp->buffer) {
#line 3954
      b = bufp->buffer + (b - old_buffer___12);
#line 3954
      begalt = bufp->buffer + (begalt - old_buffer___12);
#line 3954
      if (fixup_alt_jump) {
#line 3954
        fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___12);
      } else {

      }
#line 3954
      if (laststart) {
#line 3954
        laststart = bufp->buffer + (laststart - old_buffer___12);
      } else {

      }
#line 3954
      if (pending_exact) {
#line 3954
        pending_exact = bufp->buffer + (pending_exact - old_buffer___12);
      } else {

      }
    } else {

    }
#line 3954
    break;
  }
}
#line 3955
b += 3;
#line 3957
laststart = (unsigned char *)0;
#line 3958
begalt = b;
#line 3959
break;
case 123: 
#line 3964
if (! (syntax & (unsigned int )(((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
#line 3969
  goto normal_backslash;
} else
#line 3964
if (syntax & (unsigned int )(((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3964
  if (syntax & (unsigned int )((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3969
    goto normal_backslash;
  } else {
#line 3964
    goto _L___21;
  }
} else
_L___21: /* CIL Label */ 
#line 3964
if ((unsigned long )(p - 2) == (unsigned long )pattern) {
#line 3964
  if ((unsigned long )p == (unsigned long )pend) {
#line 3969
    goto normal_backslash;
  } else {

  }
} else {

}
handle_interval: 
#line 3976
lower_bound = -1;
#line 3976
upper_bound = -1;
#line 3978
beg_interval = p - 1;
#line 3980
if ((unsigned long )p == (unsigned long )pend) {
#line 3982
  if (syntax & (unsigned int )((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3983
    goto unfetch_interval;
  } else {
#line 3985
    return ((reg_errcode_t )9);
  }
} else {

}
#line 3988
if ((unsigned long )p != (unsigned long )pend) {
#line 3988
  while (1) {
#line 3988
    if ((unsigned long )p == (unsigned long )pend) {
#line 3988
      return ((reg_errcode_t )14);
    } else {

    }
#line 3988
    tmp___88 = p;
#line 3988
    p ++;
#line 3988
    c = (unsigned char )*tmp___88;
#line 3988
    if (translate) {
#line 3988
      c = (unsigned char )*(translate + c);
    } else {

    }
#line 3988
    break;
  }
#line 3988
  while (1) {
#line 3988
    if (((int )c & -128) == 0) {
#line 3988
      tmp___90 = __ctype_b_loc();
#line 3988
      if ((int const   )*(*tmp___90 + (int )c) & 2048) {

      } else {
#line 3988
        break;
      }
    } else {
#line 3988
      break;
    }
#line 3988
    if (lower_bound < 0) {
#line 3988
      lower_bound = 0;
    } else {

    }
#line 3988
    lower_bound = (lower_bound * 10 + (int )c) - 48;
#line 3988
    if ((unsigned long )p == (unsigned long )pend) {
#line 3988
      break;
    } else {

    }
#line 3988
    while (1) {
#line 3988
      if ((unsigned long )p == (unsigned long )pend) {
#line 3988
        return ((reg_errcode_t )14);
      } else {

      }
#line 3988
      tmp___89 = p;
#line 3988
      p ++;
#line 3988
      c = (unsigned char )*tmp___89;
#line 3988
      if (translate) {
#line 3988
        c = (unsigned char )*(translate + c);
      } else {

      }
#line 3988
      break;
    }
  }
} else {

}
#line 3990
if ((int )c == 44) {
#line 3992
  if ((unsigned long )p != (unsigned long )pend) {
#line 3992
    while (1) {
#line 3992
      if ((unsigned long )p == (unsigned long )pend) {
#line 3992
        return ((reg_errcode_t )14);
      } else {

      }
#line 3992
      tmp___91 = p;
#line 3992
      p ++;
#line 3992
      c = (unsigned char )*tmp___91;
#line 3992
      if (translate) {
#line 3992
        c = (unsigned char )*(translate + c);
      } else {

      }
#line 3992
      break;
    }
#line 3992
    while (1) {
#line 3992
      if (((int )c & -128) == 0) {
#line 3992
        tmp___93 = __ctype_b_loc();
#line 3992
        if ((int const   )*(*tmp___93 + (int )c) & 2048) {

        } else {
#line 3992
          break;
        }
      } else {
#line 3992
        break;
      }
#line 3992
      if (upper_bound < 0) {
#line 3992
        upper_bound = 0;
      } else {

      }
#line 3992
      upper_bound = (upper_bound * 10 + (int )c) - 48;
#line 3992
      if ((unsigned long )p == (unsigned long )pend) {
#line 3992
        break;
      } else {

      }
#line 3992
      while (1) {
#line 3992
        if ((unsigned long )p == (unsigned long )pend) {
#line 3992
          return ((reg_errcode_t )14);
        } else {

        }
#line 3992
        tmp___92 = p;
#line 3992
        p ++;
#line 3992
        c = (unsigned char )*tmp___92;
#line 3992
        if (translate) {
#line 3992
          c = (unsigned char )*(translate + c);
        } else {

        }
#line 3992
        break;
      }
    }
  } else {

  }
#line 3993
  if (upper_bound < 0) {
#line 3993
    upper_bound = (1 << 15) - 1;
  } else {

  }
} else {
#line 3997
  upper_bound = lower_bound;
}
#line 3999
if (lower_bound < 0) {
#line 3999
  goto _L___22;
} else
#line 3999
if (upper_bound > (1 << 15) - 1) {
#line 3999
  goto _L___22;
} else
#line 3999
if (lower_bound > upper_bound) {
  _L___22: /* CIL Label */ 
#line 4002
  if (syntax & (unsigned int )((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 4003
    goto unfetch_interval;
  } else {
#line 4005
    return ((reg_errcode_t )10);
  }
} else {

}
#line 4008
if (! (syntax & (unsigned int )((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
#line 4010
  if ((int )c != 92) {
#line 4010
    return ((reg_errcode_t )9);
  } else {

  }
#line 4012
  while (1) {
#line 4012
    if ((unsigned long )p == (unsigned long )pend) {
#line 4012
      return ((reg_errcode_t )14);
    } else {

    }
#line 4012
    tmp___94 = p;
#line 4012
    p ++;
#line 4012
    c = (unsigned char )*tmp___94;
#line 4012
    if (translate) {
#line 4012
      c = (unsigned char )*(translate + c);
    } else {

    }
#line 4012
    break;
  }
} else {

}
#line 4015
if ((int )c != 125) {
#line 4017
  if (syntax & (unsigned int )((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 4018
    goto unfetch_interval;
  } else {
#line 4020
    return ((reg_errcode_t )10);
  }
} else {

}
#line 4026
if (! laststart) {
#line 4028
  if (syntax & (unsigned int )(((((1 << 1) << 1) << 1) << 1) << 1)) {
#line 4029
    return ((reg_errcode_t )13);
  } else
#line 4030
  if (syntax & (unsigned int )((((1 << 1) << 1) << 1) << 1)) {
#line 4031
    laststart = b;
  } else {
#line 4033
    goto unfetch_interval;
  }
} else {

}
#line 4039
if (upper_bound == 0) {
#line 4041
  while ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated) {
#line 4041
    while (1) {
#line 4041
      old_buffer___13 = bufp->buffer;
#line 4041
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4041
        return ((reg_errcode_t )15);
      } else {

      }
#line 4041
      bufp->allocated <<= 1;
#line 4041
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4041
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 4041
      tmp___95 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4041
      bufp->buffer = (unsigned char *)tmp___95;
#line 4041
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4041
        return ((reg_errcode_t )12);
      } else {

      }
#line 4041
      if ((unsigned long )old_buffer___13 != (unsigned long )bufp->buffer) {
#line 4041
        b = bufp->buffer + (b - old_buffer___13);
#line 4041
        begalt = bufp->buffer + (begalt - old_buffer___13);
#line 4041
        if (fixup_alt_jump) {
#line 4041
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___13);
        } else {

        }
#line 4041
        if (laststart) {
#line 4041
          laststart = bufp->buffer + (laststart - old_buffer___13);
        } else {

        }
#line 4041
        if (pending_exact) {
#line 4041
          pending_exact = bufp->buffer + (pending_exact - old_buffer___13);
        } else {

        }
      } else {

      }
#line 4041
      break;
    }
  }
#line 4042
  insert_op1(12, laststart, ((b + 3) - laststart) - 3L, b);
#line 4043
  b += 3;
} else {
#line 4058
  nbytes = (unsigned int )(10 + (upper_bound > 1) * 10);
#line 4060
  while ((unsigned long )((b - bufp->buffer) + (long )nbytes) > bufp->allocated) {
#line 4060
    while (1) {
#line 4060
      old_buffer___14 = bufp->buffer;
#line 4060
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4060
        return ((reg_errcode_t )15);
      } else {

      }
#line 4060
      bufp->allocated <<= 1;
#line 4060
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4060
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 4060
      tmp___96 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4060
      bufp->buffer = (unsigned char *)tmp___96;
#line 4060
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4060
        return ((reg_errcode_t )12);
      } else {

      }
#line 4060
      if ((unsigned long )old_buffer___14 != (unsigned long )bufp->buffer) {
#line 4060
        b = bufp->buffer + (b - old_buffer___14);
#line 4060
        begalt = bufp->buffer + (begalt - old_buffer___14);
#line 4060
        if (fixup_alt_jump) {
#line 4060
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___14);
        } else {

        }
#line 4060
        if (laststart) {
#line 4060
          laststart = bufp->buffer + (laststart - old_buffer___14);
        } else {

        }
#line 4060
        if (pending_exact) {
#line 4060
          pending_exact = bufp->buffer + (pending_exact - old_buffer___14);
        } else {

        }
      } else {

      }
#line 4060
      break;
    }
  }
#line 4067
  insert_op2(20, laststart,
             (((b + 5) + (upper_bound > 1) * 5) - laststart) - 3L,
             lower_bound, b);
#line 4070
  b += 5;
#line 4076
  insert_op2(22, laststart, 5, lower_bound, b);
#line 4077
  b += 5;
#line 4079
  if (upper_bound > 1) {
#line 4087
    store_op2(21, b, ((laststart + 5) - b) - 3L, upper_bound - 1);
#line 4089
    b += 5;
#line 4105
    insert_op2(22, laststart, b - laststart, upper_bound - 1, b);
#line 4107
    b += 5;
  } else {

  }
}
#line 4110
pending_exact = (unsigned char *)0;
#line 4111
beg_interval = (char const   *)((void *)0);
#line 4113
break;
unfetch_interval: 
#line 4118
p = beg_interval;
#line 4119
beg_interval = (char const   *)((void *)0);
#line 4122
while (1) {
#line 4122
  if ((unsigned long )p == (unsigned long )pend) {
#line 4122
    return ((reg_errcode_t )14);
  } else {

  }
#line 4122
  tmp___97 = p;
#line 4122
  p ++;
#line 4122
  c = (unsigned char )*tmp___97;
#line 4122
  if (translate) {
#line 4122
    c = (unsigned char )*(translate + c);
  } else {

  }
#line 4122
  break;
}
#line 4124
if (! (syntax & (unsigned int )((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
#line 4126
  if ((unsigned long )p > (unsigned long )pattern) {
#line 4126
    if ((int const   )*(p + -1) == 92) {
#line 4127
      goto normal_backslash;
    } else {

    }
  } else {

  }
} else {

}
#line 4129
goto normal_char;
case 119: 
#line 4153
laststart = b;
#line 4154
while (1) {
#line 4154
  while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 4154
    while (1) {
#line 4154
      old_buffer___15 = bufp->buffer;
#line 4154
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4154
        return ((reg_errcode_t )15);
      } else {

      }
#line 4154
      bufp->allocated <<= 1;
#line 4154
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4154
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 4154
      tmp___98 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4154
      bufp->buffer = (unsigned char *)tmp___98;
#line 4154
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4154
        return ((reg_errcode_t )12);
      } else {

      }
#line 4154
      if ((unsigned long )old_buffer___15 != (unsigned long )bufp->buffer) {
#line 4154
        b = bufp->buffer + (b - old_buffer___15);
#line 4154
        begalt = bufp->buffer + (begalt - old_buffer___15);
#line 4154
        if (fixup_alt_jump) {
#line 4154
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___15);
        } else {

        }
#line 4154
        if (laststart) {
#line 4154
          laststart = bufp->buffer + (laststart - old_buffer___15);
        } else {

        }
#line 4154
        if (pending_exact) {
#line 4154
          pending_exact = bufp->buffer + (pending_exact - old_buffer___15);
        } else {

        }
      } else {

      }
#line 4154
      break;
    }
  }
#line 4154
  tmp___99 = b;
#line 4154
  b ++;
#line 4154
  *tmp___99 = (unsigned char)23;
#line 4154
  break;
}
#line 4155
break;
case 87: 
#line 4159
laststart = b;
#line 4160
while (1) {
#line 4160
  while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 4160
    while (1) {
#line 4160
      old_buffer___16 = bufp->buffer;
#line 4160
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4160
        return ((reg_errcode_t )15);
      } else {

      }
#line 4160
      bufp->allocated <<= 1;
#line 4160
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4160
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 4160
      tmp___100 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4160
      bufp->buffer = (unsigned char *)tmp___100;
#line 4160
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4160
        return ((reg_errcode_t )12);
      } else {

      }
#line 4160
      if ((unsigned long )old_buffer___16 != (unsigned long )bufp->buffer) {
#line 4160
        b = bufp->buffer + (b - old_buffer___16);
#line 4160
        begalt = bufp->buffer + (begalt - old_buffer___16);
#line 4160
        if (fixup_alt_jump) {
#line 4160
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___16);
        } else {

        }
#line 4160
        if (laststart) {
#line 4160
          laststart = bufp->buffer + (laststart - old_buffer___16);
        } else {

        }
#line 4160
        if (pending_exact) {
#line 4160
          pending_exact = bufp->buffer + (pending_exact - old_buffer___16);
        } else {

        }
      } else {

      }
#line 4160
      break;
    }
  }
#line 4160
  tmp___101 = b;
#line 4160
  b ++;
#line 4160
  *tmp___101 = (unsigned char)24;
#line 4160
  break;
}
#line 4161
break;
case 60: 
#line 4165
while (1) {
#line 4165
  while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 4165
    while (1) {
#line 4165
      old_buffer___17 = bufp->buffer;
#line 4165
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4165
        return ((reg_errcode_t )15);
      } else {

      }
#line 4165
      bufp->allocated <<= 1;
#line 4165
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4165
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 4165
      tmp___102 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4165
      bufp->buffer = (unsigned char *)tmp___102;
#line 4165
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4165
        return ((reg_errcode_t )12);
      } else {

      }
#line 4165
      if ((unsigned long )old_buffer___17 != (unsigned long )bufp->buffer) {
#line 4165
        b = bufp->buffer + (b - old_buffer___17);
#line 4165
        begalt = bufp->buffer + (begalt - old_buffer___17);
#line 4165
        if (fixup_alt_jump) {
#line 4165
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___17);
        } else {

        }
#line 4165
        if (laststart) {
#line 4165
          laststart = bufp->buffer + (laststart - old_buffer___17);
        } else {

        }
#line 4165
        if (pending_exact) {
#line 4165
          pending_exact = bufp->buffer + (pending_exact - old_buffer___17);
        } else {

        }
      } else {

      }
#line 4165
      break;
    }
  }
#line 4165
  tmp___103 = b;
#line 4165
  b ++;
#line 4165
  *tmp___103 = (unsigned char)25;
#line 4165
  break;
}
#line 4166
break;
case 62: 
#line 4169
while (1) {
#line 4169
  while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 4169
    while (1) {
#line 4169
      old_buffer___18 = bufp->buffer;
#line 4169
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4169
        return ((reg_errcode_t )15);
      } else {

      }
#line 4169
      bufp->allocated <<= 1;
#line 4169
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4169
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 4169
      tmp___104 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4169
      bufp->buffer = (unsigned char *)tmp___104;
#line 4169
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4169
        return ((reg_errcode_t )12);
      } else {

      }
#line 4169
      if ((unsigned long )old_buffer___18 != (unsigned long )bufp->buffer) {
#line 4169
        b = bufp->buffer + (b - old_buffer___18);
#line 4169
        begalt = bufp->buffer + (begalt - old_buffer___18);
#line 4169
        if (fixup_alt_jump) {
#line 4169
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___18);
        } else {

        }
#line 4169
        if (laststart) {
#line 4169
          laststart = bufp->buffer + (laststart - old_buffer___18);
        } else {

        }
#line 4169
        if (pending_exact) {
#line 4169
          pending_exact = bufp->buffer + (pending_exact - old_buffer___18);
        } else {

        }
      } else {

      }
#line 4169
      break;
    }
  }
#line 4169
  tmp___105 = b;
#line 4169
  b ++;
#line 4169
  *tmp___105 = (unsigned char)26;
#line 4169
  break;
}
#line 4170
break;
case 98: 
#line 4173
while (1) {
#line 4173
  while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 4173
    while (1) {
#line 4173
      old_buffer___19 = bufp->buffer;
#line 4173
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4173
        return ((reg_errcode_t )15);
      } else {

      }
#line 4173
      bufp->allocated <<= 1;
#line 4173
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4173
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 4173
      tmp___106 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4173
      bufp->buffer = (unsigned char *)tmp___106;
#line 4173
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4173
        return ((reg_errcode_t )12);
      } else {

      }
#line 4173
      if ((unsigned long )old_buffer___19 != (unsigned long )bufp->buffer) {
#line 4173
        b = bufp->buffer + (b - old_buffer___19);
#line 4173
        begalt = bufp->buffer + (begalt - old_buffer___19);
#line 4173
        if (fixup_alt_jump) {
#line 4173
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___19);
        } else {

        }
#line 4173
        if (laststart) {
#line 4173
          laststart = bufp->buffer + (laststart - old_buffer___19);
        } else {

        }
#line 4173
        if (pending_exact) {
#line 4173
          pending_exact = bufp->buffer + (pending_exact - old_buffer___19);
        } else {

        }
      } else {

      }
#line 4173
      break;
    }
  }
#line 4173
  tmp___107 = b;
#line 4173
  b ++;
#line 4173
  *tmp___107 = (unsigned char)27;
#line 4173
  break;
}
#line 4174
break;
case 66: 
#line 4177
while (1) {
#line 4177
  while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 4177
    while (1) {
#line 4177
      old_buffer___20 = bufp->buffer;
#line 4177
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4177
        return ((reg_errcode_t )15);
      } else {

      }
#line 4177
      bufp->allocated <<= 1;
#line 4177
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4177
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 4177
      tmp___108 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4177
      bufp->buffer = (unsigned char *)tmp___108;
#line 4177
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4177
        return ((reg_errcode_t )12);
      } else {

      }
#line 4177
      if ((unsigned long )old_buffer___20 != (unsigned long )bufp->buffer) {
#line 4177
        b = bufp->buffer + (b - old_buffer___20);
#line 4177
        begalt = bufp->buffer + (begalt - old_buffer___20);
#line 4177
        if (fixup_alt_jump) {
#line 4177
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___20);
        } else {

        }
#line 4177
        if (laststart) {
#line 4177
          laststart = bufp->buffer + (laststart - old_buffer___20);
        } else {

        }
#line 4177
        if (pending_exact) {
#line 4177
          pending_exact = bufp->buffer + (pending_exact - old_buffer___20);
        } else {

        }
      } else {

      }
#line 4177
      break;
    }
  }
#line 4177
  tmp___109 = b;
#line 4177
  b ++;
#line 4177
  *tmp___109 = (unsigned char)28;
#line 4177
  break;
}
#line 4178
break;
case 96: 
#line 4181
while (1) {
#line 4181
  while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 4181
    while (1) {
#line 4181
      old_buffer___21 = bufp->buffer;
#line 4181
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4181
        return ((reg_errcode_t )15);
      } else {

      }
#line 4181
      bufp->allocated <<= 1;
#line 4181
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4181
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 4181
      tmp___110 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4181
      bufp->buffer = (unsigned char *)tmp___110;
#line 4181
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4181
        return ((reg_errcode_t )12);
      } else {

      }
#line 4181
      if ((unsigned long )old_buffer___21 != (unsigned long )bufp->buffer) {
#line 4181
        b = bufp->buffer + (b - old_buffer___21);
#line 4181
        begalt = bufp->buffer + (begalt - old_buffer___21);
#line 4181
        if (fixup_alt_jump) {
#line 4181
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___21);
        } else {

        }
#line 4181
        if (laststart) {
#line 4181
          laststart = bufp->buffer + (laststart - old_buffer___21);
        } else {

        }
#line 4181
        if (pending_exact) {
#line 4181
          pending_exact = bufp->buffer + (pending_exact - old_buffer___21);
        } else {

        }
      } else {

      }
#line 4181
      break;
    }
  }
#line 4181
  tmp___111 = b;
#line 4181
  b ++;
#line 4181
  *tmp___111 = (unsigned char)10;
#line 4181
  break;
}
#line 4182
break;
case 39: 
#line 4185
while (1) {
#line 4185
  while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 4185
    while (1) {
#line 4185
      old_buffer___22 = bufp->buffer;
#line 4185
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4185
        return ((reg_errcode_t )15);
      } else {

      }
#line 4185
      bufp->allocated <<= 1;
#line 4185
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4185
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 4185
      tmp___112 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4185
      bufp->buffer = (unsigned char *)tmp___112;
#line 4185
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4185
        return ((reg_errcode_t )12);
      } else {

      }
#line 4185
      if ((unsigned long )old_buffer___22 != (unsigned long )bufp->buffer) {
#line 4185
        b = bufp->buffer + (b - old_buffer___22);
#line 4185
        begalt = bufp->buffer + (begalt - old_buffer___22);
#line 4185
        if (fixup_alt_jump) {
#line 4185
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___22);
        } else {

        }
#line 4185
        if (laststart) {
#line 4185
          laststart = bufp->buffer + (laststart - old_buffer___22);
        } else {

        }
#line 4185
        if (pending_exact) {
#line 4185
          pending_exact = bufp->buffer + (pending_exact - old_buffer___22);
        } else {

        }
      } else {

      }
#line 4185
      break;
    }
  }
#line 4185
  tmp___113 = b;
#line 4185
  b ++;
#line 4185
  *tmp___113 = (unsigned char)11;
#line 4185
  break;
}
#line 4186
break;
case 57: 
case 56: 
case 55: 
case 54: 
case 53: 
case 52: 
case 51: 
case 50: 
case 49: 
#line 4190
if (syntax & (unsigned int )((((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 4191
  goto normal_char;
} else {

}
#line 4193
c1 = (unsigned char )((int )c - 48);
#line 4195
if ((regnum_t )c1 > regnum) {
#line 4196
  return ((reg_errcode_t )6);
} else {

}
#line 4199
tmp___114 = group_in_compile_stack(compile_stack, (int )c1);
#line 4199
if (tmp___114) {
#line 4200
  goto normal_char;
} else {

}
#line 4202
laststart = b;
#line 4203
while (1) {
#line 4203
  while ((unsigned long )((b - bufp->buffer) + 2L) > bufp->allocated) {
#line 4203
    while (1) {
#line 4203
      old_buffer___23 = bufp->buffer;
#line 4203
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4203
        return ((reg_errcode_t )15);
      } else {

      }
#line 4203
      bufp->allocated <<= 1;
#line 4203
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4203
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 4203
      tmp___115 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4203
      bufp->buffer = (unsigned char *)tmp___115;
#line 4203
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4203
        return ((reg_errcode_t )12);
      } else {

      }
#line 4203
      if ((unsigned long )old_buffer___23 != (unsigned long )bufp->buffer) {
#line 4203
        b = bufp->buffer + (b - old_buffer___23);
#line 4203
        begalt = bufp->buffer + (begalt - old_buffer___23);
#line 4203
        if (fixup_alt_jump) {
#line 4203
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___23);
        } else {

        }
#line 4203
        if (laststart) {
#line 4203
          laststart = bufp->buffer + (laststart - old_buffer___23);
        } else {

        }
#line 4203
        if (pending_exact) {
#line 4203
          pending_exact = bufp->buffer + (pending_exact - old_buffer___23);
        } else {

        }
      } else {

      }
#line 4203
      break;
    }
  }
#line 4203
  tmp___116 = b;
#line 4203
  b ++;
#line 4203
  *tmp___116 = (unsigned char)7;
#line 4203
  tmp___117 = b;
#line 4203
  b ++;
#line 4203
  *tmp___117 = c1;
#line 4203
  break;
}
#line 4204
break;
case 63: 
case 43: 
#line 4209
if (syntax & (unsigned int )(1 << 1)) {
#line 4210
  goto handle_plus;
}
normal_backslash: 
default: 
#line 4219
if (translate) {
#line 4219
  c = (unsigned char )*(translate + c);
} else {
#line 4219
  c = c;
}
#line 4220
goto normal_char;
}
#line 4222
break;
normal_char: 
default: 
#line 4229
if (! pending_exact) {
#line 4229
  goto _L___23;
} else
#line 4229
if ((unsigned long )((pending_exact + (int )*pending_exact) + 1) != (unsigned long )b) {
#line 4229
  goto _L___23;
} else
#line 4229
if ((int )*pending_exact == (1 << 8) - 1) {
#line 4229
  goto _L___23;
} else
#line 4229
if ((int const   )*p == 42) {
#line 4229
  goto _L___23;
} else
#line 4229
if ((int const   )*p == 94) {
#line 4229
  goto _L___23;
} else {
#line 4229
  if (syntax & (unsigned int )(1 << 1)) {
#line 4229
    if ((int const   )*p == 92) {
#line 4229
      if ((int const   )*(p + 1) == 43) {
#line 4229
        tmp___121 = 1;
      } else
#line 4229
      if ((int const   )*(p + 1) == 63) {
#line 4229
        tmp___121 = 1;
      } else {
#line 4229
        tmp___121 = 0;
      }
    } else {
#line 4229
      tmp___121 = 0;
    }
#line 4229
    tmp___123 = tmp___121;
  } else {
#line 4229
    if ((int const   )*p == 43) {
#line 4229
      tmp___122 = 1;
    } else
#line 4229
    if ((int const   )*p == 63) {
#line 4229
      tmp___122 = 1;
    } else {
#line 4229
      tmp___122 = 0;
    }
#line 4229
    tmp___123 = tmp___122;
  }
#line 4229
  if (tmp___123) {
#line 4229
    goto _L___23;
  } else
#line 4229
  if (syntax & (unsigned int )(((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 4229
    if (syntax & (unsigned int )((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 4229
      tmp___125 = (int const   )*p == 123;
    } else {
#line 4229
      if ((int const   )*(p + 0) == 92) {
#line 4229
        if ((int const   )*(p + 1) == 123) {
#line 4229
          tmp___124 = 1;
        } else {
#line 4229
          tmp___124 = 0;
        }
      } else {
#line 4229
        tmp___124 = 0;
      }
#line 4229
      tmp___125 = tmp___124;
    }
#line 4229
    if (tmp___125) {
      _L___23: /* CIL Label */ 
#line 4249
      laststart = b;
#line 4251
      while (1) {
#line 4251
        while ((unsigned long )((b - bufp->buffer) + 2L) > bufp->allocated) {
#line 4251
          while (1) {
#line 4251
            old_buffer___24 = bufp->buffer;
#line 4251
            if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4251
              return ((reg_errcode_t )15);
            } else {

            }
#line 4251
            bufp->allocated <<= 1;
#line 4251
            if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4251
              bufp->allocated = (unsigned long )(1L << 16);
            } else {

            }
#line 4251
            tmp___118 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4251
            bufp->buffer = (unsigned char *)tmp___118;
#line 4251
            if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4251
              return ((reg_errcode_t )12);
            } else {

            }
#line 4251
            if ((unsigned long )old_buffer___24 != (unsigned long )bufp->buffer) {
#line 4251
              b = bufp->buffer + (b - old_buffer___24);
#line 4251
              begalt = bufp->buffer + (begalt - old_buffer___24);
#line 4251
              if (fixup_alt_jump) {
#line 4251
                fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___24);
              } else {

              }
#line 4251
              if (laststart) {
#line 4251
                laststart = bufp->buffer + (laststart - old_buffer___24);
              } else {

              }
#line 4251
              if (pending_exact) {
#line 4251
                pending_exact = bufp->buffer + (pending_exact - old_buffer___24);
              } else {

              }
            } else {

            }
#line 4251
            break;
          }
        }
#line 4251
        tmp___119 = b;
#line 4251
        b ++;
#line 4251
        *tmp___119 = (unsigned char)1;
#line 4251
        tmp___120 = b;
#line 4251
        b ++;
#line 4251
        *tmp___120 = (unsigned char)0;
#line 4251
        break;
      }
#line 4252
      pending_exact = b - 1;
    } else {

    }
  } else {

  }
}
#line 4255
while (1) {
#line 4255
  while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 4255
    while (1) {
#line 4255
      old_buffer___25 = bufp->buffer;
#line 4255
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4255
        return ((reg_errcode_t )15);
      } else {

      }
#line 4255
      bufp->allocated <<= 1;
#line 4255
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4255
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 4255
      tmp___126 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4255
      bufp->buffer = (unsigned char *)tmp___126;
#line 4255
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4255
        return ((reg_errcode_t )12);
      } else {

      }
#line 4255
      if ((unsigned long )old_buffer___25 != (unsigned long )bufp->buffer) {
#line 4255
        b = bufp->buffer + (b - old_buffer___25);
#line 4255
        begalt = bufp->buffer + (begalt - old_buffer___25);
#line 4255
        if (fixup_alt_jump) {
#line 4255
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___25);
        } else {

        }
#line 4255
        if (laststart) {
#line 4255
          laststart = bufp->buffer + (laststart - old_buffer___25);
        } else {

        }
#line 4255
        if (pending_exact) {
#line 4255
          pending_exact = bufp->buffer + (pending_exact - old_buffer___25);
        } else {

        }
      } else {

      }
#line 4255
      break;
    }
  }
#line 4255
  tmp___127 = b;
#line 4255
  b ++;
#line 4255
  *tmp___127 = c;
#line 4255
  break;
}
#line 4256
*pending_exact = (unsigned char )((int )*pending_exact + 1);
#line 4257
break;
}
---------
SID [1495] -> Line 3405
#line 3405
break;
---------
SID [1494] -> Line -1

---------
SID [1493] -> Line 3405
#line 3405
c = (unsigned char )*(translate + c);
---------
SID [1492] -> Line 3405
#line 3405
if (translate) {
#line 3405
  c = (unsigned char )*(translate + c);
} else {

}
---------
SID [1491] -> Line 3405
#line 3405
c = (unsigned char )*tmp___4;
---------
SID [1490] -> Line 3405
#line 3405
p ++;
---------
SID [1489] -> Line 3405
#line 3405
tmp___4 = p;
---------
SID [1488] -> Line -1

---------
SID [1487] -> Line 3405
#line 3405
return ((reg_errcode_t )14);
---------
SID [1486] -> Line 3405
#line 3405
if ((unsigned long )p == (unsigned long )pend) {
#line 3405
  return ((reg_errcode_t )14);
} else {

}
---------
SID [1485] -> Line 3405
#line 3405
while (1) {
#line 3405
  if ((unsigned long )p == (unsigned long )pend) {
#line 3405
    return ((reg_errcode_t )14);
  } else {

  }
#line 3405
  tmp___4 = p;
#line 3405
  p ++;
#line 3405
  c = (unsigned char )*tmp___4;
#line 3405
  if (translate) {
#line 3405
    c = (unsigned char )*(translate + c);
  } else {

  }
#line 3405
  break;
}
---------
SID [1484] -> Line 3403
#line 3403
break;
---------
SID [1483] -> Line -1

---------
SID [1482] -> Line 3403
#line 3403
if ((unsigned long )p != (unsigned long )pend) {

} else {
#line 3403
  break;
}
---------
SID [1481] -> Line 3403
#line 3403
while ((unsigned long )p != (unsigned long )pend) {
#line 3405
  while (1) {
#line 3405
    if ((unsigned long )p == (unsigned long )pend) {
#line 3405
      return ((reg_errcode_t )14);
    } else {

    }
#line 3405
    tmp___4 = p;
#line 3405
    p ++;
#line 3405
    c = (unsigned char )*tmp___4;
#line 3405
    if (translate) {
#line 3405
      c = (unsigned char )*(translate + c);
    } else {

    }
#line 3405
    break;
  }
#line 3407
  switch ((int )c) {
  case 94: 
#line 3411
  if ((unsigned long )p == (unsigned long )(pattern + 1)) {
#line 3411
    goto _L;
  } else
#line 3411
  if (syntax & (unsigned int )(((1 << 1) << 1) << 1)) {
#line 3411
    goto _L;
  } else {
#line 3411
    tmp___7 = at_begline_loc_p(pattern, p, syntax);
#line 3411
    if (tmp___7) {
      _L: /* CIL Label */ 
#line 3417
      while (1) {
#line 3417
        while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 3417
          while (1) {
#line 3417
            old_buffer = bufp->buffer;
#line 3417
            if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3417
              return ((reg_errcode_t )15);
            } else {

            }
#line 3417
            bufp->allocated <<= 1;
#line 3417
            if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3417
              bufp->allocated = (unsigned long )(1L << 16);
            } else {

            }
#line 3417
            tmp___5 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3417
            bufp->buffer = (unsigned char *)tmp___5;
#line 3417
            if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3417
              return ((reg_errcode_t )12);
            } else {

            }
#line 3417
            if ((unsigned long )old_buffer != (unsigned long )bufp->buffer) {
#line 3417
              b = bufp->buffer + (b - old_buffer);
#line 3417
              begalt = bufp->buffer + (begalt - old_buffer);
#line 3417
              if (fixup_alt_jump) {
#line 3417
                fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer);
              } else {

              }
#line 3417
              if (laststart) {
#line 3417
                laststart = bufp->buffer + (laststart - old_buffer);
              } else {

              }
#line 3417
              if (pending_exact) {
#line 3417
                pending_exact = bufp->buffer + (pending_exact - old_buffer);
              } else {

              }
            } else {

            }
#line 3417
            break;
          }
        }
#line 3417
        tmp___6 = b;
#line 3417
        b ++;
#line 3417
        *tmp___6 = (unsigned char)8;
#line 3417
        break;
      }
    } else {
#line 3419
      goto normal_char;
    }
  }
#line 3421
  break;
  case 36: 
#line 3426
  if ((unsigned long )p == (unsigned long )pend) {
#line 3426
    goto _L___0;
  } else
#line 3426
  if (syntax & (unsigned int )(((1 << 1) << 1) << 1)) {
#line 3426
    goto _L___0;
  } else {
#line 3426
    tmp___10 = at_endline_loc_p(p, pend, syntax);
#line 3426
    if (tmp___10) {
      _L___0: /* CIL Label */ 
#line 3432
      while (1) {
#line 3432
        while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 3432
          while (1) {
#line 3432
            old_buffer___0 = bufp->buffer;
#line 3432
            if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3432
              return ((reg_errcode_t )15);
            } else {

            }
#line 3432
            bufp->allocated <<= 1;
#line 3432
            if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3432
              bufp->allocated = (unsigned long )(1L << 16);
            } else {

            }
#line 3432
            tmp___8 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3432
            bufp->buffer = (unsigned char *)tmp___8;
#line 3432
            if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3432
              return ((reg_errcode_t )12);
            } else {

            }
#line 3432
            if ((unsigned long )old_buffer___0 != (unsigned long )bufp->buffer) {
#line 3432
              b = bufp->buffer + (b - old_buffer___0);
#line 3432
              begalt = bufp->buffer + (begalt - old_buffer___0);
#line 3432
              if (fixup_alt_jump) {
#line 3432
                fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___0);
              } else {

              }
#line 3432
              if (laststart) {
#line 3432
                laststart = bufp->buffer + (laststart - old_buffer___0);
              } else {

              }
#line 3432
              if (pending_exact) {
#line 3432
                pending_exact = bufp->buffer + (pending_exact - old_buffer___0);
              } else {

              }
            } else {

            }
#line 3432
            break;
          }
        }
#line 3432
        tmp___9 = b;
#line 3432
        b ++;
#line 3432
        *tmp___9 = (unsigned char)9;
#line 3432
        break;
      }
    } else {
#line 3434
      goto normal_char;
    }
  }
#line 3436
  break;
  case 63: 
  case 43: 
#line 3441
  if (syntax & (unsigned int )(1 << 1)) {
#line 3443
    goto normal_char;
  } else
#line 3441
  if (syntax & (unsigned int )((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3443
    goto normal_char;
  } else {

  }
  case 42: 
  handle_plus: 
#line 3447
  if (! laststart) {
#line 3449
    if (syntax & (unsigned int )(((((1 << 1) << 1) << 1) << 1) << 1)) {
#line 3450
      return ((reg_errcode_t )13);
    } else
#line 3451
    if (! (syntax & (unsigned int )((((1 << 1) << 1) << 1) << 1))) {
#line 3452
      goto normal_char;
    } else {

    }
  } else {

  }
#line 3457
  keep_string_p = (boolean )0;
#line 3460
  zero_times_ok = (char)0;
#line 3460
  many_times_ok = (char)0;
#line 3467
  while (1) {
#line 3469
    zero_times_ok = (char )((int )zero_times_ok | ((int )c != 43));
#line 3470
    many_times_ok = (char )((int )many_times_ok | ((int )c != 63));
#line 3472
    if ((unsigned long )p == (unsigned long )pend) {
#line 3473
      break;
    } else {

    }
#line 3475
    while (1) {
#line 3475
      if ((unsigned long )p == (unsigned long )pend) {
#line 3475
        return ((reg_errcode_t )14);
      } else {

      }
#line 3475
      tmp___11 = p;
#line 3475
      p ++;
#line 3475
      c = (unsigned char )*tmp___11;
#line 3475
      if (translate) {
#line 3475
        c = (unsigned char )*(translate + c);
      } else {

      }
#line 3475
      break;
    }
#line 3477
    if ((int )c == 42) {

    } else
#line 3477
    if (! (syntax & (unsigned int )(1 << 1))) {
#line 3477
      if ((int )c == 43) {

      } else
#line 3477
      if ((int )c == 63) {

      } else {
#line 3477
        goto _L___1;
      }
    } else
    _L___1: /* CIL Label */ 
#line 3481
    if (syntax & (unsigned int )(1 << 1)) {
#line 3481
      if ((int )c == 92) {
#line 3483
        if ((unsigned long )p == (unsigned long )pend) {
#line 3483
          return ((reg_errcode_t )5);
        } else {

        }
#line 3485
        while (1) {
#line 3485
          if ((unsigned long )p == (unsigned long )pend) {
#line 3485
            return ((reg_errcode_t )14);
          } else {

          }
#line 3485
          tmp___12 = p;
#line 3485
          p ++;
#line 3485
          c1 = (unsigned char )*tmp___12;
#line 3485
          if (translate) {
#line 3485
            c1 = (unsigned char )*(translate + c1);
          } else {

          }
#line 3485
          break;
        }
#line 3486
        if ((int )c1 == 43) {

        } else
#line 3486
        if ((int )c1 == 63) {

        } else {
#line 3488
          p --;
#line 3489
          p --;
#line 3490
          break;
        }
#line 3493
        c = c1;
      } else {
#line 3497
        p --;
#line 3498
        break;
      }
    } else {
#line 3497
      p --;
#line 3498
      break;
    }
  }
#line 3506
  if (! laststart) {
#line 3507
    break;
  } else {

  }
#line 3511
  if (many_times_ok) {
#line 3525
    while ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated) {
#line 3525
      while (1) {
#line 3525
        old_buffer___1 = bufp->buffer;
#line 3525
        if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3525
          return ((reg_errcode_t )15);
        } else {

        }
#line 3525
        bufp->allocated <<= 1;
#line 3525
        if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3525
          bufp->allocated = (unsigned long )(1L << 16);
        } else {

        }
#line 3525
        tmp___13 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3525
        bufp->buffer = (unsigned char *)tmp___13;
#line 3525
        if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3525
          return ((reg_errcode_t )12);
        } else {

        }
#line 3525
        if ((unsigned long )old_buffer___1 != (unsigned long )bufp->buffer) {
#line 3525
          b = bufp->buffer + (b - old_buffer___1);
#line 3525
          begalt = bufp->buffer + (begalt - old_buffer___1);
#line 3525
          if (fixup_alt_jump) {
#line 3525
            fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___1);
          } else {

          }
#line 3525
          if (laststart) {
#line 3525
            laststart = bufp->buffer + (laststart - old_buffer___1);
          } else {

          }
#line 3525
          if (pending_exact) {
#line 3525
            pending_exact = bufp->buffer + (pending_exact - old_buffer___1);
          } else {

          }
        } else {

        }
#line 3525
        break;
      }
    }
#line 3532
    if (translate) {
#line 3532
      tmp___14 = (int )*(translate + (unsigned char )*(p - 2));
    } else {
#line 3532
      tmp___14 = (int )*(p - 2);
    }
#line 3532
    if (translate) {
#line 3532
      tmp___15 = (int )*(translate + (unsigned char )'.');
    } else {
#line 3532
      tmp___15 = '.';
    }
#line 3532
    if (tmp___14 == tmp___15) {
#line 3532
      if (zero_times_ok) {
#line 3532
        if ((unsigned long )p < (unsigned long )pend) {
#line 3532
          if (translate) {
#line 3532
            tmp___16 = (int )*(translate + (unsigned char )*p);
          } else {
#line 3532
            tmp___16 = (int )*p;
          }
#line 3532
          if (translate) {
#line 3532
            tmp___17 = (int )*(translate + (unsigned char )'\n');
          } else {
#line 3532
            tmp___17 = '\n';
          }
#line 3532
          if (tmp___16 == tmp___17) {
#line 3532
            if (! (syntax & (unsigned int )((((((1 << 1) << 1) << 1) << 1) << 1) << 1))) {
#line 3537
              store_op1(12, b, (laststart - b) - 3L);
#line 3538
              keep_string_p = (boolean )1;
            } else {
#line 3542
              store_op1(17, b, ((laststart - 3) - b) - 3L);
            }
          } else {
#line 3542
            store_op1(17, b, ((laststart - 3) - b) - 3L);
          }
        } else {
#line 3542
          store_op1(17, b, ((laststart - 3) - b) - 3L);
        }
      } else {
#line 3542
        store_op1(17, b, ((laststart - 3) - b) - 3L);
      }
    } else {
#line 3542
      store_op1(17, b, ((laststart - 3) - b) - 3L);
    }
#line 3545
    b += 3;
  } else {

  }
#line 3550
  while ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated) {
#line 3550
    while (1) {
#line 3550
      old_buffer___2 = bufp->buffer;
#line 3550
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3550
        return ((reg_errcode_t )15);
      } else {

      }
#line 3550
      bufp->allocated <<= 1;
#line 3550
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3550
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 3550
      tmp___18 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3550
      bufp->buffer = (unsigned char *)tmp___18;
#line 3550
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3550
        return ((reg_errcode_t )12);
      } else {

      }
#line 3550
      if ((unsigned long )old_buffer___2 != (unsigned long )bufp->buffer) {
#line 3550
        b = bufp->buffer + (b - old_buffer___2);
#line 3550
        begalt = bufp->buffer + (begalt - old_buffer___2);
#line 3550
        if (fixup_alt_jump) {
#line 3550
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___2);
        } else {

        }
#line 3550
        if (laststart) {
#line 3550
          laststart = bufp->buffer + (laststart - old_buffer___2);
        } else {

        }
#line 3550
        if (pending_exact) {
#line 3550
          pending_exact = bufp->buffer + (pending_exact - old_buffer___2);
        } else {

        }
      } else {

      }
#line 3550
      break;
    }
  }
#line 3551
  if (keep_string_p) {
#line 3551
    tmp___19 = 15;
  } else {
#line 3551
    tmp___19 = 14;
  }
#line 3551
  insert_op1(tmp___19, laststart, ((b + 3) - laststart) - 3L, b);
#line 3554
  pending_exact = (unsigned char *)0;
#line 3555
  b += 3;
#line 3557
  if (! zero_times_ok) {
#line 3564
    while ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated) {
#line 3564
      while (1) {
#line 3564
        old_buffer___3 = bufp->buffer;
#line 3564
        if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3564
          return ((reg_errcode_t )15);
        } else {

        }
#line 3564
        bufp->allocated <<= 1;
#line 3564
        if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3564
          bufp->allocated = (unsigned long )(1L << 16);
        } else {

        }
#line 3564
        tmp___20 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3564
        bufp->buffer = (unsigned char *)tmp___20;
#line 3564
        if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3564
          return ((reg_errcode_t )12);
        } else {

        }
#line 3564
        if ((unsigned long )old_buffer___3 != (unsigned long )bufp->buffer) {
#line 3564
          b = bufp->buffer + (b - old_buffer___3);
#line 3564
          begalt = bufp->buffer + (begalt - old_buffer___3);
#line 3564
          if (fixup_alt_jump) {
#line 3564
            fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___3);
          } else {

          }
#line 3564
          if (laststart) {
#line 3564
            laststart = bufp->buffer + (laststart - old_buffer___3);
          } else {

          }
#line 3564
          if (pending_exact) {
#line 3564
            pending_exact = bufp->buffer + (pending_exact - old_buffer___3);
          } else {

          }
        } else {

        }
#line 3564
        break;
      }
    }
#line 3565
    insert_op1(18, laststart, ((laststart + 6) - laststart) - 3L, b);
#line 3566
    b += 3;
  } else {

  }
#line 3569
  break;
  case 46: 
#line 3573
  laststart = b;
#line 3574
  while (1) {
#line 3574
    while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 3574
      while (1) {
#line 3574
        old_buffer___4 = bufp->buffer;
#line 3574
        if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3574
          return ((reg_errcode_t )15);
        } else {

        }
#line 3574
        bufp->allocated <<= 1;
#line 3574
        if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3574
          bufp->allocated = (unsigned long )(1L << 16);
        } else {

        }
#line 3574
        tmp___21 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3574
        bufp->buffer = (unsigned char *)tmp___21;
#line 3574
        if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3574
          return ((reg_errcode_t )12);
        } else {

        }
#line 3574
        if ((unsigned long )old_buffer___4 != (unsigned long )bufp->buffer) {
#line 3574
          b = bufp->buffer + (b - old_buffer___4);
#line 3574
          begalt = bufp->buffer + (begalt - old_buffer___4);
#line 3574
          if (fixup_alt_jump) {
#line 3574
            fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___4);
          } else {

          }
#line 3574
          if (laststart) {
#line 3574
            laststart = bufp->buffer + (laststart - old_buffer___4);
          } else {

          }
#line 3574
          if (pending_exact) {
#line 3574
            pending_exact = bufp->buffer + (pending_exact - old_buffer___4);
          } else {

          }
        } else {

        }
#line 3574
        break;
      }
    }
#line 3574
    tmp___22 = b;
#line 3574
    b ++;
#line 3574
    *tmp___22 = (unsigned char)2;
#line 3574
    break;
  }
#line 3575
  break;
  case 91: 
#line 3580
  had_char_class = (boolean )0;
#line 3582
  if ((unsigned long )p == (unsigned long )pend) {
#line 3582
    return ((reg_errcode_t )7);
  } else {

  }
#line 3586
  while ((unsigned long )((b - bufp->buffer) + 34L) > bufp->allocated) {
#line 3586
    while (1) {
#line 3586
      old_buffer___5 = bufp->buffer;
#line 3586
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3586
        return ((reg_errcode_t )15);
      } else {

      }
#line 3586
      bufp->allocated <<= 1;
#line 3586
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3586
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 3586
      tmp___23 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3586
      bufp->buffer = (unsigned char *)tmp___23;
#line 3586
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3586
        return ((reg_errcode_t )12);
      } else {

      }
#line 3586
      if ((unsigned long )old_buffer___5 != (unsigned long )bufp->buffer) {
#line 3586
        b = bufp->buffer + (b - old_buffer___5);
#line 3586
        begalt = bufp->buffer + (begalt - old_buffer___5);
#line 3586
        if (fixup_alt_jump) {
#line 3586
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___5);
        } else {

        }
#line 3586
        if (laststart) {
#line 3586
          laststart = bufp->buffer + (laststart - old_buffer___5);
        } else {

        }
#line 3586
        if (pending_exact) {
#line 3586
          pending_exact = bufp->buffer + (pending_exact - old_buffer___5);
        } else {

        }
      } else {

      }
#line 3586
      break;
    }
  }
#line 3588
  laststart = b;
#line 3592
  while (1) {
#line 3592
    while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 3592
      while (1) {
#line 3592
        old_buffer___6 = bufp->buffer;
#line 3592
        if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3592
          return ((reg_errcode_t )15);
        } else {

        }
#line 3592
        bufp->allocated <<= 1;
#line 3592
        if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3592
          bufp->allocated = (unsigned long )(1L << 16);
        } else {

        }
#line 3592
        tmp___24 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3592
        bufp->buffer = (unsigned char *)tmp___24;
#line 3592
        if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3592
          return ((reg_errcode_t )12);
        } else {

        }
#line 3592
        if ((unsigned long )old_buffer___6 != (unsigned long )bufp->buffer) {
#line 3592
          b = bufp->buffer + (b - old_buffer___6);
#line 3592
          begalt = bufp->buffer + (begalt - old_buffer___6);
#line 3592
          if (fixup_alt_jump) {
#line 3592
            fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___6);
          } else {

          }
#line 3592
          if (laststart) {
#line 3592
            laststart = bufp->buffer + (laststart - old_buffer___6);
          } else {

          }
#line 3592
          if (pending_exact) {
#line 3592
            pending_exact = bufp->buffer + (pending_exact - old_buffer___6);
          } else {

          }
        } else {

        }
#line 3592
        break;
      }
    }
#line 3592
    tmp___25 = b;
#line 3592
    b ++;
#line 3592
    if ((int const   )*p == 94) {
#line 3592
      tmp___26 = 4;
    } else {
#line 3592
      tmp___26 = 3;
    }
#line 3592
    *tmp___25 = (unsigned char )tmp___26;
#line 3592
    break;
  }
#line 3593
  if ((int const   )*p == 94) {
#line 3594
    p ++;
  } else {

  }
#line 3597
  p1 = p;
#line 3600
  while (1) {
#line 3600
    while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 3600
      while (1) {
#line 3600
        old_buffer___7 = bufp->buffer;
#line 3600
        if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3600
          return ((reg_errcode_t )15);
        } else {

        }
#line 3600
        bufp->allocated <<= 1;
#line 3600
        if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3600
          bufp->allocated = (unsigned long )(1L << 16);
        } else {

        }
#line 3600
        tmp___27 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3600
        bufp->buffer = (unsigned char *)tmp___27;
#line 3600
        if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3600
          return ((reg_errcode_t )12);
        } else {

        }
#line 3600
        if ((unsigned long )old_buffer___7 != (unsigned long )bufp->buffer) {
#line 3600
          b = bufp->buffer + (b - old_buffer___7);
#line 3600
          begalt = bufp->buffer + (begalt - old_buffer___7);
#line 3600
          if (fixup_alt_jump) {
#line 3600
            fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___7);
          } else {

          }
#line 3600
          if (laststart) {
#line 3600
            laststart = bufp->buffer + (laststart - old_buffer___7);
          } else {

          }
#line 3600
          if (pending_exact) {
#line 3600
            pending_exact = bufp->buffer + (pending_exact - old_buffer___7);
          } else {

          }
        } else {

        }
#line 3600
        break;
      }
    }
#line 3600
    tmp___28 = b;
#line 3600
    b ++;
#line 3600
    *tmp___28 = (unsigned char )((1 << 8) / 8);
#line 3600
    break;
  }
#line 3603
  memset((void *)b, 0, (size_t )((1 << 8) / 8));
#line 3606
  if ((unsigned int )((re_opcode_t )*(b + -2)) == 4U) {
#line 3606
    if (syntax & (unsigned int )((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3608
      *(b + 1) = (unsigned char )((int )*(b + 1) | (1 << 2));
    } else {

    }
  } else {

  }
#line 3611
  while (1) {
#line 3613
    if ((unsigned long )p == (unsigned long )pend) {
#line 3613
      return ((reg_errcode_t )7);
    } else {

    }
#line 3615
    while (1) {
#line 3615
      if ((unsigned long )p == (unsigned long )pend) {
#line 3615
        return ((reg_errcode_t )14);
      } else {

      }
#line 3615
      tmp___29 = p;
#line 3615
      p ++;
#line 3615
      c = (unsigned char )*tmp___29;
#line 3615
      if (translate) {
#line 3615
        c = (unsigned char )*(translate + c);
      } else {

      }
#line 3615
      break;
    }
#line 3618
    if (syntax & 1U) {
#line 3618
      if ((int )c == 92) {
#line 3620
        if ((unsigned long )p == (unsigned long )pend) {
#line 3620
          return ((reg_errcode_t )5);
        } else {

        }
#line 3622
        while (1) {
#line 3622
          if ((unsigned long )p == (unsigned long )pend) {
#line 3622
            return ((reg_errcode_t )14);
          } else {

          }
#line 3622
          tmp___30 = p;
#line 3622
          p ++;
#line 3622
          c1 = (unsigned char )*tmp___30;
#line 3622
          if (translate) {
#line 3622
            c1 = (unsigned char )*(translate + c1);
          } else {

          }
#line 3622
          break;
        }
#line 3623
        *(b + (int )c1 / 8) = (unsigned char )((int )*(b + (int )c1 / 8) | (1 << (int )c1 % 8));
#line 3624
        goto __Cont;
      } else {

      }
    } else {

    }
#line 3630
    if ((int )c == 93) {
#line 3630
      if ((unsigned long )p != (unsigned long )(p1 + 1)) {
#line 3631
        break;
      } else {

      }
    } else {

    }
#line 3635
    if (had_char_class) {
#line 3635
      if ((int )c == 45) {
#line 3635
        if ((int const   )*p != 93) {
#line 3636
          return ((reg_errcode_t )11);
        } else {

        }
      } else {

      }
    } else {

    }
#line 3642
    if ((int )c == 45) {
#line 3642
      if ((unsigned long )(p - 2) >= (unsigned long )pattern) {
#line 3642
        if ((int const   )*(p + -2) == 91) {
#line 3642
          goto _L___19;
        } else {
#line 3642
          goto _L___20;
        }
      } else
      _L___20: /* CIL Label */ 
#line 3642
      if ((unsigned long )(p - 3) >= (unsigned long )pattern) {
#line 3642
        if ((int const   )*(p + -3) == 91) {
#line 3642
          if ((int const   )*(p + -2) == 94) {
#line 3642
            goto _L___19;
          } else {
#line 3642
            goto _L___18;
          }
        } else {
#line 3642
          goto _L___18;
        }
      } else
      _L___18: /* CIL Label */ 
      _L___17: /* CIL Label */ 
#line 3642
      if ((int const   )*p != 93) {
#line 3647
        tmp___31 = compile_range(& p, pend, translate, syntax, b);
#line 3647
        ret = tmp___31;
#line 3649
        if ((unsigned int )ret != 0U) {
#line 3649
          return (ret);
        } else {

        }
      } else {
#line 3642
        goto _L___19;
      }
    } else
    _L___19: /* CIL Label */ 
    _L___16: /* CIL Label */ 
    _L___15: /* CIL Label */ 
#line 3652
    if ((int const   )*(p + 0) == 45) {
#line 3652
      if ((int const   )*(p + 1) != 93) {
#line 3657
        while (1) {
#line 3657
          if ((unsigned long )p == (unsigned long )pend) {
#line 3657
            return ((reg_errcode_t )14);
          } else {

          }
#line 3657
          tmp___32 = p;
#line 3657
          p ++;
#line 3657
          c1 = (unsigned char )*tmp___32;
#line 3657
          if (translate) {
#line 3657
            c1 = (unsigned char )*(translate + c1);
          } else {

          }
#line 3657
          break;
        }
#line 3659
        ret___0 = compile_range(& p, pend, translate, syntax, b);
#line 3660
        if ((unsigned int )ret___0 != 0U) {
#line 3660
          return (ret___0);
        } else {

        }
      } else {
#line 3652
        goto _L___14;
      }
    } else
    _L___14: /* CIL Label */ 
#line 3666
    if (syntax & (unsigned int )((1 << 1) << 1)) {
#line 3666
      if ((int )c == 91) {
#line 3666
        if ((int const   )*p == 58) {
#line 3670
          while (1) {
#line 3670
            if ((unsigned long )p == (unsigned long )pend) {
#line 3670
              return ((reg_errcode_t )14);
            } else {

            }
#line 3670
            tmp___33 = p;
#line 3670
            p ++;
#line 3670
            c = (unsigned char )*tmp___33;
#line 3670
            if (translate) {
#line 3670
              c = (unsigned char )*(translate + c);
            } else {

            }
#line 3670
            break;
          }
#line 3671
          c1 = (unsigned char)0;
#line 3674
          if ((unsigned long )p == (unsigned long )pend) {
#line 3674
            return ((reg_errcode_t )7);
          } else {

          }
#line 3676
          while (1) {
#line 3678
            while (1) {
#line 3678
              if ((unsigned long )p == (unsigned long )pend) {
#line 3678
                return ((reg_errcode_t )14);
              } else {

              }
#line 3678
              tmp___34 = p;
#line 3678
              p ++;
#line 3678
              c = (unsigned char )*tmp___34;
#line 3678
              if (translate) {
#line 3678
                c = (unsigned char )*(translate + c);
              } else {

              }
#line 3678
              break;
            }
#line 3679
            if ((int )c == 58) {
#line 3681
              break;
            } else
#line 3679
            if ((int )c == 93) {
#line 3681
              break;
            } else
#line 3679
            if ((unsigned long )p == (unsigned long )pend) {
#line 3681
              break;
            } else
#line 3679
            if ((int )c1 == 6) {
#line 3681
              break;
            } else {

            }
#line 3682
            tmp___35 = c1;
#line 3682
            c1 = (unsigned char )((int )c1 + 1);
#line 3682
            str[tmp___35] = (char )c;
          }
#line 3684
          str[c1] = (char )'\000';
#line 3689
          if ((int )c == 58) {
#line 3689
            if ((int const   )*p == 93) {
#line 3692
              tmp___36 = strcmp((char const   *)(str), "alnum");
#line 3692
              is_alnum = (boolean )(tmp___36 == 0);
#line 3693
              tmp___37 = strcmp((char const   *)(str), "alpha");
#line 3693
              is_alpha = (boolean )(tmp___37 == 0);
#line 3694
              tmp___38 = strcmp((char const   *)(str), "blank");
#line 3694
              is_blank = (boolean )(tmp___38 == 0);
#line 3695
              tmp___39 = strcmp((char const   *)(str), "cntrl");
#line 3695
              is_cntrl = (boolean )(tmp___39 == 0);
#line 3696
              tmp___40 = strcmp((char const   *)(str), "digit");
#line 3696
              is_digit = (boolean )(tmp___40 == 0);
#line 3697
              tmp___41 = strcmp((char const   *)(str), "graph");
#line 3697
              is_graph = (boolean )(tmp___41 == 0);
#line 3698
              tmp___42 = strcmp((char const   *)(str), "lower");
#line 3698
              is_lower = (boolean )(tmp___42 == 0);
#line 3699
              tmp___43 = strcmp((char const   *)(str), "print");
#line 3699
              is_print = (boolean )(tmp___43 == 0);
#line 3700
              tmp___44 = strcmp((char const   *)(str), "punct");
#line 3700
              is_punct = (boolean )(tmp___44 == 0);
#line 3701
              tmp___45 = strcmp((char const   *)(str), "space");
#line 3701
              is_space = (boolean )(tmp___45 == 0);
#line 3702
              tmp___46 = strcmp((char const   *)(str), "upper");
#line 3702
              is_upper = (boolean )(tmp___46 == 0);
#line 3703
              tmp___47 = strcmp((char const   *)(str), "xdigit");
#line 3703
              is_xdigit = (boolean )(tmp___47 == 0);
#line 3705
              tmp___48 = strcmp((char const   *)(str), "alpha");
#line 3705
              if (tmp___48 == 0) {

              } else {
#line 3705
                tmp___49 = strcmp((char const   *)(str), "upper");
#line 3705
                if (tmp___49 == 0) {

                } else {
#line 3705
                  tmp___50 = strcmp((char const   *)(str), "lower");
#line 3705
                  if (tmp___50 == 0) {

                  } else {
#line 3705
                    tmp___51 = strcmp((char const   *)(str), "digit");
#line 3705
                    if (tmp___51 == 0) {

                    } else {
#line 3705
                      tmp___52 = strcmp((char const   *)(str), "alnum");
#line 3705
                      if (tmp___52 == 0) {

                      } else {
#line 3705
                        tmp___53 = strcmp((char const   *)(str), "xdigit");
#line 3705
                        if (tmp___53 == 0) {

                        } else {
#line 3705
                          tmp___54 = strcmp((char const   *)(str), "space");
#line 3705
                          if (tmp___54 == 0) {

                          } else {
#line 3705
                            tmp___55 = strcmp((char const   *)(str), "print");
#line 3705
                            if (tmp___55 == 0) {

                            } else {
#line 3705
                              tmp___56 = strcmp((char const   *)(str), "punct");
#line 3705
                              if (tmp___56 == 0) {

                              } else {
#line 3705
                                tmp___57 = strcmp((char const   *)(str),
                                                  "graph");
#line 3705
                                if (tmp___57 == 0) {

                                } else {
#line 3705
                                  tmp___58 = strcmp((char const   *)(str),
                                                    "cntrl");
#line 3705
                                  if (tmp___58 == 0) {

                                  } else {
#line 3705
                                    tmp___59 = strcmp((char const   *)(str),
                                                      "blank");
#line 3705
                                    if (tmp___59 == 0) {

                                    } else {
#line 3705
                                      return ((reg_errcode_t )4);
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
#line 3709
              while (1) {
#line 3709
                if ((unsigned long )p == (unsigned long )pend) {
#line 3709
                  return ((reg_errcode_t )14);
                } else {

                }
#line 3709
                tmp___60 = p;
#line 3709
                p ++;
#line 3709
                c = (unsigned char )*tmp___60;
#line 3709
                if (translate) {
#line 3709
                  c = (unsigned char )*(translate + c);
                } else {

                }
#line 3709
                break;
              }
#line 3711
              if ((unsigned long )p == (unsigned long )pend) {
#line 3711
                return ((reg_errcode_t )7);
              } else {

              }
#line 3713
              ch = 0;
#line 3713
              while (ch < 1 << 8) {
#line 3715
                if (is_alnum) {
#line 3715
                  if ((ch & -128) == 0) {
#line 3715
                    tmp___61 = __ctype_b_loc();
#line 3715
                    if ((int const   )*(*tmp___61 + ch) & 8) {
#line 3727
                      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                    } else {
#line 3715
                      goto _L___12;
                    }
                  } else {
#line 3715
                    goto _L___12;
                  }
                } else
                _L___12: /* CIL Label */ 
#line 3715
                if (is_alpha) {
#line 3715
                  if ((ch & -128) == 0) {
#line 3715
                    tmp___62 = __ctype_b_loc();
#line 3715
                    if ((int const   )*(*tmp___62 + ch) & 1024) {
#line 3727
                      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                    } else {
#line 3715
                      goto _L___11;
                    }
                  } else {
#line 3715
                    goto _L___11;
                  }
                } else
                _L___11: /* CIL Label */ 
#line 3715
                if (is_blank) {
#line 3715
                  if ((ch & -128) == 0) {
#line 3715
                    tmp___63 = __ctype_b_loc();
#line 3715
                    if ((int const   )*(*tmp___63 + ch) & 1) {
#line 3727
                      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                    } else {
#line 3715
                      goto _L___10;
                    }
                  } else {
#line 3715
                    goto _L___10;
                  }
                } else
                _L___10: /* CIL Label */ 
#line 3715
                if (is_cntrl) {
#line 3715
                  if ((ch & -128) == 0) {
#line 3715
                    tmp___64 = __ctype_b_loc();
#line 3715
                    if ((int const   )*(*tmp___64 + ch) & 2) {
#line 3727
                      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                    } else {
#line 3715
                      goto _L___9;
                    }
                  } else {
#line 3715
                    goto _L___9;
                  }
                } else
                _L___9: /* CIL Label */ 
#line 3715
                if (is_digit) {
#line 3715
                  if ((ch & -128) == 0) {
#line 3715
                    tmp___65 = __ctype_b_loc();
#line 3715
                    if ((int const   )*(*tmp___65 + ch) & 2048) {
#line 3727
                      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                    } else {
#line 3715
                      goto _L___8;
                    }
                  } else {
#line 3715
                    goto _L___8;
                  }
                } else
                _L___8: /* CIL Label */ 
#line 3715
                if (is_graph) {
#line 3715
                  if ((ch & -128) == 0) {
#line 3715
                    tmp___66 = __ctype_b_loc();
#line 3715
                    if ((int const   )*(*tmp___66 + ch) & 32768) {
#line 3727
                      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                    } else {
#line 3715
                      goto _L___7;
                    }
                  } else {
#line 3715
                    goto _L___7;
                  }
                } else
                _L___7: /* CIL Label */ 
#line 3715
                if (is_lower) {
#line 3715
                  if ((ch & -128) == 0) {
#line 3715
                    tmp___67 = __ctype_b_loc();
#line 3715
                    if ((int const   )*(*tmp___67 + ch) & 512) {
#line 3727
                      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                    } else {
#line 3715
                      goto _L___6;
                    }
                  } else {
#line 3715
                    goto _L___6;
                  }
                } else
                _L___6: /* CIL Label */ 
#line 3715
                if (is_print) {
#line 3715
                  if ((ch & -128) == 0) {
#line 3715
                    tmp___68 = __ctype_b_loc();
#line 3715
                    if ((int const   )*(*tmp___68 + ch) & 16384) {
#line 3727
                      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                    } else {
#line 3715
                      goto _L___5;
                    }
                  } else {
#line 3715
                    goto _L___5;
                  }
                } else
                _L___5: /* CIL Label */ 
#line 3715
                if (is_punct) {
#line 3715
                  if ((ch & -128) == 0) {
#line 3715
                    tmp___69 = __ctype_b_loc();
#line 3715
                    if ((int const   )*(*tmp___69 + ch) & 4) {
#line 3727
                      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                    } else {
#line 3715
                      goto _L___4;
                    }
                  } else {
#line 3715
                    goto _L___4;
                  }
                } else
                _L___4: /* CIL Label */ 
#line 3715
                if (is_space) {
#line 3715
                  if ((ch & -128) == 0) {
#line 3715
                    tmp___70 = __ctype_b_loc();
#line 3715
                    if ((int const   )*(*tmp___70 + ch) & 8192) {
#line 3727
                      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                    } else {
#line 3715
                      goto _L___3;
                    }
                  } else {
#line 3715
                    goto _L___3;
                  }
                } else
                _L___3: /* CIL Label */ 
#line 3715
                if (is_upper) {
#line 3715
                  if ((ch & -128) == 0) {
#line 3715
                    tmp___71 = __ctype_b_loc();
#line 3715
                    if ((int const   )*(*tmp___71 + ch) & 256) {
#line 3727
                      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                    } else {
#line 3715
                      goto _L___2;
                    }
                  } else {
#line 3715
                    goto _L___2;
                  }
                } else
                _L___2: /* CIL Label */ 
#line 3715
                if (is_xdigit) {
#line 3715
                  if ((ch & -128) == 0) {
#line 3715
                    tmp___72 = __ctype_b_loc();
#line 3715
                    if ((int const   )*(*tmp___72 + ch) & 4096) {
#line 3727
                      *(b + (int )((unsigned char )ch) / 8) = (unsigned char )((int )*(b + (int )((unsigned char )ch) / 8) | (1 << (int )((unsigned char )ch) % 8));
                    } else {

                    }
                  } else {

                  }
                } else {

                }
#line 3713
                ch ++;
              }
#line 3729
              had_char_class = (boolean )1;
            } else {
#line 3689
              goto _L___13;
            }
          } else {
            _L___13: /* CIL Label */ 
#line 3733
            c1 = (unsigned char )((int )c1 + 1);
#line 3734
            while (1) {
#line 3734
              tmp___73 = c1;
#line 3734
              c1 = (unsigned char )((int )c1 - 1);
#line 3734
              if (tmp___73) {

              } else {
#line 3734
                break;
              }
#line 3735
              p --;
            }
#line 3736
            *(b + 11) = (unsigned char )((int )*(b + 11) | (1 << 3));
#line 3737
            *(b + 7) = (unsigned char )((int )*(b + 7) | (1 << 2));
#line 3738
            had_char_class = (boolean )0;
          }
        } else {
#line 3743
          had_char_class = (boolean )0;
#line 3744
          *(b + (int )c / 8) = (unsigned char )((int )*(b + (int )c / 8) | (1 << (int )c % 8));
        }
      } else {
#line 3743
        had_char_class = (boolean )0;
#line 3744
        *(b + (int )c / 8) = (unsigned char )((int )*(b + (int )c / 8) | (1 << (int )c % 8));
      }
    } else {
#line 3743
      had_char_class = (boolean )0;
#line 3744
      *(b + (int )c / 8) = (unsigned char )((int )*(b + (int )c / 8) | (1 << (int )c % 8));
    }
    __Cont: /* CIL Label */ ;
  }
#line 3750
  while (1) {
#line 3750
    if ((int )*(b + -1) > 0) {
#line 3750
      if ((int )*(b + ((int )*(b + -1) - 1)) == 0) {

      } else {
#line 3750
        break;
      }
    } else {
#line 3750
      break;
    }
#line 3751
    *(b + -1) = (unsigned char )((int )*(b + -1) - 1);
  }
#line 3752
  b += (int )*(b + -1);
#line 3754
  break;
  case 40: 
#line 3758
  if (syntax & (unsigned int )(((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3759
    goto handle_open;
  } else {
#line 3761
    goto normal_char;
  }
  case 41: 
#line 3765
  if (syntax & (unsigned int )(((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3766
    goto handle_close;
  } else {
#line 3768
    goto normal_char;
  }
  case 10: 
#line 3772
  if (syntax & (unsigned int )(((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3773
    goto handle_alt;
  } else {
#line 3775
    goto normal_char;
  }
  case 124: 
#line 3779
  if (syntax & (unsigned int )(((((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3780
    goto handle_alt;
  } else {
#line 3782
    goto normal_char;
  }
  case 123: 
#line 3786
  if (syntax & (unsigned int )(((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3786
    if (syntax & (unsigned int )((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3787
      goto handle_interval;
    } else {
#line 3789
      goto normal_char;
    }
  } else {
#line 3789
    goto normal_char;
  }
  case 92: 
#line 3793
  if ((unsigned long )p == (unsigned long )pend) {
#line 3793
    return ((reg_errcode_t )5);
  } else {

  }
#line 3798
  while (1) {
#line 3798
    if ((unsigned long )p == (unsigned long )pend) {
#line 3798
      return ((reg_errcode_t )14);
    } else {

    }
#line 3798
    tmp___74 = p;
#line 3798
    p ++;
#line 3798
    c = (unsigned char )*tmp___74;
#line 3798
    break;
  }
#line 3800
  switch ((int )c) {
  case 40: 
#line 3803
  if (syntax & (unsigned int )(((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3804
    goto normal_backslash;
  } else {

  }
  handle_open: 
#line 3807
  (bufp->re_nsub) ++;
#line 3808
  regnum ++;
#line 3810
  if (compile_stack.avail == compile_stack.size) {
#line 3812
    tmp___75 = realloc((void *)compile_stack.stack,
                       (unsigned long )(compile_stack.size << 1) * sizeof(compile_stack_elt_t ));
#line 3812
    compile_stack.stack = (compile_stack_elt_t *)tmp___75;
#line 3814
    if ((unsigned long )compile_stack.stack == (unsigned long )((void *)0)) {
#line 3814
      return ((reg_errcode_t )12);
    } else {

    }
#line 3816
    compile_stack.size <<= 1;
  } else {

  }
#line 3823
  (compile_stack.stack + compile_stack.avail)->begalt_offset = (pattern_offset_t )(begalt - bufp->buffer);
#line 3824
  if (fixup_alt_jump) {
#line 3824
    (compile_stack.stack + compile_stack.avail)->fixup_alt_jump = (pattern_offset_t )((fixup_alt_jump - bufp->buffer) + 1L);
  } else {
#line 3824
    (compile_stack.stack + compile_stack.avail)->fixup_alt_jump = 0;
  }
#line 3826
  (compile_stack.stack + compile_stack.avail)->laststart_offset = (pattern_offset_t )(b - bufp->buffer);
#line 3827
  (compile_stack.stack + compile_stack.avail)->regnum = regnum;
#line 3833
  if (regnum <= 255U) {
#line 3835
    (compile_stack.stack + compile_stack.avail)->inner_group_offset = (pattern_offset_t )((b - bufp->buffer) + 2L);
#line 3836
    while (1) {
#line 3836
      while ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated) {
#line 3836
        while (1) {
#line 3836
          old_buffer___8 = bufp->buffer;
#line 3836
          if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3836
            return ((reg_errcode_t )15);
          } else {

          }
#line 3836
          bufp->allocated <<= 1;
#line 3836
          if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3836
            bufp->allocated = (unsigned long )(1L << 16);
          } else {

          }
#line 3836
          tmp___76 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3836
          bufp->buffer = (unsigned char *)tmp___76;
#line 3836
          if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3836
            return ((reg_errcode_t )12);
          } else {

          }
#line 3836
          if ((unsigned long )old_buffer___8 != (unsigned long )bufp->buffer) {
#line 3836
            b = bufp->buffer + (b - old_buffer___8);
#line 3836
            begalt = bufp->buffer + (begalt - old_buffer___8);
#line 3836
            if (fixup_alt_jump) {
#line 3836
              fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___8);
            } else {

            }
#line 3836
            if (laststart) {
#line 3836
              laststart = bufp->buffer + (laststart - old_buffer___8);
            } else {

            }
#line 3836
            if (pending_exact) {
#line 3836
              pending_exact = bufp->buffer + (pending_exact - old_buffer___8);
            } else {

            }
          } else {

          }
#line 3836
          break;
        }
      }
#line 3836
      tmp___77 = b;
#line 3836
      b ++;
#line 3836
      *tmp___77 = (unsigned char)5;
#line 3836
      tmp___78 = b;
#line 3836
      b ++;
#line 3836
      *tmp___78 = (unsigned char )regnum;
#line 3836
      tmp___79 = b;
#line 3836
      b ++;
#line 3836
      *tmp___79 = (unsigned char)0;
#line 3836
      break;
    }
  } else {

  }
#line 3839
  (compile_stack.avail) ++;
#line 3841
  fixup_alt_jump = (unsigned char *)0;
#line 3842
  laststart = (unsigned char *)0;
#line 3843
  begalt = b;
#line 3847
  pending_exact = (unsigned char *)0;
#line 3848
  break;
  case 41: 
#line 3852
  if (syntax & (unsigned int )(((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3852
    goto normal_backslash;
  } else {

  }
#line 3854
  if (compile_stack.avail == 0U) {
#line 3855
    if (syntax & (unsigned int )(((((((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3856
      goto normal_backslash;
    } else {
#line 3858
      return ((reg_errcode_t )16);
    }
  } else {

  }
  handle_close: 
#line 3861
  if (fixup_alt_jump) {
#line 3866
    while (1) {
#line 3866
      while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 3866
        while (1) {
#line 3866
          old_buffer___9 = bufp->buffer;
#line 3866
          if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3866
            return ((reg_errcode_t )15);
          } else {

          }
#line 3866
          bufp->allocated <<= 1;
#line 3866
          if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3866
            bufp->allocated = (unsigned long )(1L << 16);
          } else {

          }
#line 3866
          tmp___80 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3866
          bufp->buffer = (unsigned char *)tmp___80;
#line 3866
          if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3866
            return ((reg_errcode_t )12);
          } else {

          }
#line 3866
          if ((unsigned long )old_buffer___9 != (unsigned long )bufp->buffer) {
#line 3866
            b = bufp->buffer + (b - old_buffer___9);
#line 3866
            begalt = bufp->buffer + (begalt - old_buffer___9);
#line 3866
            if (fixup_alt_jump) {
#line 3866
              fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___9);
            } else {

            }
#line 3866
            if (laststart) {
#line 3866
              laststart = bufp->buffer + (laststart - old_buffer___9);
            } else {

            }
#line 3866
            if (pending_exact) {
#line 3866
              pending_exact = bufp->buffer + (pending_exact - old_buffer___9);
            } else {

            }
          } else {

          }
#line 3866
          break;
        }
      }
#line 3866
      tmp___81 = b;
#line 3866
      b ++;
#line 3866
      *tmp___81 = (unsigned char)19;
#line 3866
      break;
    }
#line 3870
    store_op1(13, fixup_alt_jump, ((b - 1) - fixup_alt_jump) - 3L);
  } else {

  }
#line 3874
  if (compile_stack.avail == 0U) {
#line 3875
    if (syntax & (unsigned int )(((((((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3876
      goto normal_char;
    } else {
#line 3878
      return ((reg_errcode_t )16);
    }
  } else {

  }
#line 3889
  (compile_stack.avail) --;
#line 3890
  begalt = bufp->buffer + (compile_stack.stack + compile_stack.avail)->begalt_offset;
#line 3891
  if ((compile_stack.stack + compile_stack.avail)->fixup_alt_jump) {
#line 3891
    fixup_alt_jump = (bufp->buffer + (compile_stack.stack + compile_stack.avail)->fixup_alt_jump) - 1;
  } else {
#line 3891
    fixup_alt_jump = (unsigned char *)0;
  }
#line 3895
  laststart = bufp->buffer + (compile_stack.stack + compile_stack.avail)->laststart_offset;
#line 3896
  this_group_regnum = (compile_stack.stack + compile_stack.avail)->regnum;
#line 3900
  pending_exact = (unsigned char *)0;
#line 3904
  if (this_group_regnum <= 255U) {
#line 3906
    inner_group_loc = bufp->buffer + (compile_stack.stack + compile_stack.avail)->inner_group_offset;
#line 3909
    *inner_group_loc = (unsigned char )(regnum - this_group_regnum);
#line 3910
    while (1) {
#line 3910
      while ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated) {
#line 3910
        while (1) {
#line 3910
          old_buffer___10 = bufp->buffer;
#line 3910
          if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3910
            return ((reg_errcode_t )15);
          } else {

          }
#line 3910
          bufp->allocated <<= 1;
#line 3910
          if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3910
            bufp->allocated = (unsigned long )(1L << 16);
          } else {

          }
#line 3910
          tmp___82 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3910
          bufp->buffer = (unsigned char *)tmp___82;
#line 3910
          if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3910
            return ((reg_errcode_t )12);
          } else {

          }
#line 3910
          if ((unsigned long )old_buffer___10 != (unsigned long )bufp->buffer) {
#line 3910
            b = bufp->buffer + (b - old_buffer___10);
#line 3910
            begalt = bufp->buffer + (begalt - old_buffer___10);
#line 3910
            if (fixup_alt_jump) {
#line 3910
              fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___10);
            } else {

            }
#line 3910
            if (laststart) {
#line 3910
              laststart = bufp->buffer + (laststart - old_buffer___10);
            } else {

            }
#line 3910
            if (pending_exact) {
#line 3910
              pending_exact = bufp->buffer + (pending_exact - old_buffer___10);
            } else {

            }
          } else {

          }
#line 3910
          break;
        }
      }
#line 3910
      tmp___83 = b;
#line 3910
      b ++;
#line 3910
      *tmp___83 = (unsigned char)6;
#line 3910
      tmp___84 = b;
#line 3910
      b ++;
#line 3910
      *tmp___84 = (unsigned char )this_group_regnum;
#line 3910
      tmp___85 = b;
#line 3910
      b ++;
#line 3910
      *tmp___85 = (unsigned char )(regnum - this_group_regnum);
#line 3910
      break;
    }
  } else {

  }
#line 3914
  break;
  case 124: 
#line 3918
  if (syntax & (unsigned int )((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3919
    goto normal_backslash;
  } else
#line 3918
  if (syntax & (unsigned int )(((((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3919
    goto normal_backslash;
  } else {

  }
  handle_alt: 
#line 3921
  if (syntax & (unsigned int )((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3922
    goto normal_char;
  } else {

  }
#line 3926
  while ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated) {
#line 3926
    while (1) {
#line 3926
      old_buffer___11 = bufp->buffer;
#line 3926
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3926
        return ((reg_errcode_t )15);
      } else {

      }
#line 3926
      bufp->allocated <<= 1;
#line 3926
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3926
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 3926
      tmp___86 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3926
      bufp->buffer = (unsigned char *)tmp___86;
#line 3926
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3926
        return ((reg_errcode_t )12);
      } else {

      }
#line 3926
      if ((unsigned long )old_buffer___11 != (unsigned long )bufp->buffer) {
#line 3926
        b = bufp->buffer + (b - old_buffer___11);
#line 3926
        begalt = bufp->buffer + (begalt - old_buffer___11);
#line 3926
        if (fixup_alt_jump) {
#line 3926
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___11);
        } else {

        }
#line 3926
        if (laststart) {
#line 3926
          laststart = bufp->buffer + (laststart - old_buffer___11);
        } else {

        }
#line 3926
        if (pending_exact) {
#line 3926
          pending_exact = bufp->buffer + (pending_exact - old_buffer___11);
        } else {

        }
      } else {

      }
#line 3926
      break;
    }
  }
#line 3927
  insert_op1(14, begalt, ((b + 6) - begalt) - 3L, b);
#line 3928
  pending_exact = (unsigned char *)0;
#line 3929
  b += 3;
#line 3947
  if (fixup_alt_jump) {
#line 3948
    store_op1(13, fixup_alt_jump, (b - fixup_alt_jump) - 3L);
  } else {

  }
#line 3953
  fixup_alt_jump = b;
#line 3954
  while ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated) {
#line 3954
    while (1) {
#line 3954
      old_buffer___12 = bufp->buffer;
#line 3954
      if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 3954
        return ((reg_errcode_t )15);
      } else {

      }
#line 3954
      bufp->allocated <<= 1;
#line 3954
      if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 3954
        bufp->allocated = (unsigned long )(1L << 16);
      } else {

      }
#line 3954
      tmp___87 = realloc((void *)bufp->buffer, bufp->allocated);
#line 3954
      bufp->buffer = (unsigned char *)tmp___87;
#line 3954
      if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 3954
        return ((reg_errcode_t )12);
      } else {

      }
#line 3954
      if ((unsigned long )old_buffer___12 != (unsigned long )bufp->buffer) {
#line 3954
        b = bufp->buffer + (b - old_buffer___12);
#line 3954
        begalt = bufp->buffer + (begalt - old_buffer___12);
#line 3954
        if (fixup_alt_jump) {
#line 3954
          fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___12);
        } else {

        }
#line 3954
        if (laststart) {
#line 3954
          laststart = bufp->buffer + (laststart - old_buffer___12);
        } else {

        }
#line 3954
        if (pending_exact) {
#line 3954
          pending_exact = bufp->buffer + (pending_exact - old_buffer___12);
        } else {

        }
      } else {

      }
#line 3954
      break;
    }
  }
#line 3955
  b += 3;
#line 3957
  laststart = (unsigned char *)0;
#line 3958
  begalt = b;
#line 3959
  break;
  case 123: 
#line 3964
  if (! (syntax & (unsigned int )(((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
#line 3969
    goto normal_backslash;
  } else
#line 3964
  if (syntax & (unsigned int )(((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3964
    if (syntax & (unsigned int )((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3969
      goto normal_backslash;
    } else {
#line 3964
      goto _L___21;
    }
  } else
  _L___21: /* CIL Label */ 
#line 3964
  if ((unsigned long )(p - 2) == (unsigned long )pattern) {
#line 3964
    if ((unsigned long )p == (unsigned long )pend) {
#line 3969
      goto normal_backslash;
    } else {

    }
  } else {

  }
  handle_interval: 
#line 3976
  lower_bound = -1;
#line 3976
  upper_bound = -1;
#line 3978
  beg_interval = p - 1;
#line 3980
  if ((unsigned long )p == (unsigned long )pend) {
#line 3982
    if (syntax & (unsigned int )((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 3983
      goto unfetch_interval;
    } else {
#line 3985
      return ((reg_errcode_t )9);
    }
  } else {

  }
#line 3988
  if ((unsigned long )p != (unsigned long )pend) {
#line 3988
    while (1) {
#line 3988
      if ((unsigned long )p == (unsigned long )pend) {
#line 3988
        return ((reg_errcode_t )14);
      } else {

      }
#line 3988
      tmp___88 = p;
#line 3988
      p ++;
#line 3988
      c = (unsigned char )*tmp___88;
#line 3988
      if (translate) {
#line 3988
        c = (unsigned char )*(translate + c);
      } else {

      }
#line 3988
      break;
    }
#line 3988
    while (1) {
#line 3988
      if (((int )c & -128) == 0) {
#line 3988
        tmp___90 = __ctype_b_loc();
#line 3988
        if ((int const   )*(*tmp___90 + (int )c) & 2048) {

        } else {
#line 3988
          break;
        }
      } else {
#line 3988
        break;
      }
#line 3988
      if (lower_bound < 0) {
#line 3988
        lower_bound = 0;
      } else {

      }
#line 3988
      lower_bound = (lower_bound * 10 + (int )c) - 48;
#line 3988
      if ((unsigned long )p == (unsigned long )pend) {
#line 3988
        break;
      } else {

      }
#line 3988
      while (1) {
#line 3988
        if ((unsigned long )p == (unsigned long )pend) {
#line 3988
          return ((reg_errcode_t )14);
        } else {

        }
#line 3988
        tmp___89 = p;
#line 3988
        p ++;
#line 3988
        c = (unsigned char )*tmp___89;
#line 3988
        if (translate) {
#line 3988
          c = (unsigned char )*(translate + c);
        } else {

        }
#line 3988
        break;
      }
    }
  } else {

  }
#line 3990
  if ((int )c == 44) {
#line 3992
    if ((unsigned long )p != (unsigned long )pend) {
#line 3992
      while (1) {
#line 3992
        if ((unsigned long )p == (unsigned long )pend) {
#line 3992
          return ((reg_errcode_t )14);
        } else {

        }
#line 3992
        tmp___91 = p;
#line 3992
        p ++;
#line 3992
        c = (unsigned char )*tmp___91;
#line 3992
        if (translate) {
#line 3992
          c = (unsigned char )*(translate + c);
        } else {

        }
#line 3992
        break;
      }
#line 3992
      while (1) {
#line 3992
        if (((int )c & -128) == 0) {
#line 3992
          tmp___93 = __ctype_b_loc();
#line 3992
          if ((int const   )*(*tmp___93 + (int )c) & 2048) {

          } else {
#line 3992
            break;
          }
        } else {
#line 3992
          break;
        }
#line 3992
        if (upper_bound < 0) {
#line 3992
          upper_bound = 0;
        } else {

        }
#line 3992
        upper_bound = (upper_bound * 10 + (int )c) - 48;
#line 3992
        if ((unsigned long )p == (unsigned long )pend) {
#line 3992
          break;
        } else {

        }
#line 3992
        while (1) {
#line 3992
          if ((unsigned long )p == (unsigned long )pend) {
#line 3992
            return ((reg_errcode_t )14);
          } else {

          }
#line 3992
          tmp___92 = p;
#line 3992
          p ++;
#line 3992
          c = (unsigned char )*tmp___92;
#line 3992
          if (translate) {
#line 3992
            c = (unsigned char )*(translate + c);
          } else {

          }
#line 3992
          break;
        }
      }
    } else {

    }
#line 3993
    if (upper_bound < 0) {
#line 3993
      upper_bound = (1 << 15) - 1;
    } else {

    }
  } else {
#line 3997
    upper_bound = lower_bound;
  }
#line 3999
  if (lower_bound < 0) {
#line 3999
    goto _L___22;
  } else
#line 3999
  if (upper_bound > (1 << 15) - 1) {
#line 3999
    goto _L___22;
  } else
#line 3999
  if (lower_bound > upper_bound) {
    _L___22: /* CIL Label */ 
#line 4002
    if (syntax & (unsigned int )((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 4003
      goto unfetch_interval;
    } else {
#line 4005
      return ((reg_errcode_t )10);
    }
  } else {

  }
#line 4008
  if (! (syntax & (unsigned int )((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
#line 4010
    if ((int )c != 92) {
#line 4010
      return ((reg_errcode_t )9);
    } else {

    }
#line 4012
    while (1) {
#line 4012
      if ((unsigned long )p == (unsigned long )pend) {
#line 4012
        return ((reg_errcode_t )14);
      } else {

      }
#line 4012
      tmp___94 = p;
#line 4012
      p ++;
#line 4012
      c = (unsigned char )*tmp___94;
#line 4012
      if (translate) {
#line 4012
        c = (unsigned char )*(translate + c);
      } else {

      }
#line 4012
      break;
    }
  } else {

  }
#line 4015
  if ((int )c != 125) {
#line 4017
    if (syntax & (unsigned int )((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 4018
      goto unfetch_interval;
    } else {
#line 4020
      return ((reg_errcode_t )10);
    }
  } else {

  }
#line 4026
  if (! laststart) {
#line 4028
    if (syntax & (unsigned int )(((((1 << 1) << 1) << 1) << 1) << 1)) {
#line 4029
      return ((reg_errcode_t )13);
    } else
#line 4030
    if (syntax & (unsigned int )((((1 << 1) << 1) << 1) << 1)) {
#line 4031
      laststart = b;
    } else {
#line 4033
      goto unfetch_interval;
    }
  } else {

  }
#line 4039
  if (upper_bound == 0) {
#line 4041
    while ((unsigned long )((b - bufp->buffer) + 3L) > bufp->allocated) {
#line 4041
      while (1) {
#line 4041
        old_buffer___13 = bufp->buffer;
#line 4041
        if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4041
          return ((reg_errcode_t )15);
        } else {

        }
#line 4041
        bufp->allocated <<= 1;
#line 4041
        if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4041
          bufp->allocated = (unsigned long )(1L << 16);
        } else {

        }
#line 4041
        tmp___95 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4041
        bufp->buffer = (unsigned char *)tmp___95;
#line 4041
        if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4041
          return ((reg_errcode_t )12);
        } else {

        }
#line 4041
        if ((unsigned long )old_buffer___13 != (unsigned long )bufp->buffer) {
#line 4041
          b = bufp->buffer + (b - old_buffer___13);
#line 4041
          begalt = bufp->buffer + (begalt - old_buffer___13);
#line 4041
          if (fixup_alt_jump) {
#line 4041
            fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___13);
          } else {

          }
#line 4041
          if (laststart) {
#line 4041
            laststart = bufp->buffer + (laststart - old_buffer___13);
          } else {

          }
#line 4041
          if (pending_exact) {
#line 4041
            pending_exact = bufp->buffer + (pending_exact - old_buffer___13);
          } else {

          }
        } else {

        }
#line 4041
        break;
      }
    }
#line 4042
    insert_op1(12, laststart, ((b + 3) - laststart) - 3L, b);
#line 4043
    b += 3;
  } else {
#line 4058
    nbytes = (unsigned int )(10 + (upper_bound > 1) * 10);
#line 4060
    while ((unsigned long )((b - bufp->buffer) + (long )nbytes) > bufp->allocated) {
#line 4060
      while (1) {
#line 4060
        old_buffer___14 = bufp->buffer;
#line 4060
        if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4060
          return ((reg_errcode_t )15);
        } else {

        }
#line 4060
        bufp->allocated <<= 1;
#line 4060
        if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4060
          bufp->allocated = (unsigned long )(1L << 16);
        } else {

        }
#line 4060
        tmp___96 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4060
        bufp->buffer = (unsigned char *)tmp___96;
#line 4060
        if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4060
          return ((reg_errcode_t )12);
        } else {

        }
#line 4060
        if ((unsigned long )old_buffer___14 != (unsigned long )bufp->buffer) {
#line 4060
          b = bufp->buffer + (b - old_buffer___14);
#line 4060
          begalt = bufp->buffer + (begalt - old_buffer___14);
#line 4060
          if (fixup_alt_jump) {
#line 4060
            fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___14);
          } else {

          }
#line 4060
          if (laststart) {
#line 4060
            laststart = bufp->buffer + (laststart - old_buffer___14);
          } else {

          }
#line 4060
          if (pending_exact) {
#line 4060
            pending_exact = bufp->buffer + (pending_exact - old_buffer___14);
          } else {

          }
        } else {

        }
#line 4060
        break;
      }
    }
#line 4067
    insert_op2(20, laststart,
               (((b + 5) + (upper_bound > 1) * 5) - laststart) - 3L,
               lower_bound, b);
#line 4070
    b += 5;
#line 4076
    insert_op2(22, laststart, 5, lower_bound, b);
#line 4077
    b += 5;
#line 4079
    if (upper_bound > 1) {
#line 4087
      store_op2(21, b, ((laststart + 5) - b) - 3L, upper_bound - 1);
#line 4089
      b += 5;
#line 4105
      insert_op2(22, laststart, b - laststart, upper_bound - 1, b);
#line 4107
      b += 5;
    } else {

    }
  }
#line 4110
  pending_exact = (unsigned char *)0;
#line 4111
  beg_interval = (char const   *)((void *)0);
#line 4113
  break;
  unfetch_interval: 
#line 4118
  p = beg_interval;
#line 4119
  beg_interval = (char const   *)((void *)0);
#line 4122
  while (1) {
#line 4122
    if ((unsigned long )p == (unsigned long )pend) {
#line 4122
      return ((reg_errcode_t )14);
    } else {

    }
#line 4122
    tmp___97 = p;
#line 4122
    p ++;
#line 4122
    c = (unsigned char )*tmp___97;
#line 4122
    if (translate) {
#line 4122
      c = (unsigned char )*(translate + c);
    } else {

    }
#line 4122
    break;
  }
#line 4124
  if (! (syntax & (unsigned int )((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1))) {
#line 4126
    if ((unsigned long )p > (unsigned long )pattern) {
#line 4126
      if ((int const   )*(p + -1) == 92) {
#line 4127
        goto normal_backslash;
      } else {

      }
    } else {

    }
  } else {

  }
#line 4129
  goto normal_char;
  case 119: 
#line 4153
  laststart = b;
#line 4154
  while (1) {
#line 4154
    while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 4154
      while (1) {
#line 4154
        old_buffer___15 = bufp->buffer;
#line 4154
        if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4154
          return ((reg_errcode_t )15);
        } else {

        }
#line 4154
        bufp->allocated <<= 1;
#line 4154
        if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4154
          bufp->allocated = (unsigned long )(1L << 16);
        } else {

        }
#line 4154
        tmp___98 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4154
        bufp->buffer = (unsigned char *)tmp___98;
#line 4154
        if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4154
          return ((reg_errcode_t )12);
        } else {

        }
#line 4154
        if ((unsigned long )old_buffer___15 != (unsigned long )bufp->buffer) {
#line 4154
          b = bufp->buffer + (b - old_buffer___15);
#line 4154
          begalt = bufp->buffer + (begalt - old_buffer___15);
#line 4154
          if (fixup_alt_jump) {
#line 4154
            fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___15);
          } else {

          }
#line 4154
          if (laststart) {
#line 4154
            laststart = bufp->buffer + (laststart - old_buffer___15);
          } else {

          }
#line 4154
          if (pending_exact) {
#line 4154
            pending_exact = bufp->buffer + (pending_exact - old_buffer___15);
          } else {

          }
        } else {

        }
#line 4154
        break;
      }
    }
#line 4154
    tmp___99 = b;
#line 4154
    b ++;
#line 4154
    *tmp___99 = (unsigned char)23;
#line 4154
    break;
  }
#line 4155
  break;
  case 87: 
#line 4159
  laststart = b;
#line 4160
  while (1) {
#line 4160
    while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 4160
      while (1) {
#line 4160
        old_buffer___16 = bufp->buffer;
#line 4160
        if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4160
          return ((reg_errcode_t )15);
        } else {

        }
#line 4160
        bufp->allocated <<= 1;
#line 4160
        if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4160
          bufp->allocated = (unsigned long )(1L << 16);
        } else {

        }
#line 4160
        tmp___100 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4160
        bufp->buffer = (unsigned char *)tmp___100;
#line 4160
        if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4160
          return ((reg_errcode_t )12);
        } else {

        }
#line 4160
        if ((unsigned long )old_buffer___16 != (unsigned long )bufp->buffer) {
#line 4160
          b = bufp->buffer + (b - old_buffer___16);
#line 4160
          begalt = bufp->buffer + (begalt - old_buffer___16);
#line 4160
          if (fixup_alt_jump) {
#line 4160
            fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___16);
          } else {

          }
#line 4160
          if (laststart) {
#line 4160
            laststart = bufp->buffer + (laststart - old_buffer___16);
          } else {

          }
#line 4160
          if (pending_exact) {
#line 4160
            pending_exact = bufp->buffer + (pending_exact - old_buffer___16);
          } else {

          }
        } else {

        }
#line 4160
        break;
      }
    }
#line 4160
    tmp___101 = b;
#line 4160
    b ++;
#line 4160
    *tmp___101 = (unsigned char)24;
#line 4160
    break;
  }
#line 4161
  break;
  case 60: 
#line 4165
  while (1) {
#line 4165
    while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 4165
      while (1) {
#line 4165
        old_buffer___17 = bufp->buffer;
#line 4165
        if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4165
          return ((reg_errcode_t )15);
        } else {

        }
#line 4165
        bufp->allocated <<= 1;
#line 4165
        if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4165
          bufp->allocated = (unsigned long )(1L << 16);
        } else {

        }
#line 4165
        tmp___102 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4165
        bufp->buffer = (unsigned char *)tmp___102;
#line 4165
        if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4165
          return ((reg_errcode_t )12);
        } else {

        }
#line 4165
        if ((unsigned long )old_buffer___17 != (unsigned long )bufp->buffer) {
#line 4165
          b = bufp->buffer + (b - old_buffer___17);
#line 4165
          begalt = bufp->buffer + (begalt - old_buffer___17);
#line 4165
          if (fixup_alt_jump) {
#line 4165
            fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___17);
          } else {

          }
#line 4165
          if (laststart) {
#line 4165
            laststart = bufp->buffer + (laststart - old_buffer___17);
          } else {

          }
#line 4165
          if (pending_exact) {
#line 4165
            pending_exact = bufp->buffer + (pending_exact - old_buffer___17);
          } else {

          }
        } else {

        }
#line 4165
        break;
      }
    }
#line 4165
    tmp___103 = b;
#line 4165
    b ++;
#line 4165
    *tmp___103 = (unsigned char)25;
#line 4165
    break;
  }
#line 4166
  break;
  case 62: 
#line 4169
  while (1) {
#line 4169
    while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 4169
      while (1) {
#line 4169
        old_buffer___18 = bufp->buffer;
#line 4169
        if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4169
          return ((reg_errcode_t )15);
        } else {

        }
#line 4169
        bufp->allocated <<= 1;
#line 4169
        if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4169
          bufp->allocated = (unsigned long )(1L << 16);
        } else {

        }
#line 4169
        tmp___104 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4169
        bufp->buffer = (unsigned char *)tmp___104;
#line 4169
        if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4169
          return ((reg_errcode_t )12);
        } else {

        }
#line 4169
        if ((unsigned long )old_buffer___18 != (unsigned long )bufp->buffer) {
#line 4169
          b = bufp->buffer + (b - old_buffer___18);
#line 4169
          begalt = bufp->buffer + (begalt - old_buffer___18);
#line 4169
          if (fixup_alt_jump) {
#line 4169
            fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___18);
          } else {

          }
#line 4169
          if (laststart) {
#line 4169
            laststart = bufp->buffer + (laststart - old_buffer___18);
          } else {

          }
#line 4169
          if (pending_exact) {
#line 4169
            pending_exact = bufp->buffer + (pending_exact - old_buffer___18);
          } else {

          }
        } else {

        }
#line 4169
        break;
      }
    }
#line 4169
    tmp___105 = b;
#line 4169
    b ++;
#line 4169
    *tmp___105 = (unsigned char)26;
#line 4169
    break;
  }
#line 4170
  break;
  case 98: 
#line 4173
  while (1) {
#line 4173
    while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 4173
      while (1) {
#line 4173
        old_buffer___19 = bufp->buffer;
#line 4173
        if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4173
          return ((reg_errcode_t )15);
        } else {

        }
#line 4173
        bufp->allocated <<= 1;
#line 4173
        if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4173
          bufp->allocated = (unsigned long )(1L << 16);
        } else {

        }
#line 4173
        tmp___106 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4173
        bufp->buffer = (unsigned char *)tmp___106;
#line 4173
        if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4173
          return ((reg_errcode_t )12);
        } else {

        }
#line 4173
        if ((unsigned long )old_buffer___19 != (unsigned long )bufp->buffer) {
#line 4173
          b = bufp->buffer + (b - old_buffer___19);
#line 4173
          begalt = bufp->buffer + (begalt - old_buffer___19);
#line 4173
          if (fixup_alt_jump) {
#line 4173
            fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___19);
          } else {

          }
#line 4173
          if (laststart) {
#line 4173
            laststart = bufp->buffer + (laststart - old_buffer___19);
          } else {

          }
#line 4173
          if (pending_exact) {
#line 4173
            pending_exact = bufp->buffer + (pending_exact - old_buffer___19);
          } else {

          }
        } else {

        }
#line 4173
        break;
      }
    }
#line 4173
    tmp___107 = b;
#line 4173
    b ++;
#line 4173
    *tmp___107 = (unsigned char)27;
#line 4173
    break;
  }
#line 4174
  break;
  case 66: 
#line 4177
  while (1) {
#line 4177
    while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 4177
      while (1) {
#line 4177
        old_buffer___20 = bufp->buffer;
#line 4177
        if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4177
          return ((reg_errcode_t )15);
        } else {

        }
#line 4177
        bufp->allocated <<= 1;
#line 4177
        if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4177
          bufp->allocated = (unsigned long )(1L << 16);
        } else {

        }
#line 4177
        tmp___108 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4177
        bufp->buffer = (unsigned char *)tmp___108;
#line 4177
        if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4177
          return ((reg_errcode_t )12);
        } else {

        }
#line 4177
        if ((unsigned long )old_buffer___20 != (unsigned long )bufp->buffer) {
#line 4177
          b = bufp->buffer + (b - old_buffer___20);
#line 4177
          begalt = bufp->buffer + (begalt - old_buffer___20);
#line 4177
          if (fixup_alt_jump) {
#line 4177
            fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___20);
          } else {

          }
#line 4177
          if (laststart) {
#line 4177
            laststart = bufp->buffer + (laststart - old_buffer___20);
          } else {

          }
#line 4177
          if (pending_exact) {
#line 4177
            pending_exact = bufp->buffer + (pending_exact - old_buffer___20);
          } else {

          }
        } else {

        }
#line 4177
        break;
      }
    }
#line 4177
    tmp___109 = b;
#line 4177
    b ++;
#line 4177
    *tmp___109 = (unsigned char)28;
#line 4177
    break;
  }
#line 4178
  break;
  case 96: 
#line 4181
  while (1) {
#line 4181
    while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 4181
      while (1) {
#line 4181
        old_buffer___21 = bufp->buffer;
#line 4181
        if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4181
          return ((reg_errcode_t )15);
        } else {

        }
#line 4181
        bufp->allocated <<= 1;
#line 4181
        if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4181
          bufp->allocated = (unsigned long )(1L << 16);
        } else {

        }
#line 4181
        tmp___110 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4181
        bufp->buffer = (unsigned char *)tmp___110;
#line 4181
        if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4181
          return ((reg_errcode_t )12);
        } else {

        }
#line 4181
        if ((unsigned long )old_buffer___21 != (unsigned long )bufp->buffer) {
#line 4181
          b = bufp->buffer + (b - old_buffer___21);
#line 4181
          begalt = bufp->buffer + (begalt - old_buffer___21);
#line 4181
          if (fixup_alt_jump) {
#line 4181
            fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___21);
          } else {

          }
#line 4181
          if (laststart) {
#line 4181
            laststart = bufp->buffer + (laststart - old_buffer___21);
          } else {

          }
#line 4181
          if (pending_exact) {
#line 4181
            pending_exact = bufp->buffer + (pending_exact - old_buffer___21);
          } else {

          }
        } else {

        }
#line 4181
        break;
      }
    }
#line 4181
    tmp___111 = b;
#line 4181
    b ++;
#line 4181
    *tmp___111 = (unsigned char)10;
#line 4181
    break;
  }
#line 4182
  break;
  case 39: 
#line 4185
  while (1) {
#line 4185
    while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 4185
      while (1) {
#line 4185
        old_buffer___22 = bufp->buffer;
#line 4185
        if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4185
          return ((reg_errcode_t )15);
        } else {

        }
#line 4185
        bufp->allocated <<= 1;
#line 4185
        if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4185
          bufp->allocated = (unsigned long )(1L << 16);
        } else {

        }
#line 4185
        tmp___112 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4185
        bufp->buffer = (unsigned char *)tmp___112;
#line 4185
        if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4185
          return ((reg_errcode_t )12);
        } else {

        }
#line 4185
        if ((unsigned long )old_buffer___22 != (unsigned long )bufp->buffer) {
#line 4185
          b = bufp->buffer + (b - old_buffer___22);
#line 4185
          begalt = bufp->buffer + (begalt - old_buffer___22);
#line 4185
          if (fixup_alt_jump) {
#line 4185
            fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___22);
          } else {

          }
#line 4185
          if (laststart) {
#line 4185
            laststart = bufp->buffer + (laststart - old_buffer___22);
          } else {

          }
#line 4185
          if (pending_exact) {
#line 4185
            pending_exact = bufp->buffer + (pending_exact - old_buffer___22);
          } else {

          }
        } else {

        }
#line 4185
        break;
      }
    }
#line 4185
    tmp___113 = b;
#line 4185
    b ++;
#line 4185
    *tmp___113 = (unsigned char)11;
#line 4185
    break;
  }
#line 4186
  break;
  case 57: 
  case 56: 
  case 55: 
  case 54: 
  case 53: 
  case 52: 
  case 51: 
  case 50: 
  case 49: 
#line 4190
  if (syntax & (unsigned int )((((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 4191
    goto normal_char;
  } else {

  }
#line 4193
  c1 = (unsigned char )((int )c - 48);
#line 4195
  if ((regnum_t )c1 > regnum) {
#line 4196
    return ((reg_errcode_t )6);
  } else {

  }
#line 4199
  tmp___114 = group_in_compile_stack(compile_stack, (int )c1);
#line 4199
  if (tmp___114) {
#line 4200
    goto normal_char;
  } else {

  }
#line 4202
  laststart = b;
#line 4203
  while (1) {
#line 4203
    while ((unsigned long )((b - bufp->buffer) + 2L) > bufp->allocated) {
#line 4203
      while (1) {
#line 4203
        old_buffer___23 = bufp->buffer;
#line 4203
        if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4203
          return ((reg_errcode_t )15);
        } else {

        }
#line 4203
        bufp->allocated <<= 1;
#line 4203
        if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4203
          bufp->allocated = (unsigned long )(1L << 16);
        } else {

        }
#line 4203
        tmp___115 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4203
        bufp->buffer = (unsigned char *)tmp___115;
#line 4203
        if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4203
          return ((reg_errcode_t )12);
        } else {

        }
#line 4203
        if ((unsigned long )old_buffer___23 != (unsigned long )bufp->buffer) {
#line 4203
          b = bufp->buffer + (b - old_buffer___23);
#line 4203
          begalt = bufp->buffer + (begalt - old_buffer___23);
#line 4203
          if (fixup_alt_jump) {
#line 4203
            fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___23);
          } else {

          }
#line 4203
          if (laststart) {
#line 4203
            laststart = bufp->buffer + (laststart - old_buffer___23);
          } else {

          }
#line 4203
          if (pending_exact) {
#line 4203
            pending_exact = bufp->buffer + (pending_exact - old_buffer___23);
          } else {

          }
        } else {

        }
#line 4203
        break;
      }
    }
#line 4203
    tmp___116 = b;
#line 4203
    b ++;
#line 4203
    *tmp___116 = (unsigned char)7;
#line 4203
    tmp___117 = b;
#line 4203
    b ++;
#line 4203
    *tmp___117 = c1;
#line 4203
    break;
  }
#line 4204
  break;
  case 63: 
  case 43: 
#line 4209
  if (syntax & (unsigned int )(1 << 1)) {
#line 4210
    goto handle_plus;
  }
  normal_backslash: 
  default: 
#line 4219
  if (translate) {
#line 4219
    c = (unsigned char )*(translate + c);
  } else {
#line 4219
    c = c;
  }
#line 4220
  goto normal_char;
  }
#line 4222
  break;
  normal_char: 
  default: 
#line 4229
  if (! pending_exact) {
#line 4229
    goto _L___23;
  } else
#line 4229
  if ((unsigned long )((pending_exact + (int )*pending_exact) + 1) != (unsigned long )b) {
#line 4229
    goto _L___23;
  } else
#line 4229
  if ((int )*pending_exact == (1 << 8) - 1) {
#line 4229
    goto _L___23;
  } else
#line 4229
  if ((int const   )*p == 42) {
#line 4229
    goto _L___23;
  } else
#line 4229
  if ((int const   )*p == 94) {
#line 4229
    goto _L___23;
  } else {
#line 4229
    if (syntax & (unsigned int )(1 << 1)) {
#line 4229
      if ((int const   )*p == 92) {
#line 4229
        if ((int const   )*(p + 1) == 43) {
#line 4229
          tmp___121 = 1;
        } else
#line 4229
        if ((int const   )*(p + 1) == 63) {
#line 4229
          tmp___121 = 1;
        } else {
#line 4229
          tmp___121 = 0;
        }
      } else {
#line 4229
        tmp___121 = 0;
      }
#line 4229
      tmp___123 = tmp___121;
    } else {
#line 4229
      if ((int const   )*p == 43) {
#line 4229
        tmp___122 = 1;
      } else
#line 4229
      if ((int const   )*p == 63) {
#line 4229
        tmp___122 = 1;
      } else {
#line 4229
        tmp___122 = 0;
      }
#line 4229
      tmp___123 = tmp___122;
    }
#line 4229
    if (tmp___123) {
#line 4229
      goto _L___23;
    } else
#line 4229
    if (syntax & (unsigned int )(((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 4229
      if (syntax & (unsigned int )((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) {
#line 4229
        tmp___125 = (int const   )*p == 123;
      } else {
#line 4229
        if ((int const   )*(p + 0) == 92) {
#line 4229
          if ((int const   )*(p + 1) == 123) {
#line 4229
            tmp___124 = 1;
          } else {
#line 4229
            tmp___124 = 0;
          }
        } else {
#line 4229
          tmp___124 = 0;
        }
#line 4229
        tmp___125 = tmp___124;
      }
#line 4229
      if (tmp___125) {
        _L___23: /* CIL Label */ 
#line 4249
        laststart = b;
#line 4251
        while (1) {
#line 4251
          while ((unsigned long )((b - bufp->buffer) + 2L) > bufp->allocated) {
#line 4251
            while (1) {
#line 4251
              old_buffer___24 = bufp->buffer;
#line 4251
              if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4251
                return ((reg_errcode_t )15);
              } else {

              }
#line 4251
              bufp->allocated <<= 1;
#line 4251
              if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4251
                bufp->allocated = (unsigned long )(1L << 16);
              } else {

              }
#line 4251
              tmp___118 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4251
              bufp->buffer = (unsigned char *)tmp___118;
#line 4251
              if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4251
                return ((reg_errcode_t )12);
              } else {

              }
#line 4251
              if ((unsigned long )old_buffer___24 != (unsigned long )bufp->buffer) {
#line 4251
                b = bufp->buffer + (b - old_buffer___24);
#line 4251
                begalt = bufp->buffer + (begalt - old_buffer___24);
#line 4251
                if (fixup_alt_jump) {
#line 4251
                  fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___24);
                } else {

                }
#line 4251
                if (laststart) {
#line 4251
                  laststart = bufp->buffer + (laststart - old_buffer___24);
                } else {

                }
#line 4251
                if (pending_exact) {
#line 4251
                  pending_exact = bufp->buffer + (pending_exact - old_buffer___24);
                } else {

                }
              } else {

              }
#line 4251
              break;
            }
          }
#line 4251
          tmp___119 = b;
#line 4251
          b ++;
#line 4251
          *tmp___119 = (unsigned char)1;
#line 4251
          tmp___120 = b;
#line 4251
          b ++;
#line 4251
          *tmp___120 = (unsigned char)0;
#line 4251
          break;
        }
#line 4252
        pending_exact = b - 1;
      } else {

      }
    } else {

    }
  }
#line 4255
  while (1) {
#line 4255
    while ((unsigned long )((b - bufp->buffer) + 1L) > bufp->allocated) {
#line 4255
      while (1) {
#line 4255
        old_buffer___25 = bufp->buffer;
#line 4255
        if (bufp->allocated == (unsigned long )(1L << 16)) {
#line 4255
          return ((reg_errcode_t )15);
        } else {

        }
#line 4255
        bufp->allocated <<= 1;
#line 4255
        if (bufp->allocated > (unsigned long )(1L << 16)) {
#line 4255
          bufp->allocated = (unsigned long )(1L << 16);
        } else {

        }
#line 4255
        tmp___126 = realloc((void *)bufp->buffer, bufp->allocated);
#line 4255
        bufp->buffer = (unsigned char *)tmp___126;
#line 4255
        if ((unsigned long )bufp->buffer == (unsigned long )((void *)0)) {
#line 4255
          return ((reg_errcode_t )12);
        } else {

        }
#line 4255
        if ((unsigned long )old_buffer___25 != (unsigned long )bufp->buffer) {
#line 4255
          b = bufp->buffer + (b - old_buffer___25);
#line 4255
          begalt = bufp->buffer + (begalt - old_buffer___25);
#line 4255
          if (fixup_alt_jump) {
#line 4255
            fixup_alt_jump = bufp->buffer + (fixup_alt_jump - old_buffer___25);
          } else {

          }
#line 4255
          if (laststart) {
#line 4255
            laststart = bufp->buffer + (laststart - old_buffer___25);
          } else {

          }
#line 4255
          if (pending_exact) {
#line 4255
            pending_exact = bufp->buffer + (pending_exact - old_buffer___25);
          } else {

          }
        } else {

        }
#line 4255
        break;
      }
    }
#line 4255
    tmp___127 = b;
#line 4255
    b ++;
#line 4255
    *tmp___127 = c;
#line 4255
    break;
  }
#line 4256
  *pending_exact = (unsigned char )((int )*pending_exact + 1);
#line 4257
  break;
  }
}
---------
SID [1480] -> Line 3400
#line 3400
begalt = b;
---------
SID [1479] -> Line 3400
#line 3400
b = bufp->buffer;
---------
SID [1478] -> Line -1

---------
SID [1477] -> Line 3397
#line 3397
bufp->allocated = 32UL;
---------
SID [1476] -> Line -1

---------
SID [1475] -> Line 3395
#line 3395
return ((reg_errcode_t )12);
---------
SID [1474] -> Line 3395
#line 3395
if (! bufp->buffer) {
#line 3395
  return ((reg_errcode_t )12);
} else {

}
---------
SID [1473] -> Line 3393
#line 3393
bufp->buffer = (unsigned char *)tmp___3;
---------
SID [1472] -> Line 3393
#line 3393
tmp___3 = malloc(32UL * sizeof(unsigned char ));
---------
SID [1471] -> Line 3389
#line 3389
bufp->buffer = (unsigned char *)tmp___2;
---------
SID [1470] -> Line 3389
#line 3389
tmp___2 = realloc((void *)bufp->buffer, 32UL * sizeof(unsigned char ));
---------
SID [1469] -> Line 3385
#line 3385
if (bufp->buffer) {
#line 3389
  tmp___2 = realloc((void *)bufp->buffer, 32UL * sizeof(unsigned char ));
#line 3389
  bufp->buffer = (unsigned char *)tmp___2;
} else {
#line 3393
  tmp___3 = malloc(32UL * sizeof(unsigned char ));
#line 3393
  bufp->buffer = (unsigned char *)tmp___3;
}
---------
SID [1468] -> Line 3383
#line 3383
if (bufp->allocated == 0UL) {
#line 3385
  if (bufp->buffer) {
#line 3389
    tmp___2 = realloc((void *)bufp->buffer, 32UL * sizeof(unsigned char ));
#line 3389
    bufp->buffer = (unsigned char *)tmp___2;
  } else {
#line 3393
    tmp___3 = malloc(32UL * sizeof(unsigned char ));
#line 3393
    bufp->buffer = (unsigned char *)tmp___3;
  }
#line 3395
  if (! bufp->buffer) {
#line 3395
    return ((reg_errcode_t )12);
  } else {

  }
#line 3397
  bufp->allocated = 32UL;
} else {

}
---------
SID [1467] -> Line 3380
#line 3380
init_syntax_once();
---------
SID [1466] -> Line 3376
#line 3376
bufp->re_nsub = (size_t )0;
---------
SID [1465] -> Line 3373
#line 3373
bufp->used = 0UL;
---------
SID [1464] -> Line 3368
#line 3368
bufp->not_bol = tmp___1;
---------
SID [1463] -> Line 3368
#line 3368
bufp->not_eol = tmp___1;
---------
SID [1462] -> Line 3368
#line 3368
tmp___1 = 0U;
---------
SID [1461] -> Line 3367
#line 3367
bufp->fastmap_accurate = 0U;
---------
SID [1460] -> Line 3366
#line 3366
bufp->syntax = syntax;
---------
SID [1459] -> Line 3363
#line 3363
compile_stack.avail = 0U;
---------
SID [1458] -> Line 3362
#line 3362
compile_stack.size = 32U;
---------
SID [1457] -> Line -1

---------
SID [1456] -> Line 3360
#line 3360
return ((reg_errcode_t )12);
---------
SID [1455] -> Line 3359
#line 3359
if ((unsigned long )compile_stack.stack == (unsigned long )((void *)0)) {
#line 3360
  return ((reg_errcode_t )12);
} else {

}
---------
SID [1454] -> Line 3358
#line 3358
compile_stack.stack = (compile_stack_elt_t *)tmp___0;
---------
SID [1453] -> Line 3358
#line 3358
tmp___0 = malloc(32UL * sizeof(compile_stack_elt_t ));
---------
SID [1452] -> Line 3343
#line 3343
regnum = (regnum_t )0;
---------
SID [1451] -> Line 3338
#line 3338
fixup_alt_jump = (unsigned char *)0;
---------
SID [1450] -> Line 3326
#line 3326
laststart = (unsigned char *)0;
---------
SID [1449] -> Line 3321
#line 3321
pending_exact = (unsigned char *)0;
---------
SID [1448] -> Line 3315
#line 3315
translate = bufp->translate;
---------
SID [1447] -> Line 3312
#line 3312
pend = pattern + size;
---------
SID [1446] -> Line 3311
#line 3311
p = pattern;
---------
SID [1445] -> Line 3042
#line 3042
return (ret);
---------
SID [1444] -> Line 3041
#line 3041
re_syntax_options = syntax;
---------
SID [1443] -> Line 3039
#line 3039
ret = re_syntax_options;
---------
SID [1442] -> Line 2344
#line 2344
return;
---------
SID [1441] -> Line 2343
#line 2343
done = 1;
---------
SID [1440] -> Line 2341
#line 2341
re_syntax_table['_'] = (char)1;
---------
SID [1439] -> Line 2338
#line 2338
c ++;
---------
SID [1438] -> Line 2339
#line 2339
re_syntax_table[c] = (char)1;
---------
SID [1437] -> Line 2338
#line 2338
break;
---------
SID [1436] -> Line -1

---------
SID [1435] -> Line 2338
#line 2338
if (c <= 57) {

} else {
#line 2338
  break;
}
---------
SID [1434] -> Line 2338
#line 2338
while (c <= 57) {
#line 2339
  re_syntax_table[c] = (char)1;
#line 2338
  c ++;
}
---------
SID [1433] -> Line 2338
#line 2338
c = '0';
---------
SID [1432] -> Line 2335
#line 2335
c ++;
---------
SID [1431] -> Line 2336
#line 2336
re_syntax_table[c] = (char)1;
---------
SID [1430] -> Line 2335
#line 2335
break;
---------
SID [1429] -> Line -1

---------
SID [1428] -> Line 2335
#line 2335
if (c <= 90) {

} else {
#line 2335
  break;
}
---------
SID [1427] -> Line 2335
#line 2335
while (c <= 90) {
#line 2336
  re_syntax_table[c] = (char)1;
#line 2335
  c ++;
}
---------
SID [1426] -> Line 2335
#line 2335
c = 'A';
---------
SID [1425] -> Line 2332
#line 2332
c ++;
---------
SID [1424] -> Line 2333
#line 2333
re_syntax_table[c] = (char)1;
---------
SID [1423] -> Line 2332
#line 2332
break;
---------
SID [1422] -> Line -1

---------
SID [1421] -> Line 2332
#line 2332
if (c <= 122) {

} else {
#line 2332
  break;
}
---------
SID [1420] -> Line 2332
#line 2332
while (c <= 122) {
#line 2333
  re_syntax_table[c] = (char)1;
#line 2332
  c ++;
}
---------
SID [1419] -> Line 2332
#line 2332
c = 'a';
---------
SID [1418] -> Line 2330
#line 2330
memset((void *)(re_syntax_table), 0, sizeof(re_syntax_table));
---------
SID [1417] -> Line -1

---------
SID [1416] -> Line 2328
#line 2328
return;
---------
SID [1415] -> Line 2327
#line 2327
if (done) {
#line 2328
  return;
} else {

}
---------
SID [1414] -> Line 2228
#line 2228
return (b->b);
---------
SID [1413] -> Line 2227
#line 2227
b = (struct buffer *)bb;
---------
SID [1412] -> Line 2219
#line 2219
return;
---------
SID [1411] -> Line 2218
#line 2218
(b->length) ++;
---------
SID [1410] -> Line 2217
#line 2217
*(b->b + b->length) = (char )ch;
---------
SID [1409] -> Line -1

---------
SID [1408] -> Line 2215
#line 2215
b->b = (char *)tmp___0;
---------
SID [1407] -> Line 2215
#line 2215
tmp___0 = ck_realloc((void *)b->b, b->allocated);
---------
SID [1406] -> Line 2214
#line 2214
b->allocated *= 2;
---------
SID [1405] -> Line 2213
#line 2213
if (b->length + 1 > b->allocated) {
#line 2214
  b->allocated *= 2;
#line 2215
  tmp___0 = ck_realloc((void *)b->b, b->allocated);
#line 2215
  b->b = (char *)tmp___0;
} else {

}
---------
SID [1404] -> Line 2212
#line 2212
b = (struct buffer *)bb;
---------
SID [1403] -> Line 2203
#line 2203
return;
---------
SID [1402] -> Line 2202
#line 2202
b->length += n;
---------
SID [1401] -> Line 2201
#line 2201
*tmp___1 = *tmp___2;
---------
SID [1400] -> Line 2201
#line 2201
p ++;
---------
SID [1399] -> Line 2201
#line 2201
tmp___2 = p;
---------
SID [1398] -> Line 2201
#line 2201
cp ++;
---------
SID [1397] -> Line 2201
#line 2201
tmp___1 = cp;
---------
SID [1396] -> Line 2200
#line 2200
break;
---------
SID [1395] -> Line -1

---------
SID [1394] -> Line 2200
#line 2200
if (tmp___3) {

} else {
#line 2200
  break;
}
---------
SID [1393] -> Line 2200
#line 2200
x --;
---------
SID [1392] -> Line 2200
#line 2200
tmp___3 = x;
---------
SID [1391] -> Line 2200
#line 2200
while (1) {
#line 2200
  tmp___3 = x;
#line 2200
  x --;
#line 2200
  if (tmp___3) {

  } else {
#line 2200
    break;
  }
#line 2201
  tmp___1 = cp;
#line 2201
  cp ++;
#line 2201
  tmp___2 = p;
#line 2201
  p ++;
#line 2201
  *tmp___1 = *tmp___2;
}
---------
SID [1390] -> Line 2199
#line 2199
cp = b->b + b->length;
---------
SID [1389] -> Line 2198
#line 2198
x = n;
---------
SID [1388] -> Line -1

---------
SID [1387] -> Line 2195
#line 2195
b->b = (char *)tmp___0;
---------
SID [1386] -> Line 2195
#line 2195
tmp___0 = ck_realloc((void *)b->b, b->allocated);
---------
SID [1385] -> Line 2194
#line 2194
b->allocated *= 2;
---------
SID [1384] -> Line 2193
#line 2193
if (b->length + n > b->allocated) {
#line 2194
  b->allocated *= 2;
#line 2195
  tmp___0 = ck_realloc((void *)b->b, b->allocated);
#line 2195
  b->b = (char *)tmp___0;
} else {

}
---------
SID [1383] -> Line 2192
#line 2192
b = (struct buffer *)bb;
---------
SID [1382] -> Line 2179
#line 2179
return (bb->length);
---------
SID [1381] -> Line 2178
#line 2178
bb = (struct buffer *)b;
---------
SID [1380] -> Line 2170
#line 2170
return;
---------
SID [1379] -> Line 2169
#line 2169
free((void *)b);
---------
SID [1378] -> Line 2168
#line 2168
b->length = 0;
---------
SID [1377] -> Line 2167
#line 2167
b->allocated = 0;
---------
SID [1376] -> Line 2166
#line 2166
b->b = (char *)0;
---------
SID [1375] -> Line 2165
#line 2165
free((void *)b->b);
---------
SID [1374] -> Line 2164
#line 2164
b = (struct buffer *)bb;
---------
SID [1373] -> Line 2155
#line 2155
return ((void *)b);
---------
SID [1372] -> Line 2154
#line 2154
b->length = 0;
---------
SID [1371] -> Line 2153
#line 2153
b->b = (char *)tmp___1;
---------
SID [1370] -> Line 2153
#line 2153
tmp___1 = ck_malloc(50);
---------
SID [1369] -> Line 2152
#line 2152
b->allocated = 50;
---------
SID [1368] -> Line 2151
#line 2151
b = (struct buffer *)tmp___0;
---------
SID [1367] -> Line 2151
#line 2151
tmp___0 = ck_malloc((int )sizeof(struct buffer ));
---------
SID [1366] -> Line 2131
#line 2131
return (ret);
---------
SID [1365] -> Line 2130
#line 2130
strcpy((char */* __restrict  */)ret, (char const   */* __restrict  */)str);
---------
SID [1364] -> Line 2129
#line 2129
ret = (char *)tmp___1;
---------
SID [1363] -> Line 2129
#line 2129
tmp___1 = ck_malloc((int )(tmp___0 + 2UL));
---------
SID [1362] -> Line 2129
#line 2129
tmp___0 = strlen((char const   *)str);
---------
SID [1361] -> Line 2119
#line 2119
return (ret);
---------
SID [1360] -> Line -1

---------
SID [1359] -> Line 2118
#line 2118
panic((char *)"Couldn\'t re-allocate memory");
---------
SID [1358] -> Line 2117
#line 2117
if ((unsigned long )ret == (unsigned long )((void *)0)) {
#line 2118
  panic((char *)"Couldn\'t re-allocate memory");
} else {

}
---------
SID [1357] -> Line 2116
#line 2116
ret = realloc(ptr, (size_t )size);
---------
SID [1356] -> Line 2105
#line 2105
return (tmp___0);
---------
SID [1355] -> Line 2105
#line 2105
tmp___0 = ck_malloc(size);
---------
SID [1354] -> Line 2097
#line 2097
return (ret);
---------
SID [1353] -> Line -1

---------
SID [1352] -> Line 2096
#line 2096
panic((char *)"Couldn\'t allocate memory");
---------
SID [1351] -> Line 2095
#line 2095
if ((unsigned long )ret == (unsigned long )((void *)0)) {
#line 2096
  panic((char *)"Couldn\'t allocate memory");
} else {

}
---------
SID [1350] -> Line 2094
#line 2094
ret = malloc((size_t )size);
---------
SID [1349] -> Line -1

---------
SID [1348] -> Line 2093
#line 2093
size ++;
---------
SID [1347] -> Line 2092
#line 2092
if (! size) {
#line 2093
  size ++;
} else {

}
---------
SID [1346] -> Line 2083
#line 2083
return;
---------
SID [1345] -> Line -1

---------
SID [1344] -> Line 2082
#line 2082
panic((char *)"Couldn\'t close %s", tmp___0);
---------
SID [1343] -> Line 2082
#line 2082
tmp___0 = __fp_name(stream);
---------
SID [1342] -> Line 2081
#line 2081
if (tmp___1 == -1) {
#line 2082
  tmp___0 = __fp_name(stream);
#line 2082
  panic((char *)"Couldn\'t close %s", tmp___0);
} else {

}
---------
SID [1341] -> Line 2081
#line 2081
tmp___1 = fclose(stream);
---------
SID [1340] -> Line 2074
#line 2074
return;
---------
SID [1339] -> Line -1

---------
SID [1338] -> Line 2073
#line 2073
panic((char *)"couldn\'t write %d items to %s", nmemb, tmp___0);
---------
SID [1337] -> Line 2073
#line 2073
tmp___0 = __fp_name(stream);
---------
SID [1336] -> Line 2072
#line 2072
if (tmp___1 != (size_t )nmemb) {
#line 2073
  tmp___0 = __fp_name(stream);
#line 2073
  panic((char *)"couldn\'t write %d items to %s", nmemb, tmp___0);
} else {

}
---------
SID [1335] -> Line 2072
#line 2072
tmp___1 = fwrite((void const   */* __restrict  */)ptr, (size_t )size,
                 (size_t )nmemb, (FILE */* __restrict  */)stream);
---------
SID [1334] -> Line 2062
#line 2062
return (ret);
---------
SID [1333] -> Line -1

---------
SID [1332] -> Line 2060
#line 2060
strcpy((char */* __restrict  */)__id_s[n].name,
       (char const   */* __restrict  */)name);
---------
SID [1331] -> Line 2059
#line 2059
__id_s[n].name = (char *)tmp___3;
---------
SID [1330] -> Line 2059
#line 2059
tmp___3 = ck_malloc((int )(tmp___2 + 1UL));
---------
SID [1329] -> Line 2059
#line 2059
tmp___2 = strlen((char const   *)name);
---------
SID [1328] -> Line 2058
#line 2058
__id_s[n].fp = ret;
---------
SID [1327] -> Line -1

---------
SID [1326] -> Line 2057
#line 2057
panic((char *)"Internal error: too many files open");
---------
SID [1325] -> Line 2056
#line 2056
if (n == 32) {
#line 2057
  panic((char *)"Internal error: too many files open");
} else {

}
---------
SID [1324] -> Line 2053
#line 2053
n ++;
---------
SID [1323] -> Line -1

---------
SID [1322] -> Line 2055
#line 2055
break;
---------
SID [1321] -> Line 2054
#line 2054
if ((unsigned long )__id_s[n].fp == (unsigned long )((FILE *)0)) {
#line 2055
  break;
} else {

}
---------
SID [1320] -> Line 2053
#line 2053
break;
---------
SID [1319] -> Line -1

---------
SID [1318] -> Line 2053
#line 2053
if (n < 32) {

} else {
#line 2053
  break;
}
---------
SID [1317] -> Line 2053
#line 2053
while (n < 32) {
#line 2054
  if ((unsigned long )__id_s[n].fp == (unsigned long )((FILE *)0)) {
#line 2055
    break;
  } else {

  }
#line 2053
  n ++;
}
---------
SID [1316] -> Line 2053
#line 2053
n = 0;
---------
SID [1315] -> Line 2052
#line 2052
if (n == 32) {
#line 2053
  n = 0;
#line 2053
  while (n < 32) {
#line 2054
    if ((unsigned long )__id_s[n].fp == (unsigned long )((FILE *)0)) {
#line 2055
      break;
    } else {

    }
#line 2053
    n ++;
  }
#line 2056
  if (n == 32) {
#line 2057
    panic((char *)"Internal error: too many files open");
  } else {

  }
#line 2058
  __id_s[n].fp = ret;
#line 2059
  tmp___2 = strlen((char const   *)name);
#line 2059
  tmp___3 = ck_malloc((int )(tmp___2 + 1UL));
#line 2059
  __id_s[n].name = (char *)tmp___3;
#line 2060
  strcpy((char */* __restrict  */)__id_s[n].name,
         (char const   */* __restrict  */)name);
} else {

}
---------
SID [1314] -> Line 2044
#line 2044
n ++;
---------
SID [1313] -> Line -1

---------
SID [1312] -> Line 2049
#line 2049
break;
---------
SID [1311] -> Line 2048
#line 2048
strcpy((char */* __restrict  */)__id_s[n].name,
       (char const   */* __restrict  */)name);
---------
SID [1310] -> Line 2047
#line 2047
__id_s[n].name = (char *)tmp___1;
---------
SID [1309] -> Line 2047
#line 2047
tmp___1 = ck_malloc((int )(tmp___0 + 1UL));
---------
SID [1308] -> Line 2047
#line 2047
tmp___0 = strlen((char const   *)name);
---------
SID [1307] -> Line 2046
#line 2046
free((void *)__id_s[n].name);
---------
SID [1306] -> Line 2045
#line 2045
if ((unsigned long )ret == (unsigned long )__id_s[n].fp) {
#line 2046
  free((void *)__id_s[n].name);
#line 2047
  tmp___0 = strlen((char const   *)name);
#line 2047
  tmp___1 = ck_malloc((int )(tmp___0 + 1UL));
#line 2047
  __id_s[n].name = (char *)tmp___1;
#line 2048
  strcpy((char */* __restrict  */)__id_s[n].name,
         (char const   */* __restrict  */)name);
#line 2049
  break;
} else {

}
---------
SID [1305] -> Line 2044
#line 2044
break;
---------
SID [1304] -> Line -1

---------
SID [1303] -> Line 2044
#line 2044
if (n < 32) {

} else {
#line 2044
  break;
}
---------
SID [1302] -> Line 2044
#line 2044
while (n < 32) {
#line 2045
  if ((unsigned long )ret == (unsigned long )__id_s[n].fp) {
#line 2046
    free((void *)__id_s[n].name);
#line 2047
    tmp___0 = strlen((char const   *)name);
#line 2047
    tmp___1 = ck_malloc((int )(tmp___0 + 1UL));
#line 2047
    __id_s[n].name = (char *)tmp___1;
#line 2048
    strcpy((char */* __restrict  */)__id_s[n].name,
           (char const   */* __restrict  */)name);
#line 2049
    break;
  } else {

  }
#line 2044
  n ++;
}
---------
SID [1301] -> Line 2044
#line 2044
n = 0;
---------
SID [1300] -> Line -1

---------
SID [1299] -> Line 2043
#line 2043
panic((char *)"Couldn\'t open file %s", name);
---------
SID [1298] -> Line 2042
#line 2042
if ((unsigned long )ret == (unsigned long )((FILE *)0)) {
#line 2043
  panic((char *)"Couldn\'t open file %s", name);
} else {

}
---------
SID [1297] -> Line 2041
#line 2041
ret = fopen((char const   */* __restrict  */)name,
            (char const   */* __restrict  */)mode);
---------
SID [1296] -> Line 2029
#line 2029
return ((char *)"{Unknown file pointer}");
---------
SID [1295] -> Line 2025
#line 2025
n ++;
---------
SID [1294] -> Line -1

---------
SID [1293] -> Line 2027
#line 2027
return (__id_s[n].name);
---------
SID [1292] -> Line 2026
#line 2026
if ((unsigned long )__id_s[n].fp == (unsigned long )fp) {
#line 2027
  return (__id_s[n].name);
} else {

}
---------
SID [1291] -> Line 2025
#line 2025
break;
---------
SID [1290] -> Line -1

---------
SID [1289] -> Line 2025
#line 2025
if (n < 32) {

} else {
#line 2025
  break;
}
---------
SID [1288] -> Line 2025
#line 2025
while (n < 32) {
#line 2026
  if ((unsigned long )__id_s[n].fp == (unsigned long )fp) {
#line 2027
    return (__id_s[n].name);
  } else {

  }
#line 2025
  n ++;
}
---------
SID [1287] -> Line 2025
#line 2025
n = 0;
---------
SID [1286] -> Line 1977
#line 1977
exit(4);
---------
SID [1285] -> Line 1976
#line 1976
_IO_putc('\n', stdout);
---------
SID [1284] -> Line 1975
#line 1975
__builtin_va_end(iggy);
---------
SID [1283] -> Line 1969
#line 1969
vfprintf((FILE */* __restrict  */)stdout,
         (char const   */* __restrict  */)str, iggy);
---------
SID [1282] -> Line 1967
#line 1967
__builtin_va_start(iggy, /* last named argument of the function calling __builtin_va_start */);
---------
SID [1281] -> Line 1966
#line 1966
fprintf((FILE */* __restrict  */)stdout,
        (char const   */* __restrict  */)"%s: ", myname);
---------
SID [1280] -> Line 1912
#line 1912
exit(status);
---------
SID [1279] -> Line 1908
#line 1908
fprintf((FILE */* __restrict  */)tmp___0,
        (char const   */* __restrict  */)"Usage: %s [-nV] [--quiet] [--silent] [--version] [-e script]\n        [-f script-file] [--expression=script] [--file=script-file] [file...]\n",
        myname);
---------
SID [1278] -> Line 1908
#line 1908
tmp___0 = stdout;
---------
SID [1277] -> Line 1908
#line 1908
tmp___0 = stdout;
---------
SID [1276] -> Line 1908
#line 1908
if (status) {
#line 1908
  tmp___0 = stdout;
} else {
#line 1908
  tmp___0 = stdout;
}
---------
SID [1275] -> Line 1902
#line 1902
return;
---------
SID [1274] -> Line 1901
#line 1901
to->length += length;
---------
SID [1273] -> Line 1900
#line 1900
bcopy((void const   *)string, (void *)(to->text + to->length), (size_t )length);
---------
SID [1272] -> Line -1

---------
SID [1271] -> Line 1898
#line 1898
to->text = (char *)tmp___0;
---------
SID [1270] -> Line 1898
#line 1898
tmp___0 = ck_realloc((void *)to->text, to->alloc);
---------
SID [1269] -> Line 1897
#line 1897
to->alloc += length;
---------
SID [1268] -> Line 1895
#line 1895
if (length > to->alloc - to->length) {
#line 1897
  to->alloc += length;
#line 1898
  tmp___0 = ck_realloc((void *)to->text, to->alloc);
#line 1898
  to->text = (char *)tmp___0;
} else {

}
---------
SID [1267] -> Line 1884
#line 1884
return;
---------
SID [1266] -> Line 1883
#line 1883
to->length += from->length;
---------
SID [1265] -> Line 1882
#line 1882
bcopy((void const   *)from->text, (void *)(to->text + to->length),
      (size_t )from->length);
---------
SID [1264] -> Line -1

---------
SID [1263] -> Line 1880
#line 1880
to->text = (char *)tmp___0;
---------
SID [1262] -> Line 1880
#line 1880
tmp___0 = ck_realloc((void *)to->text, to->alloc);
---------
SID [1261] -> Line 1879
#line 1879
to->alloc += from->length;
---------
SID [1260] -> Line 1877
#line 1877
if (from->length > to->alloc - to->length) {
#line 1879
  to->alloc += from->length;
#line 1880
  tmp___0 = ck_realloc((void *)to->text, to->alloc);
#line 1880
  to->text = (char *)tmp___0;
} else {

}
---------
SID [1259] -> Line 1869
#line 1869
return;
---------
SID [1258] -> Line 1868
#line 1868
to->length = from->length;
---------
SID [1257] -> Line 1867
#line 1867
bcopy((void const   *)from->text, (void *)to->text, (size_t )from->length);
---------
SID [1256] -> Line -1

---------
SID [1255] -> Line 1865
#line 1865
to->text = (char *)tmp___0;
---------
SID [1254] -> Line 1865
#line 1865
tmp___0 = ck_realloc((void *)to->text, to->alloc);
---------
SID [1253] -> Line 1864
#line 1864
to->alloc = from->length;
---------
SID [1252] -> Line 1862
#line 1862
if (from->length > to->alloc) {
#line 1864
  to->alloc = from->length;
#line 1865
  tmp___0 = ck_realloc((void *)to->text, to->alloc);
#line 1865
  to->text = (char *)tmp___0;
} else {

}
---------
SID [1251] -> Line 1853
#line 1853
return;
---------
SID [1250] -> Line -1

---------
SID [1249] -> Line 1852
#line 1852
input_EOF ++;
---------
SID [1248] -> Line 1851
#line 1851
if (last_input_file) {
#line 1852
  input_EOF ++;
} else {

}
---------
SID [1247] -> Line 1850
#line 1850
ungetc(ch, input_file);
---------
SID [1246] -> Line 1849
#line 1849
if (ch != -1) {
#line 1850
  ungetc(ch, input_file);
} else
#line 1851
if (last_input_file) {
#line 1852
  input_EOF ++;
} else {

}
---------
SID [1245] -> Line 1848
#line 1848
ch = _IO_getc(input_file);
---------
SID [1244] -> Line -1

---------
SID [1243] -> Line 1845
#line 1845
break;
---------
SID [1242] -> Line 1844
#line 1844
line.length = line.alloc - n;
---------
SID [1241] -> Line 1842
#line 1842
if (ch == 10) {
#line 1844
  line.length = line.alloc - n;
#line 1845
  break;
} else {

}
---------
SID [1240] -> Line 1841
#line 1841
n --;
---------
SID [1239] -> Line 1840
#line 1840
*tmp___1 = (char )ch;
---------
SID [1238] -> Line 1840
#line 1840
p ++;
---------
SID [1237] -> Line 1840
#line 1840
tmp___1 = p;
---------
SID [1236] -> Line -1

---------
SID [1235] -> Line 1838
#line 1838
line.alloc *= 2;
---------
SID [1234] -> Line 1837
#line 1837
n = line.alloc;
---------
SID [1233] -> Line 1836
#line 1836
p = line.text + line.alloc;
---------
SID [1232] -> Line 1835
#line 1835
line.text = (char *)tmp___0;
---------
SID [1231] -> Line 1835
#line 1835
tmp___0 = ck_realloc((void *)line.text, line.alloc * 2);
---------
SID [1230] -> Line 1833
#line 1833
if (n == 0) {
#line 1835
  tmp___0 = ck_realloc((void *)line.text, line.alloc * 2);
#line 1835
  line.text = (char *)tmp___0;
#line 1836
  p = line.text + line.alloc;
#line 1837
  n = line.alloc;
#line 1838
  line.alloc *= 2;
} else {

}
---------
SID [1229] -> Line -1

---------
SID [1228] -> Line 1831
#line 1831
return;
---------
SID [1227] -> Line -1

---------
SID [1226] -> Line 1830
#line 1830
input_EOF ++;
---------
SID [1225] -> Line 1829
#line 1829
if (last_input_file) {
#line 1830
  input_EOF ++;
} else {

}
---------
SID [1224] -> Line 1828
#line 1828
line.length = line.alloc - n;
---------
SID [1223] -> Line -1

---------
SID [1222] -> Line 1825
#line 1825
return;
---------
SID [1221] -> Line 1824
#line 1824
if (n == line.alloc) {
#line 1825
  return;
} else {

}
---------
SID [1220] -> Line 1822
#line 1822
if (ch == -1) {
#line 1824
  if (n == line.alloc) {
#line 1825
    return;
  } else {

  }
#line 1828
  line.length = line.alloc - n;
#line 1829
  if (last_input_file) {
#line 1830
    input_EOF ++;
  } else {

  }
#line 1831
  return;
} else {

}
---------
SID [1219] -> Line 1821
#line 1821
ch = _IO_getc(input_file);
---------
SID [1218] -> Line 1819
#line 1819
while (1) {
#line 1821
  ch = _IO_getc(input_file);
#line 1822
  if (ch == -1) {
#line 1824
    if (n == line.alloc) {
#line 1825
      return;
    } else {

    }
#line 1828
    line.length = line.alloc - n;
#line 1829
    if (last_input_file) {
#line 1830
      input_EOF ++;
    } else {

    }
#line 1831
    return;
  } else {

  }
#line 1833
  if (n == 0) {
#line 1835
    tmp___0 = ck_realloc((void *)line.text, line.alloc * 2);
#line 1835
    line.text = (char *)tmp___0;
#line 1836
    p = line.text + line.alloc;
#line 1837
    n = line.alloc;
#line 1838
    line.alloc *= 2;
  } else {

  }
#line 1840
  tmp___1 = p;
#line 1840
  p ++;
#line 1840
  *tmp___1 = (char )ch;
#line 1841
  n --;
#line 1842
  if (ch == 10) {
#line 1844
    line.length = line.alloc - n;
#line 1845
    break;
  } else {

  }
}
---------
SID [1217] -> Line 1818
#line 1818
replaced = 0;
---------
SID [1216] -> Line 1817
#line 1817
input_line_number ++;
---------
SID [1215] -> Line 1815
#line 1815
n = line.alloc - line.length;
---------
SID [1214] -> Line 1814
#line 1814
p = line.text + line.length;
---------
SID [1213] -> Line 1802
#line 1802
return (1);
---------
SID [1212] -> Line -1

---------
SID [1211] -> Line 1801
#line 1801
input_EOF ++;
---------
SID [1210] -> Line 1800
#line 1800
if (last_input_file) {
#line 1801
  input_EOF ++;
} else {

}
---------
SID [1209] -> Line 1799
#line 1799
ungetc(ch, input_file);
---------
SID [1208] -> Line 1798
#line 1798
if (ch != -1) {
#line 1799
  ungetc(ch, input_file);
} else
#line 1800
if (last_input_file) {
#line 1801
  input_EOF ++;
} else {

}
---------
SID [1207] -> Line 1797
#line 1797
ch = _IO_getc(input_file);
---------
SID [1206] -> Line -1

---------
SID [1205] -> Line 1794
#line 1794
break;
---------
SID [1204] -> Line 1793
#line 1793
line.length = line.alloc - n;
---------
SID [1203] -> Line 1791
#line 1791
if (ch == 10) {
#line 1793
  line.length = line.alloc - n;
#line 1794
  break;
} else {

}
---------
SID [1202] -> Line 1790
#line 1790
n --;
---------
SID [1201] -> Line 1789
#line 1789
*tmp___2 = (char )ch;
---------
SID [1200] -> Line 1789
#line 1789
p ++;
---------
SID [1199] -> Line 1789
#line 1789
tmp___2 = p;
---------
SID [1198] -> Line -1

---------
SID [1197] -> Line 1787
#line 1787
return (1);
---------
SID [1196] -> Line -1

---------
SID [1195] -> Line 1786
#line 1786
input_EOF ++;
---------
SID [1194] -> Line 1785
#line 1785
if (last_input_file) {
#line 1786
  input_EOF ++;
} else {

}
---------
SID [1193] -> Line 1784
#line 1784
line.length = line.alloc - n;
---------
SID [1192] -> Line -1

---------
SID [1191] -> Line 1781
#line 1781
return (0);
---------
SID [1190] -> Line 1780
#line 1780
if (n == line.alloc) {
#line 1781
  return (0);
} else {

}
---------
SID [1189] -> Line 1778
#line 1778
if (ch == -1) {
#line 1780
  if (n == line.alloc) {
#line 1781
    return (0);
  } else {

  }
#line 1784
  line.length = line.alloc - n;
#line 1785
  if (last_input_file) {
#line 1786
    input_EOF ++;
  } else {

  }
#line 1787
  return (1);
} else {

}
---------
SID [1188] -> Line 1777
#line 1777
ch = _IO_getc(input_file);
---------
SID [1187] -> Line -1

---------
SID [1186] -> Line 1775
#line 1775
line.alloc *= 2;
---------
SID [1185] -> Line 1774
#line 1774
n = line.alloc;
---------
SID [1184] -> Line 1773
#line 1773
p = line.text + line.alloc;
---------
SID [1183] -> Line 1772
#line 1772
line.text = (char *)tmp___1;
---------
SID [1182] -> Line 1772
#line 1772
tmp___1 = ck_realloc((void *)line.text, line.alloc * 2);
---------
SID [1181] -> Line 1770
#line 1770
if (n == 0) {
#line 1772
  tmp___1 = ck_realloc((void *)line.text, line.alloc * 2);
#line 1772
  line.text = (char *)tmp___1;
#line 1773
  p = line.text + line.alloc;
#line 1774
  n = line.alloc;
#line 1775
  line.alloc *= 2;
} else {

}
---------
SID [1180] -> Line 1768
#line 1768
while (1) {
#line 1770
  if (n == 0) {
#line 1772
    tmp___1 = ck_realloc((void *)line.text, line.alloc * 2);
#line 1772
    line.text = (char *)tmp___1;
#line 1773
    p = line.text + line.alloc;
#line 1774
    n = line.alloc;
#line 1775
    line.alloc *= 2;
  } else {

  }
#line 1777
  ch = _IO_getc(input_file);
#line 1778
  if (ch == -1) {
#line 1780
    if (n == line.alloc) {
#line 1781
      return (0);
    } else {

    }
#line 1784
    line.length = line.alloc - n;
#line 1785
    if (last_input_file) {
#line 1786
      input_EOF ++;
    } else {

    }
#line 1787
    return (1);
  } else {

  }
#line 1789
  tmp___2 = p;
#line 1789
  p ++;
#line 1789
  *tmp___2 = (char )ch;
#line 1790
  n --;
#line 1791
  if (ch == 10) {
#line 1793
    line.length = line.alloc - n;
#line 1794
    break;
  } else {

  }
}
---------
SID [1179] -> Line 1767
#line 1767
replaced = 0;
---------
SID [1178] -> Line 1766
#line 1766
input_line_number ++;
---------
SID [1177] -> Line -1

---------
SID [1176] -> Line 1765
#line 1765
return (0);
---------
SID [1175] -> Line 1764
#line 1764
if (tmp___0) {
#line 1765
  return (0);
} else {

}
---------
SID [1174] -> Line 1764
#line 1764
tmp___0 = feof(input_file);
---------
SID [1173] -> Line 1762
#line 1762
n = line.alloc;
---------
SID [1172] -> Line 1761
#line 1761
p = line.text;
---------
SID [1171] -> Line 1748
#line 1748
return (-1);
---------
SID [1170] -> Line 1746
#line 1746
break;
---------
SID [1169] -> Line 1745
default: 
#line 1745
panic((char *)"INTERNAL ERROR: bad address type");
---------
SID [1168] -> Line 1742
#line 1742
return (tmp___3);
---------
SID [1167] -> Line 1742
#line 1742
tmp___3 = 0;
---------
SID [1166] -> Line 1742
#line 1742
tmp___3 = 1;
---------
SID [1165] -> Line 1742
case 3: 
#line 1742
if (input_EOF) {
#line 1742
  tmp___3 = 1;
} else {
#line 1742
  tmp___3 = 0;
}
---------
SID [1164] -> Line 1734
#line 1734
return (tmp___1);
---------
SID [1163] -> Line 1734
#line 1734
tmp___1 = 0;
---------
SID [1162] -> Line 1734
#line 1734
tmp___1 = 1;
---------
SID [1161] -> Line 1734
#line 1734
if (tmp___2 >= 0) {
#line 1734
  tmp___1 = 1;
} else {
#line 1734
  tmp___1 = 0;
}
---------
SID [1160] -> Line 1734
#line 1734
tmp___2 = re_search(addr->addr_regex, (char const   *)line.text,
                    line.length - trail_nl_p, 0, line.length - trail_nl_p,
                    (struct re_registers *)0);
---------
SID [1159] -> Line 1733
case 2: 
#line 1733
trail_nl_p = (int )*(line.text + (line.length - 1)) == 10;
---------
SID [1158] -> Line 1729
case 1: 
#line 1729
return (input_line_number == addr->addr_number);
---------
SID [1157] -> Line 1727
case 0: 
#line 1727
return (1);
---------
SID [1156] -> Line 1724
#line 1724
switch (addr->addr_type) {
case 0: 
#line 1727
return (1);
case 1: 
#line 1729
return (input_line_number == addr->addr_number);
case 2: 
#line 1733
trail_nl_p = (int )*(line.text + (line.length - 1)) == 10;
#line 1734
tmp___2 = re_search(addr->addr_regex, (char const   *)line.text,
                    line.length - trail_nl_p, 0, line.length - trail_nl_p,
                    (struct re_registers *)0);
#line 1734
if (tmp___2 >= 0) {
#line 1734
  tmp___1 = 1;
} else {
#line 1734
  tmp___1 = 0;
}
#line 1734
return (tmp___1);
case 3: 
#line 1742
if (input_EOF) {
#line 1742
  tmp___3 = 1;
} else {
#line 1742
  tmp___3 = 0;
}
#line 1742
return (tmp___3);
default: 
#line 1745
panic((char *)"INTERNAL ERROR: bad address type");
#line 1746
break;
}
---------
SID [1155] -> Line 1715
#line 1715
return;
---------
SID [1154] -> Line 1296
#line 1296
n --;
---------
SID [1153] -> Line 1296
__Cont: /* CIL Label */ 
#line 1296
cur_cmd ++;
---------
SID [1152] -> Line -1

---------
SID [1151] -> Line 1713
#line 1713
break;
---------
SID [1150] -> Line 1712
#line 1712
if (end_cycle) {
#line 1713
  break;
} else {

}
---------
SID [1149] -> Line 1710
default: 
#line 1710
panic((char *)"INTERNAL ERROR: Bad cmd %c", (int )cur_cmd->cmd);
---------
SID [1148] -> Line 1707
#line 1707
break;
---------
SID [1147] -> Line 1704
#line 1704
p ++;
---------
SID [1146] -> Line 1705
#line 1705
*p = *(cur_cmd->x.translate + *p);
---------
SID [1145] -> Line 1704
#line 1704
break;
---------
SID [1144] -> Line -1

---------
SID [1143] -> Line 1704
#line 1704
if ((unsigned long )p < (unsigned long )e) {

} else {
#line 1704
  break;
}
---------
SID [1142] -> Line 1704
#line 1704
while ((unsigned long )p < (unsigned long )e) {
#line 1705
  *p = *(cur_cmd->x.translate + *p);
#line 1704
  p ++;
}
---------
SID [1141] -> Line 1704
#line 1704
e = p + line.length;
---------
SID [1140] -> Line 1704
case 121: 
#line 1704
p = (unsigned char *)line.text;
---------
SID [1139] -> Line 1698
#line 1698
break;
---------
SID [1138] -> Line 1696
#line 1696
hold = tmp___16;
---------
SID [1137] -> Line 1695
#line 1695
line = hold;
---------
SID [1136] -> Line 1694
case 120: 
#line 1694
tmp___16 = line;
---------
SID [1135] -> Line 1688
#line 1688
break;
---------
SID [1134] -> Line -1

---------
SID [1133] -> Line 1687
#line 1687
ck_fwrite(line.text, 1, line.length, cur_cmd->x.io_file);
---------
SID [1132] -> Line 1686
case 119: 
#line 1686
if (cur_cmd->x.io_file) {
#line 1687
  ck_fwrite(line.text, 1, line.length, cur_cmd->x.io_file);
} else {

}
---------
SID [1131] -> Line 1683
#line 1683
break;
---------
SID [1130] -> Line -1

---------
SID [1129] -> Line 1680
#line 1680
goto exe_loop;
---------
SID [1128] -> Line 1679
#line 1679
cur_cmd = (j___0->v)->v + j___0->v_index;
---------
SID [1127] -> Line 1678
#line 1678
n = (j___0->v)->v_length - j___0->v_index;
---------
SID [1126] -> Line 1676
#line 1676
j___0 = cur_cmd->x.jump;
---------
SID [1125] -> Line 1673
#line 1673
end_cycle ++;
---------
SID [1124] -> Line 1672
#line 1672
if (! cur_cmd->x.jump) {
#line 1673
  end_cycle ++;
} else {
#line 1676
  j___0 = cur_cmd->x.jump;
#line 1678
  n = (j___0->v)->v_length - j___0->v_index;
#line 1679
  cur_cmd = (j___0->v)->v + j___0->v_index;
#line 1680
  goto exe_loop;
}
---------
SID [1123] -> Line 1671
#line 1671
replaced = 0;
---------
SID [1122] -> Line 1669
case 116: 
#line 1669
if (replaced) {
#line 1671
  replaced = 0;
#line 1672
  if (! cur_cmd->x.jump) {
#line 1673
    end_cycle ++;
  } else {
#line 1676
    j___0 = cur_cmd->x.jump;
#line 1678
    n = (j___0->v)->v_length - j___0->v_index;
#line 1679
    cur_cmd = (j___0->v)->v + j___0->v_index;
#line 1680
    goto exe_loop;
  }
} else {

}
---------
SID [1121] -> Line 1665
#line 1665
break;
---------
SID [1120] -> Line -1

---------
SID [1119] -> Line 1664
#line 1664
ck_fwrite(line.text, 1, line.length, stdout);
---------
SID [1118] -> Line 1663
#line 1663
if (cur_cmd->x.cmd_regex.flags & 2) {
#line 1664
  ck_fwrite(line.text, 1, line.length, stdout);
} else {

}
---------
SID [1117] -> Line -1

---------
SID [1116] -> Line -1

---------
SID [1115] -> Line 1661
#line 1661
ck_fwrite(line.text, 1, line.length, cur_cmd->x.cmd_regex.wio_file);
---------
SID [1114] -> Line 1659
#line 1659
if (cur_cmd->x.cmd_regex.wio_file) {
#line 1661
  ck_fwrite(line.text, 1, line.length, cur_cmd->x.cmd_regex.wio_file);
} else {

}
---------
SID [1113] -> Line 1659
#line 1659
if (cur_cmd->x.cmd_regex.flags & 4) {
#line 1659
  if (cur_cmd->x.cmd_regex.wio_file) {
#line 1661
    ck_fwrite(line.text, 1, line.length, cur_cmd->x.cmd_regex.wio_file);
  } else {

  }
} else {

}
---------
SID [1112] -> Line 1658
#line 1658
tmp.alloc = t.alloc;
---------
SID [1111] -> Line 1657
#line 1657
tmp.length = t.length;
---------
SID [1110] -> Line 1656
#line 1656
tmp.text = t.text;
---------
SID [1109] -> Line 1655
#line 1655
line.alloc = tmp.alloc;
---------
SID [1108] -> Line 1654
#line 1654
line.length = tmp.length;
---------
SID [1107] -> Line 1653
#line 1653
line.text = tmp.text;
---------
SID [1106] -> Line 1652
#line 1652
t.alloc = line.alloc;
---------
SID [1105] -> Line 1651
#line 1651
t.length = line.length;
---------
SID [1104] -> Line 1650
#line 1650
t.text = line.text;
---------
SID [1103] -> Line 1649
#line 1649
str_append(& tmp, line.text + start, remain + trail_nl_p);
---------
SID [1102] -> Line 1648
#line 1648
replaced = 1;
---------
SID [1101] -> Line -1

---------
SID [1100] -> Line 1647
#line 1647
break;
---------
SID [1099] -> Line 1646
#line 1646
if (! count) {
#line 1647
  break;
} else {

}
---------
SID [1098] -> Line -1

---------
SID [1097] -> Line 1644
#line 1644
break;
---------
SID [1096] -> Line 1643
#line 1643
if (! (cur_cmd->x.cmd_regex.flags & 1)) {
#line 1644
  break;
} else {

}
---------
SID [1095] -> Line -1

---------
SID [1094] -> Line 1642
#line 1642
break;
---------
SID [1093] -> Line 1641
#line 1641
if (remain < 0) {
#line 1642
  break;
} else {

}
---------
SID [1092] -> Line 1640
#line 1640
remain = (line.length - trail_nl_p) - start;
---------
SID [1091] -> Line 1638
#line 1638
start = *(regs.end + 0);
---------
SID [1090] -> Line -1

---------
SID [1089] -> Line 1636
#line 1636
(*(regs.end + 0)) ++;
---------
SID [1088] -> Line 1635
#line 1635
str_append(& tmp, line.text + offset, 1);
---------
SID [1087] -> Line 1633
#line 1633
if (offset == *(regs.end + 0)) {
#line 1635
  str_append(& tmp, line.text + offset, 1);
#line 1636
  (*(regs.end + 0)) ++;
} else {

}
---------
SID [1086] -> Line -1

---------
SID [1085] -> Line 1632
#line 1632
str_append(& tmp, rep_cur, (int )(rep_next - rep_cur));
---------
SID [1084] -> Line 1631
#line 1631
if (rep_next - rep_cur) {
#line 1632
  str_append(& tmp, rep_cur, (int )(rep_next - rep_cur));
} else {

}
---------
SID [1083] -> Line 1602
#line 1602
rep_next ++;
---------
SID [1082] -> Line -1

---------
SID [1081] -> Line 1628
#line 1628
rep_cur = rep_next + 1;
---------
SID [1080] -> Line -1

---------
SID [1079] -> Line 1626
#line 1626
str_append(& tmp, rep_next, 1);
---------
SID [1078] -> Line 1626
#line 1626
str_append(& tmp, rep_next, 1);
---------
SID [1077] -> Line 1623
#line 1623
str_append(& tmp, line.text + *(regs.start + n___2),
           *(regs.end + n___2) - *(regs.start + n___2));
---------
SID [1076] -> Line 1622
#line 1622
n___2 = (int )*rep_next - 48;
---------
SID [1075] -> Line 1620
#line 1620
if ((int )*rep_next <= 57) {
#line 1622
  n___2 = (int )*rep_next - 48;
#line 1623
  str_append(& tmp, line.text + *(regs.start + n___2),
             *(regs.end + n___2) - *(regs.start + n___2));
} else {
#line 1626
  str_append(& tmp, rep_next, 1);
}
---------
SID [1074] -> Line 1620
#line 1620
if ((int )*rep_next >= 48) {
#line 1620
  if ((int )*rep_next <= 57) {
#line 1622
    n___2 = (int )*rep_next - 48;
#line 1623
    str_append(& tmp, line.text + *(regs.start + n___2),
               *(regs.end + n___2) - *(regs.start + n___2));
  } else {
#line 1626
    str_append(& tmp, rep_next, 1);
  }
} else {
#line 1626
  str_append(& tmp, rep_next, 1);
}
---------
SID [1073] -> Line 1616
#line 1616
if ((unsigned long )rep_next != (unsigned long )rep_end) {
#line 1620
  if ((int )*rep_next >= 48) {
#line 1620
    if ((int )*rep_next <= 57) {
#line 1622
      n___2 = (int )*rep_next - 48;
#line 1623
      str_append(& tmp, line.text + *(regs.start + n___2),
                 *(regs.end + n___2) - *(regs.start + n___2));
    } else {
#line 1626
      str_append(& tmp, rep_next, 1);
    }
  } else {
#line 1626
    str_append(& tmp, rep_next, 1);
  }
} else {

}
---------
SID [1072] -> Line 1615
#line 1615
rep_next ++;
---------
SID [1071] -> Line -1

---------
SID [1070] -> Line 1614
#line 1614
str_append(& tmp, rep_cur, (int )(rep_next - rep_cur));
---------
SID [1069] -> Line 1613
#line 1613
if (rep_next - rep_cur) {
#line 1614
  str_append(& tmp, rep_cur, (int )(rep_next - rep_cur));
} else {

}
---------
SID [1068] -> Line 1611
#line 1611
if ((int )*rep_next == 92) {
#line 1613
  if (rep_next - rep_cur) {
#line 1614
    str_append(& tmp, rep_cur, (int )(rep_next - rep_cur));
  } else {

  }
#line 1615
  rep_next ++;
#line 1616
  if ((unsigned long )rep_next != (unsigned long )rep_end) {
#line 1620
    if ((int )*rep_next >= 48) {
#line 1620
      if ((int )*rep_next <= 57) {
#line 1622
        n___2 = (int )*rep_next - 48;
#line 1623
        str_append(& tmp, line.text + *(regs.start + n___2),
                   *(regs.end + n___2) - *(regs.start + n___2));
      } else {
#line 1626
        str_append(& tmp, rep_next, 1);
      }
    } else {
#line 1626
      str_append(& tmp, rep_next, 1);
    }
  } else {

  }
#line 1628
  rep_cur = rep_next + 1;
} else {

}
---------
SID [1067] -> Line 1609
#line 1609
rep_cur = rep_next + 1;
---------
SID [1066] -> Line 1608
#line 1608
str_append(& tmp, line.text + *(regs.start + 0),
           *(regs.end + 0) - *(regs.start + 0));
---------
SID [1065] -> Line -1

---------
SID [1064] -> Line 1607
#line 1607
str_append(& tmp, rep_cur, (int )(rep_next - rep_cur));
---------
SID [1063] -> Line 1606
#line 1606
if (rep_next - rep_cur) {
#line 1607
  str_append(& tmp, rep_cur, (int )(rep_next - rep_cur));
} else {

}
---------
SID [1062] -> Line 1604
#line 1604
if ((int )*rep_next == 38) {
#line 1606
  if (rep_next - rep_cur) {
#line 1607
    str_append(& tmp, rep_cur, (int )(rep_next - rep_cur));
  } else {

  }
#line 1608
  str_append(& tmp, line.text + *(regs.start + 0),
             *(regs.end + 0) - *(regs.start + 0));
#line 1609
  rep_cur = rep_next + 1;
} else
#line 1611
if ((int )*rep_next == 92) {
#line 1613
  if (rep_next - rep_cur) {
#line 1614
    str_append(& tmp, rep_cur, (int )(rep_next - rep_cur));
  } else {

  }
#line 1615
  rep_next ++;
#line 1616
  if ((unsigned long )rep_next != (unsigned long )rep_end) {
#line 1620
    if ((int )*rep_next >= 48) {
#line 1620
      if ((int )*rep_next <= 57) {
#line 1622
        n___2 = (int )*rep_next - 48;
#line 1623
        str_append(& tmp, line.text + *(regs.start + n___2),
                   *(regs.end + n___2) - *(regs.start + n___2));
      } else {
#line 1626
        str_append(& tmp, rep_next, 1);
      }
    } else {
#line 1626
      str_append(& tmp, rep_next, 1);
    }
  } else {

  }
#line 1628
  rep_cur = rep_next + 1;
} else {

}
---------
SID [1061] -> Line 1602
#line 1602
break;
---------
SID [1060] -> Line -1

---------
SID [1059] -> Line 1602
#line 1602
if ((unsigned long )rep_next < (unsigned long )rep_end) {

} else {
#line 1602
  break;
}
---------
SID [1058] -> Line 1602
#line 1602
while ((unsigned long )rep_next < (unsigned long )rep_end) {
#line 1604
  if ((int )*rep_next == 38) {
#line 1606
    if (rep_next - rep_cur) {
#line 1607
      str_append(& tmp, rep_cur, (int )(rep_next - rep_cur));
    } else {

    }
#line 1608
    str_append(& tmp, line.text + *(regs.start + 0),
               *(regs.end + 0) - *(regs.start + 0));
#line 1609
    rep_cur = rep_next + 1;
  } else
#line 1611
  if ((int )*rep_next == 92) {
#line 1613
    if (rep_next - rep_cur) {
#line 1614
      str_append(& tmp, rep_cur, (int )(rep_next - rep_cur));
    } else {

    }
#line 1615
    rep_next ++;
#line 1616
    if ((unsigned long )rep_next != (unsigned long )rep_end) {
#line 1620
      if ((int )*rep_next >= 48) {
#line 1620
        if ((int )*rep_next <= 57) {
#line 1622
          n___2 = (int )*rep_next - 48;
#line 1623
          str_append(& tmp, line.text + *(regs.start + n___2),
                     *(regs.end + n___2) - *(regs.start + n___2));
        } else {
#line 1626
          str_append(& tmp, rep_next, 1);
        }
      } else {
#line 1626
        str_append(& tmp, rep_next, 1);
      }
    } else {

    }
#line 1628
    rep_cur = rep_next + 1;
  } else {

  }
#line 1602
  rep_next ++;
}
---------
SID [1057] -> Line 1602
#line 1602
rep_next = rep_cur;
---------
SID [1056] -> Line 1602
#line 1602
rep_cur = rep;
---------
SID [1055] -> Line -1

---------
SID [1054] -> Line -1

---------
SID [1053] -> Line 1598
#line 1598
continue;
---------
SID [1052] -> Line 1597
#line 1597
remain = (line.length - trail_nl_p) - start;
---------
SID [1051] -> Line 1595
#line 1595
start = *(regs.end + 0);
---------
SID [1050] -> Line 1595
#line 1595
start = offset + 1;
---------
SID [1049] -> Line 1595
#line 1595
if (offset == *(regs.end + 0)) {
#line 1595
  start = offset + 1;
} else {
#line 1595
  start = *(regs.end + 0);
}
---------
SID [1048] -> Line 1594
#line 1594
str_append(& tmp, line.text + *(regs.start + 0), matched);
---------
SID [1047] -> Line -1

---------
SID [1046] -> Line 1593
#line 1593
matched = 1;
---------
SID [1045] -> Line 1593
#line 1593
if (! matched) {
#line 1593
  matched = 1;
} else {

}
---------
SID [1044] -> Line 1592
#line 1592
matched = *(regs.end + 0) - *(regs.start + 0);
---------
SID [1043] -> Line 1590
#line 1590
if (count != cur_cmd->x.cmd_regex.numb) {
#line 1592
  matched = *(regs.end + 0) - *(regs.start + 0);
#line 1593
  if (! matched) {
#line 1593
    matched = 1;
  } else {

  }
#line 1594
  str_append(& tmp, line.text + *(regs.start + 0), matched);
#line 1595
  if (offset == *(regs.end + 0)) {
#line 1595
    start = offset + 1;
  } else {
#line 1595
    start = *(regs.end + 0);
  }
#line 1597
  remain = (line.length - trail_nl_p) - start;
#line 1598
  continue;
} else {

}
---------
SID [1042] -> Line 1588
#line 1588
if (cur_cmd->x.cmd_regex.flags & 8) {
#line 1590
  if (count != cur_cmd->x.cmd_regex.numb) {
#line 1592
    matched = *(regs.end + 0) - *(regs.start + 0);
#line 1593
    if (! matched) {
#line 1593
      matched = 1;
    } else {

    }
#line 1594
    str_append(& tmp, line.text + *(regs.start + 0), matched);
#line 1595
    if (offset == *(regs.end + 0)) {
#line 1595
      start = offset + 1;
    } else {
#line 1595
      start = *(regs.end + 0);
    }
#line 1597
    remain = (line.length - trail_nl_p) - start;
#line 1598
    continue;
  } else {

  }
} else {

}
---------
SID [1041] -> Line -1

---------
SID [1040] -> Line 1586
#line 1586
str_append(& tmp, line.text + start, offset - start);
---------
SID [1039] -> Line 1585
#line 1585
if (offset - start) {
#line 1586
  str_append(& tmp, line.text + start, offset - start);
} else {

}
---------
SID [1038] -> Line 1584
#line 1584
count ++;
---------
SID [1037] -> Line 1577
#line 1577
break;
---------
SID [1036] -> Line -1

---------
SID [1035] -> Line 1577
#line 1577
if (offset >= 0) {

} else {
#line 1577
  break;
}
---------
SID [1034] -> Line 1577
#line 1577
offset = re_search(cur_cmd->x.cmd_regex.regx, (char const   *)line.text,
                   line.length - trail_nl_p, start, remain, & regs);
---------
SID [1033] -> Line 1577
#line 1577
while (1) {
#line 1577
  offset = re_search(cur_cmd->x.cmd_regex.regx, (char const   *)line.text,
                     line.length - trail_nl_p, start, remain, & regs);
#line 1577
  if (offset >= 0) {

  } else {
#line 1577
    break;
  }
#line 1584
  count ++;
#line 1585
  if (offset - start) {
#line 1586
    str_append(& tmp, line.text + start, offset - start);
  } else {

  }
#line 1588
  if (cur_cmd->x.cmd_regex.flags & 8) {
#line 1590
    if (count != cur_cmd->x.cmd_regex.numb) {
#line 1592
      matched = *(regs.end + 0) - *(regs.start + 0);
#line 1593
      if (! matched) {
#line 1593
        matched = 1;
      } else {

      }
#line 1594
      str_append(& tmp, line.text + *(regs.start + 0), matched);
#line 1595
      if (offset == *(regs.end + 0)) {
#line 1595
        start = offset + 1;
      } else {
#line 1595
        start = *(regs.end + 0);
      }
#line 1597
      remain = (line.length - trail_nl_p) - start;
#line 1598
      continue;
    } else {

    }
  } else {

  }
#line 1602
  rep_cur = rep;
#line 1602
  rep_next = rep_cur;
#line 1602
  while ((unsigned long )rep_next < (unsigned long )rep_end) {
#line 1604
    if ((int )*rep_next == 38) {
#line 1606
      if (rep_next - rep_cur) {
#line 1607
        str_append(& tmp, rep_cur, (int )(rep_next - rep_cur));
      } else {

      }
#line 1608
      str_append(& tmp, line.text + *(regs.start + 0),
                 *(regs.end + 0) - *(regs.start + 0));
#line 1609
      rep_cur = rep_next + 1;
    } else
#line 1611
    if ((int )*rep_next == 92) {
#line 1613
      if (rep_next - rep_cur) {
#line 1614
        str_append(& tmp, rep_cur, (int )(rep_next - rep_cur));
      } else {

      }
#line 1615
      rep_next ++;
#line 1616
      if ((unsigned long )rep_next != (unsigned long )rep_end) {
#line 1620
        if ((int )*rep_next >= 48) {
#line 1620
          if ((int )*rep_next <= 57) {
#line 1622
            n___2 = (int )*rep_next - 48;
#line 1623
            str_append(& tmp, line.text + *(regs.start + n___2),
                       *(regs.end + n___2) - *(regs.start + n___2));
          } else {
#line 1626
            str_append(& tmp, rep_next, 1);
          }
        } else {
#line 1626
          str_append(& tmp, rep_next, 1);
        }
      } else {

      }
#line 1628
      rep_cur = rep_next + 1;
    } else {

    }
#line 1602
    rep_next ++;
  }
#line 1631
  if (rep_next - rep_cur) {
#line 1632
    str_append(& tmp, rep_cur, (int )(rep_next - rep_cur));
  } else {

  }
#line 1633
  if (offset == *(regs.end + 0)) {
#line 1635
    str_append(& tmp, line.text + offset, 1);
#line 1636
    (*(regs.end + 0)) ++;
  } else {

  }
#line 1638
  start = *(regs.end + 0);
#line 1640
  remain = (line.length - trail_nl_p) - start;
#line 1641
  if (remain < 0) {
#line 1642
    break;
  } else {

  }
#line 1643
  if (! (cur_cmd->x.cmd_regex.flags & 1)) {
#line 1644
    break;
  } else {

  }
}
---------
SID [1032] -> Line 1575
#line 1575
rep_end = rep + cur_cmd->x.cmd_regex.replace_length;
---------
SID [1031] -> Line 1574
#line 1574
rep = cur_cmd->x.cmd_regex.replacement;
---------
SID [1030] -> Line 1573
#line 1573
tmp.length = 0;
---------
SID [1029] -> Line 1572
#line 1572
remain = line.length - trail_nl_p;
---------
SID [1028] -> Line 1571
#line 1571
start = 0;
---------
SID [1027] -> Line 1570
#line 1570
count = 0;
---------
SID [1026] -> Line -1

---------
SID [1025] -> Line 1568
#line 1568
tmp.text = (char *)tmp___15;
---------
SID [1024] -> Line 1568
#line 1568
tmp___15 = ck_malloc(50);
---------
SID [1023] -> Line 1567
#line 1567
tmp.alloc = 50;
---------
SID [1022] -> Line 1565
#line 1565
if (! tmp.alloc) {
#line 1567
  tmp.alloc = 50;
#line 1568
  tmp___15 = ck_malloc(50);
#line 1568
  tmp.text = (char *)tmp___15;
} else {

}
---------
SID [1021] -> Line 1564
case 115: 
#line 1564
trail_nl_p = (int )*(line.text + (line.length - 1)) == 10;
---------
SID [1020] -> Line 1560
#line 1560
break;
---------
SID [1019] -> Line -1

---------
SID [1018] -> Line -1

---------
SID [1017] -> Line 1557
#line 1557
panic((char *)"Read error on input file to \'r\' command");
---------
SID [1016] -> Line 1556
#line 1556
if (tmp___14) {
#line 1557
  panic((char *)"Read error on input file to \'r\' command");
} else {

}
---------
SID [1015] -> Line 1556
#line 1556
tmp___14 = ferror(cur_cmd->x.io_file);
---------
SID [1014] -> Line 1543
#line 1543
break;
---------
SID [1013] -> Line -1

---------
SID [1012] -> Line 1543
#line 1543
if (n___1 > 0) {

} else {
#line 1543
  break;
}
---------
SID [1011] -> Line 1551
#line 1551
n___1 = (int )tmp___13;
---------
SID [1010] -> Line 1551
#line 1551
tmp___13 = fread((void */* __restrict  */)(append.text + append.length),
                 sizeof(char ), (size_t )(append.alloc - append.length),
                 (FILE */* __restrict  */)cur_cmd->x.io_file);
---------
SID [1009] -> Line -1

---------
SID [1008] -> Line 1549
#line 1549
append.text = (char *)tmp___12;
---------
SID [1007] -> Line 1549
#line 1549
tmp___12 = ck_realloc((void *)append.text, append.alloc);
---------
SID [1006] -> Line 1548
#line 1548
append.alloc *= 2;
---------
SID [1005] -> Line 1546
#line 1546
if (append.length == append.alloc) {
#line 1548
  append.alloc *= 2;
#line 1549
  tmp___12 = ck_realloc((void *)append.text, append.alloc);
#line 1549
  append.text = (char *)tmp___12;
} else {

}
---------
SID [1004] -> Line 1545
#line 1545
append.length += n___1;
---------
SID [1003] -> Line 1543
#line 1543
while (1) {
#line 1545
  append.length += n___1;
#line 1546
  if (append.length == append.alloc) {
#line 1548
    append.alloc *= 2;
#line 1549
    tmp___12 = ck_realloc((void *)append.text, append.alloc);
#line 1549
    append.text = (char *)tmp___12;
  } else {

  }
#line 1551
  tmp___13 = fread((void */* __restrict  */)(append.text + append.length),
                   sizeof(char ), (size_t )(append.alloc - append.length),
                   (FILE */* __restrict  */)cur_cmd->x.io_file);
#line 1551
  n___1 = (int )tmp___13;
#line 1543
  if (n___1 > 0) {

  } else {
#line 1543
    break;
  }
}
---------
SID [1002] -> Line 1542
#line 1542
rewind(cur_cmd->x.io_file);
---------
SID [1001] -> Line 1540
#line 1540
if (cur_cmd->x.io_file) {
#line 1542
  rewind(cur_cmd->x.io_file);
#line 1543
  while (1) {
#line 1545
    append.length += n___1;
#line 1546
    if (append.length == append.alloc) {
#line 1548
      append.alloc *= 2;
#line 1549
      tmp___12 = ck_realloc((void *)append.text, append.alloc);
#line 1549
      append.text = (char *)tmp___12;
    } else {

    }
#line 1551
    tmp___13 = fread((void */* __restrict  */)(append.text + append.length),
                     sizeof(char ), (size_t )(append.alloc - append.length),
                     (FILE */* __restrict  */)cur_cmd->x.io_file);
#line 1551
    n___1 = (int )tmp___13;
#line 1543
    if (n___1 > 0) {

    } else {
#line 1543
      break;
    }
  }
#line 1556
  tmp___14 = ferror(cur_cmd->x.io_file);
#line 1556
  if (tmp___14) {
#line 1557
    panic((char *)"Read error on input file to \'r\' command");
  } else {

  }
} else {

}
---------
SID [1000] -> Line 1538
case 114: 
#line 1538
n___1 = 0;
---------
SID [999] -> Line 1534
#line 1534
break;
---------
SID [998] -> Line 1533
#line 1533
end_cycle ++;
---------
SID [997] -> Line 1532
quit: 
case 113: 
#line 1532
quit_cmd ++;
---------
SID [996] -> Line 1528
#line 1528
break;
---------
SID [995] -> Line 1524
#line 1524
ck_fwrite(line.text, 1, (int )tmp___11, stdout);
---------
SID [994] -> Line 1524
#line 1524
tmp___11 = (long )line.length;
---------
SID [993] -> Line 1524
#line 1524
tmp___11 = (tmp___10 - line.text) + 1L;
---------
SID [992] -> Line 1524
#line 1524
if (tmp___10) {
#line 1524
  tmp___11 = (tmp___10 - line.text) + 1L;
} else {
#line 1524
  tmp___11 = (long )line.length;
}
---------
SID [991] -> Line 1523
case 80: 
#line 1523
tmp___10 = eol_pos(line.text, line.length);
---------
SID [990] -> Line 1517
#line 1517
break;
---------
SID [989] -> Line 1516
case 112: 
#line 1516
ck_fwrite(line.text, 1, line.length, stdout);
---------
SID [988] -> Line 1513
#line 1513
break;
---------
SID [987] -> Line 1512
#line 1512
append_pattern_space();
---------
SID [986] -> Line -1

---------
SID [985] -> Line 1510
#line 1510
goto quit;
---------
SID [984] -> Line 1509
#line 1509
line.length = 0;
---------
SID [983] -> Line 1507
#line 1507
if (tmp___9) {
#line 1509
  line.length = 0;
#line 1510
  goto quit;
} else {

}
---------
SID [982] -> Line 1507
case 78: 
#line 1507
tmp___9 = feof(input_file);
---------
SID [981] -> Line 1504
#line 1504
break;
---------
SID [980] -> Line 1503
#line 1503
read_pattern_space();
---------
SID [979] -> Line -1

---------
SID [978] -> Line 1502
#line 1502
ck_fwrite(line.text, 1, line.length, stdout);
---------
SID [977] -> Line 1501
#line 1501
if (! no_default_output) {
#line 1502
  ck_fwrite(line.text, 1, line.length, stdout);
} else {

}
---------
SID [976] -> Line -1

---------
SID [975] -> Line 1500
#line 1500
goto quit;
---------
SID [974] -> Line 1499
#line 1499
if (tmp___8) {
#line 1500
  goto quit;
} else {

}
---------
SID [973] -> Line 1499
case 110: 
#line 1499
tmp___8 = feof(input_file);
---------
SID [972] -> Line 1496
#line 1496
break;
---------
SID [971] -> Line 1494
#line 1494
putchar('\n');
---------
SID [970] -> Line 1492
#line 1492
tmp___5 ++;
---------
SID [969] -> Line 1490
#line 1490
break;
---------
SID [968] -> Line 1489
#line 1489
width += 2;
---------
SID [967] -> Line 1488
default: 
#line 1488
printf((char const   */* __restrict  */)"\\%02x", (int )*tmp___5 & 255);
---------
SID [966] -> Line 1486
#line 1486
break;
---------
SID [965] -> Line 1485
#line 1485
width += 2;
---------
SID [964] -> Line 1484
case 11: 
#line 1484
printf((char const   */* __restrict  */)"\\v");
---------
SID [963] -> Line 1482
#line 1482
break;
---------
SID [962] -> Line 1481
#line 1481
width += 2;
---------
SID [961] -> Line 1480
case 9: 
#line 1480
printf((char const   */* __restrict  */)"\\t");
---------
SID [960] -> Line 1478
#line 1478
break;
---------
SID [959] -> Line 1477
#line 1477
width += 2;
---------
SID [958] -> Line 1476
case 13: 
#line 1476
printf((char const   */* __restrict  */)"\\r");
---------
SID [957] -> Line 1474
#line 1474
break;
---------
SID [956] -> Line 1473
#line 1473
width += 2;
---------
SID [955] -> Line 1472
case 10: 
#line 1472
printf((char const   */* __restrict  */)"\\n");
---------
SID [954] -> Line 1470
#line 1470
break;
---------
SID [953] -> Line 1469
#line 1469
width += 2;
---------
SID [952] -> Line 1468
case 12: 
#line 1468
printf((char const   */* __restrict  */)"\\f");
---------
SID [951] -> Line 1466
#line 1466
break;
---------
SID [950] -> Line 1465
#line 1465
width += 2;
---------
SID [949] -> Line 1464
case 8: 
#line 1464
printf((char const   */* __restrict  */)"\\b");
---------
SID [948] -> Line 1462
#line 1462
break;
---------
SID [947] -> Line 1461
#line 1461
width += 2;
---------
SID [946] -> Line 1460
case 7: 
#line 1460
printf((char const   */* __restrict  */)"\\a");
---------
SID [945] -> Line 1449
#line 1449
switch ((int )*tmp___5) {
case 7: 
#line 1460
printf((char const   */* __restrict  */)"\\a");
#line 1461
width += 2;
#line 1462
break;
case 8: 
#line 1464
printf((char const   */* __restrict  */)"\\b");
#line 1465
width += 2;
#line 1466
break;
case 12: 
#line 1468
printf((char const   */* __restrict  */)"\\f");
#line 1469
width += 2;
#line 1470
break;
case 10: 
#line 1472
printf((char const   */* __restrict  */)"\\n");
#line 1473
width += 2;
#line 1474
break;
case 13: 
#line 1476
printf((char const   */* __restrict  */)"\\r");
#line 1477
width += 2;
#line 1478
break;
case 9: 
#line 1480
printf((char const   */* __restrict  */)"\\t");
#line 1481
width += 2;
#line 1482
break;
case 11: 
#line 1484
printf((char const   */* __restrict  */)"\\v");
#line 1485
width += 2;
#line 1486
break;
default: 
#line 1488
printf((char const   */* __restrict  */)"\\%02x", (int )*tmp___5 & 255);
#line 1489
width += 2;
#line 1490
break;
}
---------
SID [944] -> Line 1446
#line 1446
width ++;
---------
SID [943] -> Line 1445
#line 1445
putchar((int )*tmp___5);
---------
SID [942] -> Line 1443
#line 1443
if ((int const   )*(*tmp___6 + (int )*tmp___5) & 16384) {
#line 1445
  putchar((int )*tmp___5);
#line 1446
  width ++;
} else {
#line 1449
  switch ((int )*tmp___5) {
  case 7: 
#line 1460
  printf((char const   */* __restrict  */)"\\a");
#line 1461
  width += 2;
#line 1462
  break;
  case 8: 
#line 1464
  printf((char const   */* __restrict  */)"\\b");
#line 1465
  width += 2;
#line 1466
  break;
  case 12: 
#line 1468
  printf((char const   */* __restrict  */)"\\f");
#line 1469
  width += 2;
#line 1470
  break;
  case 10: 
#line 1472
  printf((char const   */* __restrict  */)"\\n");
#line 1473
  width += 2;
#line 1474
  break;
  case 13: 
#line 1476
  printf((char const   */* __restrict  */)"\\r");
#line 1477
  width += 2;
#line 1478
  break;
  case 9: 
#line 1480
  printf((char const   */* __restrict  */)"\\t");
#line 1481
  width += 2;
#line 1482
  break;
  case 11: 
#line 1484
  printf((char const   */* __restrict  */)"\\v");
#line 1485
  width += 2;
#line 1486
  break;
  default: 
#line 1488
  printf((char const   */* __restrict  */)"\\%02x", (int )*tmp___5 & 255);
#line 1489
  width += 2;
#line 1490
  break;
  }
}
---------
SID [941] -> Line 1443
#line 1443
tmp___6 = __ctype_b_loc();
---------
SID [940] -> Line 1441
#line 1441
width += 2;
---------
SID [939] -> Line 1440
#line 1440
printf((char const   */* __restrict  */)"\\\\");
---------
SID [938] -> Line 1438
#line 1438
if ((int )*tmp___5 == 92) {
#line 1440
  printf((char const   */* __restrict  */)"\\\\");
#line 1441
  width += 2;
} else {
#line 1443
  tmp___6 = __ctype_b_loc();
#line 1443
  if ((int const   )*(*tmp___6 + (int )*tmp___5) & 16384) {
#line 1445
    putchar((int )*tmp___5);
#line 1446
    width ++;
  } else {
#line 1449
    switch ((int )*tmp___5) {
    case 7: 
#line 1460
    printf((char const   */* __restrict  */)"\\a");
#line 1461
    width += 2;
#line 1462
    break;
    case 8: 
#line 1464
    printf((char const   */* __restrict  */)"\\b");
#line 1465
    width += 2;
#line 1466
    break;
    case 12: 
#line 1468
    printf((char const   */* __restrict  */)"\\f");
#line 1469
    width += 2;
#line 1470
    break;
    case 10: 
#line 1472
    printf((char const   */* __restrict  */)"\\n");
#line 1473
    width += 2;
#line 1474
    break;
    case 13: 
#line 1476
    printf((char const   */* __restrict  */)"\\r");
#line 1477
    width += 2;
#line 1478
    break;
    case 9: 
#line 1480
    printf((char const   */* __restrict  */)"\\t");
#line 1481
    width += 2;
#line 1482
    break;
    case 11: 
#line 1484
    printf((char const   */* __restrict  */)"\\v");
#line 1485
    width += 2;
#line 1486
    break;
    default: 
#line 1488
    printf((char const   */* __restrict  */)"\\%02x", (int )*tmp___5 & 255);
#line 1489
    width += 2;
#line 1490
    break;
    }
  }
}
---------
SID [937] -> Line -1

---------
SID [936] -> Line 1436
#line 1436
putchar('\n');
---------
SID [935] -> Line 1435
#line 1435
width = 0;
---------
SID [934] -> Line 1433
#line 1433
if (width > 77) {
#line 1435
  width = 0;
#line 1436
  putchar('\n');
} else {

}
---------
SID [933] -> Line -1

---------
SID [932] -> Line -1

---------
SID [931] -> Line 1432
#line 1432
break;
---------
SID [930] -> Line 1431
#line 1431
if ((int )*tmp___5 == 10) {
#line 1432
  break;
} else {

}
---------
SID [929] -> Line 1431
#line 1431
if (! n___0) {
#line 1431
  if ((int )*tmp___5 == 10) {
#line 1432
    break;
  } else {

  }
} else {

}
---------
SID [928] -> Line 1428
#line 1428
break;
---------
SID [927] -> Line -1

---------
SID [926] -> Line 1428
#line 1428
if (tmp___7) {

} else {
#line 1428
  break;
}
---------
SID [925] -> Line 1428
#line 1428
n___0 --;
---------
SID [924] -> Line 1428
#line 1428
tmp___7 = n___0;
---------
SID [923] -> Line 1428
#line 1428
while (1) {
#line 1428
  tmp___7 = n___0;
#line 1428
  n___0 --;
#line 1428
  if (tmp___7) {

  } else {
#line 1428
    break;
  }
#line 1431
  if (! n___0) {
#line 1431
    if ((int )*tmp___5 == 10) {
#line 1432
      break;
    } else {

    }
  } else {

  }
#line 1433
  if (width > 77) {
#line 1435
    width = 0;
#line 1436
    putchar('\n');
  } else {

  }
#line 1438
  if ((int )*tmp___5 == 92) {
#line 1440
    printf((char const   */* __restrict  */)"\\\\");
#line 1441
    width += 2;
  } else {
#line 1443
    tmp___6 = __ctype_b_loc();
#line 1443
    if ((int const   )*(*tmp___6 + (int )*tmp___5) & 16384) {
#line 1445
      putchar((int )*tmp___5);
#line 1446
      width ++;
    } else {
#line 1449
      switch ((int )*tmp___5) {
      case 7: 
#line 1460
      printf((char const   */* __restrict  */)"\\a");
#line 1461
      width += 2;
#line 1462
      break;
      case 8: 
#line 1464
      printf((char const   */* __restrict  */)"\\b");
#line 1465
      width += 2;
#line 1466
      break;
      case 12: 
#line 1468
      printf((char const   */* __restrict  */)"\\f");
#line 1469
      width += 2;
#line 1470
      break;
      case 10: 
#line 1472
      printf((char const   */* __restrict  */)"\\n");
#line 1473
      width += 2;
#line 1474
      break;
      case 13: 
#line 1476
      printf((char const   */* __restrict  */)"\\r");
#line 1477
      width += 2;
#line 1478
      break;
      case 9: 
#line 1480
      printf((char const   */* __restrict  */)"\\t");
#line 1481
      width += 2;
#line 1482
      break;
      case 11: 
#line 1484
      printf((char const   */* __restrict  */)"\\v");
#line 1485
      width += 2;
#line 1486
      break;
      default: 
#line 1488
      printf((char const   */* __restrict  */)"\\%02x", (int )*tmp___5 & 255);
#line 1489
      width += 2;
#line 1490
      break;
      }
    }
  }
#line 1492
  tmp___5 ++;
}
---------
SID [922] -> Line 1427
#line 1427
tmp___5 = line.text;
---------
SID [921] -> Line 1426
#line 1426
n___0 = line.length;
---------
SID [920] -> Line 1424
case 108: 
#line 1424
width = 0;
---------
SID [919] -> Line 1418
#line 1418
break;
---------
SID [918] -> Line 1416
case 105: 
#line 1416
ck_fwrite(cur_cmd->x.cmd_txt.text, 1, cur_cmd->x.cmd_txt.text_len, stdout);
---------
SID [917] -> Line 1413
#line 1413
break;
---------
SID [916] -> Line 1412
case 72: 
#line 1412
line_append(& line, & hold);
---------
SID [915] -> Line 1409
#line 1409
break;
---------
SID [914] -> Line 1408
case 104: 
#line 1408
line_copy(& line, & hold);
---------
SID [913] -> Line 1405
#line 1405
break;
---------
SID [912] -> Line 1404
case 71: 
#line 1404
line_append(& hold, & line);
---------
SID [911] -> Line 1401
#line 1401
break;
---------
SID [910] -> Line 1400
case 103: 
#line 1400
line_copy(& hold, & line);
---------
SID [909] -> Line 1397
#line 1397
break;
---------
SID [908] -> Line 1395
#line 1395
end_cycle ++;
---------
SID [907] -> Line 1394
#line 1394
line.length = 0;
---------
SID [906] -> Line -1

---------
SID [905] -> Line 1392
#line 1392
goto restart;
---------
SID [904] -> Line 1391
#line 1391
line.length = newlength;
---------
SID [903] -> Line 1390
#line 1390
chr_copy(line.text, tmp___4 + 1, newlength);
---------
SID [902] -> Line 1388
#line 1388
if (newlength) {
#line 1390
  chr_copy(line.text, tmp___4 + 1, newlength);
#line 1391
  line.length = newlength;
#line 1392
  goto restart;
} else {

}
---------
SID [901] -> Line 1387
#line 1387
newlength = (int )(((long )line.length - (tmp___4 - line.text)) - 1L);
---------
SID [900] -> Line 1386
case 68: 
#line 1386
tmp___4 = eol_pos(line.text, line.length);
---------
SID [899] -> Line 1379
#line 1379
break;
---------
SID [898] -> Line 1378
#line 1378
end_cycle ++;
---------
SID [897] -> Line 1377
case 100: 
#line 1377
line.length = 0;
---------
SID [896] -> Line 1374
#line 1374
break;
---------
SID [895] -> Line 1373
#line 1373
end_cycle ++;
---------
SID [894] -> Line -1

---------
SID [893] -> Line 1371
#line 1371
ck_fwrite(cur_cmd->x.cmd_txt.text, 1, cur_cmd->x.cmd_txt.text_len, stdout);
---------
SID [892] -> Line 1370
#line 1370
if (! (cur_cmd->aflags & 1)) {
#line 1371
  ck_fwrite(cur_cmd->x.cmd_txt.text, 1, cur_cmd->x.cmd_txt.text_len, stdout);
} else {

}
---------
SID [891] -> Line 1369
case 99: 
#line 1369
line.length = 0;
---------
SID [890] -> Line 1366
#line 1366
break;
---------
SID [889] -> Line 1364
#line 1364
goto exe_loop;
---------
SID [888] -> Line 1363
#line 1363
cur_cmd = (j->v)->v + j->v_index;
---------
SID [887] -> Line 1362
#line 1362
n = (j->v)->v_length - j->v_index;
---------
SID [886] -> Line 1360
#line 1360
j = cur_cmd->x.jump;
---------
SID [885] -> Line 1357
#line 1357
end_cycle ++;
---------
SID [884] -> Line 1356
case 98: 
#line 1356
if (! cur_cmd->x.jump) {
#line 1357
  end_cycle ++;
} else {
#line 1360
  j = cur_cmd->x.jump;
#line 1362
  n = (j->v)->v_length - j->v_index;
#line 1363
  cur_cmd = (j->v)->v + j->v_index;
#line 1364
  goto exe_loop;
}
---------
SID [883] -> Line 1353
#line 1353
break;
---------
SID [882] -> Line 1352
#line 1352
append.length += cur_cmd->x.cmd_txt.text_len;
---------
SID [881] -> Line 1350
#line 1350
bcopy((void const   *)cur_cmd->x.cmd_txt.text,
      (void *)(append.text + append.length),
      (size_t )cur_cmd->x.cmd_txt.text_len);
---------
SID [880] -> Line 1348
#line 1348
append.text = (char *)tmp___3;
---------
SID [879] -> Line 1348
#line 1348
tmp___3 = ck_realloc((void *)append.text, append.alloc);
---------
SID [878] -> Line 1347
#line 1347
append.alloc *= 2;
---------
SID [877] -> Line 1345
#line 1345
break;
---------
SID [876] -> Line -1

---------
SID [875] -> Line 1345
#line 1345
if (append.alloc - append.length < cur_cmd->x.cmd_txt.text_len) {

} else {
#line 1345
  break;
}
---------
SID [874] -> Line 1345
case 97: 
#line 1345
while (append.alloc - append.length < cur_cmd->x.cmd_txt.text_len) {
#line 1347
  append.alloc *= 2;
#line 1348
  tmp___3 = ck_realloc((void *)append.text, append.alloc);
#line 1348
  append.text = (char *)tmp___3;
}
---------
SID [873] -> Line 1342
#line 1342
break;
---------
SID [872] -> Line 1341
case 61: 
#line 1341
printf((char const   */* __restrict  */)"%d\n", input_line_number);
---------
SID [871] -> Line 1338
case 58: 
#line 1338
break;
---------
SID [870] -> Line 1335
#line 1335
break;
---------
SID [869] -> Line 1334
#line 1334
vec = vec->return_v;
---------
SID [868] -> Line 1333
#line 1333
n = (vec->return_v)->v_length - vec->return_i;
---------
SID [867] -> Line 1332
case 125: 
#line 1332
cur_cmd = (vec->return_v)->v + vec->return_i;
---------
SID [866] -> Line 1329
#line 1329
break;
---------
SID [865] -> Line -1

---------
SID [864] -> Line 1327
#line 1327
goto exe_loop;
---------
SID [863] -> Line 1326
#line 1326
n = vec->v_length;
---------
SID [862] -> Line 1325
#line 1325
cur_cmd = vec->v;
---------
SID [861] -> Line 1324
#line 1324
vec = cur_cmd->x.sub;
---------
SID [860] -> Line 1322
case 123: 
#line 1322
if ((cur_cmd->x.sub)->v_length) {
#line 1324
  vec = cur_cmd->x.sub;
#line 1325
  cur_cmd = vec->v;
#line 1326
  n = vec->v_length;
#line 1327
  goto exe_loop;
} else {

}
---------
SID [859] -> Line 1319
#line 1319
switch ((int )cur_cmd->cmd) {
case 123: 
#line 1322
if ((cur_cmd->x.sub)->v_length) {
#line 1324
  vec = cur_cmd->x.sub;
#line 1325
  cur_cmd = vec->v;
#line 1326
  n = vec->v_length;
#line 1327
  goto exe_loop;
} else {

}
#line 1329
break;
case 125: 
#line 1332
cur_cmd = (vec->return_v)->v + vec->return_i;
#line 1333
n = (vec->return_v)->v_length - vec->return_i;
#line 1334
vec = vec->return_v;
#line 1335
break;
case 58: 
#line 1338
break;
case 61: 
#line 1341
printf((char const   */* __restrict  */)"%d\n", input_line_number);
#line 1342
break;
case 97: 
#line 1345
while (append.alloc - append.length < cur_cmd->x.cmd_txt.text_len) {
#line 1347
  append.alloc *= 2;
#line 1348
  tmp___3 = ck_realloc((void *)append.text, append.alloc);
#line 1348
  append.text = (char *)tmp___3;
}
#line 1350
bcopy((void const   *)cur_cmd->x.cmd_txt.text,
      (void *)(append.text + append.length),
      (size_t )cur_cmd->x.cmd_txt.text_len);
#line 1352
append.length += cur_cmd->x.cmd_txt.text_len;
#line 1353
break;
case 98: 
#line 1356
if (! cur_cmd->x.jump) {
#line 1357
  end_cycle ++;
} else {
#line 1360
  j = cur_cmd->x.jump;
#line 1362
  n = (j->v)->v_length - j->v_index;
#line 1363
  cur_cmd = (j->v)->v + j->v_index;
#line 1364
  goto exe_loop;
}
#line 1366
break;
case 99: 
#line 1369
line.length = 0;
#line 1370
if (! (cur_cmd->aflags & 1)) {
#line 1371
  ck_fwrite(cur_cmd->x.cmd_txt.text, 1, cur_cmd->x.cmd_txt.text_len, stdout);
} else {

}
#line 1373
end_cycle ++;
#line 1374
break;
case 100: 
#line 1377
line.length = 0;
#line 1378
end_cycle ++;
#line 1379
break;
case 68: 
#line 1386
tmp___4 = eol_pos(line.text, line.length);
#line 1387
newlength = (int )(((long )line.length - (tmp___4 - line.text)) - 1L);
#line 1388
if (newlength) {
#line 1390
  chr_copy(line.text, tmp___4 + 1, newlength);
#line 1391
  line.length = newlength;
#line 1392
  goto restart;
} else {

}
#line 1394
line.length = 0;
#line 1395
end_cycle ++;
#line 1397
break;
case 103: 
#line 1400
line_copy(& hold, & line);
#line 1401
break;
case 71: 
#line 1404
line_append(& hold, & line);
#line 1405
break;
case 104: 
#line 1408
line_copy(& line, & hold);
#line 1409
break;
case 72: 
#line 1412
line_append(& line, & hold);
#line 1413
break;
case 105: 
#line 1416
ck_fwrite(cur_cmd->x.cmd_txt.text, 1, cur_cmd->x.cmd_txt.text_len, stdout);
#line 1418
break;
case 108: 
#line 1424
width = 0;
#line 1426
n___0 = line.length;
#line 1427
tmp___5 = line.text;
#line 1428
while (1) {
#line 1428
  tmp___7 = n___0;
#line 1428
  n___0 --;
#line 1428
  if (tmp___7) {

  } else {
#line 1428
    break;
  }
#line 1431
  if (! n___0) {
#line 1431
    if ((int )*tmp___5 == 10) {
#line 1432
      break;
    } else {

    }
  } else {

  }
#line 1433
  if (width > 77) {
#line 1435
    width = 0;
#line 1436
    putchar('\n');
  } else {

  }
#line 1438
  if ((int )*tmp___5 == 92) {
#line 1440
    printf((char const   */* __restrict  */)"\\\\");
#line 1441
    width += 2;
  } else {
#line 1443
    tmp___6 = __ctype_b_loc();
#line 1443
    if ((int const   )*(*tmp___6 + (int )*tmp___5) & 16384) {
#line 1445
      putchar((int )*tmp___5);
#line 1446
      width ++;
    } else {
#line 1449
      switch ((int )*tmp___5) {
      case 7: 
#line 1460
      printf((char const   */* __restrict  */)"\\a");
#line 1461
      width += 2;
#line 1462
      break;
      case 8: 
#line 1464
      printf((char const   */* __restrict  */)"\\b");
#line 1465
      width += 2;
#line 1466
      break;
      case 12: 
#line 1468
      printf((char const   */* __restrict  */)"\\f");
#line 1469
      width += 2;
#line 1470
      break;
      case 10: 
#line 1472
      printf((char const   */* __restrict  */)"\\n");
#line 1473
      width += 2;
#line 1474
      break;
      case 13: 
#line 1476
      printf((char const   */* __restrict  */)"\\r");
#line 1477
      width += 2;
#line 1478
      break;
      case 9: 
#line 1480
      printf((char const   */* __restrict  */)"\\t");
#line 1481
      width += 2;
#line 1482
      break;
      case 11: 
#line 1484
      printf((char const   */* __restrict  */)"\\v");
#line 1485
      width += 2;
#line 1486
      break;
      default: 
#line 1488
      printf((char const   */* __restrict  */)"\\%02x", (int )*tmp___5 & 255);
#line 1489
      width += 2;
#line 1490
      break;
      }
    }
  }
#line 1492
  tmp___5 ++;
}
#line 1494
putchar('\n');
#line 1496
break;
case 110: 
#line 1499
tmp___8 = feof(input_file);
#line 1499
if (tmp___8) {
#line 1500
  goto quit;
} else {

}
#line 1501
if (! no_default_output) {
#line 1502
  ck_fwrite(line.text, 1, line.length, stdout);
} else {

}
#line 1503
read_pattern_space();
#line 1504
break;
case 78: 
#line 1507
tmp___9 = feof(input_file);
#line 1507
if (tmp___9) {
#line 1509
  line.length = 0;
#line 1510
  goto quit;
} else {

}
#line 1512
append_pattern_space();
#line 1513
break;
case 112: 
#line 1516
ck_fwrite(line.text, 1, line.length, stdout);
#line 1517
break;
case 80: 
#line 1523
tmp___10 = eol_pos(line.text, line.length);
#line 1524
if (tmp___10) {
#line 1524
  tmp___11 = (tmp___10 - line.text) + 1L;
} else {
#line 1524
  tmp___11 = (long )line.length;
}
#line 1524
ck_fwrite(line.text, 1, (int )tmp___11, stdout);
#line 1528
break;
quit: 
case 113: 
#line 1532
quit_cmd ++;
#line 1533
end_cycle ++;
#line 1534
break;
case 114: 
#line 1538
n___1 = 0;
#line 1540
if (cur_cmd->x.io_file) {
#line 1542
  rewind(cur_cmd->x.io_file);
#line 1543
  while (1) {
#line 1545
    append.length += n___1;
#line 1546
    if (append.length == append.alloc) {
#line 1548
      append.alloc *= 2;
#line 1549
      tmp___12 = ck_realloc((void *)append.text, append.alloc);
#line 1549
      append.text = (char *)tmp___12;
    } else {

    }
#line 1551
    tmp___13 = fread((void */* __restrict  */)(append.text + append.length),
                     sizeof(char ), (size_t )(append.alloc - append.length),
                     (FILE */* __restrict  */)cur_cmd->x.io_file);
#line 1551
    n___1 = (int )tmp___13;
#line 1543
    if (n___1 > 0) {

    } else {
#line 1543
      break;
    }
  }
#line 1556
  tmp___14 = ferror(cur_cmd->x.io_file);
#line 1556
  if (tmp___14) {
#line 1557
    panic((char *)"Read error on input file to \'r\' command");
  } else {

  }
} else {

}
#line 1560
break;
case 115: 
#line 1564
trail_nl_p = (int )*(line.text + (line.length - 1)) == 10;
#line 1565
if (! tmp.alloc) {
#line 1567
  tmp.alloc = 50;
#line 1568
  tmp___15 = ck_malloc(50);
#line 1568
  tmp.text = (char *)tmp___15;
} else {

}
#line 1570
count = 0;
#line 1571
start = 0;
#line 1572
remain = line.length - trail_nl_p;
#line 1573
tmp.length = 0;
#line 1574
rep = cur_cmd->x.cmd_regex.replacement;
#line 1575
rep_end = rep + cur_cmd->x.cmd_regex.replace_length;
#line 1577
while (1) {
#line 1577
  offset = re_search(cur_cmd->x.cmd_regex.regx, (char const   *)line.text,
                     line.length - trail_nl_p, start, remain, & regs);
#line 1577
  if (offset >= 0) {

  } else {
#line 1577
    break;
  }
#line 1584
  count ++;
#line 1585
  if (offset - start) {
#line 1586
    str_append(& tmp, line.text + start, offset - start);
  } else {

  }
#line 1588
  if (cur_cmd->x.cmd_regex.flags & 8) {
#line 1590
    if (count != cur_cmd->x.cmd_regex.numb) {
#line 1592
      matched = *(regs.end + 0) - *(regs.start + 0);
#line 1593
      if (! matched) {
#line 1593
        matched = 1;
      } else {

      }
#line 1594
      str_append(& tmp, line.text + *(regs.start + 0), matched);
#line 1595
      if (offset == *(regs.end + 0)) {
#line 1595
        start = offset + 1;
      } else {
#line 1595
        start = *(regs.end + 0);
      }
#line 1597
      remain = (line.length - trail_nl_p) - start;
#line 1598
      continue;
    } else {

    }
  } else {

  }
#line 1602
  rep_cur = rep;
#line 1602
  rep_next = rep_cur;
#line 1602
  while ((unsigned long )rep_next < (unsigned long )rep_end) {
#line 1604
    if ((int )*rep_next == 38) {
#line 1606
      if (rep_next - rep_cur) {
#line 1607
        str_append(& tmp, rep_cur, (int )(rep_next - rep_cur));
      } else {

      }
#line 1608
      str_append(& tmp, line.text + *(regs.start + 0),
                 *(regs.end + 0) - *(regs.start + 0));
#line 1609
      rep_cur = rep_next + 1;
    } else
#line 1611
    if ((int )*rep_next == 92) {
#line 1613
      if (rep_next - rep_cur) {
#line 1614
        str_append(& tmp, rep_cur, (int )(rep_next - rep_cur));
      } else {

      }
#line 1615
      rep_next ++;
#line 1616
      if ((unsigned long )rep_next != (unsigned long )rep_end) {
#line 1620
        if ((int )*rep_next >= 48) {
#line 1620
          if ((int )*rep_next <= 57) {
#line 1622
            n___2 = (int )*rep_next - 48;
#line 1623
            str_append(& tmp, line.text + *(regs.start + n___2),
                       *(regs.end + n___2) - *(regs.start + n___2));
          } else {
#line 1626
            str_append(& tmp, rep_next, 1);
          }
        } else {
#line 1626
          str_append(& tmp, rep_next, 1);
        }
      } else {

      }
#line 1628
      rep_cur = rep_next + 1;
    } else {

    }
#line 1602
    rep_next ++;
  }
#line 1631
  if (rep_next - rep_cur) {
#line 1632
    str_append(& tmp, rep_cur, (int )(rep_next - rep_cur));
  } else {

  }
#line 1633
  if (offset == *(regs.end + 0)) {
#line 1635
    str_append(& tmp, line.text + offset, 1);
#line 1636
    (*(regs.end + 0)) ++;
  } else {

  }
#line 1638
  start = *(regs.end + 0);
#line 1640
  remain = (line.length - trail_nl_p) - start;
#line 1641
  if (remain < 0) {
#line 1642
    break;
  } else {

  }
#line 1643
  if (! (cur_cmd->x.cmd_regex.flags & 1)) {
#line 1644
    break;
  } else {

  }
}
#line 1646
if (! count) {
#line 1647
  break;
} else {

}
#line 1648
replaced = 1;
#line 1649
str_append(& tmp, line.text + start, remain + trail_nl_p);
#line 1650
t.text = line.text;
#line 1651
t.length = line.length;
#line 1652
t.alloc = line.alloc;
#line 1653
line.text = tmp.text;
#line 1654
line.length = tmp.length;
#line 1655
line.alloc = tmp.alloc;
#line 1656
tmp.text = t.text;
#line 1657
tmp.length = t.length;
#line 1658
tmp.alloc = t.alloc;
#line 1659
if (cur_cmd->x.cmd_regex.flags & 4) {
#line 1659
  if (cur_cmd->x.cmd_regex.wio_file) {
#line 1661
    ck_fwrite(line.text, 1, line.length, cur_cmd->x.cmd_regex.wio_file);
  } else {

  }
} else {

}
#line 1663
if (cur_cmd->x.cmd_regex.flags & 2) {
#line 1664
  ck_fwrite(line.text, 1, line.length, stdout);
} else {

}
#line 1665
break;
case 116: 
#line 1669
if (replaced) {
#line 1671
  replaced = 0;
#line 1672
  if (! cur_cmd->x.jump) {
#line 1673
    end_cycle ++;
  } else {
#line 1676
    j___0 = cur_cmd->x.jump;
#line 1678
    n = (j___0->v)->v_length - j___0->v_index;
#line 1679
    cur_cmd = (j___0->v)->v + j___0->v_index;
#line 1680
    goto exe_loop;
  }
} else {

}
#line 1683
break;
case 119: 
#line 1686
if (cur_cmd->x.io_file) {
#line 1687
  ck_fwrite(line.text, 1, line.length, cur_cmd->x.io_file);
} else {

}
#line 1688
break;
case 120: 
#line 1694
tmp___16 = line;
#line 1695
line = hold;
#line 1696
hold = tmp___16;
#line 1698
break;
case 121: 
#line 1704
p = (unsigned char *)line.text;
#line 1704
e = p + line.length;
#line 1704
while ((unsigned long )p < (unsigned long )e) {
#line 1705
  *p = *(cur_cmd->x.translate + *p);
#line 1704
  p ++;
}
#line 1707
break;
default: 
#line 1710
panic((char *)"INTERNAL ERROR: Bad cmd %c", (int )cur_cmd->cmd);
}
---------
SID [858] -> Line -1

---------
SID [857] -> Line 1318
#line 1318
goto __Cont;
---------
SID [856] -> Line 1317
#line 1317
if (! addr_matched) {
#line 1318
  goto __Cont;
} else {

}
---------
SID [855] -> Line -1

---------
SID [854] -> Line 1316
#line 1316
addr_matched = ! addr_matched;
---------
SID [853] -> Line 1315
#line 1315
if (cur_cmd->aflags & 2) {
#line 1316
  addr_matched = ! addr_matched;
} else {

}
---------
SID [852] -> Line -1

---------
SID [851] -> Line -1

---------
SID [850] -> Line 1312
#line 1312
cur_cmd->aflags |= 1;
---------
SID [849] -> Line -1

---------
SID [848] -> Line 1310
#line 1310
if (tmp___1) {

} else {
#line 1312
  cur_cmd->aflags |= 1;
}
---------
SID [847] -> Line 1310
#line 1310
tmp___1 = match_address(& cur_cmd->a2);
---------
SID [846] -> Line 1312
#line 1312
cur_cmd->aflags |= 1;
---------
SID [845] -> Line 1310
#line 1310
if (cur_cmd->a2.addr_type == 2) {
#line 1312
  cur_cmd->aflags |= 1;
} else {
#line 1310
  tmp___1 = match_address(& cur_cmd->a2);
#line 1310
  if (tmp___1) {

  } else {
#line 1312
    cur_cmd->aflags |= 1;
  }
}
---------
SID [844] -> Line 1309
#line 1309
if (cur_cmd->a2.addr_type != 0) {
#line 1310
  if (cur_cmd->a2.addr_type == 2) {
#line 1312
    cur_cmd->aflags |= 1;
  } else {
#line 1310
    tmp___1 = match_address(& cur_cmd->a2);
#line 1310
    if (tmp___1) {

    } else {
#line 1312
      cur_cmd->aflags |= 1;
    }
  }
} else {

}
---------
SID [843] -> Line 1308
#line 1308
addr_matched = 1;
---------
SID [842] -> Line 1306
#line 1306
if (tmp___2) {
#line 1308
  addr_matched = 1;
#line 1309
  if (cur_cmd->a2.addr_type != 0) {
#line 1310
    if (cur_cmd->a2.addr_type == 2) {
#line 1312
      cur_cmd->aflags |= 1;
    } else {
#line 1310
      tmp___1 = match_address(& cur_cmd->a2);
#line 1310
      if (tmp___1) {

      } else {
#line 1312
        cur_cmd->aflags |= 1;
      }
    }
  } else {

  }
} else {

}
---------
SID [841] -> Line 1306
#line 1306
tmp___2 = match_address(& cur_cmd->a1);
---------
SID [840] -> Line -1

---------
SID [839] -> Line 1304
#line 1304
cur_cmd->aflags &= -2;
---------
SID [838] -> Line 1303
#line 1303
if (tmp___0) {
#line 1304
  cur_cmd->aflags &= -2;
} else {

}
---------
SID [837] -> Line 1303
#line 1303
tmp___0 = match_address(& cur_cmd->a2);
---------
SID [836] -> Line 1302
#line 1302
addr_matched = 1;
---------
SID [835] -> Line 1300
#line 1300
if (cur_cmd->aflags & 1) {
#line 1302
  addr_matched = 1;
#line 1303
  tmp___0 = match_address(& cur_cmd->a2);
#line 1303
  if (tmp___0) {
#line 1304
    cur_cmd->aflags &= -2;
  } else {

  }
} else {
#line 1306
  tmp___2 = match_address(& cur_cmd->a1);
#line 1306
  if (tmp___2) {
#line 1308
    addr_matched = 1;
#line 1309
    if (cur_cmd->a2.addr_type != 0) {
#line 1310
      if (cur_cmd->a2.addr_type == 2) {
#line 1312
        cur_cmd->aflags |= 1;
      } else {
#line 1310
        tmp___1 = match_address(& cur_cmd->a2);
#line 1310
        if (tmp___1) {

        } else {
#line 1312
          cur_cmd->aflags |= 1;
        }
      }
    } else {

    }
  } else {

  }
}
---------
SID [834] -> Line 1299
exe_loop: 
#line 1299
addr_matched = 0;
---------
SID [833] -> Line 1296
#line 1296
break;
---------
SID [832] -> Line -1

---------
SID [831] -> Line 1296
#line 1296
if (n) {

} else {
#line 1296
  break;
}
---------
SID [830] -> Line 1296
#line 1296
while (n) {
  exe_loop: 
#line 1299
  addr_matched = 0;
#line 1300
  if (cur_cmd->aflags & 1) {
#line 1302
    addr_matched = 1;
#line 1303
    tmp___0 = match_address(& cur_cmd->a2);
#line 1303
    if (tmp___0) {
#line 1304
      cur_cmd->aflags &= -2;
    } else {

    }
  } else {
#line 1306
    tmp___2 = match_address(& cur_cmd->a1);
#line 1306
    if (tmp___2) {
#line 1308
      addr_matched = 1;
#line 1309
      if (cur_cmd->a2.addr_type != 0) {
#line 1310
        if (cur_cmd->a2.addr_type == 2) {
#line 1312
          cur_cmd->aflags |= 1;
        } else {
#line 1310
          tmp___1 = match_address(& cur_cmd->a2);
#line 1310
          if (tmp___1) {

          } else {
#line 1312
            cur_cmd->aflags |= 1;
          }
        }
      } else {

      }
    } else {

    }
  }
#line 1315
  if (cur_cmd->aflags & 2) {
#line 1316
    addr_matched = ! addr_matched;
  } else {

  }
#line 1317
  if (! addr_matched) {
#line 1318
    goto __Cont;
  } else {

  }
#line 1319
  switch ((int )cur_cmd->cmd) {
  case 123: 
#line 1322
  if ((cur_cmd->x.sub)->v_length) {
#line 1324
    vec = cur_cmd->x.sub;
#line 1325
    cur_cmd = vec->v;
#line 1326
    n = vec->v_length;
#line 1327
    goto exe_loop;
  } else {

  }
#line 1329
  break;
  case 125: 
#line 1332
  cur_cmd = (vec->return_v)->v + vec->return_i;
#line 1333
  n = (vec->return_v)->v_length - vec->return_i;
#line 1334
  vec = vec->return_v;
#line 1335
  break;
  case 58: 
#line 1338
  break;
  case 61: 
#line 1341
  printf((char const   */* __restrict  */)"%d\n", input_line_number);
#line 1342
  break;
  case 97: 
#line 1345
  while (append.alloc - append.length < cur_cmd->x.cmd_txt.text_len) {
#line 1347
    append.alloc *= 2;
#line 1348
    tmp___3 = ck_realloc((void *)append.text, append.alloc);
#line 1348
    append.text = (char *)tmp___3;
  }
#line 1350
  bcopy((void const   *)cur_cmd->x.cmd_txt.text,
        (void *)(append.text + append.length),
        (size_t )cur_cmd->x.cmd_txt.text_len);
#line 1352
  append.length += cur_cmd->x.cmd_txt.text_len;
#line 1353
  break;
  case 98: 
#line 1356
  if (! cur_cmd->x.jump) {
#line 1357
    end_cycle ++;
  } else {
#line 1360
    j = cur_cmd->x.jump;
#line 1362
    n = (j->v)->v_length - j->v_index;
#line 1363
    cur_cmd = (j->v)->v + j->v_index;
#line 1364
    goto exe_loop;
  }
#line 1366
  break;
  case 99: 
#line 1369
  line.length = 0;
#line 1370
  if (! (cur_cmd->aflags & 1)) {
#line 1371
    ck_fwrite(cur_cmd->x.cmd_txt.text, 1, cur_cmd->x.cmd_txt.text_len, stdout);
  } else {

  }
#line 1373
  end_cycle ++;
#line 1374
  break;
  case 100: 
#line 1377
  line.length = 0;
#line 1378
  end_cycle ++;
#line 1379
  break;
  case 68: 
#line 1386
  tmp___4 = eol_pos(line.text, line.length);
#line 1387
  newlength = (int )(((long )line.length - (tmp___4 - line.text)) - 1L);
#line 1388
  if (newlength) {
#line 1390
    chr_copy(line.text, tmp___4 + 1, newlength);
#line 1391
    line.length = newlength;
#line 1392
    goto restart;
  } else {

  }
#line 1394
  line.length = 0;
#line 1395
  end_cycle ++;
#line 1397
  break;
  case 103: 
#line 1400
  line_copy(& hold, & line);
#line 1401
  break;
  case 71: 
#line 1404
  line_append(& hold, & line);
#line 1405
  break;
  case 104: 
#line 1408
  line_copy(& line, & hold);
#line 1409
  break;
  case 72: 
#line 1412
  line_append(& line, & hold);
#line 1413
  break;
  case 105: 
#line 1416
  ck_fwrite(cur_cmd->x.cmd_txt.text, 1, cur_cmd->x.cmd_txt.text_len, stdout);
#line 1418
  break;
  case 108: 
#line 1424
  width = 0;
#line 1426
  n___0 = line.length;
#line 1427
  tmp___5 = line.text;
#line 1428
  while (1) {
#line 1428
    tmp___7 = n___0;
#line 1428
    n___0 --;
#line 1428
    if (tmp___7) {

    } else {
#line 1428
      break;
    }
#line 1431
    if (! n___0) {
#line 1431
      if ((int )*tmp___5 == 10) {
#line 1432
        break;
      } else {

      }
    } else {

    }
#line 1433
    if (width > 77) {
#line 1435
      width = 0;
#line 1436
      putchar('\n');
    } else {

    }
#line 1438
    if ((int )*tmp___5 == 92) {
#line 1440
      printf((char const   */* __restrict  */)"\\\\");
#line 1441
      width += 2;
    } else {
#line 1443
      tmp___6 = __ctype_b_loc();
#line 1443
      if ((int const   )*(*tmp___6 + (int )*tmp___5) & 16384) {
#line 1445
        putchar((int )*tmp___5);
#line 1446
        width ++;
      } else {
#line 1449
        switch ((int )*tmp___5) {
        case 7: 
#line 1460
        printf((char const   */* __restrict  */)"\\a");
#line 1461
        width += 2;
#line 1462
        break;
        case 8: 
#line 1464
        printf((char const   */* __restrict  */)"\\b");
#line 1465
        width += 2;
#line 1466
        break;
        case 12: 
#line 1468
        printf((char const   */* __restrict  */)"\\f");
#line 1469
        width += 2;
#line 1470
        break;
        case 10: 
#line 1472
        printf((char const   */* __restrict  */)"\\n");
#line 1473
        width += 2;
#line 1474
        break;
        case 13: 
#line 1476
        printf((char const   */* __restrict  */)"\\r");
#line 1477
        width += 2;
#line 1478
        break;
        case 9: 
#line 1480
        printf((char const   */* __restrict  */)"\\t");
#line 1481
        width += 2;
#line 1482
        break;
        case 11: 
#line 1484
        printf((char const   */* __restrict  */)"\\v");
#line 1485
        width += 2;
#line 1486
        break;
        default: 
#line 1488
        printf((char const   */* __restrict  */)"\\%02x", (int )*tmp___5 & 255);
#line 1489
        width += 2;
#line 1490
        break;
        }
      }
    }
#line 1492
    tmp___5 ++;
  }
#line 1494
  putchar('\n');
#line 1496
  break;
  case 110: 
#line 1499
  tmp___8 = feof(input_file);
#line 1499
  if (tmp___8) {
#line 1500
    goto quit;
  } else {

  }
#line 1501
  if (! no_default_output) {
#line 1502
    ck_fwrite(line.text, 1, line.length, stdout);
  } else {

  }
#line 1503
  read_pattern_space();
#line 1504
  break;
  case 78: 
#line 1507
  tmp___9 = feof(input_file);
#line 1507
  if (tmp___9) {
#line 1509
    line.length = 0;
#line 1510
    goto quit;
  } else {

  }
#line 1512
  append_pattern_space();
#line 1513
  break;
  case 112: 
#line 1516
  ck_fwrite(line.text, 1, line.length, stdout);
#line 1517
  break;
  case 80: 
#line 1523
  tmp___10 = eol_pos(line.text, line.length);
#line 1524
  if (tmp___10) {
#line 1524
    tmp___11 = (tmp___10 - line.text) + 1L;
  } else {
#line 1524
    tmp___11 = (long )line.length;
  }
#line 1524
  ck_fwrite(line.text, 1, (int )tmp___11, stdout);
#line 1528
  break;
  quit: 
  case 113: 
#line 1532
  quit_cmd ++;
#line 1533
  end_cycle ++;
#line 1534
  break;
  case 114: 
#line 1538
  n___1 = 0;
#line 1540
  if (cur_cmd->x.io_file) {
#line 1542
    rewind(cur_cmd->x.io_file);
#line 1543
    while (1) {
#line 1545
      append.length += n___1;
#line 1546
      if (append.length == append.alloc) {
#line 1548
        append.alloc *= 2;
#line 1549
        tmp___12 = ck_realloc((void *)append.text, append.alloc);
#line 1549
        append.text = (char *)tmp___12;
      } else {

      }
#line 1551
      tmp___13 = fread((void */* __restrict  */)(append.text + append.length),
                       sizeof(char ), (size_t )(append.alloc - append.length),
                       (FILE */* __restrict  */)cur_cmd->x.io_file);
#line 1551
      n___1 = (int )tmp___13;
#line 1543
      if (n___1 > 0) {

      } else {
#line 1543
        break;
      }
    }
#line 1556
    tmp___14 = ferror(cur_cmd->x.io_file);
#line 1556
    if (tmp___14) {
#line 1557
      panic((char *)"Read error on input file to \'r\' command");
    } else {

    }
  } else {

  }
#line 1560
  break;
  case 115: 
#line 1564
  trail_nl_p = (int )*(line.text + (line.length - 1)) == 10;
#line 1565
  if (! tmp.alloc) {
#line 1567
    tmp.alloc = 50;
#line 1568
    tmp___15 = ck_malloc(50);
#line 1568
    tmp.text = (char *)tmp___15;
  } else {

  }
#line 1570
  count = 0;
#line 1571
  start = 0;
#line 1572
  remain = line.length - trail_nl_p;
#line 1573
  tmp.length = 0;
#line 1574
  rep = cur_cmd->x.cmd_regex.replacement;
#line 1575
  rep_end = rep + cur_cmd->x.cmd_regex.replace_length;
#line 1577
  while (1) {
#line 1577
    offset = re_search(cur_cmd->x.cmd_regex.regx, (char const   *)line.text,
                       line.length - trail_nl_p, start, remain, & regs);
#line 1577
    if (offset >= 0) {

    } else {
#line 1577
      break;
    }
#line 1584
    count ++;
#line 1585
    if (offset - start) {
#line 1586
      str_append(& tmp, line.text + start, offset - start);
    } else {

    }
#line 1588
    if (cur_cmd->x.cmd_regex.flags & 8) {
#line 1590
      if (count != cur_cmd->x.cmd_regex.numb) {
#line 1592
        matched = *(regs.end + 0) - *(regs.start + 0);
#line 1593
        if (! matched) {
#line 1593
          matched = 1;
        } else {

        }
#line 1594
        str_append(& tmp, line.text + *(regs.start + 0), matched);
#line 1595
        if (offset == *(regs.end + 0)) {
#line 1595
          start = offset + 1;
        } else {
#line 1595
          start = *(regs.end + 0);
        }
#line 1597
        remain = (line.length - trail_nl_p) - start;
#line 1598
        continue;
      } else {

      }
    } else {

    }
#line 1602
    rep_cur = rep;
#line 1602
    rep_next = rep_cur;
#line 1602
    while ((unsigned long )rep_next < (unsigned long )rep_end) {
#line 1604
      if ((int )*rep_next == 38) {
#line 1606
        if (rep_next - rep_cur) {
#line 1607
          str_append(& tmp, rep_cur, (int )(rep_next - rep_cur));
        } else {

        }
#line 1608
        str_append(& tmp, line.text + *(regs.start + 0),
                   *(regs.end + 0) - *(regs.start + 0));
#line 1609
        rep_cur = rep_next + 1;
      } else
#line 1611
      if ((int )*rep_next == 92) {
#line 1613
        if (rep_next - rep_cur) {
#line 1614
          str_append(& tmp, rep_cur, (int )(rep_next - rep_cur));
        } else {

        }
#line 1615
        rep_next ++;
#line 1616
        if ((unsigned long )rep_next != (unsigned long )rep_end) {
#line 1620
          if ((int )*rep_next >= 48) {
#line 1620
            if ((int )*rep_next <= 57) {
#line 1622
              n___2 = (int )*rep_next - 48;
#line 1623
              str_append(& tmp, line.text + *(regs.start + n___2),
                         *(regs.end + n___2) - *(regs.start + n___2));
            } else {
#line 1626
              str_append(& tmp, rep_next, 1);
            }
          } else {
#line 1626
            str_append(& tmp, rep_next, 1);
          }
        } else {

        }
#line 1628
        rep_cur = rep_next + 1;
      } else {

      }
#line 1602
      rep_next ++;
    }
#line 1631
    if (rep_next - rep_cur) {
#line 1632
      str_append(& tmp, rep_cur, (int )(rep_next - rep_cur));
    } else {

    }
#line 1633
    if (offset == *(regs.end + 0)) {
#line 1635
      str_append(& tmp, line.text + offset, 1);
#line 1636
      (*(regs.end + 0)) ++;
    } else {

    }
#line 1638
    start = *(regs.end + 0);
#line 1640
    remain = (line.length - trail_nl_p) - start;
#line 1641
    if (remain < 0) {
#line 1642
      break;
    } else {

    }
#line 1643
    if (! (cur_cmd->x.cmd_regex.flags & 1)) {
#line 1644
      break;
    } else {

    }
  }
#line 1646
  if (! count) {
#line 1647
    break;
  } else {

  }
#line 1648
  replaced = 1;
#line 1649
  str_append(& tmp, line.text + start, remain + trail_nl_p);
#line 1650
  t.text = line.text;
#line 1651
  t.length = line.length;
#line 1652
  t.alloc = line.alloc;
#line 1653
  line.text = tmp.text;
#line 1654
  line.length = tmp.length;
#line 1655
  line.alloc = tmp.alloc;
#line 1656
  tmp.text = t.text;
#line 1657
  tmp.length = t.length;
#line 1658
  tmp.alloc = t.alloc;
#line 1659
  if (cur_cmd->x.cmd_regex.flags & 4) {
#line 1659
    if (cur_cmd->x.cmd_regex.wio_file) {
#line 1661
      ck_fwrite(line.text, 1, line.length, cur_cmd->x.cmd_regex.wio_file);
    } else {

    }
  } else {

  }
#line 1663
  if (cur_cmd->x.cmd_regex.flags & 2) {
#line 1664
    ck_fwrite(line.text, 1, line.length, stdout);
  } else {

  }
#line 1665
  break;
  case 116: 
#line 1669
  if (replaced) {
#line 1671
    replaced = 0;
#line 1672
    if (! cur_cmd->x.jump) {
#line 1673
      end_cycle ++;
    } else {
#line 1676
      j___0 = cur_cmd->x.jump;
#line 1678
      n = (j___0->v)->v_length - j___0->v_index;
#line 1679
      cur_cmd = (j___0->v)->v + j___0->v_index;
#line 1680
      goto exe_loop;
    }
  } else {

  }
#line 1683
  break;
  case 119: 
#line 1686
  if (cur_cmd->x.io_file) {
#line 1687
    ck_fwrite(line.text, 1, line.length, cur_cmd->x.io_file);
  } else {

  }
#line 1688
  break;
  case 120: 
#line 1694
  tmp___16 = line;
#line 1695
  line = hold;
#line 1696
  hold = tmp___16;
#line 1698
  break;
  case 121: 
#line 1704
  p = (unsigned char *)line.text;
#line 1704
  e = p + line.length;
#line 1704
  while ((unsigned long )p < (unsigned long )e) {
#line 1705
    *p = *(cur_cmd->x.translate + *p);
#line 1704
    p ++;
  }
#line 1707
  break;
  default: 
#line 1710
  panic((char *)"INTERNAL ERROR: Bad cmd %c", (int )cur_cmd->cmd);
  }
#line 1712
  if (end_cycle) {
#line 1713
    break;
  } else {

  }
  __Cont: /* CIL Label */ 
#line 1296
  cur_cmd ++;
#line 1296
  n --;
}
---------
SID [829] -> Line 1296
#line 1296
n = vec->v_length;
---------
SID [828] -> Line 1296
#line 1296
cur_cmd = vec->v;
---------
SID [827] -> Line 1294
#line 1294
end_cycle = 0;
---------
SID [826] -> Line 1292
#line 1292
count = 0;
---------
SID [825] -> Line 1291
restart: 
#line 1291
vec = restart_vec;
---------
SID [824] -> Line 1288
#line 1288
restart_vec = vec;
---------
SID [823] -> Line 1264
#line 1264
return;
---------
SID [822] -> Line 1263
#line 1263
*tmp = *tmp___0;
---------
SID [821] -> Line 1263
#line 1263
src ++;
---------
SID [820] -> Line 1263
#line 1263
tmp___0 = src;
---------
SID [819] -> Line 1263
#line 1263
dest ++;
---------
SID [818] -> Line 1263
#line 1263
tmp = dest;
---------
SID [817] -> Line 1262
#line 1262
break;
---------
SID [816] -> Line -1

---------
SID [815] -> Line 1262
#line 1262
if (tmp___1) {

} else {
#line 1262
  break;
}
---------
SID [814] -> Line 1262
#line 1262
len --;
---------
SID [813] -> Line 1262
#line 1262
tmp___1 = len;
---------
SID [812] -> Line 1262
#line 1262
while (1) {
#line 1262
  tmp___1 = len;
#line 1262
  len --;
#line 1262
  if (tmp___1) {

  } else {
#line 1262
    break;
  }
#line 1263
  tmp = dest;
#line 1263
  dest ++;
#line 1263
  tmp___0 = src;
#line 1263
  src ++;
#line 1263
  *tmp = *tmp___0;
}
---------
SID [811] -> Line 1253
#line 1253
return (str);
---------
SID [810] -> Line 1253
#line 1253
str --;
---------
SID [809] -> Line -1

---------
SID [808] -> Line 1252
#line 1252
return (str);
---------
SID [807] -> Line 1252
#line 1252
str --;
---------
SID [806] -> Line 1251
#line 1251
if ((int )*tmp == 10) {
#line 1252
  str --;
#line 1252
  return (str);
} else {

}
---------
SID [805] -> Line 1251
#line 1251
str ++;
---------
SID [804] -> Line 1251
#line 1251
tmp = str;
---------
SID [803] -> Line 1250
#line 1250
break;
---------
SID [802] -> Line -1

---------
SID [801] -> Line 1250
#line 1250
if (tmp___0) {

} else {
#line 1250
  break;
}
---------
SID [800] -> Line 1250
#line 1250
len --;
---------
SID [799] -> Line 1250
#line 1250
tmp___0 = len;
---------
SID [798] -> Line 1250
#line 1250
while (1) {
#line 1250
  tmp___0 = len;
#line 1250
  len --;
#line 1250
  if (tmp___0) {

  } else {
#line 1250
    break;
  }
#line 1251
  tmp = str;
#line 1251
  str ++;
#line 1251
  if ((int )*tmp == 10) {
#line 1252
    str --;
#line 1252
    return (str);
  } else {

  }
}
---------
SID [797] -> Line 1243
#line 1243
return;
---------
SID [796] -> Line 1242
#line 1242
ck_fclose(input_file);
---------
SID [795] -> Line -1

---------
SID [794] -> Line 1240
#line 1240
break;
---------
SID [793] -> Line 1239
#line 1239
if (quit_cmd) {
#line 1240
  break;
} else {

}
---------
SID [792] -> Line -1

---------
SID [791] -> Line 1237
#line 1237
append.length = 0;
---------
SID [790] -> Line 1236
#line 1236
ck_fwrite(append.text, 1, append.length, stdout);
---------
SID [789] -> Line 1234
#line 1234
if (append.length) {
#line 1236
  ck_fwrite(append.text, 1, append.length, stdout);
#line 1237
  append.length = 0;
} else {

}
---------
SID [788] -> Line -1

---------
SID [787] -> Line 1233
#line 1233
ck_fwrite(line.text, 1, line.length, stdout);
---------
SID [786] -> Line 1232
#line 1232
if (! no_default_output) {
#line 1233
  ck_fwrite(line.text, 1, line.length, stdout);
} else {

}
---------
SID [785] -> Line 1231
#line 1231
execute_program(the_program);
---------
SID [784] -> Line 1229
#line 1229
break;
---------
SID [783] -> Line -1

---------
SID [782] -> Line 1229
#line 1229
if (tmp___1) {

} else {
#line 1229
  break;
}
---------
SID [781] -> Line 1229
#line 1229
tmp___1 = read_pattern_space();
---------
SID [780] -> Line 1229
#line 1229
while (1) {
#line 1229
  tmp___1 = read_pattern_space();
#line 1229
  if (tmp___1) {

  } else {
#line 1229
    break;
  }
#line 1231
  execute_program(the_program);
#line 1232
  if (! no_default_output) {
#line 1233
    ck_fwrite(line.text, 1, line.length, stdout);
  } else {

  }
#line 1234
  if (append.length) {
#line 1236
    ck_fwrite(append.text, 1, append.length, stdout);
#line 1237
    append.length = 0;
  } else {

  }
#line 1239
  if (quit_cmd) {
#line 1240
    break;
  } else {

  }
}
---------
SID [779] -> Line -1

---------
SID [778] -> Line 1226
#line 1226
return;
---------
SID [777] -> Line 1225
#line 1225
fprintf((FILE */* __restrict  */)stdout,
        (char const   */* __restrict  */)"%s: can\'t read %s: %s\n", myname,
        name, ptr);
---------
SID [776] -> Line 1224
#line 1224
bad_input ++;
---------
SID [775] -> Line 1223
#line 1223
ptr = tmp___0;
---------
SID [774] -> Line 1223
#line 1223
tmp___0 = strerror(*tmp);
---------
SID [773] -> Line 1223
#line 1223
tmp = __errno_location();
---------
SID [772] -> Line 1221
#line 1221
if ((unsigned long )input_file == (unsigned long )((FILE *)0)) {
#line 1223
  tmp = __errno_location();
#line 1223
  tmp___0 = strerror(*tmp);
#line 1223
  ptr = tmp___0;
#line 1224
  bad_input ++;
#line 1225
  fprintf((FILE */* __restrict  */)stdout,
          (char const   */* __restrict  */)"%s: can\'t read %s: %s\n", myname,
          name, ptr);
#line 1226
  return;
} else {

}
---------
SID [771] -> Line 1220
_L: /* CIL Label */ 
#line 1220
input_file = fopen((char const   */* __restrict  */)name,
                   (char const   */* __restrict  */)"r");
---------
SID [770] -> Line 1216
#line 1216
goto _L;
---------
SID [769] -> Line 1217
#line 1217
input_file = stdin;
---------
SID [768] -> Line 1216
#line 1216
if ((int )*(name + 1) == 0) {
#line 1217
  input_file = stdin;
} else {
#line 1216
  goto _L;
}
---------
SID [767] -> Line 1216
#line 1216
if ((int )*name == 45) {
#line 1216
  if ((int )*(name + 1) == 0) {
#line 1217
    input_file = stdin;
  } else {
#line 1216
    goto _L;
  }
} else {
  _L: /* CIL Label */ 
#line 1220
  input_file = fopen((char const   */* __restrict  */)name,
                     (char const   */* __restrict  */)"r");
#line 1221
  if ((unsigned long )input_file == (unsigned long )((FILE *)0)) {
#line 1223
    tmp = __errno_location();
#line 1223
    tmp___0 = strerror(*tmp);
#line 1223
    ptr = tmp___0;
#line 1224
    bad_input ++;
#line 1225
    fprintf((FILE */* __restrict  */)stdout,
            (char const   */* __restrict  */)"%s: can\'t read %s: %s\n",
            myname, name, ptr);
#line 1226
    return;
  } else {

  }
}
---------
SID [766] -> Line 1207
#line 1207
return ((FILE *)0);
---------
SID [765] -> Line 1206
#line 1206
bad_prog((char *)"Hopelessely evil compiled in limit on number of open files.  re-compile sed");
---------
SID [764] -> Line 1202
#line 1202
return (file_ptrs[n].phile);
---------
SID [763] -> Line 1201
#line 1201
flush_buffer(b);
---------
SID [762] -> Line 1199
#line 1199
file_ptrs[n].phile = ck_fopen(file_name, (char *)"r");
---------
SID [761] -> Line 1196
#line 1196
file_ptrs[n].phile = ck_fopen(file_name, (char *)"w");
---------
SID [760] -> Line 1195
#line 1195
if (! readit) {
#line 1196
  file_ptrs[n].phile = ck_fopen(file_name, (char *)"w");
} else {
#line 1199
  file_ptrs[n].phile = ck_fopen(file_name, (char *)"r");
}
---------
SID [759] -> Line 1194
#line 1194
file_ptrs[n].readit = readit;
---------
SID [758] -> Line 1193
#line 1193
file_ptrs[n].name = ck_strdup(file_name);
---------
SID [757] -> Line 1191
#line 1191
if (n < 32) {
#line 1193
  file_ptrs[n].name = ck_strdup(file_name);
#line 1194
  file_ptrs[n].readit = readit;
#line 1195
  if (! readit) {
#line 1196
    file_ptrs[n].phile = ck_fopen(file_name, (char *)"w");
  } else {
#line 1199
    file_ptrs[n].phile = ck_fopen(file_name, (char *)"r");
  }
#line 1201
  flush_buffer(b);
#line 1202
  return (file_ptrs[n].phile);
} else {
#line 1206
  bad_prog((char *)"Hopelessely evil compiled in limit on number of open files.  re-compile sed");
#line 1207
  return ((FILE *)0);
}
---------
SID [756] -> Line 1179
#line 1179
n ++;
---------
SID [755] -> Line 1188
#line 1188
return (file_ptrs[n].phile);
---------
SID [754] -> Line 1187
#line 1187
flush_buffer(b);
---------
SID [753] -> Line -1

---------
SID [752] -> Line 1186
#line 1186
bad_prog((char *)"Can\'t open file for both reading and writing");
---------
SID [751] -> Line 1185
#line 1185
if (file_ptrs[n].readit != readit) {
#line 1186
  bad_prog((char *)"Can\'t open file for both reading and writing");
} else {

}
---------
SID [750] -> Line -1

---------
SID [749] -> Line 1183
#line 1183
if (tmp___0) {

} else {
#line 1185
  if (file_ptrs[n].readit != readit) {
#line 1186
    bad_prog((char *)"Can\'t open file for both reading and writing");
  } else {

  }
#line 1187
  flush_buffer(b);
#line 1188
  return (file_ptrs[n].phile);
}
---------
SID [748] -> Line 1183
#line 1183
tmp___0 = strcmp((char const   *)file_ptrs[n].name, (char const   *)file_name);
---------
SID [747] -> Line -1

---------
SID [746] -> Line 1182
#line 1182
break;
---------
SID [745] -> Line 1181
#line 1181
if (! file_ptrs[n].name) {
#line 1182
  break;
} else {

}
---------
SID [744] -> Line 1179
#line 1179
break;
---------
SID [743] -> Line -1

---------
SID [742] -> Line 1179
#line 1179
if (n < 32) {

} else {
#line 1179
  break;
}
---------
SID [741] -> Line 1179
#line 1179
while (n < 32) {
#line 1181
  if (! file_ptrs[n].name) {
#line 1182
    break;
  } else {

  }
#line 1183
  tmp___0 = strcmp((char const   *)file_ptrs[n].name,
                   (char const   *)file_name);
#line 1183
  if (tmp___0) {

  } else {
#line 1185
    if (file_ptrs[n].readit != readit) {
#line 1186
      bad_prog((char *)"Can\'t open file for both reading and writing");
    } else {

    }
#line 1187
    flush_buffer(b);
#line 1188
    return (file_ptrs[n].phile);
  }
#line 1179
  n ++;
}
---------
SID [740] -> Line 1179
#line 1179
n = 0;
---------
SID [739] -> Line 1178
#line 1178
file_name = get_buffer(b);
---------
SID [738] -> Line 1177
#line 1177
add1_buffer(b, '\000');
---------
SID [737] -> Line 1176
#line 1176
add1_buffer(b, ch);
---------
SID [736] -> Line 1175
#line 1175
break;
---------
SID [735] -> Line 1175
#line 1175
break;
---------
SID [734] -> Line -1

---------
SID [733] -> Line 1175
#line 1175
if (ch != 10) {

} else {
#line 1175
  break;
}
---------
SID [732] -> Line 1175
#line 1175
if (ch != -1) {
#line 1175
  if (ch != 10) {

  } else {
#line 1175
    break;
  }
} else {
#line 1175
  break;
}
---------
SID [731] -> Line 1175
#line 1175
ch = inchar();
---------
SID [730] -> Line 1175
#line 1175
while (1) {
#line 1175
  ch = inchar();
#line 1175
  if (ch != -1) {
#line 1175
    if (ch != 10) {

    } else {
#line 1175
      break;
    }
  } else {
#line 1175
    break;
  }
#line 1176
  add1_buffer(b, ch);
}
---------
SID [729] -> Line 1174
#line 1174
b = init_buffer();
---------
SID [728] -> Line -1

---------
SID [727] -> Line 1173
#line 1173
bad_prog((char *)"missing \' \' before filename");
---------
SID [726] -> Line 1172
#line 1172
if (tmp != 32) {
#line 1173
  bad_prog((char *)"missing \' \' before filename");
} else {

}
---------
SID [725] -> Line 1172
#line 1172
tmp = inchar();
---------
SID [724] -> Line 1157
#line 1157
return (tmp);
---------
SID [723] -> Line 1156
#line 1156
flush_buffer(b);
---------
SID [722] -> Line 1155
#line 1155
tmp->next = list;
---------
SID [721] -> Line 1154
#line 1154
tmp->name = ck_strdup(tmp___3);
---------
SID [720] -> Line 1154
#line 1154
tmp___3 = get_buffer(b);
---------
SID [719] -> Line 1153
#line 1153
tmp->v_index = (int )(cmd - vec->v);
---------
SID [718] -> Line 1152
#line 1152
tmp->v = vec;
---------
SID [717] -> Line 1151
#line 1151
tmp = (struct sed_label *)tmp___2;
---------
SID [716] -> Line 1151
#line 1151
tmp___2 = ck_malloc((int )sizeof(struct sed_label ));
---------
SID [715] -> Line 1150
#line 1150
add1_buffer(b, '\000');
---------
SID [714] -> Line 1149
#line 1149
savchar(ch);
---------
SID [713] -> Line 1147
#line 1147
ch = inchar();
---------
SID [712] -> Line 1146
#line 1146
add1_buffer(b, ch);
---------
SID [711] -> Line 1144
#line 1144
break;
---------
SID [710] -> Line 1144
#line 1144
break;
---------
SID [709] -> Line 1144
#line 1144
break;
---------
SID [708] -> Line 1144
#line 1144
break;
---------
SID [707] -> Line -1

---------
SID [706] -> Line 1144
#line 1144
if (ch != 125) {

} else {
#line 1144
  break;
}
---------
SID [705] -> Line 1144
#line 1144
if (ch != 59) {
#line 1144
  if (ch != 125) {

  } else {
#line 1144
    break;
  }
} else {
#line 1144
  break;
}
---------
SID [704] -> Line 1144
#line 1144
break;
---------
SID [703] -> Line 1144
#line 1144
if ((int const   )*(*tmp___1 + ch) & 1) {
#line 1144
  break;
} else
#line 1144
if (ch != 59) {
#line 1144
  if (ch != 125) {

  } else {
#line 1144
    break;
  }
} else {
#line 1144
  break;
}
---------
SID [702] -> Line 1144
#line 1144
tmp___1 = __ctype_b_loc();
---------
SID [701] -> Line 1144
#line 1144
if (ch != 10) {
#line 1144
  tmp___1 = __ctype_b_loc();
#line 1144
  if ((int const   )*(*tmp___1 + ch) & 1) {
#line 1144
    break;
  } else
#line 1144
  if (ch != 59) {
#line 1144
    if (ch != 125) {

    } else {
#line 1144
      break;
    }
  } else {
#line 1144
    break;
  }
} else {
#line 1144
  break;
}
---------
SID [700] -> Line 1144
#line 1144
if (ch != -1) {
#line 1144
  if (ch != 10) {
#line 1144
    tmp___1 = __ctype_b_loc();
#line 1144
    if ((int const   )*(*tmp___1 + ch) & 1) {
#line 1144
      break;
    } else
#line 1144
    if (ch != 59) {
#line 1144
      if (ch != 125) {

      } else {
#line 1144
        break;
      }
    } else {
#line 1144
      break;
    }
  } else {
#line 1144
    break;
  }
} else {
#line 1144
  break;
}
---------
SID [699] -> Line 1144
#line 1144
while (1) {
#line 1144
  if (ch != -1) {
#line 1144
    if (ch != 10) {
#line 1144
      tmp___1 = __ctype_b_loc();
#line 1144
      if ((int const   )*(*tmp___1 + ch) & 1) {
#line 1144
        break;
      } else
#line 1144
      if (ch != 59) {
#line 1144
        if (ch != 125) {

        } else {
#line 1144
          break;
        }
      } else {
#line 1144
        break;
      }
    } else {
#line 1144
      break;
    }
  } else {
#line 1144
    break;
  }
#line 1146
  add1_buffer(b, ch);
#line 1147
  ch = inchar();
}
---------
SID [698] -> Line 1141
#line 1141
break;
---------
SID [697] -> Line 1141
#line 1141
break;
---------
SID [696] -> Line -1

---------
SID [695] -> Line 1141
#line 1141
if ((int const   )*(*tmp___0 + ch) & 1) {

} else {
#line 1141
  break;
}
---------
SID [694] -> Line 1141
#line 1141
tmp___0 = __ctype_b_loc();
---------
SID [693] -> Line 1141
#line 1141
if (ch != -1) {
#line 1141
  tmp___0 = __ctype_b_loc();
#line 1141
  if ((int const   )*(*tmp___0 + ch) & 1) {

  } else {
#line 1141
    break;
  }
} else {
#line 1141
  break;
}
---------
SID [692] -> Line 1141
#line 1141
ch = inchar();
---------
SID [691] -> Line 1141
#line 1141
while (1) {
#line 1141
  ch = inchar();
#line 1141
  if (ch != -1) {
#line 1141
    tmp___0 = __ctype_b_loc();
#line 1141
    if ((int const   )*(*tmp___0 + ch) & 1) {

    } else {
#line 1141
      break;
    }
  } else {
#line 1141
    break;
  }
}
---------
SID [690] -> Line 1140
#line 1140
b = init_buffer();
---------
SID [689] -> Line 1125
#line 1125
return;
---------
SID [688] -> Line 1124
#line 1124
flush_buffer(b);
---------
SID [687] -> Line -1

---------
SID [686] -> Line 1123
#line 1123
bad_prog(NO_REGEX);
---------
SID [685] -> Line 1122
#line 1122
if (! last_regex) {
#line 1123
  bad_prog(NO_REGEX);
} else {

}
---------
SID [684] -> Line 1120
#line 1120
re_compile_pattern((char const   *)tmp___7, tmp___6, last_regex);
---------
SID [683] -> Line 1120
#line 1120
tmp___7 = get_buffer(b);
---------
SID [682] -> Line 1120
#line 1120
tmp___6 = size_buffer(b);
---------
SID [681] -> Line 1119
#line 1119
last_regex->translate = (char *)0;
---------
SID [680] -> Line 1118
#line 1118
last_regex->fastmap = (char *)tmp___5;
---------
SID [679] -> Line 1118
#line 1118
tmp___5 = ck_malloc(256);
---------
SID [678] -> Line 1116
#line 1116
last_regex->buffer = (unsigned char *)tmp___4;
---------
SID [677] -> Line 1116
#line 1116
tmp___4 = ck_malloc((int )last_regex->allocated);
---------
SID [676] -> Line 1115
#line 1115
last_regex->allocated = (unsigned long )(tmp___3 + 10);
---------
SID [675] -> Line 1115
#line 1115
tmp___3 = size_buffer(b);
---------
SID [674] -> Line 1114
#line 1114
last_regex = (struct re_pattern_buffer *)tmp___2;
---------
SID [673] -> Line 1114
#line 1114
tmp___2 = ck_malloc((int )sizeof(struct re_pattern_buffer ));
---------
SID [672] -> Line 1112
#line 1112
if (tmp___8) {
#line 1114
  tmp___2 = ck_malloc((int )sizeof(struct re_pattern_buffer ));
#line 1114
  last_regex = (struct re_pattern_buffer *)tmp___2;
#line 1115
  tmp___3 = size_buffer(b);
#line 1115
  last_regex->allocated = (unsigned long )(tmp___3 + 10);
#line 1116
  tmp___4 = ck_malloc((int )last_regex->allocated);
#line 1116
  last_regex->buffer = (unsigned char *)tmp___4;
#line 1118
  tmp___5 = ck_malloc(256);
#line 1118
  last_regex->fastmap = (char *)tmp___5;
#line 1119
  last_regex->translate = (char *)0;
#line 1120
  tmp___6 = size_buffer(b);
#line 1120
  tmp___7 = get_buffer(b);
#line 1120
  re_compile_pattern((char const   *)tmp___7, tmp___6, last_regex);
} else
#line 1122
if (! last_regex) {
#line 1123
  bad_prog(NO_REGEX);
} else {

}
---------
SID [671] -> Line 1112
#line 1112
tmp___8 = size_buffer(b);
---------
SID [670] -> Line -1

---------
SID [669] -> Line 1111
#line 1111
bad_prog(BAD_EOF);
---------
SID [668] -> Line 1110
#line 1110
if (ch == -1) {
#line 1111
  bad_prog(BAD_EOF);
} else {

}
---------
SID [667] -> Line 1107
#line 1107
break;
---------
SID [666] -> Line 1106
#line 1106
add1_buffer(b, ch);
---------
SID [665] -> Line 1105
default: 
#line 1105
add1_buffer(b, '\\');
---------
SID [664] -> Line 1103
case -1: 
#line 1103
break;
---------
SID [663] -> Line 1087
#line 1087
break;
---------
SID [662] -> Line 1086
case 110: 
#line 1086
add1_buffer(b, '\n');
---------
SID [661] -> Line 1083
#line 1083
switch (ch) {
case 110: 
#line 1086
add1_buffer(b, '\n');
#line 1087
break;
case -1: 
#line 1103
break;
default: 
#line 1105
add1_buffer(b, '\\');
#line 1106
add1_buffer(b, ch);
#line 1107
break;
}
---------
SID [660] -> Line 1082
#line 1082
ch = inchar();
---------
SID [659] -> Line -1

---------
SID [658] -> Line 1080
#line 1080
continue;
---------
SID [657] -> Line 1079
#line 1079
add1_buffer(b, ch);
---------
SID [656] -> Line 1077
#line 1077
if (char_class_pos >= 0) {
#line 1079
  add1_buffer(b, ch);
#line 1080
  continue;
} else {

}
---------
SID [655] -> Line 1080
#line 1080
continue;
---------
SID [654] -> Line 1079
#line 1079
add1_buffer(b, ch);
---------
SID [653] -> Line 1077
#line 1077
if (ch != 92) {
#line 1079
  add1_buffer(b, ch);
#line 1080
  continue;
} else
#line 1077
if (char_class_pos >= 0) {
#line 1079
  add1_buffer(b, ch);
#line 1080
  continue;
} else {

}
---------
SID [652] -> Line 1074
#line 1074
continue;
---------
SID [651] -> Line 1073
#line 1073
char_class_pos = -1;
---------
SID [650] -> Line 1073
#line 1073
char_class_pos = -1;
---------
SID [649] -> Line 1073
#line 1073
char_class_pos = -1;
---------
SID [648] -> Line -1

---------
SID [647] -> Line 1069
#line 1069
if ((int )*(regexp + (char_class_pos + 1)) == 94) {

} else {
#line 1073
  char_class_pos = -1;
}
---------
SID [646] -> Line 1069
#line 1069
if (pos == char_class_pos + 2) {
#line 1069
  if ((int )*(regexp + (char_class_pos + 1)) == 94) {

  } else {
#line 1073
    char_class_pos = -1;
  }
} else {
#line 1073
  char_class_pos = -1;
}
---------
SID [645] -> Line -1

---------
SID [644] -> Line 1069
#line 1069
if (pos == char_class_pos + 1) {

} else
#line 1069
if (pos == char_class_pos + 2) {
#line 1069
  if ((int )*(regexp + (char_class_pos + 1)) == 94) {

  } else {
#line 1073
    char_class_pos = -1;
  }
} else {
#line 1073
  char_class_pos = -1;
}
---------
SID [643] -> Line 1069
#line 1069
if (char_class_pos >= 0) {
#line 1069
  if (pos == char_class_pos + 1) {

  } else
#line 1069
  if (pos == char_class_pos + 2) {
#line 1069
    if ((int )*(regexp + (char_class_pos + 1)) == 94) {

    } else {
#line 1073
      char_class_pos = -1;
    }
  } else {
#line 1073
    char_class_pos = -1;
  }
} else {
#line 1073
  char_class_pos = -1;
}
---------
SID [642] -> Line 1068
#line 1068
pos = tmp___1 - 1;
---------
SID [641] -> Line 1068
#line 1068
tmp___1 = size_buffer(b);
---------
SID [640] -> Line 1067
#line 1067
regexp = tmp___0;
---------
SID [639] -> Line 1067
#line 1067
tmp___0 = get_buffer(b);
---------
SID [638] -> Line 1065
#line 1065
add1_buffer(b, ch);
---------
SID [637] -> Line 1063
#line 1063
if (ch == 93) {
#line 1065
  add1_buffer(b, ch);
#line 1067
  tmp___0 = get_buffer(b);
#line 1067
  regexp = tmp___0;
#line 1068
  tmp___1 = size_buffer(b);
#line 1068
  pos = tmp___1 - 1;
#line 1069
  if (char_class_pos >= 0) {
#line 1069
    if (pos == char_class_pos + 1) {

    } else
#line 1069
    if (pos == char_class_pos + 2) {
#line 1069
      if ((int )*(regexp + (char_class_pos + 1)) == 94) {

      } else {
#line 1073
        char_class_pos = -1;
      }
    } else {
#line 1073
      char_class_pos = -1;
    }
  } else {
#line 1073
    char_class_pos = -1;
  }
#line 1074
  continue;
} else
#line 1077
if (ch != 92) {
#line 1079
  add1_buffer(b, ch);
#line 1080
  continue;
} else
#line 1077
if (char_class_pos >= 0) {
#line 1079
  add1_buffer(b, ch);
#line 1080
  continue;
} else {

}
---------
SID [636] -> Line 1061
#line 1061
continue;
---------
SID [635] -> Line 1060
#line 1060
add1_buffer(b, ch);
---------
SID [634] -> Line -1

---------
SID [633] -> Line 1059
#line 1059
char_class_pos = size_buffer(b);
---------
SID [632] -> Line 1058
#line 1058
if (char_class_pos < 0) {
#line 1059
  char_class_pos = size_buffer(b);
} else {

}
---------
SID [631] -> Line 1056
#line 1056
if (ch == 91) {
#line 1058
  if (char_class_pos < 0) {
#line 1059
    char_class_pos = size_buffer(b);
  } else {

  }
#line 1060
  add1_buffer(b, ch);
#line 1061
  continue;
} else
#line 1063
if (ch == 93) {
#line 1065
  add1_buffer(b, ch);
#line 1067
  tmp___0 = get_buffer(b);
#line 1067
  regexp = tmp___0;
#line 1068
  tmp___1 = size_buffer(b);
#line 1068
  pos = tmp___1 - 1;
#line 1069
  if (char_class_pos >= 0) {
#line 1069
    if (pos == char_class_pos + 1) {

    } else
#line 1069
    if (pos == char_class_pos + 2) {
#line 1069
      if ((int )*(regexp + (char_class_pos + 1)) == 94) {

      } else {
#line 1073
        char_class_pos = -1;
      }
    } else {
#line 1073
      char_class_pos = -1;
    }
  } else {
#line 1073
    char_class_pos = -1;
  }
#line 1074
  continue;
} else
#line 1077
if (ch != 92) {
#line 1079
  add1_buffer(b, ch);
#line 1080
  continue;
} else
#line 1077
if (char_class_pos >= 0) {
#line 1079
  add1_buffer(b, ch);
#line 1080
  continue;
} else {

}
---------
SID [630] -> Line 1054
#line 1054
continue;
---------
SID [629] -> Line 1053
#line 1053
add1_buffer(b, '$');
---------
SID [628] -> Line 1050
#line 1050
add1_buffer(b, '\'');
---------
SID [627] -> Line 1049
#line 1049
add1_buffer(b, '\\');
---------
SID [626] -> Line 1047
#line 1047
if (ch == slash) {
#line 1049
  add1_buffer(b, '\\');
#line 1050
  add1_buffer(b, '\'');
} else {
#line 1053
  add1_buffer(b, '$');
}
---------
SID [625] -> Line 1046
#line 1046
savchar(ch);
---------
SID [624] -> Line 1045
#line 1045
ch = inchar();
---------
SID [623] -> Line 1043
#line 1043
if (ch == 36) {
#line 1045
  ch = inchar();
#line 1046
  savchar(ch);
#line 1047
  if (ch == slash) {
#line 1049
    add1_buffer(b, '\\');
#line 1050
    add1_buffer(b, '\'');
  } else {
#line 1053
    add1_buffer(b, '$');
  }
#line 1054
  continue;
} else
#line 1056
if (ch == 91) {
#line 1058
  if (char_class_pos < 0) {
#line 1059
    char_class_pos = size_buffer(b);
  } else {

  }
#line 1060
  add1_buffer(b, ch);
#line 1061
  continue;
} else
#line 1063
if (ch == 93) {
#line 1065
  add1_buffer(b, ch);
#line 1067
  tmp___0 = get_buffer(b);
#line 1067
  regexp = tmp___0;
#line 1068
  tmp___1 = size_buffer(b);
#line 1068
  pos = tmp___1 - 1;
#line 1069
  if (char_class_pos >= 0) {
#line 1069
    if (pos == char_class_pos + 1) {

    } else
#line 1069
    if (pos == char_class_pos + 2) {
#line 1069
      if ((int )*(regexp + (char_class_pos + 1)) == 94) {

      } else {
#line 1073
        char_class_pos = -1;
      }
    } else {
#line 1073
      char_class_pos = -1;
    }
  } else {
#line 1073
    char_class_pos = -1;
  }
#line 1074
  continue;
} else
#line 1077
if (ch != 92) {
#line 1079
  add1_buffer(b, ch);
#line 1080
  continue;
} else
#line 1077
if (char_class_pos >= 0) {
#line 1079
  add1_buffer(b, ch);
#line 1080
  continue;
} else {

}
---------
SID [622] -> Line 1041
#line 1041
continue;
---------
SID [621] -> Line 1040
#line 1040
add1_buffer(b, ch);
---------
SID [620] -> Line 1037
#line 1037
add1_buffer(b, '`');
---------
SID [619] -> Line 1036
#line 1036
add1_buffer(b, '\\');
---------
SID [618] -> Line 1034
#line 1034
if (tmp == 0) {
#line 1036
  add1_buffer(b, '\\');
#line 1037
  add1_buffer(b, '`');
} else {
#line 1040
  add1_buffer(b, ch);
}
---------
SID [617] -> Line 1034
#line 1034
tmp = size_buffer(b);
---------
SID [616] -> Line 1032
#line 1032
if (ch == 94) {
#line 1034
  tmp = size_buffer(b);
#line 1034
  if (tmp == 0) {
#line 1036
    add1_buffer(b, '\\');
#line 1037
    add1_buffer(b, '`');
  } else {
#line 1040
    add1_buffer(b, ch);
  }
#line 1041
  continue;
} else
#line 1043
if (ch == 36) {
#line 1045
  ch = inchar();
#line 1046
  savchar(ch);
#line 1047
  if (ch == slash) {
#line 1049
    add1_buffer(b, '\\');
#line 1050
    add1_buffer(b, '\'');
  } else {
#line 1053
    add1_buffer(b, '$');
  }
#line 1054
  continue;
} else
#line 1056
if (ch == 91) {
#line 1058
  if (char_class_pos < 0) {
#line 1059
    char_class_pos = size_buffer(b);
  } else {

  }
#line 1060
  add1_buffer(b, ch);
#line 1061
  continue;
} else
#line 1063
if (ch == 93) {
#line 1065
  add1_buffer(b, ch);
#line 1067
  tmp___0 = get_buffer(b);
#line 1067
  regexp = tmp___0;
#line 1068
  tmp___1 = size_buffer(b);
#line 1068
  pos = tmp___1 - 1;
#line 1069
  if (char_class_pos >= 0) {
#line 1069
    if (pos == char_class_pos + 1) {

    } else
#line 1069
    if (pos == char_class_pos + 2) {
#line 1069
      if ((int )*(regexp + (char_class_pos + 1)) == 94) {

      } else {
#line 1073
        char_class_pos = -1;
      }
    } else {
#line 1073
      char_class_pos = -1;
    }
  } else {
#line 1073
    char_class_pos = -1;
  }
#line 1074
  continue;
} else
#line 1077
if (ch != 92) {
#line 1079
  add1_buffer(b, ch);
#line 1080
  continue;
} else
#line 1077
if (char_class_pos >= 0) {
#line 1079
  add1_buffer(b, ch);
#line 1080
  continue;
} else {

}
---------
SID [615] -> Line 1030
#line 1030
break;
---------
SID [614] -> Line 1030
#line 1030
break;
---------
SID [613] -> Line -1

---------
SID [612] -> Line 1030
#line 1030
if (char_class_pos >= 0) {

} else {
#line 1030
  break;
}
---------
SID [611] -> Line -1

---------
SID [610] -> Line 1030
#line 1030
if (ch != slash) {

} else
#line 1030
if (char_class_pos >= 0) {

} else {
#line 1030
  break;
}
---------
SID [609] -> Line 1030
#line 1030
if (ch != -1) {
#line 1030
  if (ch != slash) {

  } else
#line 1030
  if (char_class_pos >= 0) {

  } else {
#line 1030
    break;
  }
} else {
#line 1030
  break;
}
---------
SID [608] -> Line 1030
#line 1030
ch = inchar();
---------
SID [607] -> Line 1030
#line 1030
while (1) {
#line 1030
  ch = inchar();
#line 1030
  if (ch != -1) {
#line 1030
    if (ch != slash) {

    } else
#line 1030
    if (char_class_pos >= 0) {

    } else {
#line 1030
      break;
    }
  } else {
#line 1030
    break;
  }
#line 1032
  if (ch == 94) {
#line 1034
    tmp = size_buffer(b);
#line 1034
    if (tmp == 0) {
#line 1036
      add1_buffer(b, '\\');
#line 1037
      add1_buffer(b, '`');
    } else {
#line 1040
      add1_buffer(b, ch);
    }
#line 1041
    continue;
  } else
#line 1043
  if (ch == 36) {
#line 1045
    ch = inchar();
#line 1046
    savchar(ch);
#line 1047
    if (ch == slash) {
#line 1049
      add1_buffer(b, '\\');
#line 1050
      add1_buffer(b, '\'');
    } else {
#line 1053
      add1_buffer(b, '$');
    }
#line 1054
    continue;
  } else
#line 1056
  if (ch == 91) {
#line 1058
    if (char_class_pos < 0) {
#line 1059
      char_class_pos = size_buffer(b);
    } else {

    }
#line 1060
    add1_buffer(b, ch);
#line 1061
    continue;
  } else
#line 1063
  if (ch == 93) {
#line 1065
    add1_buffer(b, ch);
#line 1067
    tmp___0 = get_buffer(b);
#line 1067
    regexp = tmp___0;
#line 1068
    tmp___1 = size_buffer(b);
#line 1068
    pos = tmp___1 - 1;
#line 1069
    if (char_class_pos >= 0) {
#line 1069
      if (pos == char_class_pos + 1) {

      } else
#line 1069
      if (pos == char_class_pos + 2) {
#line 1069
        if ((int )*(regexp + (char_class_pos + 1)) == 94) {

        } else {
#line 1073
          char_class_pos = -1;
        }
      } else {
#line 1073
        char_class_pos = -1;
      }
    } else {
#line 1073
      char_class_pos = -1;
    }
#line 1074
    continue;
  } else
#line 1077
  if (ch != 92) {
#line 1079
    add1_buffer(b, ch);
#line 1080
    continue;
  } else
#line 1077
  if (char_class_pos >= 0) {
#line 1079
    add1_buffer(b, ch);
#line 1080
    continue;
  } else {

  }
#line 1082
  ch = inchar();
#line 1083
  switch (ch) {
  case 110: 
#line 1086
  add1_buffer(b, '\n');
#line 1087
  break;
  case -1: 
#line 1103
  break;
  default: 
#line 1105
  add1_buffer(b, '\\');
#line 1106
  add1_buffer(b, ch);
#line 1107
  break;
  }
}
---------
SID [606] -> Line 1029
#line 1029
b = init_buffer();
---------
SID [605] -> Line 1027
#line 1027
char_class_pos = -1;
---------
SID [604] -> Line 1018
#line 1018
return (0);
---------
SID [603] -> Line 1017
#line 1017
savchar(ch);
---------
SID [602] -> Line 1014
#line 1014
return (1);
---------
SID [601] -> Line 1013
#line 1013
savchar(ch);
---------
SID [600] -> Line 1010
#line 1010
break;
---------
SID [599] -> Line 1010
#line 1010
break;
---------
SID [598] -> Line -1

---------
SID [597] -> Line 1010
#line 1010
if ((int const   )*(*tmp___2 + ch) & 1) {

} else {
#line 1010
  break;
}
---------
SID [596] -> Line 1010
#line 1010
tmp___2 = __ctype_b_loc();
---------
SID [595] -> Line 1010
#line 1010
if (ch != -1) {
#line 1010
  tmp___2 = __ctype_b_loc();
#line 1010
  if ((int const   )*(*tmp___2 + ch) & 1) {

  } else {
#line 1010
    break;
  }
} else {
#line 1010
  break;
}
---------
SID [594] -> Line 1011
#line 1011
ch = inchar();
---------
SID [593] -> Line 1010
#line 1010
while (1) {
#line 1011
  ch = inchar();
#line 1010
  if (ch != -1) {
#line 1010
    tmp___2 = __ctype_b_loc();
#line 1010
    if ((int const   )*(*tmp___2 + ch) & 1) {

    } else {
#line 1010
      break;
    }
  } else {
#line 1010
    break;
  }
}
---------
SID [592] -> Line 1009
#line 1009
addr->addr_type = 3;
---------
SID [591] -> Line 1007
#line 1007
if (ch == 36) {
#line 1009
  addr->addr_type = 3;
#line 1010
  while (1) {
#line 1011
    ch = inchar();
#line 1010
    if (ch != -1) {
#line 1010
      tmp___2 = __ctype_b_loc();
#line 1010
      if ((int const   )*(*tmp___2 + ch) & 1) {

      } else {
#line 1010
        break;
      }
    } else {
#line 1010
      break;
    }
  }
#line 1013
  savchar(ch);
#line 1014
  return (1);
} else {
#line 1017
  savchar(ch);
}
---------
SID [590] -> Line 1005
#line 1005
return (1);
---------
SID [589] -> Line 1004
#line 1004
savchar(ch);
---------
SID [588] -> Line 1001
#line 1001
break;
---------
SID [587] -> Line 1001
#line 1001
break;
---------
SID [586] -> Line -1

---------
SID [585] -> Line 1001
#line 1001
if ((int const   )*(*tmp___1 + ch) & 1) {

} else {
#line 1001
  break;
}
---------
SID [584] -> Line 1001
#line 1001
tmp___1 = __ctype_b_loc();
---------
SID [583] -> Line 1001
#line 1001
if (ch != -1) {
#line 1001
  tmp___1 = __ctype_b_loc();
#line 1001
  if ((int const   )*(*tmp___1 + ch) & 1) {

  } else {
#line 1001
    break;
  }
} else {
#line 1001
  break;
}
---------
SID [582] -> Line 1002
#line 1002
ch = inchar();
---------
SID [581] -> Line 1001
#line 1001
while (1) {
#line 1002
  ch = inchar();
#line 1001
  if (ch != -1) {
#line 1001
    tmp___1 = __ctype_b_loc();
#line 1001
    if ((int const   )*(*tmp___1 + ch) & 1) {

    } else {
#line 1001
      break;
    }
  } else {
#line 1001
    break;
  }
}
---------
SID [580] -> Line 1000
#line 1000
addr->addr_regex = last_regex;
---------
SID [579] -> Line 999
#line 999
compile_regex(ch);
---------
SID [578] -> Line -1

---------
SID [577] -> Line 998
#line 998
ch = inchar();
---------
SID [576] -> Line 997
#line 997
if (ch == 92) {
#line 998
  ch = inchar();
} else {

}
---------
SID [575] -> Line 996
_L: /* CIL Label */ 
#line 996
addr->addr_type = 2;
---------
SID [574] -> Line 994
#line 994
if (ch == 92) {
  _L: /* CIL Label */ 
#line 996
  addr->addr_type = 2;
#line 997
  if (ch == 92) {
#line 998
    ch = inchar();
  } else {

  }
#line 999
  compile_regex(ch);
#line 1000
  addr->addr_regex = last_regex;
#line 1001
  while (1) {
#line 1002
    ch = inchar();
#line 1001
    if (ch != -1) {
#line 1001
      tmp___1 = __ctype_b_loc();
#line 1001
      if ((int const   )*(*tmp___1 + ch) & 1) {

      } else {
#line 1001
        break;
      }
    } else {
#line 1001
      break;
    }
  }
#line 1004
  savchar(ch);
#line 1005
  return (1);
} else
#line 1007
if (ch == 36) {
#line 1009
  addr->addr_type = 3;
#line 1010
  while (1) {
#line 1011
    ch = inchar();
#line 1010
    if (ch != -1) {
#line 1010
      tmp___2 = __ctype_b_loc();
#line 1010
      if ((int const   )*(*tmp___2 + ch) & 1) {

      } else {
#line 1010
        break;
      }
    } else {
#line 1010
      break;
    }
  }
#line 1013
  savchar(ch);
#line 1014
  return (1);
} else {
#line 1017
  savchar(ch);
}
---------
SID [573] -> Line 994
#line 994
goto _L;
---------
SID [572] -> Line 994
#line 994
if (ch == 47) {
#line 994
  goto _L;
} else
#line 994
if (ch == 92) {
  _L: /* CIL Label */ 
#line 996
  addr->addr_type = 2;
#line 997
  if (ch == 92) {
#line 998
    ch = inchar();
  } else {

  }
#line 999
  compile_regex(ch);
#line 1000
  addr->addr_regex = last_regex;
#line 1001
  while (1) {
#line 1002
    ch = inchar();
#line 1001
    if (ch != -1) {
#line 1001
      tmp___1 = __ctype_b_loc();
#line 1001
      if ((int const   )*(*tmp___1 + ch) & 1) {

      } else {
#line 1001
        break;
      }
    } else {
#line 1001
      break;
    }
  }
#line 1004
  savchar(ch);
#line 1005
  return (1);
} else
#line 1007
if (ch == 36) {
#line 1009
  addr->addr_type = 3;
#line 1010
  while (1) {
#line 1011
    ch = inchar();
#line 1010
    if (ch != -1) {
#line 1010
      tmp___2 = __ctype_b_loc();
#line 1010
      if ((int const   )*(*tmp___2 + ch) & 1) {

      } else {
#line 1010
        break;
      }
    } else {
#line 1010
      break;
    }
  }
#line 1013
  savchar(ch);
#line 1014
  return (1);
} else {
#line 1017
  savchar(ch);
}
---------
SID [571] -> Line 992
#line 992
return (1);
---------
SID [570] -> Line 991
#line 991
addr->addr_number = num;
---------
SID [569] -> Line 990
#line 990
addr->addr_type = 1;
---------
SID [568] -> Line 989
#line 989
savchar(ch);
---------
SID [567] -> Line 988
#line 988
ch = inchar();
---------
SID [566] -> Line 987
#line 987
break;
---------
SID [565] -> Line 987
#line 987
break;
---------
SID [564] -> Line -1

---------
SID [563] -> Line 987
#line 987
if ((int const   )*(*tmp___0 + ch) & 1) {

} else {
#line 987
  break;
}
---------
SID [562] -> Line 987
#line 987
tmp___0 = __ctype_b_loc();
---------
SID [561] -> Line 987
#line 987
if (ch != -1) {
#line 987
  tmp___0 = __ctype_b_loc();
#line 987
  if ((int const   )*(*tmp___0 + ch) & 1) {

  } else {
#line 987
    break;
  }
} else {
#line 987
  break;
}
---------
SID [560] -> Line 987
#line 987
while (1) {
#line 987
  if (ch != -1) {
#line 987
    tmp___0 = __ctype_b_loc();
#line 987
    if ((int const   )*(*tmp___0 + ch) & 1) {

    } else {
#line 987
      break;
    }
  } else {
#line 987
    break;
  }
#line 988
  ch = inchar();
}
---------
SID [559] -> Line 986
#line 986
num = (num * 10 + ch) - 48;
---------
SID [558] -> Line 985
#line 985
break;
---------
SID [557] -> Line 985
#line 985
break;
---------
SID [556] -> Line -1

---------
SID [555] -> Line 985
#line 985
if ((int const   )*(*tmp + ch) & 2048) {

} else {
#line 985
  break;
}
---------
SID [554] -> Line 985
#line 985
tmp = __ctype_b_loc();
---------
SID [553] -> Line 985
#line 985
if (ch != -1) {
#line 985
  tmp = __ctype_b_loc();
#line 985
  if ((int const   )*(*tmp + ch) & 2048) {

  } else {
#line 985
    break;
  }
} else {
#line 985
  break;
}
---------
SID [552] -> Line 985
#line 985
ch = inchar();
---------
SID [551] -> Line 985
#line 985
while (1) {
#line 985
  ch = inchar();
#line 985
  if (ch != -1) {
#line 985
    tmp = __ctype_b_loc();
#line 985
    if ((int const   )*(*tmp + ch) & 2048) {

    } else {
#line 985
      break;
    }
  } else {
#line 985
    break;
  }
#line 986
  num = (num * 10 + ch) - 48;
}
---------
SID [550] -> Line 984
#line 984
num = ch - 48;
---------
SID [549] -> Line 982
#line 982
if ((int const   )*(*tmp___3 + ch) & 2048) {
#line 984
  num = ch - 48;
#line 985
  while (1) {
#line 985
    ch = inchar();
#line 985
    if (ch != -1) {
#line 985
      tmp = __ctype_b_loc();
#line 985
      if ((int const   )*(*tmp + ch) & 2048) {

      } else {
#line 985
        break;
      }
    } else {
#line 985
      break;
    }
#line 986
    num = (num * 10 + ch) - 48;
  }
#line 987
  while (1) {
#line 987
    if (ch != -1) {
#line 987
      tmp___0 = __ctype_b_loc();
#line 987
      if ((int const   )*(*tmp___0 + ch) & 1) {

      } else {
#line 987
        break;
      }
    } else {
#line 987
      break;
    }
#line 988
    ch = inchar();
  }
#line 989
  savchar(ch);
#line 990
  addr->addr_type = 1;
#line 991
  addr->addr_number = num;
#line 992
  return (1);
} else
#line 994
if (ch == 47) {
#line 994
  goto _L;
} else
#line 994
if (ch == 92) {
  _L: /* CIL Label */ 
#line 996
  addr->addr_type = 2;
#line 997
  if (ch == 92) {
#line 998
    ch = inchar();
  } else {

  }
#line 999
  compile_regex(ch);
#line 1000
  addr->addr_regex = last_regex;
#line 1001
  while (1) {
#line 1002
    ch = inchar();
#line 1001
    if (ch != -1) {
#line 1001
      tmp___1 = __ctype_b_loc();
#line 1001
      if ((int const   )*(*tmp___1 + ch) & 1) {

      } else {
#line 1001
        break;
      }
    } else {
#line 1001
      break;
    }
  }
#line 1004
  savchar(ch);
#line 1005
  return (1);
} else
#line 1007
if (ch == 36) {
#line 1009
  addr->addr_type = 3;
#line 1010
  while (1) {
#line 1011
    ch = inchar();
#line 1010
    if (ch != -1) {
#line 1010
      tmp___2 = __ctype_b_loc();
#line 1010
      if ((int const   )*(*tmp___2 + ch) & 1) {

      } else {
#line 1010
        break;
      }
    } else {
#line 1010
      break;
    }
  }
#line 1013
  savchar(ch);
#line 1014
  return (1);
} else {
#line 1017
  savchar(ch);
}
---------
SID [548] -> Line 982
#line 982
tmp___3 = __ctype_b_loc();
---------
SID [547] -> Line 980
#line 980
ch = inchar();
---------
SID [546] -> Line 966
#line 966
return;
---------
SID [545] -> Line 965
#line 965
*prog_cur = (unsigned char )ch;
---------
SID [544] -> Line 965
#line 965
prog_cur --;
---------
SID [543] -> Line 963
#line 963
ungetc(ch, prog_file);
---------
SID [542] -> Line 962
#line 962
if (prog_file) {
#line 963
  ungetc(ch, prog_file);
} else {
#line 965
  prog_cur --;
#line 965
  *prog_cur = (unsigned char )ch;
}
---------
SID [541] -> Line -1

---------
SID [540] -> Line -1

---------
SID [539] -> Line 961
#line 961
prog_line --;
---------
SID [538] -> Line 960
#line 960
if (prog_line > 1) {
#line 961
  prog_line --;
} else {

}
---------
SID [537] -> Line 960
#line 960
if (ch == 10) {
#line 960
  if (prog_line > 1) {
#line 961
    prog_line --;
  } else {

  }
} else {

}
---------
SID [536] -> Line -1

---------
SID [535] -> Line 959
#line 959
return;
---------
SID [534] -> Line 958
#line 958
if (ch == -1) {
#line 959
  return;
} else {

}
---------
SID [533] -> Line 949
#line 949
return (ch);
---------
SID [532] -> Line -1

---------
SID [531] -> Line -1

---------
SID [530] -> Line 948
#line 948
prog_line ++;
---------
SID [529] -> Line 947
#line 947
if (prog_line) {
#line 948
  prog_line ++;
} else {

}
---------
SID [528] -> Line 947
#line 947
if (ch == 10) {
#line 947
  if (prog_line) {
#line 948
    prog_line ++;
  } else {

  }
} else {

}
---------
SID [527] -> Line 945
#line 945
ch = (int )*tmp___0;
---------
SID [526] -> Line 945
#line 945
prog_cur ++;
---------
SID [525] -> Line 945
#line 945
tmp___0 = prog_cur;
---------
SID [524] -> Line 942
#line 942
prog_cur = (unsigned char *)0;
---------
SID [523] -> Line 941
#line 941
ch = -1;
---------
SID [522] -> Line 939
#line 939
if ((unsigned long )prog_cur == (unsigned long )prog_end) {
#line 941
  ch = -1;
#line 942
  prog_cur = (unsigned char *)0;
} else {
#line 945
  tmp___0 = prog_cur;
#line 945
  prog_cur ++;
#line 945
  ch = (int )*tmp___0;
}
---------
SID [521] -> Line 938
#line 938
return (-1);
---------
SID [520] -> Line 937
#line 937
if (! prog_cur) {
#line 938
  return (-1);
} else
#line 939
if ((unsigned long )prog_cur == (unsigned long )prog_end) {
#line 941
  ch = -1;
#line 942
  prog_cur = (unsigned char *)0;
} else {
#line 945
  tmp___0 = prog_cur;
#line 945
  prog_cur ++;
#line 945
  ch = (int )*tmp___0;
}
---------
SID [519] -> Line 933
#line 933
ch = _IO_getc(prog_file);
---------
SID [518] -> Line 931
#line 931
return (-1);
---------
SID [517] -> Line 930
#line 930
if (tmp) {
#line 931
  return (-1);
} else {
#line 933
  ch = _IO_getc(prog_file);
}
---------
SID [516] -> Line 930
#line 930
tmp = feof(prog_file);
---------
SID [515] -> Line 928
#line 928
if (prog_file) {
#line 930
  tmp = feof(prog_file);
#line 930
  if (tmp) {
#line 931
    return (-1);
  } else {
#line 933
    ch = _IO_getc(prog_file);
  }
} else
#line 937
if (! prog_cur) {
#line 938
  return (-1);
} else
#line 939
if ((unsigned long )prog_cur == (unsigned long )prog_end) {
#line 941
  ch = -1;
#line 942
  prog_cur = (unsigned char *)0;
} else {
#line 945
  tmp___0 = prog_cur;
#line 945
  prog_cur ++;
#line 945
  ch = (int )*tmp___0;
}
---------
SID [514] -> Line 918
#line 918
exit(1);
---------
SID [513] -> Line 917
#line 917
fprintf((FILE */* __restrict  */)stdout,
        (char const   */* __restrict  */)"%s: %s\n", myname, why);
---------
SID [512] -> Line 914
#line 914
fprintf((FILE */* __restrict  */)stdout,
        (char const   */* __restrict  */)"%s: file %s line %d: %s\n", myname,
        prog_name, prog_line, why);
---------
SID [511] -> Line 913
#line 913
if (prog_line > 0) {
#line 914
  fprintf((FILE */* __restrict  */)stdout,
          (char const   */* __restrict  */)"%s: file %s line %d: %s\n",
          myname, prog_name, prog_line, why);
} else {
#line 917
  fprintf((FILE */* __restrict  */)stdout,
          (char const   */* __restrict  */)"%s: %s\n", myname, why);
}
---------
SID [510] -> Line 905
#line 905
return (vector);
---------
SID [509] -> Line -1

---------
SID [508] -> Line 903
#line 903
bad_prog((char *)"Unmatched `{\'");
---------
SID [507] -> Line 902
#line 902
prog_line = open_line;
---------
SID [506] -> Line 900
#line 900
if (program_depth) {
#line 902
  prog_line = open_line;
#line 903
  bad_prog((char *)"Unmatched `{\'");
} else {

}
---------
SID [505] -> Line 897
default: 
#line 897
bad_prog((char *)"Unknown command");
---------
SID [504] -> Line 894
#line 894
break;
---------
SID [503] -> Line -1

---------
SID [502] -> Line -1

---------
SID [501] -> Line -1

---------
SID [500] -> Line 893
#line 893
bad_prog(LINE_JUNK);
---------
SID [499] -> Line 892
#line 892
if (ch != 59) {
#line 893
  bad_prog(LINE_JUNK);
} else {

}
---------
SID [498] -> Line 892
#line 892
if (ch != 10) {
#line 892
  if (ch != 59) {
#line 893
    bad_prog(LINE_JUNK);
  } else {

  }
} else {

}
---------
SID [497] -> Line 892
#line 892
if (ch != -1) {
#line 892
  if (ch != 10) {
#line 892
    if (ch != 59) {
#line 893
      bad_prog(LINE_JUNK);
    } else {

    }
  } else {

  }
} else {

}
---------
SID [496] -> Line 892
#line 892
ch = inchar();
---------
SID [495] -> Line 893
#line 893
bad_prog(LINE_JUNK);
---------
SID [494] -> Line 892
#line 892
if (tmp___19 != slash) {
#line 893
  bad_prog(LINE_JUNK);
} else {
#line 892
  ch = inchar();
#line 892
  if (ch != -1) {
#line 892
    if (ch != 10) {
#line 892
      if (ch != 59) {
#line 893
        bad_prog(LINE_JUNK);
      } else {

      }
    } else {

    }
  } else {

  }
}
---------
SID [493] -> Line 892
#line 892
tmp___19 = inchar();
---------
SID [492] -> Line 891
#line 891
flush_buffer(b);
---------
SID [491] -> Line 882
#line 882
num --;
---------
SID [490] -> Line 889
#line 889
*(cur_cmd->x.translate + *tmp___18) = (unsigned char )ch;
---------
SID [489] -> Line 889
#line 889
string ++;
---------
SID [488] -> Line 889
#line 889
tmp___18 = string;
---------
SID [487] -> Line -1

---------
SID [486] -> Line 888
#line 888
bad_prog((char *)"strings for y command are different lengths");
---------
SID [485] -> Line 887
#line 887
if (ch == slash) {
#line 888
  bad_prog((char *)"strings for y command are different lengths");
} else {

}
---------
SID [484] -> Line -1

---------
SID [483] -> Line 886
#line 886
bad_prog(BAD_EOF);
---------
SID [482] -> Line 885
#line 885
if (ch == -1) {
#line 886
  bad_prog(BAD_EOF);
} else {

}
---------
SID [481] -> Line 884
#line 884
ch = inchar();
---------
SID [480] -> Line 882
#line 882
break;
---------
SID [479] -> Line -1

---------
SID [478] -> Line 882
#line 882
if (num) {

} else {
#line 882
  break;
}
---------
SID [477] -> Line 882
#line 882
while (num) {
#line 884
  ch = inchar();
#line 885
  if (ch == -1) {
#line 886
    bad_prog(BAD_EOF);
  } else {

  }
#line 887
  if (ch == slash) {
#line 888
    bad_prog((char *)"strings for y command are different lengths");
  } else {

  }
#line 889
  tmp___18 = string;
#line 889
  string ++;
#line 889
  *(cur_cmd->x.translate + *tmp___18) = (unsigned char )ch;
#line 882
  num --;
}
---------
SID [476] -> Line 882
#line 882
num = size_buffer(b);
---------
SID [475] -> Line 881
#line 881
string = (unsigned char *)tmp___17;
---------
SID [474] -> Line 881
#line 881
tmp___17 = get_buffer(b);
---------
SID [473] -> Line 880
#line 880
cur_cmd->x.translate = string;
---------
SID [472] -> Line 879
#line 879
add1_buffer(b, ch);
---------
SID [471] -> Line 878
#line 878
break;
---------
SID [470] -> Line 878
#line 878
break;
---------
SID [469] -> Line -1

---------
SID [468] -> Line 878
#line 878
if (ch != slash) {

} else {
#line 878
  break;
}
---------
SID [467] -> Line 878
#line 878
if (ch != -1) {
#line 878
  if (ch != slash) {

  } else {
#line 878
    break;
  }
} else {
#line 878
  break;
}
---------
SID [466] -> Line 878
#line 878
ch = inchar();
---------
SID [465] -> Line 878
#line 878
while (1) {
#line 878
  ch = inchar();
#line 878
  if (ch != -1) {
#line 878
    if (ch != slash) {

    } else {
#line 878
      break;
    }
  } else {
#line 878
    break;
  }
#line 879
  add1_buffer(b, ch);
}
---------
SID [464] -> Line 877
#line 877
slash = inchar();
---------
SID [463] -> Line 876
#line 876
b = init_buffer();
---------
SID [462] -> Line 874
#line 874
num ++;
---------
SID [461] -> Line 875
#line 875
*(string + num) = (unsigned char )num;
---------
SID [460] -> Line 874
#line 874
break;
---------
SID [459] -> Line -1

---------
SID [458] -> Line 874
#line 874
if (num < 256) {

} else {
#line 874
  break;
}
---------
SID [457] -> Line 874
#line 874
while (num < 256) {
#line 875
  *(string + num) = (unsigned char )num;
#line 874
  num ++;
}
---------
SID [456] -> Line 874
#line 874
num = 0;
---------
SID [455] -> Line 873
#line 873
string = (unsigned char *)tmp___16;
---------
SID [454] -> Line 873
#line 873
tmp___16 = ck_malloc(256);
---------
SID [453] -> Line 872
case 121: 
#line 872
cur_cmd->cmd = (char )ch;
---------
SID [452] -> Line 869
#line 869
break;
---------
SID [451] -> Line -1

---------
SID [450] -> Line 868
#line 868
break;
---------
SID [449] -> Line 867
#line 867
if (ch == -1) {
#line 868
  break;
} else {

}
---------
SID [448] -> Line 812
#line 812
break;
---------
SID [447] -> Line 812
#line 812
break;
---------
SID [446] -> Line 812
#line 812
break;
---------
SID [445] -> Line -1

---------
SID [444] -> Line 812
#line 812
if (ch != 59) {

} else {
#line 812
  break;
}
---------
SID [443] -> Line 812
#line 812
if (ch != 10) {
#line 812
  if (ch != 59) {

  } else {
#line 812
    break;
  }
} else {
#line 812
  break;
}
---------
SID [442] -> Line 812
#line 812
if (ch != -1) {
#line 812
  if (ch != 10) {
#line 812
    if (ch != 59) {

    } else {
#line 812
      break;
    }
  } else {
#line 812
    break;
  }
} else {
#line 812
  break;
}
---------
SID [441] -> Line 863
#line 863
break;
---------
SID [440] -> Line 862
default: 
#line 862
bad_prog((char *)"Unknown option to \'s\'");
---------
SID [439] -> Line 860
case -1: 
case 59: 
case 10: 
#line 860
break;
---------
SID [438] -> Line 856
#line 856
break;
---------
SID [437] -> Line 855
#line 855
cur_cmd->x.cmd_regex.numb = num;
---------
SID [436] -> Line 854
#line 854
savchar(ch);
---------
SID [435] -> Line 852
#line 852
ch = inchar();
---------
SID [434] -> Line 851
#line 851
num = (num * 10 + ch) - 48;
---------
SID [433] -> Line 849
#line 849
break;
---------
SID [432] -> Line -1

---------
SID [431] -> Line 849
#line 849
if ((int const   )*(*tmp___15 + ch) & 2048) {

} else {
#line 849
  break;
}
---------
SID [430] -> Line 849
#line 849
tmp___15 = __ctype_b_loc();
---------
SID [429] -> Line 849
#line 849
while (1) {
#line 849
  tmp___15 = __ctype_b_loc();
#line 849
  if ((int const   )*(*tmp___15 + ch) & 2048) {

  } else {
#line 849
    break;
  }
#line 851
  num = (num * 10 + ch) - 48;
#line 852
  ch = inchar();
}
---------
SID [428] -> Line 848
#line 848
num = 0;
---------
SID [427] -> Line -1

---------
SID [426] -> Line 847
#line 847
cur_cmd->x.cmd_regex.flags |= 8;
---------
SID [425] -> Line 846
#line 846
if ((cur_cmd->x.cmd_regex.flags & 1) == 0) {
#line 847
  cur_cmd->x.cmd_regex.flags |= 8;
} else {

}
---------
SID [424] -> Line -1

---------
SID [423] -> Line 845
#line 845
bad_prog((char *)"multiple number options to \'s\' command");
---------
SID [422] -> Line 844
case 57: 
case 56: 
case 55: 
case 54: 
case 53: 
case 52: 
case 51: 
case 50: 
case 49: 
case 48: 
#line 844
if (cur_cmd->x.cmd_regex.flags & 8) {
#line 845
  bad_prog((char *)"multiple number options to \'s\' command");
} else {

}
---------
SID [421] -> Line 833
#line 833
break;
---------
SID [420] -> Line 832
#line 832
ch = '\n';
---------
SID [419] -> Line 831
#line 831
cur_cmd->x.cmd_regex.wio_file = compile_filename(0);
---------
SID [418] -> Line 830
case 119: 
#line 830
cur_cmd->x.cmd_regex.flags |= 4;
---------
SID [417] -> Line 828
#line 828
break;
---------
SID [416] -> Line 827
#line 827
cur_cmd->x.cmd_regex.flags |= 1;
---------
SID [415] -> Line -1

---------
SID [414] -> Line 826
#line 826
bad_prog((char *)"multiple \'g\' options to \'s\' command");
---------
SID [413] -> Line 825
#line 825
if (cur_cmd->x.cmd_regex.flags & 1) {
#line 826
  bad_prog((char *)"multiple \'g\' options to \'s\' command");
} else {

}
---------
SID [412] -> Line -1

---------
SID [411] -> Line 824
#line 824
cur_cmd->x.cmd_regex.flags &= -9;
---------
SID [410] -> Line 823
case 103: 
#line 823
if (cur_cmd->x.cmd_regex.flags & 8) {
#line 824
  cur_cmd->x.cmd_regex.flags &= -9;
} else {

}
---------
SID [409] -> Line 821
#line 821
break;
---------
SID [408] -> Line 820
#line 820
cur_cmd->x.cmd_regex.flags |= 2;
---------
SID [407] -> Line -1

---------
SID [406] -> Line 819
#line 819
bad_prog((char *)"multiple \'p\' options to \'s\' command");
---------
SID [405] -> Line 818
case 112: 
#line 818
if (cur_cmd->x.cmd_regex.flags & 2) {
#line 819
  bad_prog((char *)"multiple \'p\' options to \'s\' command");
} else {

}
---------
SID [404] -> Line 815
#line 815
switch (ch) {
case 112: 
#line 818
if (cur_cmd->x.cmd_regex.flags & 2) {
#line 819
  bad_prog((char *)"multiple \'p\' options to \'s\' command");
} else {

}
#line 820
cur_cmd->x.cmd_regex.flags |= 2;
#line 821
break;
case 103: 
#line 823
if (cur_cmd->x.cmd_regex.flags & 8) {
#line 824
  cur_cmd->x.cmd_regex.flags &= -9;
} else {

}
#line 825
if (cur_cmd->x.cmd_regex.flags & 1) {
#line 826
  bad_prog((char *)"multiple \'g\' options to \'s\' command");
} else {

}
#line 827
cur_cmd->x.cmd_regex.flags |= 1;
#line 828
break;
case 119: 
#line 830
cur_cmd->x.cmd_regex.flags |= 4;
#line 831
cur_cmd->x.cmd_regex.wio_file = compile_filename(0);
#line 832
ch = '\n';
#line 833
break;
case 57: 
case 56: 
case 55: 
case 54: 
case 53: 
case 52: 
case 51: 
case 50: 
case 49: 
case 48: 
#line 844
if (cur_cmd->x.cmd_regex.flags & 8) {
#line 845
  bad_prog((char *)"multiple number options to \'s\' command");
} else {

}
#line 846
if ((cur_cmd->x.cmd_regex.flags & 1) == 0) {
#line 847
  cur_cmd->x.cmd_regex.flags |= 8;
} else {

}
#line 848
num = 0;
#line 849
while (1) {
#line 849
  tmp___15 = __ctype_b_loc();
#line 849
  if ((int const   )*(*tmp___15 + ch) & 2048) {

  } else {
#line 849
    break;
  }
#line 851
  num = (num * 10 + ch) - 48;
#line 852
  ch = inchar();
}
#line 854
savchar(ch);
#line 855
cur_cmd->x.cmd_regex.numb = num;
#line 856
break;
case -1: 
case 59: 
case 10: 
#line 860
break;
default: 
#line 862
bad_prog((char *)"Unknown option to \'s\'");
#line 863
break;
}
---------
SID [403] -> Line 814
#line 814
ch = inchar();
---------
SID [402] -> Line 812
#line 812
while (1) {
#line 814
  ch = inchar();
#line 815
  switch (ch) {
  case 112: 
#line 818
  if (cur_cmd->x.cmd_regex.flags & 2) {
#line 819
    bad_prog((char *)"multiple \'p\' options to \'s\' command");
  } else {

  }
#line 820
  cur_cmd->x.cmd_regex.flags |= 2;
#line 821
  break;
  case 103: 
#line 823
  if (cur_cmd->x.cmd_regex.flags & 8) {
#line 824
    cur_cmd->x.cmd_regex.flags &= -9;
  } else {

  }
#line 825
  if (cur_cmd->x.cmd_regex.flags & 1) {
#line 826
    bad_prog((char *)"multiple \'g\' options to \'s\' command");
  } else {

  }
#line 827
  cur_cmd->x.cmd_regex.flags |= 1;
#line 828
  break;
  case 119: 
#line 830
  cur_cmd->x.cmd_regex.flags |= 4;
#line 831
  cur_cmd->x.cmd_regex.wio_file = compile_filename(0);
#line 832
  ch = '\n';
#line 833
  break;
  case 57: 
  case 56: 
  case 55: 
  case 54: 
  case 53: 
  case 52: 
  case 51: 
  case 50: 
  case 49: 
  case 48: 
#line 844
  if (cur_cmd->x.cmd_regex.flags & 8) {
#line 845
    bad_prog((char *)"multiple number options to \'s\' command");
  } else {

  }
#line 846
  if ((cur_cmd->x.cmd_regex.flags & 1) == 0) {
#line 847
    cur_cmd->x.cmd_regex.flags |= 8;
  } else {

  }
#line 848
  num = 0;
#line 849
  while (1) {
#line 849
    tmp___15 = __ctype_b_loc();
#line 849
    if ((int const   )*(*tmp___15 + ch) & 2048) {

    } else {
#line 849
      break;
    }
#line 851
    num = (num * 10 + ch) - 48;
#line 852
    ch = inchar();
  }
#line 854
  savchar(ch);
#line 855
  cur_cmd->x.cmd_regex.numb = num;
#line 856
  break;
  case -1: 
  case 59: 
  case 10: 
#line 860
  break;
  default: 
#line 862
  bad_prog((char *)"Unknown option to \'s\'");
#line 863
  break;
  }
#line 812
  if (ch != -1) {
#line 812
    if (ch != 10) {
#line 812
      if (ch != 59) {

      } else {
#line 812
        break;
      }
    } else {
#line 812
      break;
    }
  } else {
#line 812
    break;
  }
}
---------
SID [401] -> Line -1

---------
SID [400] -> Line 811
#line 811
break;
---------
SID [399] -> Line 810
#line 810
if (ch == -1) {
#line 811
  break;
} else {

}
---------
SID [398] -> Line 808
#line 808
cur_cmd->x.cmd_regex.numb = 0;
---------
SID [397] -> Line 807
#line 807
cur_cmd->x.cmd_regex.flags = 0;
---------
SID [396] -> Line 805
#line 805
flush_buffer(b);
---------
SID [395] -> Line 804
#line 804
bcopy((void const   *)tmp___14, (void *)cur_cmd->x.cmd_regex.replacement,
      (size_t )cur_cmd->x.cmd_regex.replace_length);
---------
SID [394] -> Line 804
#line 804
tmp___14 = get_buffer(b);
---------
SID [393] -> Line 803
#line 803
cur_cmd->x.cmd_regex.replacement = (char *)tmp___13;
---------
SID [392] -> Line 803
#line 803
tmp___13 = ck_malloc(cur_cmd->x.cmd_regex.replace_length);
---------
SID [391] -> Line 802
#line 802
cur_cmd->x.cmd_regex.replace_length = size_buffer(b);
---------
SID [390] -> Line -1

---------
SID [389] -> Line 800
#line 800
bad_prog((char *)"Unterminated `s\' command");
---------
SID [388] -> Line -1

---------
SID [387] -> Line -1

---------
SID [386] -> Line 799
#line 799
prog_line --;
---------
SID [385] -> Line 798
#line 798
if (prog_line > 1) {
#line 799
  prog_line --;
} else {

}
---------
SID [384] -> Line 798
#line 798
if (ch == 10) {
#line 798
  if (prog_line > 1) {
#line 799
    prog_line --;
  } else {

  }
} else {

}
---------
SID [383] -> Line 796
#line 796
if (ch != slash) {
#line 798
  if (ch == 10) {
#line 798
    if (prog_line > 1) {
#line 799
      prog_line --;
    } else {

    }
  } else {

  }
#line 800
  bad_prog((char *)"Unterminated `s\' command");
} else {

}
---------
SID [382] -> Line 794
#line 794
add1_buffer(b, ch);
---------
SID [381] -> Line -1

---------
SID [380] -> Line 790
#line 790
add1_buffer(b, ci);
---------
SID [379] -> Line -1

---------
SID [378] -> Line 789
#line 789
add1_buffer(b, ch);
---------
SID [377] -> Line 788
#line 788
if (ci != 10) {
#line 789
  add1_buffer(b, ch);
} else {

}
---------
SID [376] -> Line 786
#line 786
if (ci != -1) {
#line 788
  if (ci != 10) {
#line 789
    add1_buffer(b, ch);
  } else {

  }
#line 790
  add1_buffer(b, ci);
} else {

}
---------
SID [375] -> Line 785
#line 785
ci = inchar();
---------
SID [374] -> Line 781
#line 781
if (ch == 92) {
#line 785
  ci = inchar();
#line 786
  if (ci != -1) {
#line 788
    if (ci != 10) {
#line 789
      add1_buffer(b, ch);
    } else {

    }
#line 790
    add1_buffer(b, ci);
  } else {

  }
} else {
#line 794
  add1_buffer(b, ch);
}
---------
SID [373] -> Line 779
#line 779
break;
---------
SID [372] -> Line 779
#line 779
break;
---------
SID [371] -> Line 779
#line 779
break;
---------
SID [370] -> Line -1

---------
SID [369] -> Line 779
#line 779
if (ch != 10) {

} else {
#line 779
  break;
}
---------
SID [368] -> Line 779
#line 779
if (ch != slash) {
#line 779
  if (ch != 10) {

  } else {
#line 779
    break;
  }
} else {
#line 779
  break;
}
---------
SID [367] -> Line 779
#line 779
if (ch != -1) {
#line 779
  if (ch != slash) {
#line 779
    if (ch != 10) {

    } else {
#line 779
      break;
    }
  } else {
#line 779
    break;
  }
} else {
#line 779
  break;
}
---------
SID [366] -> Line 779
#line 779
ch = inchar();
---------
SID [365] -> Line 779
#line 779
while (1) {
#line 779
  ch = inchar();
#line 779
  if (ch != -1) {
#line 779
    if (ch != slash) {
#line 779
      if (ch != 10) {

      } else {
#line 779
        break;
      }
    } else {
#line 779
      break;
    }
  } else {
#line 779
    break;
  }
#line 781
  if (ch == 92) {
#line 785
    ci = inchar();
#line 786
    if (ci != -1) {
#line 788
      if (ci != 10) {
#line 789
        add1_buffer(b, ch);
      } else {

      }
#line 790
      add1_buffer(b, ci);
    } else {

    }
  } else {
#line 794
    add1_buffer(b, ch);
  }
}
---------
SID [364] -> Line 778
#line 778
b = init_buffer();
---------
SID [363] -> Line 776
#line 776
cur_cmd->x.cmd_regex.regx = last_regex;
---------
SID [362] -> Line 774
#line 774
compile_regex(slash);
---------
SID [361] -> Line 773
#line 773
slash = inchar();
---------
SID [360] -> Line 772
case 115: 
#line 772
cur_cmd->cmd = (char )ch;
---------
SID [359] -> Line 769
#line 769
break;
---------
SID [358] -> Line 768
#line 768
cur_cmd->x.io_file = compile_filename(ch == 114);
---------
SID [357] -> Line 767
case 119: 
#line 767
cur_cmd->cmd = (char )ch;
---------
SID [356] -> Line -1

---------
SID [355] -> Line 764
#line 764
bad_prog(ONE_ADDR);
---------
SID [354] -> Line 763
case 114: 
#line 763
if (cur_cmd->a2.addr_type != 0) {
#line 764
  bad_prog(ONE_ADDR);
} else {

}
---------
SID [353] -> Line 760
#line 760
break;
---------
SID [352] -> Line -1

---------
SID [351] -> Line -1

---------
SID [350] -> Line -1

---------
SID [349] -> Line 759
#line 759
bad_prog(LINE_JUNK);
---------
SID [348] -> Line 758
#line 758
if (ch != -1) {
#line 759
  bad_prog(LINE_JUNK);
} else {

}
---------
SID [347] -> Line 758
#line 758
if (ch != 59) {
#line 758
  if (ch != -1) {
#line 759
    bad_prog(LINE_JUNK);
  } else {

  }
} else {

}
---------
SID [346] -> Line 758
#line 758
if (ch != 10) {
#line 758
  if (ch != 59) {
#line 758
    if (ch != -1) {
#line 759
      bad_prog(LINE_JUNK);
    } else {

    }
  } else {

  }
} else {

}
---------
SID [345] -> Line 755
#line 755
break;
---------
SID [344] -> Line 755
#line 755
break;
---------
SID [343] -> Line 755
#line 755
break;
---------
SID [342] -> Line 755
#line 755
break;
---------
SID [341] -> Line -1

---------
SID [340] -> Line 755
#line 755
if (ch != 59) {

} else {
#line 755
  break;
}
---------
SID [339] -> Line 755
#line 755
if (ch != 10) {
#line 755
  if (ch != 59) {

  } else {
#line 755
    break;
  }
} else {
#line 755
  break;
}
---------
SID [338] -> Line 755
#line 755
if ((int const   )*(*tmp___12 + ch) & 1) {
#line 755
  if (ch != 10) {
#line 755
    if (ch != 59) {

    } else {
#line 755
      break;
    }
  } else {
#line 755
    break;
  }
} else {
#line 755
  break;
}
---------
SID [337] -> Line 755
#line 755
tmp___12 = __ctype_b_loc();
---------
SID [336] -> Line 755
#line 755
if (ch != -1) {
#line 755
  tmp___12 = __ctype_b_loc();
#line 755
  if ((int const   )*(*tmp___12 + ch) & 1) {
#line 755
    if (ch != 10) {
#line 755
      if (ch != 59) {

      } else {
#line 755
        break;
      }
    } else {
#line 755
      break;
    }
  } else {
#line 755
    break;
  }
} else {
#line 755
  break;
}
---------
SID [335] -> Line 756
#line 756
ch = inchar();
---------
SID [334] -> Line 755
#line 755
while (1) {
#line 756
  ch = inchar();
#line 755
  if (ch != -1) {
#line 755
    tmp___12 = __ctype_b_loc();
#line 755
    if ((int const   )*(*tmp___12 + ch) & 1) {
#line 755
      if (ch != 10) {
#line 755
        if (ch != 59) {

        } else {
#line 755
          break;
        }
      } else {
#line 755
        break;
      }
    } else {
#line 755
      break;
    }
  } else {
#line 755
    break;
  }
}
---------
SID [333] -> Line 754
case 120: 
case 80: 
case 112: 
case 78: 
case 110: 
case 108: 
case 72: 
case 104: 
case 71: 
case 103: 
case 68: 
case 100: 
#line 754
cur_cmd->cmd = (char )ch;
---------
SID [332] -> Line -1

---------
SID [331] -> Line 740
#line 740
bad_prog(ONE_ADDR);
---------
SID [330] -> Line 739
case 61: 
case 113: 
#line 739
if (cur_cmd->a2.addr_type) {
#line 740
  bad_prog(ONE_ADDR);
} else {

}
---------
SID [329] -> Line 736
#line 736
break;
---------
SID [328] -> Line 735
#line 735
jumps = setup_jump(jumps, cur_cmd, vector);
---------
SID [327] -> Line 734
case 116: 
case 98: 
#line 734
cur_cmd->cmd = (char )ch;
---------
SID [326] -> Line 731
#line 731
break;
---------
SID [325] -> Line 730
#line 730
labels = setup_jump(labels, cur_cmd, vector);
---------
SID [324] -> Line -1

---------
SID [323] -> Line 729
#line 729
bad_prog((char *)": doesn\'t want any addresses");
---------
SID [322] -> Line 728
#line 728
if (cur_cmd->a1.addr_type != 0) {
#line 729
  bad_prog((char *)": doesn\'t want any addresses");
} else {

}
---------
SID [321] -> Line 727
case 58: 
#line 727
cur_cmd->cmd = (char)0;
---------
SID [320] -> Line 723
#line 723
return (vector);
---------
SID [319] -> Line 722
#line 722
bad_prog(LINE_JUNK);
---------
SID [318] -> Line -1

---------
SID [317] -> Line 721
#line 721
if ((int const   )*(*tmp___11 + ch) & 1) {

} else {
#line 722
  bad_prog(LINE_JUNK);
}
---------
SID [316] -> Line 721
#line 721
tmp___11 = __ctype_b_loc();
---------
SID [315] -> Line 720
#line 720
break;
---------
SID [314] -> Line 720
#line 720
break;
---------
SID [313] -> Line 720
#line 720
break;
---------
SID [312] -> Line -1

---------
SID [311] -> Line 720
#line 720
if (ch != 59) {

} else {
#line 720
  break;
}
---------
SID [310] -> Line 720
#line 720
if (ch != 10) {
#line 720
  if (ch != 59) {

  } else {
#line 720
    break;
  }
} else {
#line 720
  break;
}
---------
SID [309] -> Line 720
#line 720
if (ch != -1) {
#line 720
  if (ch != 10) {
#line 720
    if (ch != 59) {

    } else {
#line 720
      break;
    }
  } else {
#line 720
    break;
  }
} else {
#line 720
  break;
}
---------
SID [308] -> Line 720
#line 720
ch = inchar();
---------
SID [307] -> Line 720
#line 720
while (1) {
#line 720
  ch = inchar();
#line 720
  if (ch != -1) {
#line 720
    if (ch != 10) {
#line 720
      if (ch != 59) {

      } else {
#line 720
        break;
      }
    } else {
#line 720
      break;
    }
  } else {
#line 720
    break;
  }
#line 721
  tmp___11 = __ctype_b_loc();
#line 721
  if ((int const   )*(*tmp___11 + ch) & 1) {

  } else {
#line 722
    bad_prog(LINE_JUNK);
  }
}
---------
SID [306] -> Line -1

---------
SID [305] -> Line 719
#line 719
bad_prog((char *)"} doesn\'t want any addresses");
---------
SID [304] -> Line 718
#line 718
if (cur_cmd->a1.addr_type != 0) {
#line 719
  bad_prog((char *)"} doesn\'t want any addresses");
} else {

}
---------
SID [303] -> Line 717
#line 717
cur_cmd->cmd = (char )ch;
---------
SID [302] -> Line 715
#line 715
program_depth --;
---------
SID [301] -> Line -1

---------
SID [300] -> Line 714
#line 714
bad_prog((char *)"Unexpected \'}\'");
---------
SID [299] -> Line 713
case 125: 
#line 713
if (! program_depth) {
#line 714
  bad_prog((char *)"Unexpected \'}\'");
} else {

}
---------
SID [298] -> Line 711
#line 711
break;
---------
SID [297] -> Line 710
#line 710
(cur_cmd->x.sub)->return_i = vector->v_length - 1;
---------
SID [296] -> Line 709
#line 709
(cur_cmd->x.sub)->return_v = vector;
---------
SID [295] -> Line 706
#line 706
cur_cmd->x.sub = compile_program((struct vector *)0, prog_line);
---------
SID [294] -> Line 700
#line 700
program_depth ++;
---------
SID [293] -> Line 699
case 123: 
#line 699
cur_cmd->cmd = (char )ch;
---------
SID [292] -> Line 697
#line 697
break;
---------
SID [291] -> Line 696
#line 696
cur_cmd->x.cmd_txt.text = (char *)string;
---------
SID [290] -> Line 695
#line 695
cur_cmd->x.cmd_txt.text_len = num;
---------
SID [289] -> Line 694
#line 694
flush_buffer(b);
---------
SID [288] -> Line 693
#line 693
bcopy((void const   *)tmp___10, (void *)string, (size_t )num);
---------
SID [287] -> Line 693
#line 693
tmp___10 = get_buffer(b);
---------
SID [286] -> Line 692
#line 692
string = (unsigned char *)tmp___9;
---------
SID [285] -> Line 692
#line 692
tmp___9 = ck_malloc(num);
---------
SID [284] -> Line 691
#line 691
num = size_buffer(b);
---------
SID [283] -> Line -1

---------
SID [282] -> Line 690
#line 690
add1_buffer(b, ch);
---------
SID [281] -> Line 689
#line 689
if (ch != -1) {
#line 690
  add1_buffer(b, ch);
} else {

}
---------
SID [280] -> Line 687
#line 687
add1_buffer(b, ch);
---------
SID [279] -> Line -1

---------
SID [278] -> Line 686
#line 686
ch = inchar();
---------
SID [277] -> Line 685
#line 685
if (ch == 92) {
#line 686
  ch = inchar();
} else {

}
---------
SID [276] -> Line 683
#line 683
break;
---------
SID [275] -> Line 683
#line 683
break;
---------
SID [274] -> Line -1

---------
SID [273] -> Line 683
#line 683
if (ch != 10) {

} else {
#line 683
  break;
}
---------
SID [272] -> Line 683
#line 683
if (ch != -1) {
#line 683
  if (ch != 10) {

  } else {
#line 683
    break;
  }
} else {
#line 683
  break;
}
---------
SID [271] -> Line 683
#line 683
ch = inchar();
---------
SID [270] -> Line 683
#line 683
while (1) {
#line 683
  ch = inchar();
#line 683
  if (ch != -1) {
#line 683
    if (ch != 10) {

    } else {
#line 683
      break;
    }
  } else {
#line 683
    break;
  }
#line 685
  if (ch == 92) {
#line 686
    ch = inchar();
  } else {

  }
#line 687
  add1_buffer(b, ch);
}
---------
SID [269] -> Line 682
#line 682
b = init_buffer();
---------
SID [268] -> Line -1

---------
SID [267] -> Line 681
#line 681
bad_prog(LINE_JUNK);
---------
SID [266] -> Line 680
#line 680
if (tmp___8 != 10) {
#line 681
  bad_prog(LINE_JUNK);
} else {

}
---------
SID [265] -> Line 680
#line 680
tmp___8 = inchar();
---------
SID [264] -> Line 681
#line 681
bad_prog(LINE_JUNK);
---------
SID [263] -> Line 680
#line 680
if (tmp___7 != 92) {
#line 681
  bad_prog(LINE_JUNK);
} else {
#line 680
  tmp___8 = inchar();
#line 680
  if (tmp___8 != 10) {
#line 681
    bad_prog(LINE_JUNK);
  } else {

  }
}
---------
SID [262] -> Line 680
#line 680
tmp___7 = inchar();
---------
SID [261] -> Line 679
case 99: 
#line 679
cur_cmd->cmd = (char )ch;
---------
SID [260] -> Line -1

---------
SID [259] -> Line 676
#line 676
bad_prog(ONE_ADDR);
---------
SID [258] -> Line 675
case 105: 
case 97: 
#line 675
if (cur_cmd->a2.addr_type != 0) {
#line 676
  bad_prog(ONE_ADDR);
} else {

}
---------
SID [257] -> Line 672
#line 672
goto new_cmd;
---------
SID [256] -> Line -1

---------
SID [255] -> Line 668
#line 668
bad_prog(NO_COMMAND);
---------
SID [254] -> Line 667
#line 667
if (ch == -1) {
#line 668
  bad_prog(NO_COMMAND);
} else {

}
---------
SID [253] -> Line 664
#line 664
break;
---------
SID [252] -> Line 664
#line 664
break;
---------
SID [251] -> Line -1

---------
SID [250] -> Line 664
#line 664
if ((int const   )*(*tmp___6 + ch) & 1) {

} else {
#line 664
  break;
}
---------
SID [249] -> Line 664
#line 664
tmp___6 = __ctype_b_loc();
---------
SID [248] -> Line 664
#line 664
if (ch != -1) {
#line 664
  tmp___6 = __ctype_b_loc();
#line 664
  if ((int const   )*(*tmp___6 + ch) & 1) {

  } else {
#line 664
    break;
  }
} else {
#line 664
  break;
}
---------
SID [247] -> Line 665
#line 665
ch = inchar();
---------
SID [246] -> Line 664
#line 664
while (1) {
#line 665
  ch = inchar();
#line 664
  if (ch != -1) {
#line 664
    tmp___6 = __ctype_b_loc();
#line 664
    if ((int const   )*(*tmp___6 + ch) & 1) {

    } else {
#line 664
      break;
    }
  } else {
#line 664
    break;
  }
}
---------
SID [245] -> Line 663
#line 663
cur_cmd->aflags |= 2;
---------
SID [244] -> Line -1

---------
SID [243] -> Line 662
#line 662
bad_prog((char *)"Multiple \'!\'s");
---------
SID [242] -> Line 661
case 33: 
#line 661
if (cur_cmd->aflags & 2) {
#line 662
  bad_prog((char *)"Multiple \'!\'s");
} else {

}
---------
SID [241] -> Line 659
#line 659
goto skip_comment;
---------
SID [240] -> Line 658
#line 658
(vector->v_length) --;
---------
SID [239] -> Line 655
#line 655
break;
---------
SID [238] -> Line 655
#line 655
break;
---------
SID [237] -> Line -1

---------
SID [236] -> Line 655
#line 655
if (ch != 10) {

} else {
#line 655
  break;
}
---------
SID [235] -> Line 655
#line 655
if (ch != -1) {
#line 655
  if (ch != 10) {

  } else {
#line 655
    break;
  }
} else {
#line 655
  break;
}
---------
SID [234] -> Line 656
#line 656
ch = inchar();
---------
SID [233] -> Line 655
#line 655
while (1) {
#line 656
  ch = inchar();
#line 655
  if (ch != -1) {
#line 655
    if (ch != 10) {

    } else {
#line 655
      break;
    }
  } else {
#line 655
    break;
  }
}
---------
SID [232] -> Line -1

---------
SID [231] -> Line 654
#line 654
bad_prog(NO_ADDR);
---------
SID [230] -> Line 653
case 35: 
#line 653
if (cur_cmd->a1.addr_type != 0) {
#line 654
  bad_prog(NO_ADDR);
} else {

}
---------
SID [229] -> Line 650
new_cmd: 
#line 650
switch (ch) {
case 35: 
#line 653
if (cur_cmd->a1.addr_type != 0) {
#line 654
  bad_prog(NO_ADDR);
} else {

}
#line 655
while (1) {
#line 656
  ch = inchar();
#line 655
  if (ch != -1) {
#line 655
    if (ch != 10) {

    } else {
#line 655
      break;
    }
  } else {
#line 655
    break;
  }
}
#line 658
(vector->v_length) --;
#line 659
goto skip_comment;
case 33: 
#line 661
if (cur_cmd->aflags & 2) {
#line 662
  bad_prog((char *)"Multiple \'!\'s");
} else {

}
#line 663
cur_cmd->aflags |= 2;
#line 664
while (1) {
#line 665
  ch = inchar();
#line 664
  if (ch != -1) {
#line 664
    tmp___6 = __ctype_b_loc();
#line 664
    if ((int const   )*(*tmp___6 + ch) & 1) {

    } else {
#line 664
      break;
    }
  } else {
#line 664
    break;
  }
}
#line 667
if (ch == -1) {
#line 668
  bad_prog(NO_COMMAND);
} else {

}
#line 672
goto new_cmd;
case 105: 
case 97: 
#line 675
if (cur_cmd->a2.addr_type != 0) {
#line 676
  bad_prog(ONE_ADDR);
} else {

}
case 99: 
#line 679
cur_cmd->cmd = (char )ch;
#line 680
tmp___7 = inchar();
#line 680
if (tmp___7 != 92) {
#line 681
  bad_prog(LINE_JUNK);
} else {
#line 680
  tmp___8 = inchar();
#line 680
  if (tmp___8 != 10) {
#line 681
    bad_prog(LINE_JUNK);
  } else {

  }
}
#line 682
b = init_buffer();
#line 683
while (1) {
#line 683
  ch = inchar();
#line 683
  if (ch != -1) {
#line 683
    if (ch != 10) {

    } else {
#line 683
      break;
    }
  } else {
#line 683
    break;
  }
#line 685
  if (ch == 92) {
#line 686
    ch = inchar();
  } else {

  }
#line 687
  add1_buffer(b, ch);
}
#line 689
if (ch != -1) {
#line 690
  add1_buffer(b, ch);
} else {

}
#line 691
num = size_buffer(b);
#line 692
tmp___9 = ck_malloc(num);
#line 692
string = (unsigned char *)tmp___9;
#line 693
tmp___10 = get_buffer(b);
#line 693
bcopy((void const   *)tmp___10, (void *)string, (size_t )num);
#line 694
flush_buffer(b);
#line 695
cur_cmd->x.cmd_txt.text_len = num;
#line 696
cur_cmd->x.cmd_txt.text = (char *)string;
#line 697
break;
case 123: 
#line 699
cur_cmd->cmd = (char )ch;
#line 700
program_depth ++;
#line 706
cur_cmd->x.sub = compile_program((struct vector *)0, prog_line);
#line 709
(cur_cmd->x.sub)->return_v = vector;
#line 710
(cur_cmd->x.sub)->return_i = vector->v_length - 1;
#line 711
break;
case 125: 
#line 713
if (! program_depth) {
#line 714
  bad_prog((char *)"Unexpected \'}\'");
} else {

}
#line 715
program_depth --;
#line 717
cur_cmd->cmd = (char )ch;
#line 718
if (cur_cmd->a1.addr_type != 0) {
#line 719
  bad_prog((char *)"} doesn\'t want any addresses");
} else {

}
#line 720
while (1) {
#line 720
  ch = inchar();
#line 720
  if (ch != -1) {
#line 720
    if (ch != 10) {
#line 720
      if (ch != 59) {

      } else {
#line 720
        break;
      }
    } else {
#line 720
      break;
    }
  } else {
#line 720
    break;
  }
#line 721
  tmp___11 = __ctype_b_loc();
#line 721
  if ((int const   )*(*tmp___11 + ch) & 1) {

  } else {
#line 722
    bad_prog(LINE_JUNK);
  }
}
#line 723
return (vector);
case 58: 
#line 727
cur_cmd->cmd = (char)0;
#line 728
if (cur_cmd->a1.addr_type != 0) {
#line 729
  bad_prog((char *)": doesn\'t want any addresses");
} else {

}
#line 730
labels = setup_jump(labels, cur_cmd, vector);
#line 731
break;
case 116: 
case 98: 
#line 734
cur_cmd->cmd = (char )ch;
#line 735
jumps = setup_jump(jumps, cur_cmd, vector);
#line 736
break;
case 61: 
case 113: 
#line 739
if (cur_cmd->a2.addr_type) {
#line 740
  bad_prog(ONE_ADDR);
} else {

}
case 120: 
case 80: 
case 112: 
case 78: 
case 110: 
case 108: 
case 72: 
case 104: 
case 71: 
case 103: 
case 68: 
case 100: 
#line 754
cur_cmd->cmd = (char )ch;
#line 755
while (1) {
#line 756
  ch = inchar();
#line 755
  if (ch != -1) {
#line 755
    tmp___12 = __ctype_b_loc();
#line 755
    if ((int const   )*(*tmp___12 + ch) & 1) {
#line 755
      if (ch != 10) {
#line 755
        if (ch != 59) {

        } else {
#line 755
          break;
        }
      } else {
#line 755
        break;
      }
    } else {
#line 755
      break;
    }
  } else {
#line 755
    break;
  }
}
#line 758
if (ch != 10) {
#line 758
  if (ch != 59) {
#line 758
    if (ch != -1) {
#line 759
      bad_prog(LINE_JUNK);
    } else {

    }
  } else {

  }
} else {

}
#line 760
break;
case 114: 
#line 763
if (cur_cmd->a2.addr_type != 0) {
#line 764
  bad_prog(ONE_ADDR);
} else {

}
case 119: 
#line 767
cur_cmd->cmd = (char )ch;
#line 768
cur_cmd->x.io_file = compile_filename(ch == 114);
#line 769
break;
case 115: 
#line 772
cur_cmd->cmd = (char )ch;
#line 773
slash = inchar();
#line 774
compile_regex(slash);
#line 776
cur_cmd->x.cmd_regex.regx = last_regex;
#line 778
b = init_buffer();
#line 779
while (1) {
#line 779
  ch = inchar();
#line 779
  if (ch != -1) {
#line 779
    if (ch != slash) {
#line 779
      if (ch != 10) {

      } else {
#line 779
        break;
      }
    } else {
#line 779
      break;
    }
  } else {
#line 779
    break;
  }
#line 781
  if (ch == 92) {
#line 785
    ci = inchar();
#line 786
    if (ci != -1) {
#line 788
      if (ci != 10) {
#line 789
        add1_buffer(b, ch);
      } else {

      }
#line 790
      add1_buffer(b, ci);
    } else {

    }
  } else {
#line 794
    add1_buffer(b, ch);
  }
}
#line 796
if (ch != slash) {
#line 798
  if (ch == 10) {
#line 798
    if (prog_line > 1) {
#line 799
      prog_line --;
    } else {

    }
  } else {

  }
#line 800
  bad_prog((char *)"Unterminated `s\' command");
} else {

}
#line 802
cur_cmd->x.cmd_regex.replace_length = size_buffer(b);
#line 803
tmp___13 = ck_malloc(cur_cmd->x.cmd_regex.replace_length);
#line 803
cur_cmd->x.cmd_regex.replacement = (char *)tmp___13;
#line 804
tmp___14 = get_buffer(b);
#line 804
bcopy((void const   *)tmp___14, (void *)cur_cmd->x.cmd_regex.replacement,
      (size_t )cur_cmd->x.cmd_regex.replace_length);
#line 805
flush_buffer(b);
#line 807
cur_cmd->x.cmd_regex.flags = 0;
#line 808
cur_cmd->x.cmd_regex.numb = 0;
#line 810
if (ch == -1) {
#line 811
  break;
} else {

}
#line 812
while (1) {
#line 814
  ch = inchar();
#line 815
  switch (ch) {
  case 112: 
#line 818
  if (cur_cmd->x.cmd_regex.flags & 2) {
#line 819
    bad_prog((char *)"multiple \'p\' options to \'s\' command");
  } else {

  }
#line 820
  cur_cmd->x.cmd_regex.flags |= 2;
#line 821
  break;
  case 103: 
#line 823
  if (cur_cmd->x.cmd_regex.flags & 8) {
#line 824
    cur_cmd->x.cmd_regex.flags &= -9;
  } else {

  }
#line 825
  if (cur_cmd->x.cmd_regex.flags & 1) {
#line 826
    bad_prog((char *)"multiple \'g\' options to \'s\' command");
  } else {

  }
#line 827
  cur_cmd->x.cmd_regex.flags |= 1;
#line 828
  break;
  case 119: 
#line 830
  cur_cmd->x.cmd_regex.flags |= 4;
#line 831
  cur_cmd->x.cmd_regex.wio_file = compile_filename(0);
#line 832
  ch = '\n';
#line 833
  break;
  case 57: 
  case 56: 
  case 55: 
  case 54: 
  case 53: 
  case 52: 
  case 51: 
  case 50: 
  case 49: 
  case 48: 
#line 844
  if (cur_cmd->x.cmd_regex.flags & 8) {
#line 845
    bad_prog((char *)"multiple number options to \'s\' command");
  } else {

  }
#line 846
  if ((cur_cmd->x.cmd_regex.flags & 1) == 0) {
#line 847
    cur_cmd->x.cmd_regex.flags |= 8;
  } else {

  }
#line 848
  num = 0;
#line 849
  while (1) {
#line 849
    tmp___15 = __ctype_b_loc();
#line 849
    if ((int const   )*(*tmp___15 + ch) & 2048) {

    } else {
#line 849
      break;
    }
#line 851
    num = (num * 10 + ch) - 48;
#line 852
    ch = inchar();
  }
#line 854
  savchar(ch);
#line 855
  cur_cmd->x.cmd_regex.numb = num;
#line 856
  break;
  case -1: 
  case 59: 
  case 10: 
#line 860
  break;
  default: 
#line 862
  bad_prog((char *)"Unknown option to \'s\'");
#line 863
  break;
  }
#line 812
  if (ch != -1) {
#line 812
    if (ch != 10) {
#line 812
      if (ch != 59) {

      } else {
#line 812
        break;
      }
    } else {
#line 812
      break;
    }
  } else {
#line 812
    break;
  }
}
#line 867
if (ch == -1) {
#line 868
  break;
} else {

}
#line 869
break;
case 121: 
#line 872
cur_cmd->cmd = (char )ch;
#line 873
tmp___16 = ck_malloc(256);
#line 873
string = (unsigned char *)tmp___16;
#line 874
num = 0;
#line 874
while (num < 256) {
#line 875
  *(string + num) = (unsigned char )num;
#line 874
  num ++;
}
#line 876
b = init_buffer();
#line 877
slash = inchar();
#line 878
while (1) {
#line 878
  ch = inchar();
#line 878
  if (ch != -1) {
#line 878
    if (ch != slash) {

    } else {
#line 878
      break;
    }
  } else {
#line 878
    break;
  }
#line 879
  add1_buffer(b, ch);
}
#line 880
cur_cmd->x.translate = string;
#line 881
tmp___17 = get_buffer(b);
#line 881
string = (unsigned char *)tmp___17;
#line 882
num = size_buffer(b);
#line 882
while (num) {
#line 884
  ch = inchar();
#line 885
  if (ch == -1) {
#line 886
    bad_prog(BAD_EOF);
  } else {

  }
#line 887
  if (ch == slash) {
#line 888
    bad_prog((char *)"strings for y command are different lengths");
  } else {

  }
#line 889
  tmp___18 = string;
#line 889
  string ++;
#line 889
  *(cur_cmd->x.translate + *tmp___18) = (unsigned char )ch;
#line 882
  num --;
}
#line 891
flush_buffer(b);
#line 892
tmp___19 = inchar();
#line 892
if (tmp___19 != slash) {
#line 893
  bad_prog(LINE_JUNK);
} else {
#line 892
  ch = inchar();
#line 892
  if (ch != -1) {
#line 892
    if (ch != 10) {
#line 892
      if (ch != 59) {
#line 893
        bad_prog(LINE_JUNK);
      } else {

      }
    } else {

    }
  } else {

  }
}
#line 894
break;
default: 
#line 897
bad_prog((char *)"Unknown command");
}
---------
SID [228] -> Line -1

---------
SID [227] -> Line 648
#line 648
bad_prog(NO_COMMAND);
---------
SID [226] -> Line 647
#line 647
if (ch == -1) {
#line 648
  bad_prog(NO_COMMAND);
} else {

}
---------
SID [225] -> Line 646
#line 646
ch = inchar();
---------
SID [224] -> Line -1

---------
SID [223] -> Line -1

---------
SID [222] -> Line -1

---------
SID [221] -> Line 644
#line 644
cur_cmd->a2.addr_number = cur_cmd->a1.addr_number;
---------
SID [220] -> Line 641
#line 641
if (cur_cmd->a2.addr_number < cur_cmd->a1.addr_number) {
#line 644
  cur_cmd->a2.addr_number = cur_cmd->a1.addr_number;
} else {

}
---------
SID [219] -> Line 641
#line 641
if (cur_cmd->a2.addr_type == 1) {
#line 641
  if (cur_cmd->a2.addr_number < cur_cmd->a1.addr_number) {
#line 644
    cur_cmd->a2.addr_number = cur_cmd->a1.addr_number;
  } else {

  }
} else {

}
---------
SID [218] -> Line 641
#line 641
if (cur_cmd->a1.addr_type == 1) {
#line 641
  if (cur_cmd->a2.addr_type == 1) {
#line 641
    if (cur_cmd->a2.addr_number < cur_cmd->a1.addr_number) {
#line 644
      cur_cmd->a2.addr_number = cur_cmd->a1.addr_number;
    } else {

    }
  } else {

  }
} else {

}
---------
SID [217] -> Line -1

---------
SID [216] -> Line 639
#line 639
savchar(ch);
---------
SID [215] -> Line 636
#line 636
bad_prog((char *)"Unexpected \',\'");
---------
SID [214] -> Line -1

---------
SID [213] -> Line 633
#line 633
if (tmp___4) {

} else {
#line 636
  bad_prog((char *)"Unexpected \',\'");
}
---------
SID [212] -> Line 633
#line 633
tmp___4 = compile_address(& cur_cmd->a2);
---------
SID [211] -> Line 632
#line 632
savchar(ch);
---------
SID [210] -> Line 629
#line 629
break;
---------
SID [209] -> Line 629
#line 629
break;
---------
SID [208] -> Line -1

---------
SID [207] -> Line 629
#line 629
if ((int const   )*(*tmp___3 + ch) & 1) {

} else {
#line 629
  break;
}
---------
SID [206] -> Line 629
#line 629
tmp___3 = __ctype_b_loc();
---------
SID [205] -> Line 629
#line 629
if (ch != -1) {
#line 629
  tmp___3 = __ctype_b_loc();
#line 629
  if ((int const   )*(*tmp___3 + ch) & 1) {

  } else {
#line 629
    break;
  }
} else {
#line 629
  break;
}
---------
SID [204] -> Line 630
#line 630
ch = inchar();
---------
SID [203] -> Line 629
#line 629
while (1) {
#line 630
  ch = inchar();
#line 629
  if (ch != -1) {
#line 629
    tmp___3 = __ctype_b_loc();
#line 629
    if ((int const   )*(*tmp___3 + ch) & 1) {

    } else {
#line 629
      break;
    }
  } else {
#line 629
    break;
  }
}
---------
SID [202] -> Line 627
#line 627
if (ch == 44) {
#line 629
  while (1) {
#line 630
    ch = inchar();
#line 629
    if (ch != -1) {
#line 629
      tmp___3 = __ctype_b_loc();
#line 629
      if ((int const   )*(*tmp___3 + ch) & 1) {

      } else {
#line 629
        break;
      }
    } else {
#line 629
      break;
    }
  }
#line 632
  savchar(ch);
#line 633
  tmp___4 = compile_address(& cur_cmd->a2);
#line 633
  if (tmp___4) {

  } else {
#line 636
    bad_prog((char *)"Unexpected \',\'");
  }
} else {
#line 639
  savchar(ch);
}
---------
SID [201] -> Line 626
#line 626
ch = inchar();
---------
SID [200] -> Line 624
#line 624
if (tmp___5) {
#line 626
  ch = inchar();
#line 627
  if (ch == 44) {
#line 629
    while (1) {
#line 630
      ch = inchar();
#line 629
      if (ch != -1) {
#line 629
        tmp___3 = __ctype_b_loc();
#line 629
        if ((int const   )*(*tmp___3 + ch) & 1) {

        } else {
#line 629
          break;
        }
      } else {
#line 629
        break;
      }
    }
#line 632
    savchar(ch);
#line 633
    tmp___4 = compile_address(& cur_cmd->a2);
#line 633
    if (tmp___4) {

    } else {
#line 636
      bad_prog((char *)"Unexpected \',\'");
    }
  } else {
#line 639
    savchar(ch);
  }
} else {

}
---------
SID [199] -> Line 624
#line 624
tmp___5 = compile_address(& cur_cmd->a1);
---------
SID [198] -> Line 622
#line 622
cur_cmd->cmd = (char)0;
---------
SID [197] -> Line 621
#line 621
cur_cmd->aflags = 0;
---------
SID [196] -> Line 620
#line 620
cur_cmd->a2.addr_type = 0;
---------
SID [195] -> Line 619
#line 619
cur_cmd->a1.addr_type = 0;
---------
SID [194] -> Line 617
#line 617
(vector->v_length) ++;
---------
SID [193] -> Line 616
#line 616
cur_cmd = vector->v + vector->v_length;
---------
SID [192] -> Line -1

---------
SID [191] -> Line 614
#line 614
vector->v_allocated += 40;
---------
SID [190] -> Line 610
#line 610
vector->v = (struct sed_cmd *)tmp___2;
---------
SID [189] -> Line 610
#line 610
tmp___2 = ck_realloc((void *)vector->v,
                     (int )((unsigned long )(vector->v_length + 40) * sizeof(struct sed_cmd )));
---------
SID [188] -> Line 608
#line 608
if (vector->v_length == vector->v_allocated) {
#line 610
  tmp___2 = ck_realloc((void *)vector->v,
                       (int )((unsigned long )(vector->v_length + 40) * sizeof(struct sed_cmd )));
#line 610
  vector->v = (struct sed_cmd *)tmp___2;
#line 614
  vector->v_allocated += 40;
} else {

}
---------
SID [187] -> Line 606
#line 606
savchar(ch);
---------
SID [186] -> Line -1

---------
SID [185] -> Line 605
#line 605
break;
---------
SID [184] -> Line 604
#line 604
if (ch == -1) {
#line 605
  break;
} else {

}
---------
SID [183] -> Line 588
#line 588
break;
---------
SID [182] -> Line 588
#line 588
break;
---------
SID [181] -> Line -1

---------
SID [180] -> Line 588
#line 588
if (ch == 59) {

} else {
#line 588
  break;
}
---------
SID [179] -> Line -1

---------
SID [178] -> Line 588
#line 588
if (ch == 10) {

} else
#line 588
if (ch == 59) {

} else {
#line 588
  break;
}
---------
SID [177] -> Line -1

---------
SID [176] -> Line 588
#line 588
if ((int const   )*(*tmp___1 + ch) & 1) {

} else
#line 588
if (ch == 10) {

} else
#line 588
if (ch == 59) {

} else {
#line 588
  break;
}
---------
SID [175] -> Line 588
#line 588
tmp___1 = __ctype_b_loc();
---------
SID [174] -> Line 588
#line 588
if (ch != -1) {
#line 588
  tmp___1 = __ctype_b_loc();
#line 588
  if ((int const   )*(*tmp___1 + ch) & 1) {

  } else
#line 588
  if (ch == 10) {

  } else
#line 588
  if (ch == 59) {

  } else {
#line 588
    break;
  }
} else {
#line 588
  break;
}
---------
SID [173] -> Line -1

---------
SID [172] -> Line -1

---------
SID [171] -> Line 594
#line 594
ch = inchar();
---------
SID [170] -> Line 592
#line 592
if (ch == 10) {
#line 594
  ch = inchar();
} else {

}
---------
SID [169] -> Line 592
#line 592
if (pch == 92) {
#line 592
  if (ch == 10) {
#line 594
    ch = inchar();
  } else {

  }
} else {

}
---------
SID [168] -> Line 591
#line 591
ch = inchar();
---------
SID [167] -> Line 590
#line 590
pch = ch;
---------
SID [166] -> Line 588
skip_comment: 
#line 588
while (1) {
#line 590
  pch = ch;
#line 591
  ch = inchar();
#line 592
  if (pch == 92) {
#line 592
    if (ch == 10) {
#line 594
      ch = inchar();
    } else {

    }
  } else {

  }
#line 588
  if (ch != -1) {
#line 588
    tmp___1 = __ctype_b_loc();
#line 588
    if ((int const   )*(*tmp___1 + ch) & 1) {

    } else
#line 588
    if (ch == 10) {

    } else
#line 588
    if (ch == 59) {

    } else {
#line 588
      break;
    }
  } else {
#line 588
    break;
  }
}
---------
SID [165] -> Line 585
#line 585
while (1) {
  skip_comment: 
#line 588
  while (1) {
#line 590
    pch = ch;
#line 591
    ch = inchar();
#line 592
    if (pch == 92) {
#line 592
      if (ch == 10) {
#line 594
        ch = inchar();
      } else {

      }
    } else {

    }
#line 588
    if (ch != -1) {
#line 588
      tmp___1 = __ctype_b_loc();
#line 588
      if ((int const   )*(*tmp___1 + ch) & 1) {

      } else
#line 588
      if (ch == 10) {

      } else
#line 588
      if (ch == 59) {

      } else {
#line 588
        break;
      }
    } else {
#line 588
      break;
    }
  }
#line 604
  if (ch == -1) {
#line 605
    break;
  } else {

  }
#line 606
  savchar(ch);
#line 608
  if (vector->v_length == vector->v_allocated) {
#line 610
    tmp___2 = ck_realloc((void *)vector->v,
                         (int )((unsigned long )(vector->v_length + 40) * sizeof(struct sed_cmd )));
#line 610
    vector->v = (struct sed_cmd *)tmp___2;
#line 614
    vector->v_allocated += 40;
  } else {

  }
#line 616
  cur_cmd = vector->v + vector->v_length;
#line 617
  (vector->v_length) ++;
#line 619
  cur_cmd->a1.addr_type = 0;
#line 620
  cur_cmd->a2.addr_type = 0;
#line 621
  cur_cmd->aflags = 0;
#line 622
  cur_cmd->cmd = (char)0;
#line 624
  tmp___5 = compile_address(& cur_cmd->a1);
#line 624
  if (tmp___5) {
#line 626
    ch = inchar();
#line 627
    if (ch == 44) {
#line 629
      while (1) {
#line 630
        ch = inchar();
#line 629
        if (ch != -1) {
#line 629
          tmp___3 = __ctype_b_loc();
#line 629
          if ((int const   )*(*tmp___3 + ch) & 1) {

          } else {
#line 629
            break;
          }
        } else {
#line 629
          break;
        }
      }
#line 632
      savchar(ch);
#line 633
      tmp___4 = compile_address(& cur_cmd->a2);
#line 633
      if (tmp___4) {

      } else {
#line 636
        bad_prog((char *)"Unexpected \',\'");
      }
    } else {
#line 639
      savchar(ch);
    }
  } else {

  }
#line 641
  if (cur_cmd->a1.addr_type == 1) {
#line 641
    if (cur_cmd->a2.addr_type == 1) {
#line 641
      if (cur_cmd->a2.addr_number < cur_cmd->a1.addr_number) {
#line 644
        cur_cmd->a2.addr_number = cur_cmd->a1.addr_number;
      } else {

      }
    } else {

    }
  } else {

  }
#line 646
  ch = inchar();
#line 647
  if (ch == -1) {
#line 648
    bad_prog(NO_COMMAND);
  } else {

  }
  new_cmd: 
#line 650
  switch (ch) {
  case 35: 
#line 653
  if (cur_cmd->a1.addr_type != 0) {
#line 654
    bad_prog(NO_ADDR);
  } else {

  }
#line 655
  while (1) {
#line 656
    ch = inchar();
#line 655
    if (ch != -1) {
#line 655
      if (ch != 10) {

      } else {
#line 655
        break;
      }
    } else {
#line 655
      break;
    }
  }
#line 658
  (vector->v_length) --;
#line 659
  goto skip_comment;
  case 33: 
#line 661
  if (cur_cmd->aflags & 2) {
#line 662
    bad_prog((char *)"Multiple \'!\'s");
  } else {

  }
#line 663
  cur_cmd->aflags |= 2;
#line 664
  while (1) {
#line 665
    ch = inchar();
#line 664
    if (ch != -1) {
#line 664
      tmp___6 = __ctype_b_loc();
#line 664
      if ((int const   )*(*tmp___6 + ch) & 1) {

      } else {
#line 664
        break;
      }
    } else {
#line 664
      break;
    }
  }
#line 667
  if (ch == -1) {
#line 668
    bad_prog(NO_COMMAND);
  } else {

  }
#line 672
  goto new_cmd;
  case 105: 
  case 97: 
#line 675
  if (cur_cmd->a2.addr_type != 0) {
#line 676
    bad_prog(ONE_ADDR);
  } else {

  }
  case 99: 
#line 679
  cur_cmd->cmd = (char )ch;
#line 680
  tmp___7 = inchar();
#line 680
  if (tmp___7 != 92) {
#line 681
    bad_prog(LINE_JUNK);
  } else {
#line 680
    tmp___8 = inchar();
#line 680
    if (tmp___8 != 10) {
#line 681
      bad_prog(LINE_JUNK);
    } else {

    }
  }
#line 682
  b = init_buffer();
#line 683
  while (1) {
#line 683
    ch = inchar();
#line 683
    if (ch != -1) {
#line 683
      if (ch != 10) {

      } else {
#line 683
        break;
      }
    } else {
#line 683
      break;
    }
#line 685
    if (ch == 92) {
#line 686
      ch = inchar();
    } else {

    }
#line 687
    add1_buffer(b, ch);
  }
#line 689
  if (ch != -1) {
#line 690
    add1_buffer(b, ch);
  } else {

  }
#line 691
  num = size_buffer(b);
#line 692
  tmp___9 = ck_malloc(num);
#line 692
  string = (unsigned char *)tmp___9;
#line 693
  tmp___10 = get_buffer(b);
#line 693
  bcopy((void const   *)tmp___10, (void *)string, (size_t )num);
#line 694
  flush_buffer(b);
#line 695
  cur_cmd->x.cmd_txt.text_len = num;
#line 696
  cur_cmd->x.cmd_txt.text = (char *)string;
#line 697
  break;
  case 123: 
#line 699
  cur_cmd->cmd = (char )ch;
#line 700
  program_depth ++;
#line 706
  cur_cmd->x.sub = compile_program((struct vector *)0, prog_line);
#line 709
  (cur_cmd->x.sub)->return_v = vector;
#line 710
  (cur_cmd->x.sub)->return_i = vector->v_length - 1;
#line 711
  break;
  case 125: 
#line 713
  if (! program_depth) {
#line 714
    bad_prog((char *)"Unexpected \'}\'");
  } else {

  }
#line 715
  program_depth --;
#line 717
  cur_cmd->cmd = (char )ch;
#line 718
  if (cur_cmd->a1.addr_type != 0) {
#line 719
    bad_prog((char *)"} doesn\'t want any addresses");
  } else {

  }
#line 720
  while (1) {
#line 720
    ch = inchar();
#line 720
    if (ch != -1) {
#line 720
      if (ch != 10) {
#line 720
        if (ch != 59) {

        } else {
#line 720
          break;
        }
      } else {
#line 720
        break;
      }
    } else {
#line 720
      break;
    }
#line 721
    tmp___11 = __ctype_b_loc();
#line 721
    if ((int const   )*(*tmp___11 + ch) & 1) {

    } else {
#line 722
      bad_prog(LINE_JUNK);
    }
  }
#line 723
  return (vector);
  case 58: 
#line 727
  cur_cmd->cmd = (char)0;
#line 728
  if (cur_cmd->a1.addr_type != 0) {
#line 729
    bad_prog((char *)": doesn\'t want any addresses");
  } else {

  }
#line 730
  labels = setup_jump(labels, cur_cmd, vector);
#line 731
  break;
  case 116: 
  case 98: 
#line 734
  cur_cmd->cmd = (char )ch;
#line 735
  jumps = setup_jump(jumps, cur_cmd, vector);
#line 736
  break;
  case 61: 
  case 113: 
#line 739
  if (cur_cmd->a2.addr_type) {
#line 740
    bad_prog(ONE_ADDR);
  } else {

  }
  case 120: 
  case 80: 
  case 112: 
  case 78: 
  case 110: 
  case 108: 
  case 72: 
  case 104: 
  case 71: 
  case 103: 
  case 68: 
  case 100: 
#line 754
  cur_cmd->cmd = (char )ch;
#line 755
  while (1) {
#line 756
    ch = inchar();
#line 755
    if (ch != -1) {
#line 755
      tmp___12 = __ctype_b_loc();
#line 755
      if ((int const   )*(*tmp___12 + ch) & 1) {
#line 755
        if (ch != 10) {
#line 755
          if (ch != 59) {

          } else {
#line 755
            break;
          }
        } else {
#line 755
          break;
        }
      } else {
#line 755
        break;
      }
    } else {
#line 755
      break;
    }
  }
#line 758
  if (ch != 10) {
#line 758
    if (ch != 59) {
#line 758
      if (ch != -1) {
#line 759
        bad_prog(LINE_JUNK);
      } else {

      }
    } else {

    }
  } else {

  }
#line 760
  break;
  case 114: 
#line 763
  if (cur_cmd->a2.addr_type != 0) {
#line 764
    bad_prog(ONE_ADDR);
  } else {

  }
  case 119: 
#line 767
  cur_cmd->cmd = (char )ch;
#line 768
  cur_cmd->x.io_file = compile_filename(ch == 114);
#line 769
  break;
  case 115: 
#line 772
  cur_cmd->cmd = (char )ch;
#line 773
  slash = inchar();
#line 774
  compile_regex(slash);
#line 776
  cur_cmd->x.cmd_regex.regx = last_regex;
#line 778
  b = init_buffer();
#line 779
  while (1) {
#line 779
    ch = inchar();
#line 779
    if (ch != -1) {
#line 779
      if (ch != slash) {
#line 779
        if (ch != 10) {

        } else {
#line 779
          break;
        }
      } else {
#line 779
        break;
      }
    } else {
#line 779
      break;
    }
#line 781
    if (ch == 92) {
#line 785
      ci = inchar();
#line 786
      if (ci != -1) {
#line 788
        if (ci != 10) {
#line 789
          add1_buffer(b, ch);
        } else {

        }
#line 790
        add1_buffer(b, ci);
      } else {

      }
    } else {
#line 794
      add1_buffer(b, ch);
    }
  }
#line 796
  if (ch != slash) {
#line 798
    if (ch == 10) {
#line 798
      if (prog_line > 1) {
#line 799
        prog_line --;
      } else {

      }
    } else {

    }
#line 800
    bad_prog((char *)"Unterminated `s\' command");
  } else {

  }
#line 802
  cur_cmd->x.cmd_regex.replace_length = size_buffer(b);
#line 803
  tmp___13 = ck_malloc(cur_cmd->x.cmd_regex.replace_length);
#line 803
  cur_cmd->x.cmd_regex.replacement = (char *)tmp___13;
#line 804
  tmp___14 = get_buffer(b);
#line 804
  bcopy((void const   *)tmp___14, (void *)cur_cmd->x.cmd_regex.replacement,
        (size_t )cur_cmd->x.cmd_regex.replace_length);
#line 805
  flush_buffer(b);
#line 807
  cur_cmd->x.cmd_regex.flags = 0;
#line 808
  cur_cmd->x.cmd_regex.numb = 0;
#line 810
  if (ch == -1) {
#line 811
    break;
  } else {

  }
#line 812
  while (1) {
#line 814
    ch = inchar();
#line 815
    switch (ch) {
    case 112: 
#line 818
    if (cur_cmd->x.cmd_regex.flags & 2) {
#line 819
      bad_prog((char *)"multiple \'p\' options to \'s\' command");
    } else {

    }
#line 820
    cur_cmd->x.cmd_regex.flags |= 2;
#line 821
    break;
    case 103: 
#line 823
    if (cur_cmd->x.cmd_regex.flags & 8) {
#line 824
      cur_cmd->x.cmd_regex.flags &= -9;
    } else {

    }
#line 825
    if (cur_cmd->x.cmd_regex.flags & 1) {
#line 826
      bad_prog((char *)"multiple \'g\' options to \'s\' command");
    } else {

    }
#line 827
    cur_cmd->x.cmd_regex.flags |= 1;
#line 828
    break;
    case 119: 
#line 830
    cur_cmd->x.cmd_regex.flags |= 4;
#line 831
    cur_cmd->x.cmd_regex.wio_file = compile_filename(0);
#line 832
    ch = '\n';
#line 833
    break;
    case 57: 
    case 56: 
    case 55: 
    case 54: 
    case 53: 
    case 52: 
    case 51: 
    case 50: 
    case 49: 
    case 48: 
#line 844
    if (cur_cmd->x.cmd_regex.flags & 8) {
#line 845
      bad_prog((char *)"multiple number options to \'s\' command");
    } else {

    }
#line 846
    if ((cur_cmd->x.cmd_regex.flags & 1) == 0) {
#line 847
      cur_cmd->x.cmd_regex.flags |= 8;
    } else {

    }
#line 848
    num = 0;
#line 849
    while (1) {
#line 849
      tmp___15 = __ctype_b_loc();
#line 849
      if ((int const   )*(*tmp___15 + ch) & 2048) {

      } else {
#line 849
        break;
      }
#line 851
      num = (num * 10 + ch) - 48;
#line 852
      ch = inchar();
    }
#line 854
    savchar(ch);
#line 855
    cur_cmd->x.cmd_regex.numb = num;
#line 856
    break;
    case -1: 
    case 59: 
    case 10: 
#line 860
    break;
    default: 
#line 862
    bad_prog((char *)"Unknown option to \'s\'");
#line 863
    break;
    }
#line 812
    if (ch != -1) {
#line 812
      if (ch != 10) {
#line 812
        if (ch != 59) {

        } else {
#line 812
          break;
        }
      } else {
#line 812
        break;
      }
    } else {
#line 812
      break;
    }
  }
#line 867
  if (ch == -1) {
#line 868
    break;
  } else {

  }
#line 869
  break;
  case 121: 
#line 872
  cur_cmd->cmd = (char )ch;
#line 873
  tmp___16 = ck_malloc(256);
#line 873
  string = (unsigned char *)tmp___16;
#line 874
  num = 0;
#line 874
  while (num < 256) {
#line 875
    *(string + num) = (unsigned char )num;
#line 874
    num ++;
  }
#line 876
  b = init_buffer();
#line 877
  slash = inchar();
#line 878
  while (1) {
#line 878
    ch = inchar();
#line 878
    if (ch != -1) {
#line 878
      if (ch != slash) {

      } else {
#line 878
        break;
      }
    } else {
#line 878
      break;
    }
#line 879
    add1_buffer(b, ch);
  }
#line 880
  cur_cmd->x.translate = string;
#line 881
  tmp___17 = get_buffer(b);
#line 881
  string = (unsigned char *)tmp___17;
#line 882
  num = size_buffer(b);
#line 882
  while (num) {
#line 884
    ch = inchar();
#line 885
    if (ch == -1) {
#line 886
      bad_prog(BAD_EOF);
    } else {

    }
#line 887
    if (ch == slash) {
#line 888
      bad_prog((char *)"strings for y command are different lengths");
    } else {

    }
#line 889
    tmp___18 = string;
#line 889
    string ++;
#line 889
    *(cur_cmd->x.translate + *tmp___18) = (unsigned char )ch;
#line 882
    num --;
  }
#line 891
  flush_buffer(b);
#line 892
  tmp___19 = inchar();
#line 892
  if (tmp___19 != slash) {
#line 893
    bad_prog(LINE_JUNK);
  } else {
#line 892
    ch = inchar();
#line 892
    if (ch != -1) {
#line 892
      if (ch != 10) {
#line 892
        if (ch != 59) {
#line 893
          bad_prog(LINE_JUNK);
        } else {

        }
      } else {

      }
    } else {

    }
  }
#line 894
  break;
  default: 
#line 897
  bad_prog((char *)"Unknown command");
  }
}
---------
SID [164] -> Line -1

---------
SID [163] -> Line 583
#line 583
vector->return_i = 0;
---------
SID [162] -> Line 582
#line 582
vector->return_v = (struct vector *)0;
---------
SID [161] -> Line 581
#line 581
vector->v_length = 0;
---------
SID [160] -> Line 580
#line 580
vector->v_allocated = 40;
---------
SID [159] -> Line 579
#line 579
vector->v = (struct sed_cmd *)tmp___0;
---------
SID [158] -> Line 579
#line 579
tmp___0 = ck_malloc((int )(40UL * sizeof(struct sed_cmd )));
---------
SID [157] -> Line 578
#line 578
vector = (struct vector *)tmp;
---------
SID [156] -> Line 578
#line 578
tmp = ck_malloc((int )sizeof(struct vector ));
---------
SID [155] -> Line 576
#line 576
if (! vector) {
#line 578
  tmp = ck_malloc((int )sizeof(struct vector ));
#line 578
  vector = (struct vector *)tmp;
#line 579
  tmp___0 = ck_malloc((int )(40UL * sizeof(struct sed_cmd )));
#line 579
  vector->v = (struct sed_cmd *)tmp___0;
#line 580
  vector->v_allocated = 40;
#line 581
  vector->v_length = 0;
#line 582
  vector->return_v = (struct vector *)0;
#line 583
  vector->return_i = 0;
} else {

}
---------
SID [154] -> Line 567
#line 567
ch = 0;
---------
SID [153] -> Line 544
#line 544
return;
---------
SID [152] -> Line 543
#line 543
the_program = compile_program(the_program, prog_line);
---------
SID [151] -> Line -1

---------
SID [150] -> Line 542
#line 542
ungetc(ch, prog_file);
---------
SID [149] -> Line 541
#line 541
if (ch != -1) {
#line 542
  ungetc(ch, prog_file);
} else {

}
---------
SID [148] -> Line 539
#line 539
prog_line ++;
---------
SID [147] -> Line 538
#line 538
ch = _IO_getc(prog_file);
---------
SID [146] -> Line 537
#line 537
break;
---------
SID [145] -> Line 537
#line 537
break;
---------
SID [144] -> Line -1

---------
SID [143] -> Line 537
#line 537
if (ch != 10) {

} else {
#line 537
  break;
}
---------
SID [142] -> Line 537
#line 537
if (ch != -1) {
#line 537
  if (ch != 10) {

  } else {
#line 537
    break;
  }
} else {
#line 537
  break;
}
---------
SID [141] -> Line 537
#line 537
while (1) {
#line 537
  if (ch != -1) {
#line 537
    if (ch != 10) {

    } else {
#line 537
      break;
    }
  } else {
#line 537
    break;
  }
#line 538
  ch = _IO_getc(prog_file);
}
---------
SID [140] -> Line -1

---------
SID [139] -> Line 536
#line 536
no_default_output ++;
---------
SID [138] -> Line 535
#line 535
if (ch == 110) {
#line 536
  no_default_output ++;
} else {

}
---------
SID [137] -> Line 534
#line 534
ch = _IO_getc(prog_file);
---------
SID [136] -> Line 532
#line 532
if (ch == 35) {
#line 534
  ch = _IO_getc(prog_file);
#line 535
  if (ch == 110) {
#line 536
    no_default_output ++;
  } else {

  }
#line 537
  while (1) {
#line 537
    if (ch != -1) {
#line 537
      if (ch != 10) {

      } else {
#line 537
        break;
      }
    } else {
#line 537
      break;
    }
#line 538
    ch = _IO_getc(prog_file);
  }
#line 539
  prog_line ++;
} else
#line 541
if (ch != -1) {
#line 542
  ungetc(ch, prog_file);
} else {

}
---------
SID [135] -> Line 531
#line 531
ch = _IO_getc(prog_file);
---------
SID [134] -> Line 530
#line 530
prog_file = ck_fopen(str, (char *)"r");
---------
SID [133] -> Line 530
#line 530
prog_file = ck_fopen(str, (char *)"r");
---------
SID [132] -> Line 528
#line 528
prog_file = stdin;
---------
SID [131] -> Line 527
#line 527
if ((int )*(str + 1) == 0) {
#line 528
  prog_file = stdin;
} else {
#line 530
  prog_file = ck_fopen(str, (char *)"r");
}
---------
SID [130] -> Line 527
#line 527
if ((int )*(str + 0) == 45) {
#line 527
  if ((int )*(str + 1) == 0) {
#line 528
    prog_file = stdin;
  } else {
#line 530
    prog_file = ck_fopen(str, (char *)"r");
  }
} else {
#line 530
  prog_file = ck_fopen(str, (char *)"r");
}
---------
SID [129] -> Line 526
#line 526
prog_line = 1;
---------
SID [128] -> Line 525
#line 525
prog_name = str;
---------
SID [127] -> Line 524
#line 524
prog_start = prog_cur;
---------
SID [126] -> Line 524
#line 524
prog_cur = prog_end;
---------
SID [125] -> Line 524
#line 524
prog_end = (unsigned char *)0;
---------
SID [124] -> Line 514
#line 514
return;
---------
SID [123] -> Line 513
#line 513
the_program = compile_program(the_program, prog_line);
---------
SID [122] -> Line 512
#line 512
prog_end = (unsigned char *)str + tmp;
---------
SID [121] -> Line 512
#line 512
tmp = strlen((char const   *)str);
---------
SID [120] -> Line 511
#line 511
prog_start = prog_cur;
---------
SID [119] -> Line 511
#line 511
prog_cur = (unsigned char *)str;
---------
SID [118] -> Line 510
#line 510
prog_line = 0;
---------
SID [117] -> Line 509
#line 509
prog_file = (FILE *)0;
---------
SID [116] -> Line 501
#line 501
return;
---------
SID [115] -> Line 496
#line 496
nf ++;
---------
SID [114] -> Line -1

---------
SID [113] -> Line 499
#line 499
fclose(file_ptrs[nf].phile);
---------
SID [112] -> Line 498
#line 498
if (file_ptrs[nf].phile) {
#line 499
  fclose(file_ptrs[nf].phile);
} else {

}
---------
SID [111] -> Line 496
#line 496
break;
---------
SID [110] -> Line -1

---------
SID [109] -> Line 496
#line 496
if (nf < 32) {

} else {
#line 496
  break;
}
---------
SID [108] -> Line 496
#line 496
while (nf < 32) {
#line 498
  if (file_ptrs[nf].phile) {
#line 499
    fclose(file_ptrs[nf].phile);
  } else {

  }
#line 496
  nf ++;
}
---------
SID [107] -> Line 496
#line 496
nf = 0;
---------
SID [106] -> Line 488
#line 488
exit(0);
---------
SID [105] -> Line -1

---------
SID [104] -> Line 487
#line 487
exit(2);
---------
SID [103] -> Line 486
#line 486
if (bad_input) {
#line 487
  exit(2);
} else {

}
---------
SID [102] -> Line 485
#line 485
close_files();
---------
SID [101] -> Line -1

---------
SID [100] -> Line 483
#line 483
break;
---------
SID [99] -> Line 482
#line 482
if (quit_cmd) {
#line 483
  break;
} else {

}
---------
SID [98] -> Line 481
#line 481
optind ++;
---------
SID [97] -> Line 480
#line 480
read_file(*(argv + optind));
---------
SID [96] -> Line -1

---------
SID [95] -> Line 479
#line 479
last_input_file ++;
---------
SID [94] -> Line 478
#line 478
if (optind == argc - 1) {
#line 479
  last_input_file ++;
} else {

}
---------
SID [93] -> Line 476
#line 476
break;
---------
SID [92] -> Line -1

---------
SID [91] -> Line 476
#line 476
if (optind < argc) {

} else {
#line 476
  break;
}
---------
SID [90] -> Line 476
#line 476
while (optind < argc) {
#line 478
  if (optind == argc - 1) {
#line 479
    last_input_file ++;
  } else {

  }
#line 480
  read_file(*(argv + optind));
#line 481
  optind ++;
#line 482
  if (quit_cmd) {
#line 483
    break;
  } else {

  }
}
---------
SID [89] -> Line 473
#line 473
read_file((char *)"-");
---------
SID [88] -> Line 472
#line 472
last_input_file ++;
---------
SID [87] -> Line 470
#line 470
if (argc <= optind) {
#line 472
  last_input_file ++;
#line 473
  read_file((char *)"-");
} else {
#line 476
  while (optind < argc) {
#line 478
    if (optind == argc - 1) {
#line 479
      last_input_file ++;
    } else {

    }
#line 480
    read_file(*(argv + optind));
#line 481
    optind ++;
#line 482
    if (quit_cmd) {
#line 483
      break;
    } else {

    }
  }
}
---------
SID [86] -> Line 468
#line 468
*(hold.text + 0) = (char )'\n';
---------
SID [85] -> Line 467
#line 467
hold.text = (char *)tmp___8;
---------
SID [84] -> Line 467
#line 467
tmp___8 = ck_malloc(50);
---------
SID [83] -> Line 466
#line 466
hold.alloc = 50;
---------
SID [82] -> Line 465
#line 465
hold.length = 1;
---------
SID [81] -> Line 463
#line 463
append.text = (char *)tmp___7;
---------
SID [80] -> Line 463
#line 463
tmp___7 = ck_malloc(50);
---------
SID [79] -> Line 462
#line 462
append.alloc = 50;
---------
SID [78] -> Line 461
#line 461
append.length = 0;
---------
SID [77] -> Line 459
#line 459
line.text = (char *)tmp___6;
---------
SID [76] -> Line 459
#line 459
tmp___6 = ck_malloc(50);
---------
SID [75] -> Line 458
#line 458
line.alloc = 50;
---------
SID [74] -> Line 457
#line 457
line.length = 0;
---------
SID [73] -> Line 447
#line 447
go = go->next;
---------
SID [72] -> Line 454
#line 454
((go->v)->v + go->v_index)->x.jump = lbl;
---------
SID [71] -> Line -1

---------
SID [70] -> Line -1

---------
SID [69] -> Line 453
#line 453
panic((char *)"Can\'t find label for jump to \'%s\'", go->name);
---------
SID [68] -> Line 452
#line 452
if (! lbl) {
#line 453
  panic((char *)"Can\'t find label for jump to \'%s\'", go->name);
} else {

}
---------
SID [67] -> Line 452
#line 452
if (*(go->name)) {
#line 452
  if (! lbl) {
#line 453
    panic((char *)"Can\'t find label for jump to \'%s\'", go->name);
  } else {

  }
} else {

}
---------
SID [66] -> Line 449
#line 449
lbl = lbl->next;
---------
SID [65] -> Line 451
#line 451
break;
---------
SID [64] -> Line -1

---------
SID [63] -> Line 450
#line 450
if (tmp___5) {

} else {
#line 451
  break;
}
---------
SID [62] -> Line 450
#line 450
tmp___5 = strcmp((char const   *)lbl->name, (char const   *)go->name);
---------
SID [61] -> Line 449
#line 449
break;
---------
SID [60] -> Line -1

---------
SID [59] -> Line 449
#line 449
if (lbl) {

} else {
#line 449
  break;
}
---------
SID [58] -> Line 449
#line 449
while (lbl) {
#line 450
  tmp___5 = strcmp((char const   *)lbl->name, (char const   *)go->name);
#line 450
  if (tmp___5) {

  } else {
#line 451
    break;
  }
#line 449
  lbl = lbl->next;
}
---------
SID [57] -> Line 449
#line 449
lbl = labels;
---------
SID [56] -> Line 447
#line 447
break;
---------
SID [55] -> Line -1

---------
SID [54] -> Line 447
#line 447
if (go) {

} else {
#line 447
  break;
}
---------
SID [53] -> Line 447
#line 447
while (go) {
#line 449
  lbl = labels;
#line 449
  while (lbl) {
#line 450
    tmp___5 = strcmp((char const   *)lbl->name, (char const   *)go->name);
#line 450
    if (tmp___5) {

    } else {
#line 451
      break;
    }
#line 449
    lbl = lbl->next;
  }
#line 452
  if (*(go->name)) {
#line 452
    if (! lbl) {
#line 453
      panic((char *)"Can\'t find label for jump to \'%s\'", go->name);
    } else {

    }
  } else {

  }
#line 454
  ((go->v)->v + go->v_index)->x.jump = lbl;
#line 447
  go = go->next;
}
---------
SID [52] -> Line 447
#line 447
go = jumps;
---------
SID [51] -> Line -1

---------
SID [50] -> Line 444
#line 444
compile_string(*(argv + tmp___4));
---------
SID [49] -> Line 444
#line 444
optind ++;
---------
SID [48] -> Line 444
#line 444
tmp___4 = optind;
---------
SID [47] -> Line -1

---------
SID [46] -> Line 443
#line 443
usage(4);
---------
SID [45] -> Line 442
#line 442
if (optind == argc) {
#line 443
  usage(4);
} else {

}
---------
SID [44] -> Line 440
#line 440
if (! compiled) {
#line 442
  if (optind == argc) {
#line 443
    usage(4);
  } else {

  }
#line 444
  tmp___4 = optind;
#line 444
  optind ++;
#line 444
  compile_string(*(argv + tmp___4));
} else {

}
---------
SID [43] -> Line -1

---------
SID [42] -> Line 438
#line 438
free((void *)e_strings);
---------
SID [41] -> Line 437
#line 437
compile_string(e_strings);
---------
SID [40] -> Line 435
#line 435
if (e_strings) {
#line 437
  compile_string(e_strings);
#line 438
  free((void *)e_strings);
} else {

}
---------
SID [39] -> Line 432
#line 432
break;
---------
SID [38] -> Line 431
default: 
#line 431
usage(4);
---------
SID [37] -> Line 429
#line 429
break;
---------
SID [36] -> Line 428
case 104: 
#line 428
usage(0);
---------
SID [35] -> Line 426
#line 426
break;
---------
SID [34] -> Line 425
#line 425
exit(0);
---------
SID [33] -> Line 424
case 86: 
#line 424
fprintf((FILE */* __restrict  */)stdout,
        (char const   */* __restrict  */)"%s\n", version_string);
---------
SID [32] -> Line 422
#line 422
break;
---------
SID [31] -> Line 421
#line 421
compiled = 1;
---------
SID [30] -> Line 420
case 102: 
#line 420
compile_file(optarg);
---------
SID [29] -> Line 418
#line 418
break;
---------
SID [28] -> Line 417
#line 417
compiled = 1;
---------
SID [27] -> Line 416
#line 416
strcat((char */* __restrict  */)e_strings,
       (char const   */* __restrict  */)"\n");
---------
SID [26] -> Line 414
#line 414
strcat((char */* __restrict  */)e_strings,
       (char const   */* __restrict  */)optarg);
---------
SID [25] -> Line 413
#line 413
e_strings = (char *)tmp___3;
---------
SID [24] -> Line 413
#line 413
tmp___3 = ck_realloc((void *)e_strings, (int )((tmp___1 + tmp___2) + 2UL));
---------
SID [23] -> Line 413
#line 413
tmp___2 = strlen((char const   *)optarg);
---------
SID [22] -> Line 413
#line 413
tmp___1 = strlen((char const   *)e_strings);
---------
SID [21] -> Line 409
#line 409
strcpy((char */* __restrict  */)e_strings,
       (char const   */* __restrict  */)optarg);
---------
SID [20] -> Line 408
#line 408
e_strings = (char *)tmp___0;
---------
SID [19] -> Line 408
#line 408
tmp___0 = ck_malloc((int )(tmp + 2UL));
---------
SID [18] -> Line 408
#line 408
tmp = strlen((char const   *)optarg);
---------
SID [17] -> Line 406
case 101: 
#line 406
if ((unsigned long )e_strings == (unsigned long )((void *)0)) {
#line 408
  tmp = strlen((char const   *)optarg);
#line 408
  tmp___0 = ck_malloc((int )(tmp + 2UL));
#line 408
  e_strings = (char *)tmp___0;
#line 409
  strcpy((char */* __restrict  */)e_strings,
         (char const   */* __restrict  */)optarg);
} else {
#line 413
  tmp___1 = strlen((char const   *)e_strings);
#line 413
  tmp___2 = strlen((char const   *)optarg);
#line 413
  tmp___3 = ck_realloc((void *)e_strings, (int )((tmp___1 + tmp___2) + 2UL));
#line 413
  e_strings = (char *)tmp___3;
#line 414
  strcat((char */* __restrict  */)e_strings,
         (char const   */* __restrict  */)optarg);
}
---------
SID [16] -> Line 404
#line 404
break;
---------
SID [15] -> Line 403
case 110: 
#line 403
no_default_output = 1;
---------
SID [14] -> Line 400
#line 400
switch (opt) {
case 110: 
#line 403
no_default_output = 1;
#line 404
break;
case 101: 
#line 406
if ((unsigned long )e_strings == (unsigned long )((void *)0)) {
#line 408
  tmp = strlen((char const   *)optarg);
#line 408
  tmp___0 = ck_malloc((int )(tmp + 2UL));
#line 408
  e_strings = (char *)tmp___0;
#line 409
  strcpy((char */* __restrict  */)e_strings,
         (char const   */* __restrict  */)optarg);
} else {
#line 413
  tmp___1 = strlen((char const   *)e_strings);
#line 413
  tmp___2 = strlen((char const   *)optarg);
#line 413
  tmp___3 = ck_realloc((void *)e_strings, (int )((tmp___1 + tmp___2) + 2UL));
#line 413
  e_strings = (char *)tmp___3;
#line 414
  strcat((char */* __restrict  */)e_strings,
         (char const   */* __restrict  */)optarg);
}
#line 416
strcat((char */* __restrict  */)e_strings,
       (char const   */* __restrict  */)"\n");
#line 417
compiled = 1;
#line 418
break;
case 102: 
#line 420
compile_file(optarg);
#line 421
compiled = 1;
#line 422
break;
case 86: 
#line 424
fprintf((FILE */* __restrict  */)stdout,
        (char const   */* __restrict  */)"%s\n", version_string);
#line 425
exit(0);
#line 426
break;
case 104: 
#line 428
usage(0);
#line 429
break;
default: 
#line 431
usage(4);
#line 432
break;
}
---------
SID [13] -> Line 397
#line 397
break;
---------
SID [12] -> Line -1

---------
SID [11] -> Line 397
#line 397
if (opt != -1) {

} else {
#line 397
  break;
}
---------
SID [10] -> Line 397
#line 397
opt = getopt_long(argc, (char * const  *)argv, "hne:f:V",
                  (struct option  const  *)(longopts), (int *)0);
---------
SID [9] -> Line 397
#line 397
while (1) {
#line 397
  opt = getopt_long(argc, (char * const  *)argv, "hne:f:V",
                    (struct option  const  *)(longopts), (int *)0);
#line 397
  if (opt != -1) {

  } else {
#line 397
    break;
  }
#line 400
  switch (opt) {
  case 110: 
#line 403
  no_default_output = 1;
#line 404
  break;
  case 101: 
#line 406
  if ((unsigned long )e_strings == (unsigned long )((void *)0)) {
#line 408
    tmp = strlen((char const   *)optarg);
#line 408
    tmp___0 = ck_malloc((int )(tmp + 2UL));
#line 408
    e_strings = (char *)tmp___0;
#line 409
    strcpy((char */* __restrict  */)e_strings,
           (char const   */* __restrict  */)optarg);
  } else {
#line 413
    tmp___1 = strlen((char const   *)e_strings);
#line 413
    tmp___2 = strlen((char const   *)optarg);
#line 413
    tmp___3 = ck_realloc((void *)e_strings, (int )((tmp___1 + tmp___2) + 2UL));
#line 413
    e_strings = (char *)tmp___3;
#line 414
    strcat((char */* __restrict  */)e_strings,
           (char const   */* __restrict  */)optarg);
  }
#line 416
  strcat((char */* __restrict  */)e_strings,
         (char const   */* __restrict  */)"\n");
#line 417
  compiled = 1;
#line 418
  break;
  case 102: 
#line 420
  compile_file(optarg);
#line 421
  compiled = 1;
#line 422
  break;
  case 86: 
#line 424
  fprintf((FILE */* __restrict  */)stdout,
          (char const   */* __restrict  */)"%s\n", version_string);
#line 425
  exit(0);
#line 426
  break;
  case 104: 
#line 428
  usage(0);
#line 429
  break;
  default: 
#line 431
  usage(4);
#line 432
  break;
  }
}
---------
SID [8] -> Line 396
#line 396
myname = (char *)"Executable";
---------
SID [7] -> Line 392
#line 392
re_set_syntax((reg_syntax_t )(((((((1 << 1) << 1) | ((((((1 << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | ((((((((((((((((1 << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1) << 1)) | (1 << 1)));
---------
SID [6] -> Line 388
#line 388
compiled = 0;
---------
SID [5] -> Line 387
#line 387
e_strings = (char *)((void *)0);
---------
SID [4] -> Line 111
#line 111 "/usr/include/x86_64-linux-gnu/bits/byteswap.h"
return ((__uint64_t )tmp);
---------
SID [3] -> Line 111
#line 111
tmp = __builtin_bswap64((long )__bsx);
---------
SID [2] -> Line 47
#line 47
return ((unsigned int )tmp);
---------
SID [1] -> Line 47
#line 47
tmp = __builtin_bswap32((int )__bsx);
---------
Statements at line 737 [sed.c]: 
