FROM christimperley/repairbox:ct-php-base

# Install specified version of autoconf from source
ADD autoconf.txt /experiment/.autoconf
RUN cd /tmp && \
    test -f /experiment/.autoconf && \
    AUTOCONF_VERSION=$(cat /experiment/.autoconf) && \
    wget -nv http://ftp.gnu.org/gnu/autoconf/autoconf-${AUTOCONF_VERSION}.tar.gz && \
    tar -xf autoconf-${AUTOCONF_VERSION}.tar.gz && \
    cd autoconf-${AUTOCONF_VERSION} && \
    ./configure && \
    sudo make install && \
    cd / && rm -rf /tmp/*

# Install specified version of bison from source
ADD bison.txt /experiment/.bison
RUN cd /tmp && \
    test -f /experiment/.bison && \
    BISON_VERSION=$(cat /experiment/.bison) && \
    wget http://ftp.gnu.org/gnu/bison/bison-${BISON_VERSION}.tar.gz && \
    tar -xvf bison-${BISON_VERSION}.tar.gz && \
    cd bison-${BISON_VERSION} && \
    ./configure && \
    (make || exit 0) && \
    sed -i "s#_GL_WARN_ON_USE (gets#//_GL_WARN_ON_USE (gets#g" lib/stdio.h && \
    make && sudo make install && \
    cd / && rm -rf /tmp/*

# go to the specified revision
ADD revision.txt /experiment/.revision.txt
RUN cd source && \
    git reset --hard $(cat /experiment/.revision.txt)

# scenario details
ARG SCENARIO_NAME
ENV SCENARIO_NAME ${SCENARIO_NAME} 

# generate manifest [GENERIC]
ADD mutated /experiment/mutated
RUN mkdir preprocessed && \
    cd mutated && \
    find . -type f | sed -e 's#^./##' > ../preprocessed/manifest.txt

# build oracle and generate preprocessed code [GENERIC]
RUN cd source && \
    ./buildconf && ./configure && make -j EXTRA_CFLAGS="${EXTRA_CFLAGS} -save-temps=obj" && \
    cd ../ && \
    ./extract-preprocessed.sh fixed && \
    find . -name '*.i' -delete && \
    find . -name '*.s' -delete && \
    (cd source && php ./run-tests.php -p sapi/cli/php -g PASS) > tests.txt && \
    grep -oPe "(?<=\[)[\w|\.|\-|\/|\d]+\.phpt(?=\] \$)" tests.txt | sponge tests.txt  && \
    ./blacklist.sh && \
    ./generate-pythia-manifest && rm generate-pythia-manifest && \
    pythia generate "${EXECUTABLE}" && \
    (cd source && make clean)

# inject the buggy code and find the failing test cases
RUN cp -r mutated/* source && \
    (cd source && make clean && make -j EXTRA_CFLAGS="${EXTRA_CFLAGS} -save-temps=obj") && \
    ./extract-preprocessed.sh preprocessed && \
    pythia map "${EXECUTABLE}"&& \
    (cd source && make clean) && \
    find . -name '*.i' -delete && \
    find . -name '*.s' -delete

# create the problem.json file [GENERIC]
RUN ./generate-description && \
    rm generate-description
