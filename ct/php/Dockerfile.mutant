FROM christimperley/repairbox:ct-php-base

# Install specified version of autoconf from source
ARG AUTOCONF_VERSION
ENV AUTOCONF_VERSION ${AUTOCONF_VERSION}
RUN cd /tmp && \
    wget -nv http://ftp.gnu.org/gnu/autoconf/autoconf-${AUTOCONF_VERSION}.tar.gz && \
    tar -xf autoconf-${AUTOCONF_VERSION}.tar.gz && \
    cd autoconf-${AUTOCONF_VERSION} && \
    ./configure && \
    sudo make install && \
    cd / && rm -rf /tmp/*

# Install specified version of bison from source
ARG BISON_VERSION
ENV BISON_VERSION ${BISON_VERSION}
RUN cd /tmp && \
    wget http://ftp.gnu.org/gnu/bison/bison-${BISON_VERSION}.tar.gz && \
    tar -xvf bison-${BISON_VERSION}.tar.gz && \
    cd bison-${BISON_VERSION} && \
    ./configure && \
    (make || exit 0) && \
    sed -i "s#_GL_WARN_ON_USE (gets#//_GL_WARN_ON_USE (gets#g" lib/stdio.h && \
    make && sudo make install && \
    cd / && rm -rf /tmp/*

# go to the specified revision
ARG REVISION
ENV REVISION ${REVISION}
RUN cd source && \
    git reset --hard ${REVISION}

# scenario details
ARG SCENARIO_NAME
ENV SCENARIO_NAME ${SCENARIO_NAME} 

# generate manifest [GENERIC]
ADD mutated /experiment/mutated
RUN mkdir preprocessed && \
    cd mutated && \
    find . -type f | sed -e 's#^./##' > ../preprocessed/manifest.txt

# build oracle and generate preprocessed code [GENERIC]
RUN cd source && \
    ./buildconf && ./configure && make EXTRA_CFLAGS="${EXTRA_CFLAGS} -save-temps=obj" && \
    cd ../ && \
    ./extract-preprocessed.sh fixed && \
    find . -name '*.i' -delete && \
    find . -name '*.s' -delete && \
    (cd source && php ./run-tests.php -p sapi/cli/php -g PASS) > tests.txt && \
    ./filter.sh tests.txt | sponge tests.txt && \
    (cd source && make clean)

# inject the buggy code and find the failing test cases
RUN cp -r mutated/* source && \
    (cd source && make clean && make EXTRA_CFLAGS="${EXTRA_CFLAGS} -save-temps=obj") && \
    ./filter.sh tests.txt > passes.txt && \
    ./extract-preprocessed.sh preprocessed && \
    (cd source && make clean) && \
    find . -name '*.i' -delete && \
    find . -name '*.s' -delete
RUN diff  --new-line-format="" \
          --unchanged-line-format="" \
          tests.txt passes.txt > fails.txt || exit 0 && \
    ./blacklist.sh

# create the problem.json file [GENERIC]
RUN sed "s/<<POSITIVE_TESTS>>/$(wc -l passes.txt | cut -d' ' -f1)/" problem.template.json \
    | sed "s/<<NEGATIVE_TESTS>>/$(wc -l fails.txt | cut -d' ' -f1)/" \
    | sed "s/<<PROGRAM_NAME>>/${PROGRAM_NAME}/" \
    | sed "s/<<SCENARIO_NAME>>/${SCENARIO_NAME}/" > problem.json && \
    rm problem.template.json
