#!/usr/bin/python3
#
# WARNING: this must operate on the original version of a single source code
#   file, and not its preprocessed form
#
import subprocess
import pythia
import os
import os.path

DNULL = subprocess.DEVNULL

"""
Generates a coverage vector for a given test case
"""
def generate_case_coverage(test):
    # generate the command
    cmd = test.command()
    # print("Generating coverage for: {}".format(cmd))
    exe = os.path.join('.', os.environ['EXECUTABLE'])
    cmd = cmd.replace("<<EXECUTABLE>>", exe)
    cmd = cmd.replace("<<SANDBOX>>", "/experiment/inputs")

    # execute the test
    with subprocess.Popen(cmd, stdout=DNULL, stdin=DNULL, stderr=DNULL, shell=True, cwd='/experiment/source') as p:
        p.communicate()

    # run gcov
    cmd = "gcov {}".format(os.environ['SOURCE_FILE'])
    with subprocess.Popen(cmd, stdout=DNULL, stderr=DNULL, stdin=DNULL, shell=True, cwd='/experiment/source') as p:
        p.communicate()
        assert p.returncode == 0, "unexpected return code"

    # Read the coverage file
    cov_file = '{}.gcov'.format(os.environ['SOURCE_FILE'])
    cov_file = os.path.join('/experiment/source', cov_file)
    cov = parse_case_coverage(cov_file)

    # Destroy the coverage and data files
    data_file = '{}.gcda'.format(os.environ['SOURCE_FILE'][:-2])
    data_file = os.path.join('/experiment/source', data_file)
    os.unlink(cov_file)
    os.unlink(data_file)

    return cov

"""
Parses a coverage file, given by its name, to a coverage vector. Each element
specifies whether the line at that offset was executed (1), not executed (0),
or if it is a non-executable line (X).
"""
def parse_case_coverage(fn):
    coverage = []
    with open(fn, "r") as f:
        lines = [l.strip() for l in f.readlines()]
        for line in lines[5:]:
            (count, _, _) = line.partition(':')
            if count == '-':
                flag = 'X'
            elif count == '#####':
                flag = '0'
            else:
                flag = '1'
            coverage.append(flag)
    return coverage

"""
Compiles an instrumented executable for the program
"""
def instrument():
    # construct the compile call
    exe = os.environ['EXECUTABLE']
    source_file = os.environ['SOURCE_FILE']
    gcc_libs = os.environ['GCC_LIBS']
    cmd = "gcc -o {} {} {} -fprofile-arcs -ftest-coverage"
    cmd = cmd.format(exe, source_file, gcc_libs)

    # compile!
    with subprocess.Popen(cmd, shell=True, stdout=DNULL, stdin=DNULL, stderr=DNULL, cwd='/experiment/source') as p:
        p.communicate()
        assert p.returncode == 0, "unexpected return code"

"""
Generates coverage for each test case for the program
"""
def generate():
    instrument()

    manifest = pythia.TestManifest("tests.pythia.json")
    coverage = []
    for test in manifest.contents():
        tcov = generate_case_coverage(test)
        tcov = ''.join(tcov)
        coverage.append(tcov)
    coverage = '\n'.join(coverage)

    # write to coverage file
    with open("coverage.txt", "w") as f:
        f.write(coverage)

if __name__ == '__main__':
    generate()
