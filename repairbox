#!/usr/bin/env python
import os
import yaml

class Dataset(object):
    @staticmethod
    def load(fn):
        with open(fn, "r") as f:
            try:
                data = yaml.load(f)
                return Dataset(fn, data['dataset'], data['dockerfile'])
            except yaml.YAMLError as exc:
                raise Exception("Failed to load dataset: {}".format(fn))

    def __init__(self, location, name, dockerfile):
        self.location = location
        self.dockerfile = os.path.join(os.path.dirname(location), dockerfile)
        self.name = name

        assert os.path.isfile(self.dockerfile), \
            "Dockerfile not found for dataset: {}".format(name)

class RepairBox(object):

    """
    Constructs a new RepairBox interface
    """
    def __init__(self, location=os.path.dirname(os.path.realpath(__file__))):
        self.location = location
        
        # find all datasets, programs and bugs
        self.datasets = []
        self.programs = []
        self.bugs = []

        for (root, dirs, files) in os.walk(location):
            self.datasets += \
                [os.path.join(root, f) for f in files if f.endswith(".dataset.yaml")]
            self.programs += \
                [os.path.join(root, f) for f in files if f.endswith(".program.yaml")]
            self.bugs += \
                [os.path.join(root, f) for f in files if f.endswith(".bug.yaml")]

        # parse and type check manifests
        print(self.datasets)
        print(self.programs)
        print(self.bugs)

        self.datasets = [Dataset.load(fn) for fn in self.datasets]

if __name__ == "__main__":
    rbox = RepairBox()
