69,71d68
< /* For Y2K check */
< static PyObject *moddict;
< 
314,356d310
< 
<     /* If year is specified with less than 4 digits, its interpretation
<      * depends on the accept2dyear value.
<      *
<      * If accept2dyear is true (default), a backward compatibility behavior is
<      * invoked as follows:
<      *
<      *   - for 2-digit year, century is guessed according to POSIX rules for
<      *      %y strptime format: 21st century for y < 69, 20th century
<      *      otherwise.  A deprecation warning is issued when century
<      *      information is guessed in this way.
<      *
<      *   - for 3-digit or negative year, a ValueError exception is raised.
<      *
<      * If accept2dyear is false (set by the program or as a result of a
<      * non-empty value assigned to PYTHONY2K environment variable) all year
<      * values are interpreted as given.
<      */
<     if (y < 1000) {
<         PyObject *accept = PyDict_GetItemString(moddict,
<                                                 "accept2dyear");
<         if (accept != NULL) {
<             int acceptval =  PyObject_IsTrue(accept);
<             if (acceptval == -1)
<                 return 0;
<             if (acceptval) {
<                 if (0 <= y && y < 69)
<                     y += 2000;
<                 else if (69 <= y && y < 100)
<                     y += 1900;
<                 else {
<                     PyErr_SetString(PyExc_ValueError,
<                                     "year out of range");
<                     return 0;
<                 }
<                 if (PyErr_WarnEx(PyExc_DeprecationWarning,
<                            "Century info guessed for a 2-digit year.", 1) != 0)
<                     return 0;
<             }
<         }
<         else
<             return 0;
<     }
866c820
<   year (four digits, e.g. 1998)\n\
---
>   year (including century, e.g. 1998)\n\
923,929d876
<     /* Accept 2-digit dates unless PYTHONY2K is set and non-empty */
<     p = Py_GETENV("PYTHONY2K");
<     PyModule_AddIntConstant(m, "accept2dyear", (long) (!p || !*p));
<     /* Squirrel away the module's dictionary for the y2k check */
<     moddict = PyModule_GetDict(m);
<     Py_INCREF(moddict);
< 
